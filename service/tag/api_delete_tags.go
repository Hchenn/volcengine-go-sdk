// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package tag

import (
	"fmt"

	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteTagsCommon = "DeleteTags"

// DeleteTagsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteTagsCommon operation. The "output" return
// value will be populated with the DeleteTagsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteTagsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteTagsCommon Send returns without error.
//
// See DeleteTagsCommon for more information on using the DeleteTagsCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteTagsCommonRequest method.
//    req, resp := client.DeleteTagsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TAG) DeleteTagsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteTagsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteTagsCommon API operation for TAG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TAG's
// API operation DeleteTagsCommon for usage and error information.
func (c *TAG) DeleteTagsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteTagsCommonRequest(input)
	return out, req.Send()
}

// DeleteTagsCommonWithContext is the same as DeleteTagsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteTagsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TAG) DeleteTagsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteTagsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteTags = "DeleteTags"

// DeleteTagsRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteTags operation. The "output" return
// value will be populated with the DeleteTagsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteTagsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteTagsCommon Send returns without error.
//
// See DeleteTags for more information on using the DeleteTags
// API call, and error handling.
//
//    // Example sending a request using the DeleteTagsRequest method.
//    req, resp := client.DeleteTagsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TAG) DeleteTagsRequest(input *DeleteTagsInput) (req *request.Request, output *DeleteTagsOutput) {
	op := &request.Operation{
		Name:       opDeleteTags,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteTagsInput{}
	}

	output = &DeleteTagsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteTags API operation for TAG.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TAG's
// API operation DeleteTags for usage and error information.
func (c *TAG) DeleteTags(input *DeleteTagsInput) (*DeleteTagsOutput, error) {
	req, out := c.DeleteTagsRequest(input)
	return out, req.Send()
}

// DeleteTagsWithContext is the same as DeleteTags with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteTags for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TAG) DeleteTagsWithContext(ctx volcengine.Context, input *DeleteTagsInput, opts ...request.Option) (*DeleteTagsOutput, error) {
	req, out := c.DeleteTagsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteTagsInput struct {
	_ struct{} `type:"structure"`

	Tags []*TagForDeleteTagsInput `type:"list"`
}

// String returns the string representation
func (s DeleteTagsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTagsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteTagsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteTagsInput"}
	if s.Tags != nil {
		for i, v := range s.Tags {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Tags", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTags sets the Tags field's value.
func (s *DeleteTagsInput) SetTags(v []*TagForDeleteTagsInput) *DeleteTagsInput {
	s.Tags = v
	return s
}

type DeleteTagsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteTagsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTagsOutput) GoString() string {
	return s.String()
}

type TagForDeleteTagsInput struct {
	_ struct{} `type:"structure"`

	// Key is a required field
	Key *string `type:"string" required:"true"`

	// Value is a required field
	Value *string `type:"string" required:"true"`
}

// String returns the string representation
func (s TagForDeleteTagsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForDeleteTagsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TagForDeleteTagsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TagForDeleteTagsInput"}
	if s.Key == nil {
		invalidParams.Add(request.NewErrParamRequired("Key"))
	}
	if s.Value == nil {
		invalidParams.Add(request.NewErrParamRequired("Value"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetKey sets the Key field's value.
func (s *TagForDeleteTagsInput) SetKey(v string) *TagForDeleteTagsInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForDeleteTagsInput) SetValue(v string) *TagForDeleteTagsInput {
	s.Value = &v
	return s
}
