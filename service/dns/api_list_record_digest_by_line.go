// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dns

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListRecordDigestByLineCommon = "ListRecordDigestByLine"

// ListRecordDigestByLineCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRecordDigestByLineCommon operation. The "output" return
// value will be populated with the ListRecordDigestByLineCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRecordDigestByLineCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRecordDigestByLineCommon Send returns without error.
//
// See ListRecordDigestByLineCommon for more information on using the ListRecordDigestByLineCommon
// API call, and error handling.
//
//    // Example sending a request using the ListRecordDigestByLineCommonRequest method.
//    req, resp := client.ListRecordDigestByLineCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DNS) ListRecordDigestByLineCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListRecordDigestByLineCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListRecordDigestByLineCommon API operation for DNS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DNS's
// API operation ListRecordDigestByLineCommon for usage and error information.
func (c *DNS) ListRecordDigestByLineCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListRecordDigestByLineCommonRequest(input)
	return out, req.Send()
}

// ListRecordDigestByLineCommonWithContext is the same as ListRecordDigestByLineCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListRecordDigestByLineCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DNS) ListRecordDigestByLineCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListRecordDigestByLineCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListRecordDigestByLine = "ListRecordDigestByLine"

// ListRecordDigestByLineRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRecordDigestByLine operation. The "output" return
// value will be populated with the ListRecordDigestByLineCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRecordDigestByLineCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRecordDigestByLineCommon Send returns without error.
//
// See ListRecordDigestByLine for more information on using the ListRecordDigestByLine
// API call, and error handling.
//
//    // Example sending a request using the ListRecordDigestByLineRequest method.
//    req, resp := client.ListRecordDigestByLineRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DNS) ListRecordDigestByLineRequest(input *ListRecordDigestByLineInput) (req *request.Request, output *ListRecordDigestByLineOutput) {
	op := &request.Operation{
		Name:       opListRecordDigestByLine,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListRecordDigestByLineInput{}
	}

	output = &ListRecordDigestByLineOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListRecordDigestByLine API operation for DNS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DNS's
// API operation ListRecordDigestByLine for usage and error information.
func (c *DNS) ListRecordDigestByLine(input *ListRecordDigestByLineInput) (*ListRecordDigestByLineOutput, error) {
	req, out := c.ListRecordDigestByLineRequest(input)
	return out, req.Send()
}

// ListRecordDigestByLineWithContext is the same as ListRecordDigestByLine with the addition of
// the ability to pass a context and additional request options.
//
// See ListRecordDigestByLine for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DNS) ListRecordDigestByLineWithContext(ctx volcengine.Context, input *ListRecordDigestByLineInput, opts ...request.Option) (*ListRecordDigestByLineOutput, error) {
	req, out := c.ListRecordDigestByLineRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListRecordDigestByLineInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Line is a required field
	Line *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListRecordDigestByLineInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRecordDigestByLineInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListRecordDigestByLineInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListRecordDigestByLineInput"}
	if s.Line == nil {
		invalidParams.Add(request.NewErrParamRequired("Line"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLine sets the Line field's value.
func (s *ListRecordDigestByLineInput) SetLine(v string) *ListRecordDigestByLineInput {
	s.Line = &v
	return s
}

type ListRecordDigestByLineOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Line *string `type:"string" json:",omitempty"`

	RecordDigests []*RecordDigestForListRecordDigestByLineOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListRecordDigestByLineOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRecordDigestByLineOutput) GoString() string {
	return s.String()
}

// SetLine sets the Line field's value.
func (s *ListRecordDigestByLineOutput) SetLine(v string) *ListRecordDigestByLineOutput {
	s.Line = &v
	return s
}

// SetRecordDigests sets the RecordDigests field's value.
func (s *ListRecordDigestByLineOutput) SetRecordDigests(v []*RecordDigestForListRecordDigestByLineOutput) *ListRecordDigestByLineOutput {
	s.RecordDigests = v
	return s
}

type RecordDigestForListRecordDigestByLineOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	LineNameCN *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RecordDigestForListRecordDigestByLineOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RecordDigestForListRecordDigestByLineOutput) GoString() string {
	return s.String()
}

// SetLineNameCN sets the LineNameCN field's value.
func (s *RecordDigestForListRecordDigestByLineOutput) SetLineNameCN(v string) *RecordDigestForListRecordDigestByLineOutput {
	s.LineNameCN = &v
	return s
}

// SetName sets the Name field's value.
func (s *RecordDigestForListRecordDigestByLineOutput) SetName(v string) *RecordDigestForListRecordDigestByLineOutput {
	s.Name = &v
	return s
}

// SetType sets the Type field's value.
func (s *RecordDigestForListRecordDigestByLineOutput) SetType(v string) *RecordDigestForListRecordDigestByLineOutput {
	s.Type = &v
	return s
}
