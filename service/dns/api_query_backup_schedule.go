// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dns

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQueryBackupScheduleCommon = "QueryBackupSchedule"

// QueryBackupScheduleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryBackupScheduleCommon operation. The "output" return
// value will be populated with the QueryBackupScheduleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryBackupScheduleCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryBackupScheduleCommon Send returns without error.
//
// See QueryBackupScheduleCommon for more information on using the QueryBackupScheduleCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryBackupScheduleCommonRequest method.
//    req, resp := client.QueryBackupScheduleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DNS) QueryBackupScheduleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryBackupScheduleCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryBackupScheduleCommon API operation for DNS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DNS's
// API operation QueryBackupScheduleCommon for usage and error information.
func (c *DNS) QueryBackupScheduleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryBackupScheduleCommonRequest(input)
	return out, req.Send()
}

// QueryBackupScheduleCommonWithContext is the same as QueryBackupScheduleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryBackupScheduleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DNS) QueryBackupScheduleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryBackupScheduleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryBackupSchedule = "QueryBackupSchedule"

// QueryBackupScheduleRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryBackupSchedule operation. The "output" return
// value will be populated with the QueryBackupScheduleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryBackupScheduleCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryBackupScheduleCommon Send returns without error.
//
// See QueryBackupSchedule for more information on using the QueryBackupSchedule
// API call, and error handling.
//
//    // Example sending a request using the QueryBackupScheduleRequest method.
//    req, resp := client.QueryBackupScheduleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DNS) QueryBackupScheduleRequest(input *QueryBackupScheduleInput) (req *request.Request, output *QueryBackupScheduleOutput) {
	op := &request.Operation{
		Name:       opQueryBackupSchedule,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryBackupScheduleInput{}
	}

	output = &QueryBackupScheduleOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryBackupSchedule API operation for DNS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DNS's
// API operation QueryBackupSchedule for usage and error information.
func (c *DNS) QueryBackupSchedule(input *QueryBackupScheduleInput) (*QueryBackupScheduleOutput, error) {
	req, out := c.QueryBackupScheduleRequest(input)
	return out, req.Send()
}

// QueryBackupScheduleWithContext is the same as QueryBackupSchedule with the addition of
// the ability to pass a context and additional request options.
//
// See QueryBackupSchedule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DNS) QueryBackupScheduleWithContext(ctx volcengine.Context, input *QueryBackupScheduleInput, opts ...request.Option) (*QueryBackupScheduleOutput, error) {
	req, out := c.QueryBackupScheduleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type QueryBackupScheduleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ZID is a required field
	ZID *int64 `type:"int64" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QueryBackupScheduleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryBackupScheduleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryBackupScheduleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryBackupScheduleInput"}
	if s.ZID == nil {
		invalidParams.Add(request.NewErrParamRequired("ZID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetZID sets the ZID field's value.
func (s *QueryBackupScheduleInput) SetZID(v int64) *QueryBackupScheduleInput {
	s.ZID = &v
	return s
}

type QueryBackupScheduleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CountLimit *int32 `type:"int32" json:",omitempty"`

	Schedule *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s QueryBackupScheduleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryBackupScheduleOutput) GoString() string {
	return s.String()
}

// SetCountLimit sets the CountLimit field's value.
func (s *QueryBackupScheduleOutput) SetCountLimit(v int32) *QueryBackupScheduleOutput {
	s.CountLimit = &v
	return s
}

// SetSchedule sets the Schedule field's value.
func (s *QueryBackupScheduleOutput) SetSchedule(v int32) *QueryBackupScheduleOutput {
	s.Schedule = &v
	return s
}
