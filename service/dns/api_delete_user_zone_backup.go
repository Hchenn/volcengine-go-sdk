// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dns

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteUserZoneBackupCommon = "DeleteUserZoneBackup"

// DeleteUserZoneBackupCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteUserZoneBackupCommon operation. The "output" return
// value will be populated with the DeleteUserZoneBackupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteUserZoneBackupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteUserZoneBackupCommon Send returns without error.
//
// See DeleteUserZoneBackupCommon for more information on using the DeleteUserZoneBackupCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteUserZoneBackupCommonRequest method.
//    req, resp := client.DeleteUserZoneBackupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DNS) DeleteUserZoneBackupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteUserZoneBackupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteUserZoneBackupCommon API operation for DNS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DNS's
// API operation DeleteUserZoneBackupCommon for usage and error information.
func (c *DNS) DeleteUserZoneBackupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteUserZoneBackupCommonRequest(input)
	return out, req.Send()
}

// DeleteUserZoneBackupCommonWithContext is the same as DeleteUserZoneBackupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteUserZoneBackupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DNS) DeleteUserZoneBackupCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteUserZoneBackupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteUserZoneBackup = "DeleteUserZoneBackup"

// DeleteUserZoneBackupRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteUserZoneBackup operation. The "output" return
// value will be populated with the DeleteUserZoneBackupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteUserZoneBackupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteUserZoneBackupCommon Send returns without error.
//
// See DeleteUserZoneBackup for more information on using the DeleteUserZoneBackup
// API call, and error handling.
//
//    // Example sending a request using the DeleteUserZoneBackupRequest method.
//    req, resp := client.DeleteUserZoneBackupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DNS) DeleteUserZoneBackupRequest(input *DeleteUserZoneBackupInput) (req *request.Request, output *DeleteUserZoneBackupOutput) {
	op := &request.Operation{
		Name:       opDeleteUserZoneBackup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteUserZoneBackupInput{}
	}

	output = &DeleteUserZoneBackupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteUserZoneBackup API operation for DNS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DNS's
// API operation DeleteUserZoneBackup for usage and error information.
func (c *DNS) DeleteUserZoneBackup(input *DeleteUserZoneBackupInput) (*DeleteUserZoneBackupOutput, error) {
	req, out := c.DeleteUserZoneBackupRequest(input)
	return out, req.Send()
}

// DeleteUserZoneBackupWithContext is the same as DeleteUserZoneBackup with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteUserZoneBackup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DNS) DeleteUserZoneBackupWithContext(ctx volcengine.Context, input *DeleteUserZoneBackupInput, opts ...request.Option) (*DeleteUserZoneBackupOutput, error) {
	req, out := c.DeleteUserZoneBackupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteUserZoneBackupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// BackupID is a required field
	BackupID *string `type:"string" json:",omitempty" required:"true"`

	// ZID is a required field
	ZID *int64 `type:"int64" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteUserZoneBackupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteUserZoneBackupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteUserZoneBackupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteUserZoneBackupInput"}
	if s.BackupID == nil {
		invalidParams.Add(request.NewErrParamRequired("BackupID"))
	}
	if s.ZID == nil {
		invalidParams.Add(request.NewErrParamRequired("ZID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBackupID sets the BackupID field's value.
func (s *DeleteUserZoneBackupInput) SetBackupID(v string) *DeleteUserZoneBackupInput {
	s.BackupID = &v
	return s
}

// SetZID sets the ZID field's value.
func (s *DeleteUserZoneBackupInput) SetZID(v int64) *DeleteUserZoneBackupInput {
	s.ZID = &v
	return s
}

type DeleteUserZoneBackupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteUserZoneBackupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteUserZoneBackupOutput) GoString() string {
	return s.String()
}
