// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dns

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRetrieveZoneCommon = "RetrieveZone"

// RetrieveZoneCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RetrieveZoneCommon operation. The "output" return
// value will be populated with the RetrieveZoneCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RetrieveZoneCommon Request to send the API call to the service.
// the "output" return value is not valid until after RetrieveZoneCommon Send returns without error.
//
// See RetrieveZoneCommon for more information on using the RetrieveZoneCommon
// API call, and error handling.
//
//    // Example sending a request using the RetrieveZoneCommonRequest method.
//    req, resp := client.RetrieveZoneCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DNS) RetrieveZoneCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRetrieveZoneCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RetrieveZoneCommon API operation for DNS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DNS's
// API operation RetrieveZoneCommon for usage and error information.
func (c *DNS) RetrieveZoneCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RetrieveZoneCommonRequest(input)
	return out, req.Send()
}

// RetrieveZoneCommonWithContext is the same as RetrieveZoneCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RetrieveZoneCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DNS) RetrieveZoneCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RetrieveZoneCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRetrieveZone = "RetrieveZone"

// RetrieveZoneRequest generates a "volcengine/request.Request" representing the
// client's request for the RetrieveZone operation. The "output" return
// value will be populated with the RetrieveZoneCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RetrieveZoneCommon Request to send the API call to the service.
// the "output" return value is not valid until after RetrieveZoneCommon Send returns without error.
//
// See RetrieveZone for more information on using the RetrieveZone
// API call, and error handling.
//
//    // Example sending a request using the RetrieveZoneRequest method.
//    req, resp := client.RetrieveZoneRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DNS) RetrieveZoneRequest(input *RetrieveZoneInput) (req *request.Request, output *RetrieveZoneOutput) {
	op := &request.Operation{
		Name:       opRetrieveZone,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RetrieveZoneInput{}
	}

	output = &RetrieveZoneOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RetrieveZone API operation for DNS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DNS's
// API operation RetrieveZone for usage and error information.
func (c *DNS) RetrieveZone(input *RetrieveZoneInput) (*RetrieveZoneOutput, error) {
	req, out := c.RetrieveZoneRequest(input)
	return out, req.Send()
}

// RetrieveZoneWithContext is the same as RetrieveZone with the addition of
// the ability to pass a context and additional request options.
//
// See RetrieveZone for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DNS) RetrieveZoneWithContext(ctx volcengine.Context, input *RetrieveZoneInput, opts ...request.Option) (*RetrieveZoneOutput, error) {
	req, out := c.RetrieveZoneRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RetrieveZoneInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ZoneName is a required field
	ZoneName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s RetrieveZoneInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RetrieveZoneInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RetrieveZoneInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RetrieveZoneInput"}
	if s.ZoneName == nil {
		invalidParams.Add(request.NewErrParamRequired("ZoneName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetZoneName sets the ZoneName field's value.
func (s *RetrieveZoneInput) SetZoneName(v string) *RetrieveZoneInput {
	s.ZoneName = &v
	return s
}

type RetrieveZoneOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Host *string `type:"string" json:",omitempty"`

	IsOwnedByDomain *bool `type:"boolean" json:",omitempty"`

	Txt *string `type:"string" json:",omitempty"`

	ZoneName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RetrieveZoneOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RetrieveZoneOutput) GoString() string {
	return s.String()
}

// SetHost sets the Host field's value.
func (s *RetrieveZoneOutput) SetHost(v string) *RetrieveZoneOutput {
	s.Host = &v
	return s
}

// SetIsOwnedByDomain sets the IsOwnedByDomain field's value.
func (s *RetrieveZoneOutput) SetIsOwnedByDomain(v bool) *RetrieveZoneOutput {
	s.IsOwnedByDomain = &v
	return s
}

// SetTxt sets the Txt field's value.
func (s *RetrieveZoneOutput) SetTxt(v string) *RetrieveZoneOutput {
	s.Txt = &v
	return s
}

// SetZoneName sets the ZoneName field's value.
func (s *RetrieveZoneOutput) SetZoneName(v string) *RetrieveZoneOutput {
	s.ZoneName = &v
	return s
}
