// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package volcobserve

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateRuleCommon = "UpdateRule"

// UpdateRuleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateRuleCommon operation. The "output" return
// value will be populated with the UpdateRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateRuleCommon Send returns without error.
//
// See UpdateRuleCommon for more information on using the UpdateRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateRuleCommonRequest method.
//    req, resp := client.UpdateRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) UpdateRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateRuleCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateRuleCommon API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation UpdateRuleCommon for usage and error information.
func (c *VOLCOBSERVE) UpdateRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateRuleCommonRequest(input)
	return out, req.Send()
}

// UpdateRuleCommonWithContext is the same as UpdateRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) UpdateRuleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateRule = "UpdateRule"

// UpdateRuleRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateRule operation. The "output" return
// value will be populated with the UpdateRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateRuleCommon Send returns without error.
//
// See UpdateRule for more information on using the UpdateRule
// API call, and error handling.
//
//    // Example sending a request using the UpdateRuleRequest method.
//    req, resp := client.UpdateRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) UpdateRuleRequest(input *UpdateRuleInput) (req *request.Request, output *UpdateRuleOutput) {
	op := &request.Operation{
		Name:       opUpdateRule,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateRuleInput{}
	}

	output = &UpdateRuleOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateRule API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation UpdateRule for usage and error information.
func (c *VOLCOBSERVE) UpdateRule(input *UpdateRuleInput) (*UpdateRuleOutput, error) {
	req, out := c.UpdateRuleRequest(input)
	return out, req.Send()
}

// UpdateRuleWithContext is the same as UpdateRule with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) UpdateRuleWithContext(ctx volcengine.Context, input *UpdateRuleInput, opts ...request.Option) (*UpdateRuleOutput, error) {
	req, out := c.UpdateRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConditionForUpdateRuleInput struct {
	_ struct{} `type:"structure"`

	ComparisonOperator *string `type:"string"`

	MetricName *string `type:"string"`

	MetricUnit *string `type:"string"`

	Period *string `type:"string"`

	Statistics *string `type:"string"`

	Threshold *string `type:"string"`
}

// String returns the string representation
func (s ConditionForUpdateRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConditionForUpdateRuleInput) GoString() string {
	return s.String()
}

// SetComparisonOperator sets the ComparisonOperator field's value.
func (s *ConditionForUpdateRuleInput) SetComparisonOperator(v string) *ConditionForUpdateRuleInput {
	s.ComparisonOperator = &v
	return s
}

// SetMetricName sets the MetricName field's value.
func (s *ConditionForUpdateRuleInput) SetMetricName(v string) *ConditionForUpdateRuleInput {
	s.MetricName = &v
	return s
}

// SetMetricUnit sets the MetricUnit field's value.
func (s *ConditionForUpdateRuleInput) SetMetricUnit(v string) *ConditionForUpdateRuleInput {
	s.MetricUnit = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *ConditionForUpdateRuleInput) SetPeriod(v string) *ConditionForUpdateRuleInput {
	s.Period = &v
	return s
}

// SetStatistics sets the Statistics field's value.
func (s *ConditionForUpdateRuleInput) SetStatistics(v string) *ConditionForUpdateRuleInput {
	s.Statistics = &v
	return s
}

// SetThreshold sets the Threshold field's value.
func (s *ConditionForUpdateRuleInput) SetThreshold(v string) *ConditionForUpdateRuleInput {
	s.Threshold = &v
	return s
}

type NoDataForUpdateRuleInput struct {
	_ struct{} `type:"structure"`

	Enable *bool `type:"boolean"`

	EvaluationCount *int64 `type:"integer"`
}

// String returns the string representation
func (s NoDataForUpdateRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NoDataForUpdateRuleInput) GoString() string {
	return s.String()
}

// SetEnable sets the Enable field's value.
func (s *NoDataForUpdateRuleInput) SetEnable(v bool) *NoDataForUpdateRuleInput {
	s.Enable = &v
	return s
}

// SetEvaluationCount sets the EvaluationCount field's value.
func (s *NoDataForUpdateRuleInput) SetEvaluationCount(v int64) *NoDataForUpdateRuleInput {
	s.EvaluationCount = &v
	return s
}

type RecoveryNotifyForUpdateRuleInput struct {
	_ struct{} `type:"structure"`

	Enable *bool `type:"boolean"`
}

// String returns the string representation
func (s RecoveryNotifyForUpdateRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RecoveryNotifyForUpdateRuleInput) GoString() string {
	return s.String()
}

// SetEnable sets the Enable field's value.
func (s *RecoveryNotifyForUpdateRuleInput) SetEnable(v bool) *RecoveryNotifyForUpdateRuleInput {
	s.Enable = &v
	return s
}

type UpdateRuleInput struct {
	_ struct{} `type:"structure"`

	AlertMethods []*string `type:"list"`

	ConditionOperator *string `type:"string"`

	Conditions []*ConditionForUpdateRuleInput `type:"list"`

	ContactGroupIds []*string `type:"list"`

	Description *string `type:"string"`

	// EffectEndAt is a required field
	EffectEndAt *string `type:"string" required:"true"`

	// EffectStartAt is a required field
	EffectStartAt *string `type:"string" required:"true"`

	// EnableState is a required field
	EnableState *string `type:"string" required:"true"`

	// EvaluationCount is a required field
	EvaluationCount *int64 `type:"integer" required:"true"`

	// Id is a required field
	Id *string `type:"string" required:"true"`

	// Level is a required field
	Level *string `type:"string" required:"true"`

	MultipleConditions *bool `type:"boolean"`

	// Namespace is a required field
	Namespace *string `type:"string" required:"true"`

	NoData *NoDataForUpdateRuleInput `type:"structure"`

	OriginalDimensions map[string][]*string `type:"map"`

	RecoveryNotify *RecoveryNotifyForUpdateRuleInput `type:"structure"`

	Regions []*string `type:"list"`

	// RuleName is a required field
	RuleName *string `type:"string" required:"true"`

	// RuleType is a required field
	RuleType *string `type:"string" required:"true" enum:"EnumOfRuleTypeForUpdateRuleInput"`

	// SilenceTime is a required field
	SilenceTime *int64 `type:"integer" required:"true"`

	// SubNamespace is a required field
	SubNamespace *string `type:"string" required:"true"`

	Webhook *string `type:"string"`

	WebhookIds []*string `type:"list"`
}

// String returns the string representation
func (s UpdateRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateRuleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateRuleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateRuleInput"}
	if s.EffectEndAt == nil {
		invalidParams.Add(request.NewErrParamRequired("EffectEndAt"))
	}
	if s.EffectStartAt == nil {
		invalidParams.Add(request.NewErrParamRequired("EffectStartAt"))
	}
	if s.EnableState == nil {
		invalidParams.Add(request.NewErrParamRequired("EnableState"))
	}
	if s.EvaluationCount == nil {
		invalidParams.Add(request.NewErrParamRequired("EvaluationCount"))
	}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.Level == nil {
		invalidParams.Add(request.NewErrParamRequired("Level"))
	}
	if s.Namespace == nil {
		invalidParams.Add(request.NewErrParamRequired("Namespace"))
	}
	if s.RuleName == nil {
		invalidParams.Add(request.NewErrParamRequired("RuleName"))
	}
	if s.RuleType == nil {
		invalidParams.Add(request.NewErrParamRequired("RuleType"))
	}
	if s.SilenceTime == nil {
		invalidParams.Add(request.NewErrParamRequired("SilenceTime"))
	}
	if s.SubNamespace == nil {
		invalidParams.Add(request.NewErrParamRequired("SubNamespace"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAlertMethods sets the AlertMethods field's value.
func (s *UpdateRuleInput) SetAlertMethods(v []*string) *UpdateRuleInput {
	s.AlertMethods = v
	return s
}

// SetConditionOperator sets the ConditionOperator field's value.
func (s *UpdateRuleInput) SetConditionOperator(v string) *UpdateRuleInput {
	s.ConditionOperator = &v
	return s
}

// SetConditions sets the Conditions field's value.
func (s *UpdateRuleInput) SetConditions(v []*ConditionForUpdateRuleInput) *UpdateRuleInput {
	s.Conditions = v
	return s
}

// SetContactGroupIds sets the ContactGroupIds field's value.
func (s *UpdateRuleInput) SetContactGroupIds(v []*string) *UpdateRuleInput {
	s.ContactGroupIds = v
	return s
}

// SetDescription sets the Description field's value.
func (s *UpdateRuleInput) SetDescription(v string) *UpdateRuleInput {
	s.Description = &v
	return s
}

// SetEffectEndAt sets the EffectEndAt field's value.
func (s *UpdateRuleInput) SetEffectEndAt(v string) *UpdateRuleInput {
	s.EffectEndAt = &v
	return s
}

// SetEffectStartAt sets the EffectStartAt field's value.
func (s *UpdateRuleInput) SetEffectStartAt(v string) *UpdateRuleInput {
	s.EffectStartAt = &v
	return s
}

// SetEnableState sets the EnableState field's value.
func (s *UpdateRuleInput) SetEnableState(v string) *UpdateRuleInput {
	s.EnableState = &v
	return s
}

// SetEvaluationCount sets the EvaluationCount field's value.
func (s *UpdateRuleInput) SetEvaluationCount(v int64) *UpdateRuleInput {
	s.EvaluationCount = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateRuleInput) SetId(v string) *UpdateRuleInput {
	s.Id = &v
	return s
}

// SetLevel sets the Level field's value.
func (s *UpdateRuleInput) SetLevel(v string) *UpdateRuleInput {
	s.Level = &v
	return s
}

// SetMultipleConditions sets the MultipleConditions field's value.
func (s *UpdateRuleInput) SetMultipleConditions(v bool) *UpdateRuleInput {
	s.MultipleConditions = &v
	return s
}

// SetNamespace sets the Namespace field's value.
func (s *UpdateRuleInput) SetNamespace(v string) *UpdateRuleInput {
	s.Namespace = &v
	return s
}

// SetNoData sets the NoData field's value.
func (s *UpdateRuleInput) SetNoData(v *NoDataForUpdateRuleInput) *UpdateRuleInput {
	s.NoData = v
	return s
}

// SetOriginalDimensions sets the OriginalDimensions field's value.
func (s *UpdateRuleInput) SetOriginalDimensions(v map[string][]*string) *UpdateRuleInput {
	s.OriginalDimensions = v
	return s
}

// SetRecoveryNotify sets the RecoveryNotify field's value.
func (s *UpdateRuleInput) SetRecoveryNotify(v *RecoveryNotifyForUpdateRuleInput) *UpdateRuleInput {
	s.RecoveryNotify = v
	return s
}

// SetRegions sets the Regions field's value.
func (s *UpdateRuleInput) SetRegions(v []*string) *UpdateRuleInput {
	s.Regions = v
	return s
}

// SetRuleName sets the RuleName field's value.
func (s *UpdateRuleInput) SetRuleName(v string) *UpdateRuleInput {
	s.RuleName = &v
	return s
}

// SetRuleType sets the RuleType field's value.
func (s *UpdateRuleInput) SetRuleType(v string) *UpdateRuleInput {
	s.RuleType = &v
	return s
}

// SetSilenceTime sets the SilenceTime field's value.
func (s *UpdateRuleInput) SetSilenceTime(v int64) *UpdateRuleInput {
	s.SilenceTime = &v
	return s
}

// SetSubNamespace sets the SubNamespace field's value.
func (s *UpdateRuleInput) SetSubNamespace(v string) *UpdateRuleInput {
	s.SubNamespace = &v
	return s
}

// SetWebhook sets the Webhook field's value.
func (s *UpdateRuleInput) SetWebhook(v string) *UpdateRuleInput {
	s.Webhook = &v
	return s
}

// SetWebhookIds sets the WebhookIds field's value.
func (s *UpdateRuleInput) SetWebhookIds(v []*string) *UpdateRuleInput {
	s.WebhookIds = v
	return s
}

type UpdateRuleOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Data []*string `type:"list"`
}

// String returns the string representation
func (s UpdateRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateRuleOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *UpdateRuleOutput) SetData(v []*string) *UpdateRuleOutput {
	s.Data = v
	return s
}

const (
	// EnumOfAlertMethodListForUpdateRuleInputEmail is a EnumOfAlertMethodListForUpdateRuleInput enum value
	EnumOfAlertMethodListForUpdateRuleInputEmail = "Email"

	// EnumOfAlertMethodListForUpdateRuleInputPhone is a EnumOfAlertMethodListForUpdateRuleInput enum value
	EnumOfAlertMethodListForUpdateRuleInputPhone = "Phone"

	// EnumOfAlertMethodListForUpdateRuleInputSms is a EnumOfAlertMethodListForUpdateRuleInput enum value
	EnumOfAlertMethodListForUpdateRuleInputSms = "SMS"

	// EnumOfAlertMethodListForUpdateRuleInputWebhook is a EnumOfAlertMethodListForUpdateRuleInput enum value
	EnumOfAlertMethodListForUpdateRuleInputWebhook = "Webhook"
)

const (
	// EnumOfRuleTypeForUpdateRuleInputStatic is a EnumOfRuleTypeForUpdateRuleInput enum value
	EnumOfRuleTypeForUpdateRuleInputStatic = "static"
)
