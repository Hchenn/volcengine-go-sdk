// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package volcobserve

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListSendAlertCommon = "ListSendAlert"

// ListSendAlertCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListSendAlertCommon operation. The "output" return
// value will be populated with the ListSendAlertCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListSendAlertCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListSendAlertCommon Send returns without error.
//
// See ListSendAlertCommon for more information on using the ListSendAlertCommon
// API call, and error handling.
//
//    // Example sending a request using the ListSendAlertCommonRequest method.
//    req, resp := client.ListSendAlertCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) ListSendAlertCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListSendAlertCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListSendAlertCommon API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation ListSendAlertCommon for usage and error information.
func (c *VOLCOBSERVE) ListSendAlertCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListSendAlertCommonRequest(input)
	return out, req.Send()
}

// ListSendAlertCommonWithContext is the same as ListSendAlertCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListSendAlertCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) ListSendAlertCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListSendAlertCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListSendAlert = "ListSendAlert"

// ListSendAlertRequest generates a "volcengine/request.Request" representing the
// client's request for the ListSendAlert operation. The "output" return
// value will be populated with the ListSendAlertCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListSendAlertCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListSendAlertCommon Send returns without error.
//
// See ListSendAlert for more information on using the ListSendAlert
// API call, and error handling.
//
//    // Example sending a request using the ListSendAlertRequest method.
//    req, resp := client.ListSendAlertRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) ListSendAlertRequest(input *ListSendAlertInput) (req *request.Request, output *ListSendAlertOutput) {
	op := &request.Operation{
		Name:       opListSendAlert,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListSendAlertInput{}
	}

	output = &ListSendAlertOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListSendAlert API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation ListSendAlert for usage and error information.
func (c *VOLCOBSERVE) ListSendAlert(input *ListSendAlertInput) (*ListSendAlertOutput, error) {
	req, out := c.ListSendAlertRequest(input)
	return out, req.Send()
}

// ListSendAlertWithContext is the same as ListSendAlert with the addition of
// the ability to pass a context and additional request options.
//
// See ListSendAlert for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) ListSendAlertWithContext(ctx volcengine.Context, input *ListSendAlertInput, opts ...request.Option) (*ListSendAlertOutput, error) {
	req, out := c.ListSendAlertRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForListSendAlertOutput struct {
	_ struct{} `type:"structure"`

	AlertMethod *string `type:"string"`

	BathId *string `type:"string"`

	Content *string `type:"string"`

	Id *string `type:"string"`

	SendAt *string `type:"string"`

	SendResult []*SendResultForListSendAlertOutput `type:"list"`
}

// String returns the string representation
func (s DataForListSendAlertOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListSendAlertOutput) GoString() string {
	return s.String()
}

// SetAlertMethod sets the AlertMethod field's value.
func (s *DataForListSendAlertOutput) SetAlertMethod(v string) *DataForListSendAlertOutput {
	s.AlertMethod = &v
	return s
}

// SetBathId sets the BathId field's value.
func (s *DataForListSendAlertOutput) SetBathId(v string) *DataForListSendAlertOutput {
	s.BathId = &v
	return s
}

// SetContent sets the Content field's value.
func (s *DataForListSendAlertOutput) SetContent(v string) *DataForListSendAlertOutput {
	s.Content = &v
	return s
}

// SetId sets the Id field's value.
func (s *DataForListSendAlertOutput) SetId(v string) *DataForListSendAlertOutput {
	s.Id = &v
	return s
}

// SetSendAt sets the SendAt field's value.
func (s *DataForListSendAlertOutput) SetSendAt(v string) *DataForListSendAlertOutput {
	s.SendAt = &v
	return s
}

// SetSendResult sets the SendResult field's value.
func (s *DataForListSendAlertOutput) SetSendResult(v []*SendResultForListSendAlertOutput) *DataForListSendAlertOutput {
	s.SendResult = v
	return s
}

type ListSendAlertInput struct {
	_ struct{} `type:"structure"`

	// AlertGroupId is a required field
	AlertGroupId *string `type:"string" required:"true"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`
}

// String returns the string representation
func (s ListSendAlertInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSendAlertInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListSendAlertInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListSendAlertInput"}
	if s.AlertGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("AlertGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAlertGroupId sets the AlertGroupId field's value.
func (s *ListSendAlertInput) SetAlertGroupId(v string) *ListSendAlertInput {
	s.AlertGroupId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListSendAlertInput) SetPageNumber(v int64) *ListSendAlertInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListSendAlertInput) SetPageSize(v int64) *ListSendAlertInput {
	s.PageSize = &v
	return s
}

type ListSendAlertOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Data []*DataForListSendAlertOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s ListSendAlertOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSendAlertOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ListSendAlertOutput) SetData(v []*DataForListSendAlertOutput) *ListSendAlertOutput {
	s.Data = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListSendAlertOutput) SetPageNumber(v int64) *ListSendAlertOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListSendAlertOutput) SetPageSize(v int64) *ListSendAlertOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListSendAlertOutput) SetTotalCount(v int64) *ListSendAlertOutput {
	s.TotalCount = &v
	return s
}

type SendResultForListSendAlertOutput struct {
	_ struct{} `type:"structure"`

	AlertMethod *string `type:"string"`

	AlertMethodVal *string `type:"string"`

	ErrMsg *string `type:"string"`

	Receiver *string `type:"string"`

	Success *bool `type:"boolean"`
}

// String returns the string representation
func (s SendResultForListSendAlertOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SendResultForListSendAlertOutput) GoString() string {
	return s.String()
}

// SetAlertMethod sets the AlertMethod field's value.
func (s *SendResultForListSendAlertOutput) SetAlertMethod(v string) *SendResultForListSendAlertOutput {
	s.AlertMethod = &v
	return s
}

// SetAlertMethodVal sets the AlertMethodVal field's value.
func (s *SendResultForListSendAlertOutput) SetAlertMethodVal(v string) *SendResultForListSendAlertOutput {
	s.AlertMethodVal = &v
	return s
}

// SetErrMsg sets the ErrMsg field's value.
func (s *SendResultForListSendAlertOutput) SetErrMsg(v string) *SendResultForListSendAlertOutput {
	s.ErrMsg = &v
	return s
}

// SetReceiver sets the Receiver field's value.
func (s *SendResultForListSendAlertOutput) SetReceiver(v string) *SendResultForListSendAlertOutput {
	s.Receiver = &v
	return s
}

// SetSuccess sets the Success field's value.
func (s *SendResultForListSendAlertOutput) SetSuccess(v bool) *SendResultForListSendAlertOutput {
	s.Success = &v
	return s
}
