// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package volcobserve

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateContactGroupWithContactsCommon = "UpdateContactGroupWithContacts"

// UpdateContactGroupWithContactsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateContactGroupWithContactsCommon operation. The "output" return
// value will be populated with the UpdateContactGroupWithContactsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateContactGroupWithContactsCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateContactGroupWithContactsCommon Send returns without error.
//
// See UpdateContactGroupWithContactsCommon for more information on using the UpdateContactGroupWithContactsCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateContactGroupWithContactsCommonRequest method.
//    req, resp := client.UpdateContactGroupWithContactsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) UpdateContactGroupWithContactsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateContactGroupWithContactsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateContactGroupWithContactsCommon API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation UpdateContactGroupWithContactsCommon for usage and error information.
func (c *VOLCOBSERVE) UpdateContactGroupWithContactsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateContactGroupWithContactsCommonRequest(input)
	return out, req.Send()
}

// UpdateContactGroupWithContactsCommonWithContext is the same as UpdateContactGroupWithContactsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateContactGroupWithContactsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) UpdateContactGroupWithContactsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateContactGroupWithContactsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateContactGroupWithContacts = "UpdateContactGroupWithContacts"

// UpdateContactGroupWithContactsRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateContactGroupWithContacts operation. The "output" return
// value will be populated with the UpdateContactGroupWithContactsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateContactGroupWithContactsCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateContactGroupWithContactsCommon Send returns without error.
//
// See UpdateContactGroupWithContacts for more information on using the UpdateContactGroupWithContacts
// API call, and error handling.
//
//    // Example sending a request using the UpdateContactGroupWithContactsRequest method.
//    req, resp := client.UpdateContactGroupWithContactsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VOLCOBSERVE) UpdateContactGroupWithContactsRequest(input *UpdateContactGroupWithContactsInput) (req *request.Request, output *UpdateContactGroupWithContactsOutput) {
	op := &request.Operation{
		Name:       opUpdateContactGroupWithContacts,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateContactGroupWithContactsInput{}
	}

	output = &UpdateContactGroupWithContactsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateContactGroupWithContacts API operation for VOLC_OBSERVE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VOLC_OBSERVE's
// API operation UpdateContactGroupWithContacts for usage and error information.
func (c *VOLCOBSERVE) UpdateContactGroupWithContacts(input *UpdateContactGroupWithContactsInput) (*UpdateContactGroupWithContactsOutput, error) {
	req, out := c.UpdateContactGroupWithContactsRequest(input)
	return out, req.Send()
}

// UpdateContactGroupWithContactsWithContext is the same as UpdateContactGroupWithContacts with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateContactGroupWithContacts for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VOLCOBSERVE) UpdateContactGroupWithContactsWithContext(ctx volcengine.Context, input *UpdateContactGroupWithContactsInput, opts ...request.Option) (*UpdateContactGroupWithContactsOutput, error) {
	req, out := c.UpdateContactGroupWithContactsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateContactGroupWithContactsInput struct {
	_ struct{} `type:"structure"`

	ContactsIdList []*string `type:"list"`

	// Id is a required field
	Id *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateContactGroupWithContactsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateContactGroupWithContactsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateContactGroupWithContactsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateContactGroupWithContactsInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetContactsIdList sets the ContactsIdList field's value.
func (s *UpdateContactGroupWithContactsInput) SetContactsIdList(v []*string) *UpdateContactGroupWithContactsInput {
	s.ContactsIdList = v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateContactGroupWithContactsInput) SetId(v string) *UpdateContactGroupWithContactsInput {
	s.Id = &v
	return s
}

type UpdateContactGroupWithContactsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Data []*string `type:"list"`
}

// String returns the string representation
func (s UpdateContactGroupWithContactsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateContactGroupWithContactsOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *UpdateContactGroupWithContactsOutput) SetData(v []*string) *UpdateContactGroupWithContactsOutput {
	s.Data = v
	return s
}
