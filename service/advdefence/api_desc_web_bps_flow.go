// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package advdefence

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescWebBpsFlowCommon = "DescWebBpsFlow"

// DescWebBpsFlowCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescWebBpsFlowCommon operation. The "output" return
// value will be populated with the DescWebBpsFlowCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescWebBpsFlowCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescWebBpsFlowCommon Send returns without error.
//
// See DescWebBpsFlowCommon for more information on using the DescWebBpsFlowCommon
// API call, and error handling.
//
//    // Example sending a request using the DescWebBpsFlowCommonRequest method.
//    req, resp := client.DescWebBpsFlowCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ADVDEFENCE) DescWebBpsFlowCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescWebBpsFlowCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescWebBpsFlowCommon API operation for ADVDEFENCE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ADVDEFENCE's
// API operation DescWebBpsFlowCommon for usage and error information.
func (c *ADVDEFENCE) DescWebBpsFlowCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescWebBpsFlowCommonRequest(input)
	return out, req.Send()
}

// DescWebBpsFlowCommonWithContext is the same as DescWebBpsFlowCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescWebBpsFlowCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ADVDEFENCE) DescWebBpsFlowCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescWebBpsFlowCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescWebBpsFlow = "DescWebBpsFlow"

// DescWebBpsFlowRequest generates a "volcengine/request.Request" representing the
// client's request for the DescWebBpsFlow operation. The "output" return
// value will be populated with the DescWebBpsFlowCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescWebBpsFlowCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescWebBpsFlowCommon Send returns without error.
//
// See DescWebBpsFlow for more information on using the DescWebBpsFlow
// API call, and error handling.
//
//    // Example sending a request using the DescWebBpsFlowRequest method.
//    req, resp := client.DescWebBpsFlowRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ADVDEFENCE) DescWebBpsFlowRequest(input *DescWebBpsFlowInput) (req *request.Request, output *DescWebBpsFlowOutput) {
	op := &request.Operation{
		Name:       opDescWebBpsFlow,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescWebBpsFlowInput{}
	}

	output = &DescWebBpsFlowOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescWebBpsFlow API operation for ADVDEFENCE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ADVDEFENCE's
// API operation DescWebBpsFlow for usage and error information.
func (c *ADVDEFENCE) DescWebBpsFlow(input *DescWebBpsFlowInput) (*DescWebBpsFlowOutput, error) {
	req, out := c.DescWebBpsFlowRequest(input)
	return out, req.Send()
}

// DescWebBpsFlowWithContext is the same as DescWebBpsFlow with the addition of
// the ability to pass a context and additional request options.
//
// See DescWebBpsFlow for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ADVDEFENCE) DescWebBpsFlowWithContext(ctx volcengine.Context, input *DescWebBpsFlowInput, opts ...request.Option) (*DescWebBpsFlowOutput, error) {
	req, out := c.DescWebBpsFlowRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BackSrcBpsFlowForDescWebBpsFlowOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AvgBps *float64 `type:"float" json:",omitempty"`

	MaxBps *float64 `type:"float" json:",omitempty"`

	TimeStamp *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s BackSrcBpsFlowForDescWebBpsFlowOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BackSrcBpsFlowForDescWebBpsFlowOutput) GoString() string {
	return s.String()
}

// SetAvgBps sets the AvgBps field's value.
func (s *BackSrcBpsFlowForDescWebBpsFlowOutput) SetAvgBps(v float64) *BackSrcBpsFlowForDescWebBpsFlowOutput {
	s.AvgBps = &v
	return s
}

// SetMaxBps sets the MaxBps field's value.
func (s *BackSrcBpsFlowForDescWebBpsFlowOutput) SetMaxBps(v float64) *BackSrcBpsFlowForDescWebBpsFlowOutput {
	s.MaxBps = &v
	return s
}

// SetTimeStamp sets the TimeStamp field's value.
func (s *BackSrcBpsFlowForDescWebBpsFlowOutput) SetTimeStamp(v int32) *BackSrcBpsFlowForDescWebBpsFlowOutput {
	s.TimeStamp = &v
	return s
}

type DescWebBpsFlowInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BeginTime *int32 `type:"int32" json:",omitempty"`

	EndTime *int32 `type:"int32" json:",omitempty"`

	Hosts []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescWebBpsFlowInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescWebBpsFlowInput) GoString() string {
	return s.String()
}

// SetBeginTime sets the BeginTime field's value.
func (s *DescWebBpsFlowInput) SetBeginTime(v int32) *DescWebBpsFlowInput {
	s.BeginTime = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *DescWebBpsFlowInput) SetEndTime(v int32) *DescWebBpsFlowInput {
	s.EndTime = &v
	return s
}

// SetHosts sets the Hosts field's value.
func (s *DescWebBpsFlowInput) SetHosts(v []*string) *DescWebBpsFlowInput {
	s.Hosts = v
	return s
}

type DescWebBpsFlowOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	BackSrcBpsFlow []*BackSrcBpsFlowForDescWebBpsFlowOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescWebBpsFlowOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescWebBpsFlowOutput) GoString() string {
	return s.String()
}

// SetBackSrcBpsFlow sets the BackSrcBpsFlow field's value.
func (s *DescWebBpsFlowOutput) SetBackSrcBpsFlow(v []*BackSrcBpsFlowForDescWebBpsFlowOutput) *DescWebBpsFlowOutput {
	s.BackSrcBpsFlow = v
	return s
}
