// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package advdefence

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSetDefSwitchCommon = "SetDefSwitch"

// SetDefSwitchCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SetDefSwitchCommon operation. The "output" return
// value will be populated with the SetDefSwitchCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetDefSwitchCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetDefSwitchCommon Send returns without error.
//
// See SetDefSwitchCommon for more information on using the SetDefSwitchCommon
// API call, and error handling.
//
//    // Example sending a request using the SetDefSwitchCommonRequest method.
//    req, resp := client.SetDefSwitchCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ADVDEFENCE) SetDefSwitchCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSetDefSwitchCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SetDefSwitchCommon API operation for ADVDEFENCE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ADVDEFENCE's
// API operation SetDefSwitchCommon for usage and error information.
func (c *ADVDEFENCE) SetDefSwitchCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SetDefSwitchCommonRequest(input)
	return out, req.Send()
}

// SetDefSwitchCommonWithContext is the same as SetDefSwitchCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SetDefSwitchCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ADVDEFENCE) SetDefSwitchCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SetDefSwitchCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetDefSwitch = "SetDefSwitch"

// SetDefSwitchRequest generates a "volcengine/request.Request" representing the
// client's request for the SetDefSwitch operation. The "output" return
// value will be populated with the SetDefSwitchCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetDefSwitchCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetDefSwitchCommon Send returns without error.
//
// See SetDefSwitch for more information on using the SetDefSwitch
// API call, and error handling.
//
//    // Example sending a request using the SetDefSwitchRequest method.
//    req, resp := client.SetDefSwitchRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ADVDEFENCE) SetDefSwitchRequest(input *SetDefSwitchInput) (req *request.Request, output *SetDefSwitchOutput) {
	op := &request.Operation{
		Name:       opSetDefSwitch,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SetDefSwitchInput{}
	}

	output = &SetDefSwitchOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SetDefSwitch API operation for ADVDEFENCE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ADVDEFENCE's
// API operation SetDefSwitch for usage and error information.
func (c *ADVDEFENCE) SetDefSwitch(input *SetDefSwitchInput) (*SetDefSwitchOutput, error) {
	req, out := c.SetDefSwitchRequest(input)
	return out, req.Send()
}

// SetDefSwitchWithContext is the same as SetDefSwitch with the addition of
// the ability to pass a context and additional request options.
//
// See SetDefSwitch for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ADVDEFENCE) SetDefSwitchWithContext(ctx volcengine.Context, input *SetDefSwitchInput, opts ...request.Option) (*SetDefSwitchOutput, error) {
	req, out := c.SetDefSwitchRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SetDefSwitchInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// CcEnable is a required field
	CcEnable *int32 `type:"int32" json:",omitempty" required:"true"`

	// Host is a required field
	Host *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s SetDefSwitchInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetDefSwitchInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetDefSwitchInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SetDefSwitchInput"}
	if s.CcEnable == nil {
		invalidParams.Add(request.NewErrParamRequired("CcEnable"))
	}
	if s.Host == nil {
		invalidParams.Add(request.NewErrParamRequired("Host"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCcEnable sets the CcEnable field's value.
func (s *SetDefSwitchInput) SetCcEnable(v int32) *SetDefSwitchInput {
	s.CcEnable = &v
	return s
}

// SetHost sets the Host field's value.
func (s *SetDefSwitchInput) SetHost(v string) *SetDefSwitchInput {
	s.Host = &v
	return s
}

type SetDefSwitchOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s SetDefSwitchOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetDefSwitchOutput) GoString() string {
	return s.String()
}
