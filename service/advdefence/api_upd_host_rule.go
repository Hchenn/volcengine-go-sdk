// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package advdefence

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdHostRuleCommon = "UpdHostRule"

// UpdHostRuleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdHostRuleCommon operation. The "output" return
// value will be populated with the UpdHostRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdHostRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdHostRuleCommon Send returns without error.
//
// See UpdHostRuleCommon for more information on using the UpdHostRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdHostRuleCommonRequest method.
//    req, resp := client.UpdHostRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ADVDEFENCE) UpdHostRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdHostRuleCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdHostRuleCommon API operation for ADVDEFENCE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ADVDEFENCE's
// API operation UpdHostRuleCommon for usage and error information.
func (c *ADVDEFENCE) UpdHostRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdHostRuleCommonRequest(input)
	return out, req.Send()
}

// UpdHostRuleCommonWithContext is the same as UpdHostRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdHostRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ADVDEFENCE) UpdHostRuleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdHostRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdHostRule = "UpdHostRule"

// UpdHostRuleRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdHostRule operation. The "output" return
// value will be populated with the UpdHostRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdHostRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdHostRuleCommon Send returns without error.
//
// See UpdHostRule for more information on using the UpdHostRule
// API call, and error handling.
//
//    // Example sending a request using the UpdHostRuleRequest method.
//    req, resp := client.UpdHostRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ADVDEFENCE) UpdHostRuleRequest(input *UpdHostRuleInput) (req *request.Request, output *UpdHostRuleOutput) {
	op := &request.Operation{
		Name:       opUpdHostRule,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdHostRuleInput{}
	}

	output = &UpdHostRuleOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdHostRule API operation for ADVDEFENCE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ADVDEFENCE's
// API operation UpdHostRule for usage and error information.
func (c *ADVDEFENCE) UpdHostRule(input *UpdHostRuleInput) (*UpdHostRuleOutput, error) {
	req, out := c.UpdHostRuleRequest(input)
	return out, req.Send()
}

// UpdHostRuleWithContext is the same as UpdHostRule with the addition of
// the ability to pass a context and additional request options.
//
// See UpdHostRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ADVDEFENCE) UpdHostRuleWithContext(ctx volcengine.Context, input *UpdHostRuleInput, opts ...request.Option) (*UpdHostRuleOutput, error) {
	req, out := c.UpdHostRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ProxySetHeaderForUpdHostRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Args *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ProxySetHeaderForUpdHostRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProxySetHeaderForUpdHostRuleInput) GoString() string {
	return s.String()
}

// SetArgs sets the Args field's value.
func (s *ProxySetHeaderForUpdHostRuleInput) SetArgs(v string) *ProxySetHeaderForUpdHostRuleInput {
	s.Args = &v
	return s
}

// SetName sets the Name field's value.
func (s *ProxySetHeaderForUpdHostRuleInput) SetName(v string) *ProxySetHeaderForUpdHostRuleInput {
	s.Name = &v
	return s
}

type ServerForUpdHostRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Addr *string `type:"string" json:",omitempty"`

	BackUp *int32 `type:"int32" json:",omitempty"`

	Port *int32 `type:"int32" json:",omitempty"`

	Protocol *string `type:"string" json:",omitempty"`

	Weight *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ServerForUpdHostRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ServerForUpdHostRuleInput) GoString() string {
	return s.String()
}

// SetAddr sets the Addr field's value.
func (s *ServerForUpdHostRuleInput) SetAddr(v string) *ServerForUpdHostRuleInput {
	s.Addr = &v
	return s
}

// SetBackUp sets the BackUp field's value.
func (s *ServerForUpdHostRuleInput) SetBackUp(v int32) *ServerForUpdHostRuleInput {
	s.BackUp = &v
	return s
}

// SetPort sets the Port field's value.
func (s *ServerForUpdHostRuleInput) SetPort(v int32) *ServerForUpdHostRuleInput {
	s.Port = &v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *ServerForUpdHostRuleInput) SetProtocol(v string) *ServerForUpdHostRuleInput {
	s.Protocol = &v
	return s
}

// SetWeight sets the Weight field's value.
func (s *ServerForUpdHostRuleInput) SetWeight(v string) *ServerForUpdHostRuleInput {
	s.Weight = &v
	return s
}

type UpdHostRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AccessMode is a required field
	AccessMode *int32 `type:"int32" json:",omitempty" required:"true"`

	AllSSLCipher *int32 `type:"int32" json:",omitempty"`

	// BackUpStatus is a required field
	BackUpStatus *int32 `type:"int32" json:",omitempty" required:"true"`

	// ChunkMode is a required field
	ChunkMode *int32 `type:"int32" json:",omitempty" required:"true"`

	// ClientMaxBodySize is a required field
	ClientMaxBodySize *int32 `type:"int32" json:",omitempty" required:"true"`

	DefIp []*string `type:"list" json:",omitempty"`

	// GzipMode is a required field
	GzipMode *int32 `type:"int32" json:",omitempty" required:"true"`

	// Host is a required field
	Host *string `type:"string" json:",omitempty" required:"true"`

	// Http2 is a required field
	Http2 *int32 `type:"int32" json:",omitempty" required:"true"`

	// KeepAliveRequests is a required field
	KeepAliveRequests *int32 `type:"int32" json:",omitempty" required:"true"`

	// KeepAliveTimeOut is a required field
	KeepAliveTimeOut *int32 `type:"int32" json:",omitempty" required:"true"`

	// LBAlgorithm is a required field
	LBAlgorithm *string `type:"string" json:",omitempty" required:"true"`

	// ProtoFollow is a required field
	ProtoFollow *int32 `type:"int32" json:",omitempty" required:"true"`

	Protocols []*string `type:"list" json:",omitempty"`

	// ProxyConnectTimeOut is a required field
	ProxyConnectTimeOut *int32 `type:"int32" json:",omitempty" required:"true"`

	// ProxyKeepAliveRequests is a required field
	ProxyKeepAliveRequests *int32 `type:"int32" json:",omitempty" required:"true"`

	// ProxyKeepAliveTimeOut is a required field
	ProxyKeepAliveTimeOut *int32 `type:"int32" json:",omitempty" required:"true"`

	// ProxyReadTimeOut is a required field
	ProxyReadTimeOut *int32 `type:"int32" json:",omitempty" required:"true"`

	// ProxyRetry is a required field
	ProxyRetry *int32 `type:"int32" json:",omitempty" required:"true"`

	// ProxySendTimeOut is a required field
	ProxySendTimeOut *int32 `type:"int32" json:",omitempty" required:"true"`

	ProxySetHeader []*ProxySetHeaderForUpdHostRuleInput `type:"list" json:",omitempty"`

	SSLCiphers []*string `type:"list" json:",omitempty"`

	SSLProtocols []*string `type:"list" json:",omitempty"`

	Servers []*ServerForUpdHostRuleInput `type:"list" json:",omitempty"`

	// UserCertId is a required field
	UserCertId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdHostRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdHostRuleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdHostRuleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdHostRuleInput"}
	if s.AccessMode == nil {
		invalidParams.Add(request.NewErrParamRequired("AccessMode"))
	}
	if s.BackUpStatus == nil {
		invalidParams.Add(request.NewErrParamRequired("BackUpStatus"))
	}
	if s.ChunkMode == nil {
		invalidParams.Add(request.NewErrParamRequired("ChunkMode"))
	}
	if s.ClientMaxBodySize == nil {
		invalidParams.Add(request.NewErrParamRequired("ClientMaxBodySize"))
	}
	if s.GzipMode == nil {
		invalidParams.Add(request.NewErrParamRequired("GzipMode"))
	}
	if s.Host == nil {
		invalidParams.Add(request.NewErrParamRequired("Host"))
	}
	if s.Http2 == nil {
		invalidParams.Add(request.NewErrParamRequired("Http2"))
	}
	if s.KeepAliveRequests == nil {
		invalidParams.Add(request.NewErrParamRequired("KeepAliveRequests"))
	}
	if s.KeepAliveTimeOut == nil {
		invalidParams.Add(request.NewErrParamRequired("KeepAliveTimeOut"))
	}
	if s.LBAlgorithm == nil {
		invalidParams.Add(request.NewErrParamRequired("LBAlgorithm"))
	}
	if s.ProtoFollow == nil {
		invalidParams.Add(request.NewErrParamRequired("ProtoFollow"))
	}
	if s.ProxyConnectTimeOut == nil {
		invalidParams.Add(request.NewErrParamRequired("ProxyConnectTimeOut"))
	}
	if s.ProxyKeepAliveRequests == nil {
		invalidParams.Add(request.NewErrParamRequired("ProxyKeepAliveRequests"))
	}
	if s.ProxyKeepAliveTimeOut == nil {
		invalidParams.Add(request.NewErrParamRequired("ProxyKeepAliveTimeOut"))
	}
	if s.ProxyReadTimeOut == nil {
		invalidParams.Add(request.NewErrParamRequired("ProxyReadTimeOut"))
	}
	if s.ProxyRetry == nil {
		invalidParams.Add(request.NewErrParamRequired("ProxyRetry"))
	}
	if s.ProxySendTimeOut == nil {
		invalidParams.Add(request.NewErrParamRequired("ProxySendTimeOut"))
	}
	if s.UserCertId == nil {
		invalidParams.Add(request.NewErrParamRequired("UserCertId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccessMode sets the AccessMode field's value.
func (s *UpdHostRuleInput) SetAccessMode(v int32) *UpdHostRuleInput {
	s.AccessMode = &v
	return s
}

// SetAllSSLCipher sets the AllSSLCipher field's value.
func (s *UpdHostRuleInput) SetAllSSLCipher(v int32) *UpdHostRuleInput {
	s.AllSSLCipher = &v
	return s
}

// SetBackUpStatus sets the BackUpStatus field's value.
func (s *UpdHostRuleInput) SetBackUpStatus(v int32) *UpdHostRuleInput {
	s.BackUpStatus = &v
	return s
}

// SetChunkMode sets the ChunkMode field's value.
func (s *UpdHostRuleInput) SetChunkMode(v int32) *UpdHostRuleInput {
	s.ChunkMode = &v
	return s
}

// SetClientMaxBodySize sets the ClientMaxBodySize field's value.
func (s *UpdHostRuleInput) SetClientMaxBodySize(v int32) *UpdHostRuleInput {
	s.ClientMaxBodySize = &v
	return s
}

// SetDefIp sets the DefIp field's value.
func (s *UpdHostRuleInput) SetDefIp(v []*string) *UpdHostRuleInput {
	s.DefIp = v
	return s
}

// SetGzipMode sets the GzipMode field's value.
func (s *UpdHostRuleInput) SetGzipMode(v int32) *UpdHostRuleInput {
	s.GzipMode = &v
	return s
}

// SetHost sets the Host field's value.
func (s *UpdHostRuleInput) SetHost(v string) *UpdHostRuleInput {
	s.Host = &v
	return s
}

// SetHttp2 sets the Http2 field's value.
func (s *UpdHostRuleInput) SetHttp2(v int32) *UpdHostRuleInput {
	s.Http2 = &v
	return s
}

// SetKeepAliveRequests sets the KeepAliveRequests field's value.
func (s *UpdHostRuleInput) SetKeepAliveRequests(v int32) *UpdHostRuleInput {
	s.KeepAliveRequests = &v
	return s
}

// SetKeepAliveTimeOut sets the KeepAliveTimeOut field's value.
func (s *UpdHostRuleInput) SetKeepAliveTimeOut(v int32) *UpdHostRuleInput {
	s.KeepAliveTimeOut = &v
	return s
}

// SetLBAlgorithm sets the LBAlgorithm field's value.
func (s *UpdHostRuleInput) SetLBAlgorithm(v string) *UpdHostRuleInput {
	s.LBAlgorithm = &v
	return s
}

// SetProtoFollow sets the ProtoFollow field's value.
func (s *UpdHostRuleInput) SetProtoFollow(v int32) *UpdHostRuleInput {
	s.ProtoFollow = &v
	return s
}

// SetProtocols sets the Protocols field's value.
func (s *UpdHostRuleInput) SetProtocols(v []*string) *UpdHostRuleInput {
	s.Protocols = v
	return s
}

// SetProxyConnectTimeOut sets the ProxyConnectTimeOut field's value.
func (s *UpdHostRuleInput) SetProxyConnectTimeOut(v int32) *UpdHostRuleInput {
	s.ProxyConnectTimeOut = &v
	return s
}

// SetProxyKeepAliveRequests sets the ProxyKeepAliveRequests field's value.
func (s *UpdHostRuleInput) SetProxyKeepAliveRequests(v int32) *UpdHostRuleInput {
	s.ProxyKeepAliveRequests = &v
	return s
}

// SetProxyKeepAliveTimeOut sets the ProxyKeepAliveTimeOut field's value.
func (s *UpdHostRuleInput) SetProxyKeepAliveTimeOut(v int32) *UpdHostRuleInput {
	s.ProxyKeepAliveTimeOut = &v
	return s
}

// SetProxyReadTimeOut sets the ProxyReadTimeOut field's value.
func (s *UpdHostRuleInput) SetProxyReadTimeOut(v int32) *UpdHostRuleInput {
	s.ProxyReadTimeOut = &v
	return s
}

// SetProxyRetry sets the ProxyRetry field's value.
func (s *UpdHostRuleInput) SetProxyRetry(v int32) *UpdHostRuleInput {
	s.ProxyRetry = &v
	return s
}

// SetProxySendTimeOut sets the ProxySendTimeOut field's value.
func (s *UpdHostRuleInput) SetProxySendTimeOut(v int32) *UpdHostRuleInput {
	s.ProxySendTimeOut = &v
	return s
}

// SetProxySetHeader sets the ProxySetHeader field's value.
func (s *UpdHostRuleInput) SetProxySetHeader(v []*ProxySetHeaderForUpdHostRuleInput) *UpdHostRuleInput {
	s.ProxySetHeader = v
	return s
}

// SetSSLCiphers sets the SSLCiphers field's value.
func (s *UpdHostRuleInput) SetSSLCiphers(v []*string) *UpdHostRuleInput {
	s.SSLCiphers = v
	return s
}

// SetSSLProtocols sets the SSLProtocols field's value.
func (s *UpdHostRuleInput) SetSSLProtocols(v []*string) *UpdHostRuleInput {
	s.SSLProtocols = v
	return s
}

// SetServers sets the Servers field's value.
func (s *UpdHostRuleInput) SetServers(v []*ServerForUpdHostRuleInput) *UpdHostRuleInput {
	s.Servers = v
	return s
}

// SetUserCertId sets the UserCertId field's value.
func (s *UpdHostRuleInput) SetUserCertId(v string) *UpdHostRuleInput {
	s.UserCertId = &v
	return s
}

type UpdHostRuleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdHostRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdHostRuleOutput) GoString() string {
	return s.String()
}
