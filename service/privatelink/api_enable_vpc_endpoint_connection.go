// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatelink

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEnableVpcEndpointConnectionCommon = "EnableVpcEndpointConnection"

// EnableVpcEndpointConnectionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableVpcEndpointConnectionCommon operation. The "output" return
// value will be populated with the EnableVpcEndpointConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableVpcEndpointConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableVpcEndpointConnectionCommon Send returns without error.
//
// See EnableVpcEndpointConnectionCommon for more information on using the EnableVpcEndpointConnectionCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableVpcEndpointConnectionCommonRequest method.
//    req, resp := client.EnableVpcEndpointConnectionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATELINK) EnableVpcEndpointConnectionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableVpcEndpointConnectionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// EnableVpcEndpointConnectionCommon API operation for PRIVATELINK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATELINK's
// API operation EnableVpcEndpointConnectionCommon for usage and error information.
func (c *PRIVATELINK) EnableVpcEndpointConnectionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableVpcEndpointConnectionCommonRequest(input)
	return out, req.Send()
}

// EnableVpcEndpointConnectionCommonWithContext is the same as EnableVpcEndpointConnectionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableVpcEndpointConnectionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATELINK) EnableVpcEndpointConnectionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableVpcEndpointConnectionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableVpcEndpointConnection = "EnableVpcEndpointConnection"

// EnableVpcEndpointConnectionRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableVpcEndpointConnection operation. The "output" return
// value will be populated with the EnableVpcEndpointConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableVpcEndpointConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableVpcEndpointConnectionCommon Send returns without error.
//
// See EnableVpcEndpointConnection for more information on using the EnableVpcEndpointConnection
// API call, and error handling.
//
//    // Example sending a request using the EnableVpcEndpointConnectionRequest method.
//    req, resp := client.EnableVpcEndpointConnectionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATELINK) EnableVpcEndpointConnectionRequest(input *EnableVpcEndpointConnectionInput) (req *request.Request, output *EnableVpcEndpointConnectionOutput) {
	op := &request.Operation{
		Name:       opEnableVpcEndpointConnection,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableVpcEndpointConnectionInput{}
	}

	output = &EnableVpcEndpointConnectionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// EnableVpcEndpointConnection API operation for PRIVATELINK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATELINK's
// API operation EnableVpcEndpointConnection for usage and error information.
func (c *PRIVATELINK) EnableVpcEndpointConnection(input *EnableVpcEndpointConnectionInput) (*EnableVpcEndpointConnectionOutput, error) {
	req, out := c.EnableVpcEndpointConnectionRequest(input)
	return out, req.Send()
}

// EnableVpcEndpointConnectionWithContext is the same as EnableVpcEndpointConnection with the addition of
// the ability to pass a context and additional request options.
//
// See EnableVpcEndpointConnection for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATELINK) EnableVpcEndpointConnectionWithContext(ctx volcengine.Context, input *EnableVpcEndpointConnectionInput, opts ...request.Option) (*EnableVpcEndpointConnectionOutput, error) {
	req, out := c.EnableVpcEndpointConnectionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnableVpcEndpointConnectionInput struct {
	_ struct{} `type:"structure"`

	// EndpointId is a required field
	EndpointId *string `type:"string" required:"true"`

	// ServiceId is a required field
	ServiceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s EnableVpcEndpointConnectionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableVpcEndpointConnectionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableVpcEndpointConnectionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnableVpcEndpointConnectionInput"}
	if s.EndpointId == nil {
		invalidParams.Add(request.NewErrParamRequired("EndpointId"))
	}
	if s.ServiceId == nil {
		invalidParams.Add(request.NewErrParamRequired("ServiceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndpointId sets the EndpointId field's value.
func (s *EnableVpcEndpointConnectionInput) SetEndpointId(v string) *EnableVpcEndpointConnectionInput {
	s.EndpointId = &v
	return s
}

// SetServiceId sets the ServiceId field's value.
func (s *EnableVpcEndpointConnectionInput) SetServiceId(v string) *EnableVpcEndpointConnectionInput {
	s.ServiceId = &v
	return s
}

type EnableVpcEndpointConnectionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s EnableVpcEndpointConnectionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableVpcEndpointConnectionOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *EnableVpcEndpointConnectionOutput) SetRequestId(v string) *EnableVpcEndpointConnectionOutput {
	s.RequestId = &v
	return s
}
