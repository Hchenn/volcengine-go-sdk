// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package fwcenter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAddAddressBookCommon = "AddAddressBook"

// AddAddressBookCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AddAddressBookCommon operation. The "output" return
// value will be populated with the AddAddressBookCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddAddressBookCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddAddressBookCommon Send returns without error.
//
// See AddAddressBookCommon for more information on using the AddAddressBookCommon
// API call, and error handling.
//
//    // Example sending a request using the AddAddressBookCommonRequest method.
//    req, resp := client.AddAddressBookCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) AddAddressBookCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddAddressBookCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddAddressBookCommon API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation AddAddressBookCommon for usage and error information.
func (c *FWCENTER) AddAddressBookCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddAddressBookCommonRequest(input)
	return out, req.Send()
}

// AddAddressBookCommonWithContext is the same as AddAddressBookCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AddAddressBookCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) AddAddressBookCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddAddressBookCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddAddressBook = "AddAddressBook"

// AddAddressBookRequest generates a "volcengine/request.Request" representing the
// client's request for the AddAddressBook operation. The "output" return
// value will be populated with the AddAddressBookCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddAddressBookCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddAddressBookCommon Send returns without error.
//
// See AddAddressBook for more information on using the AddAddressBook
// API call, and error handling.
//
//    // Example sending a request using the AddAddressBookRequest method.
//    req, resp := client.AddAddressBookRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) AddAddressBookRequest(input *AddAddressBookInput) (req *request.Request, output *AddAddressBookOutput) {
	op := &request.Operation{
		Name:       opAddAddressBook,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddAddressBookInput{}
	}

	output = &AddAddressBookOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddAddressBook API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation AddAddressBook for usage and error information.
func (c *FWCENTER) AddAddressBook(input *AddAddressBookInput) (*AddAddressBookOutput, error) {
	req, out := c.AddAddressBookRequest(input)
	return out, req.Send()
}

// AddAddressBookWithContext is the same as AddAddressBook with the addition of
// the ability to pass a context and additional request options.
//
// See AddAddressBook for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) AddAddressBookWithContext(ctx volcengine.Context, input *AddAddressBookInput, opts ...request.Option) (*AddAddressBookOutput, error) {
	req, out := c.AddAddressBookRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddAddressBookInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AddressList []*string `type:"list" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// GroupName is a required field
	GroupName *string `max:"64" type:"string" json:",omitempty" required:"true"`

	// GroupType is a required field
	GroupType *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfGroupTypeForAddAddressBookInput"`
}

// String returns the string representation
func (s AddAddressBookInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddAddressBookInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddAddressBookInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AddAddressBookInput"}
	if s.GroupName == nil {
		invalidParams.Add(request.NewErrParamRequired("GroupName"))
	}
	if s.GroupName != nil && len(*s.GroupName) > 64 {
		invalidParams.Add(request.NewErrParamMaxLen("GroupName", 64, *s.GroupName))
	}
	if s.GroupType == nil {
		invalidParams.Add(request.NewErrParamRequired("GroupType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAddressList sets the AddressList field's value.
func (s *AddAddressBookInput) SetAddressList(v []*string) *AddAddressBookInput {
	s.AddressList = v
	return s
}

// SetDescription sets the Description field's value.
func (s *AddAddressBookInput) SetDescription(v string) *AddAddressBookInput {
	s.Description = &v
	return s
}

// SetGroupName sets the GroupName field's value.
func (s *AddAddressBookInput) SetGroupName(v string) *AddAddressBookInput {
	s.GroupName = &v
	return s
}

// SetGroupType sets the GroupType field's value.
func (s *AddAddressBookInput) SetGroupType(v string) *AddAddressBookInput {
	s.GroupType = &v
	return s
}

type AddAddressBookOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	GroupUuid *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AddAddressBookOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddAddressBookOutput) GoString() string {
	return s.String()
}

// SetGroupUuid sets the GroupUuid field's value.
func (s *AddAddressBookOutput) SetGroupUuid(v string) *AddAddressBookOutput {
	s.GroupUuid = &v
	return s
}

const (
	// EnumOfGroupTypeForAddAddressBookInputIp is a EnumOfGroupTypeForAddAddressBookInput enum value
	EnumOfGroupTypeForAddAddressBookInputIp = "ip"

	// EnumOfGroupTypeForAddAddressBookInputDomain is a EnumOfGroupTypeForAddAddressBookInput enum value
	EnumOfGroupTypeForAddAddressBookInputDomain = "domain"

	// EnumOfGroupTypeForAddAddressBookInputPort is a EnumOfGroupTypeForAddAddressBookInput enum value
	EnumOfGroupTypeForAddAddressBookInputPort = "port"
)
