// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package fwcenter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeControlPolicyCommon = "DescribeControlPolicy"

// DescribeControlPolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeControlPolicyCommon operation. The "output" return
// value will be populated with the DescribeControlPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeControlPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeControlPolicyCommon Send returns without error.
//
// See DescribeControlPolicyCommon for more information on using the DescribeControlPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeControlPolicyCommonRequest method.
//    req, resp := client.DescribeControlPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) DescribeControlPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeControlPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeControlPolicyCommon API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation DescribeControlPolicyCommon for usage and error information.
func (c *FWCENTER) DescribeControlPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeControlPolicyCommonRequest(input)
	return out, req.Send()
}

// DescribeControlPolicyCommonWithContext is the same as DescribeControlPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeControlPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) DescribeControlPolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeControlPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeControlPolicy = "DescribeControlPolicy"

// DescribeControlPolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeControlPolicy operation. The "output" return
// value will be populated with the DescribeControlPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeControlPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeControlPolicyCommon Send returns without error.
//
// See DescribeControlPolicy for more information on using the DescribeControlPolicy
// API call, and error handling.
//
//    // Example sending a request using the DescribeControlPolicyRequest method.
//    req, resp := client.DescribeControlPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FWCENTER) DescribeControlPolicyRequest(input *DescribeControlPolicyInput) (req *request.Request, output *DescribeControlPolicyOutput) {
	op := &request.Operation{
		Name:       opDescribeControlPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeControlPolicyInput{}
	}

	output = &DescribeControlPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeControlPolicy API operation for FWCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FWCENTER's
// API operation DescribeControlPolicy for usage and error information.
func (c *FWCENTER) DescribeControlPolicy(input *DescribeControlPolicyInput) (*DescribeControlPolicyOutput, error) {
	req, out := c.DescribeControlPolicyRequest(input)
	return out, req.Send()
}

// DescribeControlPolicyWithContext is the same as DescribeControlPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeControlPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FWCENTER) DescribeControlPolicyWithContext(ctx volcengine.Context, input *DescribeControlPolicyInput, opts ...request.Option) (*DescribeControlPolicyOutput, error) {
	req, out := c.DescribeControlPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DatumForDescribeControlPolicyOutput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	Action *string `type:"string"`

	Description *string `type:"string"`

	DestPort *string `type:"string"`

	DestPortGroupType *string `type:"string"`

	DestPortList *string `type:"string"`

	DestPortType *string `type:"string"`

	Destination *string `type:"string"`

	DestinationCidrList *string `type:"string"`

	DestinationGroupType *string `type:"string"`

	DestinationType *string `type:"string"`

	Direction *string `type:"string"`

	HitCnt *string `type:"string"`

	Prio *int32 `type:"int32"`

	Proto *string `type:"string"`

	RuleId *string `type:"string"`

	Source *string `type:"string"`

	SourceCidrList *string `type:"string"`

	SourceGroupType *string `type:"string"`

	SourceType *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s DatumForDescribeControlPolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DatumForDescribeControlPolicyOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DatumForDescribeControlPolicyOutput) SetAccountId(v string) *DatumForDescribeControlPolicyOutput {
	s.AccountId = &v
	return s
}

// SetAction sets the Action field's value.
func (s *DatumForDescribeControlPolicyOutput) SetAction(v string) *DatumForDescribeControlPolicyOutput {
	s.Action = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DatumForDescribeControlPolicyOutput) SetDescription(v string) *DatumForDescribeControlPolicyOutput {
	s.Description = &v
	return s
}

// SetDestPort sets the DestPort field's value.
func (s *DatumForDescribeControlPolicyOutput) SetDestPort(v string) *DatumForDescribeControlPolicyOutput {
	s.DestPort = &v
	return s
}

// SetDestPortGroupType sets the DestPortGroupType field's value.
func (s *DatumForDescribeControlPolicyOutput) SetDestPortGroupType(v string) *DatumForDescribeControlPolicyOutput {
	s.DestPortGroupType = &v
	return s
}

// SetDestPortList sets the DestPortList field's value.
func (s *DatumForDescribeControlPolicyOutput) SetDestPortList(v string) *DatumForDescribeControlPolicyOutput {
	s.DestPortList = &v
	return s
}

// SetDestPortType sets the DestPortType field's value.
func (s *DatumForDescribeControlPolicyOutput) SetDestPortType(v string) *DatumForDescribeControlPolicyOutput {
	s.DestPortType = &v
	return s
}

// SetDestination sets the Destination field's value.
func (s *DatumForDescribeControlPolicyOutput) SetDestination(v string) *DatumForDescribeControlPolicyOutput {
	s.Destination = &v
	return s
}

// SetDestinationCidrList sets the DestinationCidrList field's value.
func (s *DatumForDescribeControlPolicyOutput) SetDestinationCidrList(v string) *DatumForDescribeControlPolicyOutput {
	s.DestinationCidrList = &v
	return s
}

// SetDestinationGroupType sets the DestinationGroupType field's value.
func (s *DatumForDescribeControlPolicyOutput) SetDestinationGroupType(v string) *DatumForDescribeControlPolicyOutput {
	s.DestinationGroupType = &v
	return s
}

// SetDestinationType sets the DestinationType field's value.
func (s *DatumForDescribeControlPolicyOutput) SetDestinationType(v string) *DatumForDescribeControlPolicyOutput {
	s.DestinationType = &v
	return s
}

// SetDirection sets the Direction field's value.
func (s *DatumForDescribeControlPolicyOutput) SetDirection(v string) *DatumForDescribeControlPolicyOutput {
	s.Direction = &v
	return s
}

// SetHitCnt sets the HitCnt field's value.
func (s *DatumForDescribeControlPolicyOutput) SetHitCnt(v string) *DatumForDescribeControlPolicyOutput {
	s.HitCnt = &v
	return s
}

// SetPrio sets the Prio field's value.
func (s *DatumForDescribeControlPolicyOutput) SetPrio(v int32) *DatumForDescribeControlPolicyOutput {
	s.Prio = &v
	return s
}

// SetProto sets the Proto field's value.
func (s *DatumForDescribeControlPolicyOutput) SetProto(v string) *DatumForDescribeControlPolicyOutput {
	s.Proto = &v
	return s
}

// SetRuleId sets the RuleId field's value.
func (s *DatumForDescribeControlPolicyOutput) SetRuleId(v string) *DatumForDescribeControlPolicyOutput {
	s.RuleId = &v
	return s
}

// SetSource sets the Source field's value.
func (s *DatumForDescribeControlPolicyOutput) SetSource(v string) *DatumForDescribeControlPolicyOutput {
	s.Source = &v
	return s
}

// SetSourceCidrList sets the SourceCidrList field's value.
func (s *DatumForDescribeControlPolicyOutput) SetSourceCidrList(v string) *DatumForDescribeControlPolicyOutput {
	s.SourceCidrList = &v
	return s
}

// SetSourceGroupType sets the SourceGroupType field's value.
func (s *DatumForDescribeControlPolicyOutput) SetSourceGroupType(v string) *DatumForDescribeControlPolicyOutput {
	s.SourceGroupType = &v
	return s
}

// SetSourceType sets the SourceType field's value.
func (s *DatumForDescribeControlPolicyOutput) SetSourceType(v string) *DatumForDescribeControlPolicyOutput {
	s.SourceType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DatumForDescribeControlPolicyOutput) SetStatus(v string) *DatumForDescribeControlPolicyOutput {
	s.Status = &v
	return s
}

type DescribeControlPolicyInput struct {
	_ struct{} `type:"structure"`

	Action []*string `type:"list"`

	Destination *string `type:"string"`

	// Direction is a required field
	Direction *string `type:"string" required:"true"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	Proto []*string `type:"list"`

	Source *string `type:"string"`

	Status []*bool `type:"list" json:"status"`
}

// String returns the string representation
func (s DescribeControlPolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeControlPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeControlPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeControlPolicyInput"}
	if s.Direction == nil {
		invalidParams.Add(request.NewErrParamRequired("Direction"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAction sets the Action field's value.
func (s *DescribeControlPolicyInput) SetAction(v []*string) *DescribeControlPolicyInput {
	s.Action = v
	return s
}

// SetDestination sets the Destination field's value.
func (s *DescribeControlPolicyInput) SetDestination(v string) *DescribeControlPolicyInput {
	s.Destination = &v
	return s
}

// SetDirection sets the Direction field's value.
func (s *DescribeControlPolicyInput) SetDirection(v string) *DescribeControlPolicyInput {
	s.Direction = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeControlPolicyInput) SetPageNumber(v int32) *DescribeControlPolicyInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeControlPolicyInput) SetPageSize(v int32) *DescribeControlPolicyInput {
	s.PageSize = &v
	return s
}

// SetProto sets the Proto field's value.
func (s *DescribeControlPolicyInput) SetProto(v []*string) *DescribeControlPolicyInput {
	s.Proto = v
	return s
}

// SetSource sets the Source field's value.
func (s *DescribeControlPolicyInput) SetSource(v string) *DescribeControlPolicyInput {
	s.Source = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeControlPolicyInput) SetStatus(v []*bool) *DescribeControlPolicyInput {
	s.Status = v
	return s
}

type DescribeControlPolicyOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Count *int32 `type:"int32"`

	Data []*DatumForDescribeControlPolicyOutput `type:"list"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	TotalCount *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeControlPolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeControlPolicyOutput) GoString() string {
	return s.String()
}

// SetCount sets the Count field's value.
func (s *DescribeControlPolicyOutput) SetCount(v int32) *DescribeControlPolicyOutput {
	s.Count = &v
	return s
}

// SetData sets the Data field's value.
func (s *DescribeControlPolicyOutput) SetData(v []*DatumForDescribeControlPolicyOutput) *DescribeControlPolicyOutput {
	s.Data = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeControlPolicyOutput) SetPageNumber(v int32) *DescribeControlPolicyOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeControlPolicyOutput) SetPageSize(v int32) *DescribeControlPolicyOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeControlPolicyOutput) SetTotalCount(v int32) *DescribeControlPolicyOutput {
	s.TotalCount = &v
	return s
}
