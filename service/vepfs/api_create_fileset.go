// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vepfs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateFilesetCommon = "CreateFileset"

// CreateFilesetCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateFilesetCommon operation. The "output" return
// value will be populated with the CreateFilesetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateFilesetCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateFilesetCommon Send returns without error.
//
// See CreateFilesetCommon for more information on using the CreateFilesetCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateFilesetCommonRequest method.
//    req, resp := client.CreateFilesetCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEPFS) CreateFilesetCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateFilesetCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateFilesetCommon API operation for VEPFS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEPFS's
// API operation CreateFilesetCommon for usage and error information.
func (c *VEPFS) CreateFilesetCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateFilesetCommonRequest(input)
	return out, req.Send()
}

// CreateFilesetCommonWithContext is the same as CreateFilesetCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateFilesetCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEPFS) CreateFilesetCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateFilesetCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateFileset = "CreateFileset"

// CreateFilesetRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateFileset operation. The "output" return
// value will be populated with the CreateFilesetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateFilesetCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateFilesetCommon Send returns without error.
//
// See CreateFileset for more information on using the CreateFileset
// API call, and error handling.
//
//    // Example sending a request using the CreateFilesetRequest method.
//    req, resp := client.CreateFilesetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEPFS) CreateFilesetRequest(input *CreateFilesetInput) (req *request.Request, output *CreateFilesetOutput) {
	op := &request.Operation{
		Name:       opCreateFileset,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateFilesetInput{}
	}

	output = &CreateFilesetOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateFileset API operation for VEPFS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEPFS's
// API operation CreateFileset for usage and error information.
func (c *VEPFS) CreateFileset(input *CreateFilesetInput) (*CreateFilesetOutput, error) {
	req, out := c.CreateFilesetRequest(input)
	return out, req.Send()
}

// CreateFilesetWithContext is the same as CreateFileset with the addition of
// the ability to pass a context and additional request options.
//
// See CreateFileset for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEPFS) CreateFilesetWithContext(ctx volcengine.Context, input *CreateFilesetInput, opts ...request.Option) (*CreateFilesetOutput, error) {
	req, out := c.CreateFilesetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateFilesetInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FileSystemId is a required field
	FileSystemId *string `type:"string" json:",omitempty" required:"true"`

	// FilesetName is a required field
	FilesetName *string `type:"string" json:",omitempty" required:"true"`

	// FilesetPath is a required field
	FilesetPath *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateFilesetInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateFilesetInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateFilesetInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateFilesetInput"}
	if s.FileSystemId == nil {
		invalidParams.Add(request.NewErrParamRequired("FileSystemId"))
	}
	if s.FilesetName == nil {
		invalidParams.Add(request.NewErrParamRequired("FilesetName"))
	}
	if s.FilesetPath == nil {
		invalidParams.Add(request.NewErrParamRequired("FilesetPath"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFileSystemId sets the FileSystemId field's value.
func (s *CreateFilesetInput) SetFileSystemId(v string) *CreateFilesetInput {
	s.FileSystemId = &v
	return s
}

// SetFilesetName sets the FilesetName field's value.
func (s *CreateFilesetInput) SetFilesetName(v string) *CreateFilesetInput {
	s.FilesetName = &v
	return s
}

// SetFilesetPath sets the FilesetPath field's value.
func (s *CreateFilesetInput) SetFilesetPath(v string) *CreateFilesetInput {
	s.FilesetPath = &v
	return s
}

type CreateFilesetOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	FilesetId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateFilesetOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateFilesetOutput) GoString() string {
	return s.String()
}

// SetFilesetId sets the FilesetId field's value.
func (s *CreateFilesetOutput) SetFilesetId(v string) *CreateFilesetOutput {
	s.FilesetId = &v
	return s
}
