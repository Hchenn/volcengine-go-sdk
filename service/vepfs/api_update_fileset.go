// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vepfs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateFilesetCommon = "UpdateFileset"

// UpdateFilesetCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateFilesetCommon operation. The "output" return
// value will be populated with the UpdateFilesetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateFilesetCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateFilesetCommon Send returns without error.
//
// See UpdateFilesetCommon for more information on using the UpdateFilesetCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateFilesetCommonRequest method.
//    req, resp := client.UpdateFilesetCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEPFS) UpdateFilesetCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateFilesetCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateFilesetCommon API operation for VEPFS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEPFS's
// API operation UpdateFilesetCommon for usage and error information.
func (c *VEPFS) UpdateFilesetCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateFilesetCommonRequest(input)
	return out, req.Send()
}

// UpdateFilesetCommonWithContext is the same as UpdateFilesetCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateFilesetCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEPFS) UpdateFilesetCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateFilesetCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateFileset = "UpdateFileset"

// UpdateFilesetRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateFileset operation. The "output" return
// value will be populated with the UpdateFilesetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateFilesetCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateFilesetCommon Send returns without error.
//
// See UpdateFileset for more information on using the UpdateFileset
// API call, and error handling.
//
//    // Example sending a request using the UpdateFilesetRequest method.
//    req, resp := client.UpdateFilesetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEPFS) UpdateFilesetRequest(input *UpdateFilesetInput) (req *request.Request, output *UpdateFilesetOutput) {
	op := &request.Operation{
		Name:       opUpdateFileset,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateFilesetInput{}
	}

	output = &UpdateFilesetOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateFileset API operation for VEPFS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEPFS's
// API operation UpdateFileset for usage and error information.
func (c *VEPFS) UpdateFileset(input *UpdateFilesetInput) (*UpdateFilesetOutput, error) {
	req, out := c.UpdateFilesetRequest(input)
	return out, req.Send()
}

// UpdateFilesetWithContext is the same as UpdateFileset with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateFileset for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEPFS) UpdateFilesetWithContext(ctx volcengine.Context, input *UpdateFilesetInput, opts ...request.Option) (*UpdateFilesetOutput, error) {
	req, out := c.UpdateFilesetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateFilesetInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FileSystemId is a required field
	FileSystemId *string `type:"string" json:",omitempty" required:"true"`

	// FilesetId is a required field
	FilesetId *string `type:"string" json:",omitempty" required:"true"`

	FilesetName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateFilesetInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFilesetInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateFilesetInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateFilesetInput"}
	if s.FileSystemId == nil {
		invalidParams.Add(request.NewErrParamRequired("FileSystemId"))
	}
	if s.FilesetId == nil {
		invalidParams.Add(request.NewErrParamRequired("FilesetId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFileSystemId sets the FileSystemId field's value.
func (s *UpdateFilesetInput) SetFileSystemId(v string) *UpdateFilesetInput {
	s.FileSystemId = &v
	return s
}

// SetFilesetId sets the FilesetId field's value.
func (s *UpdateFilesetInput) SetFilesetId(v string) *UpdateFilesetInput {
	s.FilesetId = &v
	return s
}

// SetFilesetName sets the FilesetName field's value.
func (s *UpdateFilesetInput) SetFilesetName(v string) *UpdateFilesetInput {
	s.FilesetName = &v
	return s
}

type UpdateFilesetOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateFilesetOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFilesetOutput) GoString() string {
	return s.String()
}
