// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vepfs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opConfigDataFlowBandwidthCommon = "ConfigDataFlowBandwidth"

// ConfigDataFlowBandwidthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ConfigDataFlowBandwidthCommon operation. The "output" return
// value will be populated with the ConfigDataFlowBandwidthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ConfigDataFlowBandwidthCommon Request to send the API call to the service.
// the "output" return value is not valid until after ConfigDataFlowBandwidthCommon Send returns without error.
//
// See ConfigDataFlowBandwidthCommon for more information on using the ConfigDataFlowBandwidthCommon
// API call, and error handling.
//
//    // Example sending a request using the ConfigDataFlowBandwidthCommonRequest method.
//    req, resp := client.ConfigDataFlowBandwidthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEPFS) ConfigDataFlowBandwidthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opConfigDataFlowBandwidthCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ConfigDataFlowBandwidthCommon API operation for VEPFS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEPFS's
// API operation ConfigDataFlowBandwidthCommon for usage and error information.
func (c *VEPFS) ConfigDataFlowBandwidthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ConfigDataFlowBandwidthCommonRequest(input)
	return out, req.Send()
}

// ConfigDataFlowBandwidthCommonWithContext is the same as ConfigDataFlowBandwidthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ConfigDataFlowBandwidthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEPFS) ConfigDataFlowBandwidthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ConfigDataFlowBandwidthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opConfigDataFlowBandwidth = "ConfigDataFlowBandwidth"

// ConfigDataFlowBandwidthRequest generates a "volcengine/request.Request" representing the
// client's request for the ConfigDataFlowBandwidth operation. The "output" return
// value will be populated with the ConfigDataFlowBandwidthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ConfigDataFlowBandwidthCommon Request to send the API call to the service.
// the "output" return value is not valid until after ConfigDataFlowBandwidthCommon Send returns without error.
//
// See ConfigDataFlowBandwidth for more information on using the ConfigDataFlowBandwidth
// API call, and error handling.
//
//    // Example sending a request using the ConfigDataFlowBandwidthRequest method.
//    req, resp := client.ConfigDataFlowBandwidthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEPFS) ConfigDataFlowBandwidthRequest(input *ConfigDataFlowBandwidthInput) (req *request.Request, output *ConfigDataFlowBandwidthOutput) {
	op := &request.Operation{
		Name:       opConfigDataFlowBandwidth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ConfigDataFlowBandwidthInput{}
	}

	output = &ConfigDataFlowBandwidthOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ConfigDataFlowBandwidth API operation for VEPFS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEPFS's
// API operation ConfigDataFlowBandwidth for usage and error information.
func (c *VEPFS) ConfigDataFlowBandwidth(input *ConfigDataFlowBandwidthInput) (*ConfigDataFlowBandwidthOutput, error) {
	req, out := c.ConfigDataFlowBandwidthRequest(input)
	return out, req.Send()
}

// ConfigDataFlowBandwidthWithContext is the same as ConfigDataFlowBandwidth with the addition of
// the ability to pass a context and additional request options.
//
// See ConfigDataFlowBandwidth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEPFS) ConfigDataFlowBandwidthWithContext(ctx volcengine.Context, input *ConfigDataFlowBandwidthInput, opts ...request.Option) (*ConfigDataFlowBandwidthOutput, error) {
	req, out := c.ConfigDataFlowBandwidthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConfigDataFlowBandwidthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Bandwidth is a required field
	Bandwidth *int32 `type:"int32" json:",omitempty" required:"true"`

	// FileSystemId is a required field
	FileSystemId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ConfigDataFlowBandwidthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigDataFlowBandwidthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ConfigDataFlowBandwidthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ConfigDataFlowBandwidthInput"}
	if s.Bandwidth == nil {
		invalidParams.Add(request.NewErrParamRequired("Bandwidth"))
	}
	if s.FileSystemId == nil {
		invalidParams.Add(request.NewErrParamRequired("FileSystemId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidth sets the Bandwidth field's value.
func (s *ConfigDataFlowBandwidthInput) SetBandwidth(v int32) *ConfigDataFlowBandwidthInput {
	s.Bandwidth = &v
	return s
}

// SetFileSystemId sets the FileSystemId field's value.
func (s *ConfigDataFlowBandwidthInput) SetFileSystemId(v string) *ConfigDataFlowBandwidthInput {
	s.FileSystemId = &v
	return s
}

type ConfigDataFlowBandwidthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	OrderNO *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ConfigDataFlowBandwidthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigDataFlowBandwidthOutput) GoString() string {
	return s.String()
}

// SetOrderNO sets the OrderNO field's value.
func (s *ConfigDataFlowBandwidthOutput) SetOrderNO(v string) *ConfigDataFlowBandwidthOutput {
	s.OrderNO = &v
	return s
}
