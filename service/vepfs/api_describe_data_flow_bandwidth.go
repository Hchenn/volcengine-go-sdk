// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vepfs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDataFlowBandwidthCommon = "DescribeDataFlowBandwidth"

// DescribeDataFlowBandwidthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDataFlowBandwidthCommon operation. The "output" return
// value will be populated with the DescribeDataFlowBandwidthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDataFlowBandwidthCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDataFlowBandwidthCommon Send returns without error.
//
// See DescribeDataFlowBandwidthCommon for more information on using the DescribeDataFlowBandwidthCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDataFlowBandwidthCommonRequest method.
//    req, resp := client.DescribeDataFlowBandwidthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEPFS) DescribeDataFlowBandwidthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDataFlowBandwidthCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDataFlowBandwidthCommon API operation for VEPFS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEPFS's
// API operation DescribeDataFlowBandwidthCommon for usage and error information.
func (c *VEPFS) DescribeDataFlowBandwidthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDataFlowBandwidthCommonRequest(input)
	return out, req.Send()
}

// DescribeDataFlowBandwidthCommonWithContext is the same as DescribeDataFlowBandwidthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDataFlowBandwidthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEPFS) DescribeDataFlowBandwidthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDataFlowBandwidthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDataFlowBandwidth = "DescribeDataFlowBandwidth"

// DescribeDataFlowBandwidthRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDataFlowBandwidth operation. The "output" return
// value will be populated with the DescribeDataFlowBandwidthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDataFlowBandwidthCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDataFlowBandwidthCommon Send returns without error.
//
// See DescribeDataFlowBandwidth for more information on using the DescribeDataFlowBandwidth
// API call, and error handling.
//
//    // Example sending a request using the DescribeDataFlowBandwidthRequest method.
//    req, resp := client.DescribeDataFlowBandwidthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEPFS) DescribeDataFlowBandwidthRequest(input *DescribeDataFlowBandwidthInput) (req *request.Request, output *DescribeDataFlowBandwidthOutput) {
	op := &request.Operation{
		Name:       opDescribeDataFlowBandwidth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDataFlowBandwidthInput{}
	}

	output = &DescribeDataFlowBandwidthOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDataFlowBandwidth API operation for VEPFS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEPFS's
// API operation DescribeDataFlowBandwidth for usage and error information.
func (c *VEPFS) DescribeDataFlowBandwidth(input *DescribeDataFlowBandwidthInput) (*DescribeDataFlowBandwidthOutput, error) {
	req, out := c.DescribeDataFlowBandwidthRequest(input)
	return out, req.Send()
}

// DescribeDataFlowBandwidthWithContext is the same as DescribeDataFlowBandwidth with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDataFlowBandwidth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEPFS) DescribeDataFlowBandwidthWithContext(ctx volcengine.Context, input *DescribeDataFlowBandwidthInput, opts ...request.Option) (*DescribeDataFlowBandwidthOutput, error) {
	req, out := c.DescribeDataFlowBandwidthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeDataFlowBandwidthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FileSystemId is a required field
	FileSystemId *string `type:"string" json:",omitempty" required:"true"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDataFlowBandwidthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDataFlowBandwidthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDataFlowBandwidthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDataFlowBandwidthInput"}
	if s.FileSystemId == nil {
		invalidParams.Add(request.NewErrParamRequired("FileSystemId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFileSystemId sets the FileSystemId field's value.
func (s *DescribeDataFlowBandwidthInput) SetFileSystemId(v string) *DescribeDataFlowBandwidthInput {
	s.FileSystemId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDataFlowBandwidthInput) SetPageNumber(v int32) *DescribeDataFlowBandwidthInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDataFlowBandwidthInput) SetPageSize(v int32) *DescribeDataFlowBandwidthInput {
	s.PageSize = &v
	return s
}

type DescribeDataFlowBandwidthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Bandwidth *int32 `type:"int32" json:",omitempty"`

	BandwidthMax *int32 `type:"int32" json:",omitempty"`

	BandwidthMin *int32 `type:"int32" json:",omitempty"`

	BandwidthPerNode *int32 `type:"int32" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	FileSystemId *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDataFlowBandwidthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDataFlowBandwidthOutput) GoString() string {
	return s.String()
}

// SetBandwidth sets the Bandwidth field's value.
func (s *DescribeDataFlowBandwidthOutput) SetBandwidth(v int32) *DescribeDataFlowBandwidthOutput {
	s.Bandwidth = &v
	return s
}

// SetBandwidthMax sets the BandwidthMax field's value.
func (s *DescribeDataFlowBandwidthOutput) SetBandwidthMax(v int32) *DescribeDataFlowBandwidthOutput {
	s.BandwidthMax = &v
	return s
}

// SetBandwidthMin sets the BandwidthMin field's value.
func (s *DescribeDataFlowBandwidthOutput) SetBandwidthMin(v int32) *DescribeDataFlowBandwidthOutput {
	s.BandwidthMin = &v
	return s
}

// SetBandwidthPerNode sets the BandwidthPerNode field's value.
func (s *DescribeDataFlowBandwidthOutput) SetBandwidthPerNode(v int32) *DescribeDataFlowBandwidthOutput {
	s.BandwidthPerNode = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *DescribeDataFlowBandwidthOutput) SetCreateTime(v string) *DescribeDataFlowBandwidthOutput {
	s.CreateTime = &v
	return s
}

// SetFileSystemId sets the FileSystemId field's value.
func (s *DescribeDataFlowBandwidthOutput) SetFileSystemId(v string) *DescribeDataFlowBandwidthOutput {
	s.FileSystemId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeDataFlowBandwidthOutput) SetStatus(v string) *DescribeDataFlowBandwidthOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeDataFlowBandwidthOutput) SetUpdateTime(v string) *DescribeDataFlowBandwidthOutput {
	s.UpdateTime = &v
	return s
}
