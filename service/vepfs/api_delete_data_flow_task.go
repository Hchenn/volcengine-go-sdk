// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vepfs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteDataFlowTaskCommon = "DeleteDataFlowTask"

// DeleteDataFlowTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteDataFlowTaskCommon operation. The "output" return
// value will be populated with the DeleteDataFlowTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDataFlowTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDataFlowTaskCommon Send returns without error.
//
// See DeleteDataFlowTaskCommon for more information on using the DeleteDataFlowTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDataFlowTaskCommonRequest method.
//    req, resp := client.DeleteDataFlowTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEPFS) DeleteDataFlowTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDataFlowTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDataFlowTaskCommon API operation for VEPFS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEPFS's
// API operation DeleteDataFlowTaskCommon for usage and error information.
func (c *VEPFS) DeleteDataFlowTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDataFlowTaskCommonRequest(input)
	return out, req.Send()
}

// DeleteDataFlowTaskCommonWithContext is the same as DeleteDataFlowTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDataFlowTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEPFS) DeleteDataFlowTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDataFlowTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDataFlowTask = "DeleteDataFlowTask"

// DeleteDataFlowTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteDataFlowTask operation. The "output" return
// value will be populated with the DeleteDataFlowTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDataFlowTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDataFlowTaskCommon Send returns without error.
//
// See DeleteDataFlowTask for more information on using the DeleteDataFlowTask
// API call, and error handling.
//
//    // Example sending a request using the DeleteDataFlowTaskRequest method.
//    req, resp := client.DeleteDataFlowTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEPFS) DeleteDataFlowTaskRequest(input *DeleteDataFlowTaskInput) (req *request.Request, output *DeleteDataFlowTaskOutput) {
	op := &request.Operation{
		Name:       opDeleteDataFlowTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDataFlowTaskInput{}
	}

	output = &DeleteDataFlowTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDataFlowTask API operation for VEPFS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEPFS's
// API operation DeleteDataFlowTask for usage and error information.
func (c *VEPFS) DeleteDataFlowTask(input *DeleteDataFlowTaskInput) (*DeleteDataFlowTaskOutput, error) {
	req, out := c.DeleteDataFlowTaskRequest(input)
	return out, req.Send()
}

// DeleteDataFlowTaskWithContext is the same as DeleteDataFlowTask with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDataFlowTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEPFS) DeleteDataFlowTaskWithContext(ctx volcengine.Context, input *DeleteDataFlowTaskInput, opts ...request.Option) (*DeleteDataFlowTaskOutput, error) {
	req, out := c.DeleteDataFlowTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteDataFlowTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// DataFlowTaskId is a required field
	DataFlowTaskId *string `type:"string" json:",omitempty" required:"true"`

	// FileSystemId is a required field
	FileSystemId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteDataFlowTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDataFlowTaskInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteDataFlowTaskInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteDataFlowTaskInput"}
	if s.DataFlowTaskId == nil {
		invalidParams.Add(request.NewErrParamRequired("DataFlowTaskId"))
	}
	if s.FileSystemId == nil {
		invalidParams.Add(request.NewErrParamRequired("FileSystemId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDataFlowTaskId sets the DataFlowTaskId field's value.
func (s *DeleteDataFlowTaskInput) SetDataFlowTaskId(v string) *DeleteDataFlowTaskInput {
	s.DataFlowTaskId = &v
	return s
}

// SetFileSystemId sets the FileSystemId field's value.
func (s *DeleteDataFlowTaskInput) SetFileSystemId(v string) *DeleteDataFlowTaskInput {
	s.FileSystemId = &v
	return s
}

type DeleteDataFlowTaskOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteDataFlowTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDataFlowTaskOutput) GoString() string {
	return s.String()
}
