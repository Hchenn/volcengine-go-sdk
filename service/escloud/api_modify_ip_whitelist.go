// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package escloud

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyIpWhitelistCommon = "ModifyIpWhitelist"

// ModifyIpWhitelistCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyIpWhitelistCommon operation. The "output" return
// value will be populated with the ModifyIpWhitelistCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyIpWhitelistCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyIpWhitelistCommon Send returns without error.
//
// See ModifyIpWhitelistCommon for more information on using the ModifyIpWhitelistCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyIpWhitelistCommonRequest method.
//    req, resp := client.ModifyIpWhitelistCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ESCLOUD) ModifyIpWhitelistCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyIpWhitelistCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyIpWhitelistCommon API operation for ESCLOUD.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ESCLOUD's
// API operation ModifyIpWhitelistCommon for usage and error information.
func (c *ESCLOUD) ModifyIpWhitelistCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyIpWhitelistCommonRequest(input)
	return out, req.Send()
}

// ModifyIpWhitelistCommonWithContext is the same as ModifyIpWhitelistCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyIpWhitelistCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ESCLOUD) ModifyIpWhitelistCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyIpWhitelistCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyIpWhitelist = "ModifyIpWhitelist"

// ModifyIpWhitelistRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyIpWhitelist operation. The "output" return
// value will be populated with the ModifyIpWhitelistCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyIpWhitelistCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyIpWhitelistCommon Send returns without error.
//
// See ModifyIpWhitelist for more information on using the ModifyIpWhitelist
// API call, and error handling.
//
//    // Example sending a request using the ModifyIpWhitelistRequest method.
//    req, resp := client.ModifyIpWhitelistRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ESCLOUD) ModifyIpWhitelistRequest(input *ModifyIpWhitelistInput) (req *request.Request, output *ModifyIpWhitelistOutput) {
	op := &request.Operation{
		Name:       opModifyIpWhitelist,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyIpWhitelistInput{}
	}

	output = &ModifyIpWhitelistOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyIpWhitelist API operation for ESCLOUD.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ESCLOUD's
// API operation ModifyIpWhitelist for usage and error information.
func (c *ESCLOUD) ModifyIpWhitelist(input *ModifyIpWhitelistInput) (*ModifyIpWhitelistOutput, error) {
	req, out := c.ModifyIpWhitelistRequest(input)
	return out, req.Send()
}

// ModifyIpWhitelistWithContext is the same as ModifyIpWhitelist with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyIpWhitelist for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ESCLOUD) ModifyIpWhitelistWithContext(ctx volcengine.Context, input *ModifyIpWhitelistInput, opts ...request.Option) (*ModifyIpWhitelistOutput, error) {
	req, out := c.ModifyIpWhitelistRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyIpWhitelistInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Component is a required field
	Component *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// IpList is a required field
	IpList *string `type:"string" json:",omitempty" required:"true"`

	// Type is a required field
	Type *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyIpWhitelistInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyIpWhitelistInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyIpWhitelistInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyIpWhitelistInput"}
	if s.Component == nil {
		invalidParams.Add(request.NewErrParamRequired("Component"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.IpList == nil {
		invalidParams.Add(request.NewErrParamRequired("IpList"))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetComponent sets the Component field's value.
func (s *ModifyIpWhitelistInput) SetComponent(v string) *ModifyIpWhitelistInput {
	s.Component = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyIpWhitelistInput) SetInstanceId(v string) *ModifyIpWhitelistInput {
	s.InstanceId = &v
	return s
}

// SetIpList sets the IpList field's value.
func (s *ModifyIpWhitelistInput) SetIpList(v string) *ModifyIpWhitelistInput {
	s.IpList = &v
	return s
}

// SetType sets the Type field's value.
func (s *ModifyIpWhitelistInput) SetType(v string) *ModifyIpWhitelistInput {
	s.Type = &v
	return s
}

type ModifyIpWhitelistOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ModifyIpWhitelistOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyIpWhitelistOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *ModifyIpWhitelistOutput) SetMessage(v string) *ModifyIpWhitelistOutput {
	s.Message = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ModifyIpWhitelistOutput) SetStatus(v string) *ModifyIpWhitelistOutput {
	s.Status = &v
	return s
}
