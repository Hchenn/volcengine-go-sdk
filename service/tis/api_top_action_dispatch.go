// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package tis

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opTopActionDispatchCommon = "TopActionDispatch"

// TopActionDispatchCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the TopActionDispatchCommon operation. The "output" return
// value will be populated with the TopActionDispatchCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TopActionDispatchCommon Request to send the API call to the service.
// the "output" return value is not valid until after TopActionDispatchCommon Send returns without error.
//
// See TopActionDispatchCommon for more information on using the TopActionDispatchCommon
// API call, and error handling.
//
//    // Example sending a request using the TopActionDispatchCommonRequest method.
//    req, resp := client.TopActionDispatchCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TIS) TopActionDispatchCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opTopActionDispatchCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TopActionDispatchCommon API operation for TIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TIS's
// API operation TopActionDispatchCommon for usage and error information.
func (c *TIS) TopActionDispatchCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.TopActionDispatchCommonRequest(input)
	return out, req.Send()
}

// TopActionDispatchCommonWithContext is the same as TopActionDispatchCommon with the addition of
// the ability to pass a context and additional request options.
//
// See TopActionDispatchCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TIS) TopActionDispatchCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.TopActionDispatchCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opTopActionDispatch = "TopActionDispatch"

// TopActionDispatchRequest generates a "volcengine/request.Request" representing the
// client's request for the TopActionDispatch operation. The "output" return
// value will be populated with the TopActionDispatchCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TopActionDispatchCommon Request to send the API call to the service.
// the "output" return value is not valid until after TopActionDispatchCommon Send returns without error.
//
// See TopActionDispatch for more information on using the TopActionDispatch
// API call, and error handling.
//
//    // Example sending a request using the TopActionDispatchRequest method.
//    req, resp := client.TopActionDispatchRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TIS) TopActionDispatchRequest(input *TopActionDispatchInput) (req *request.Request, output *TopActionDispatchOutput) {
	op := &request.Operation{
		Name:       opTopActionDispatch,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TopActionDispatchInput{}
	}

	output = &TopActionDispatchOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TopActionDispatch API operation for TIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TIS's
// API operation TopActionDispatch for usage and error information.
func (c *TIS) TopActionDispatch(input *TopActionDispatchInput) (*TopActionDispatchOutput, error) {
	req, out := c.TopActionDispatchRequest(input)
	return out, req.Send()
}

// TopActionDispatchWithContext is the same as TopActionDispatch with the addition of
// the ability to pass a context and additional request options.
//
// See TopActionDispatch for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TIS) TopActionDispatchWithContext(ctx volcengine.Context, input *TopActionDispatchInput, opts ...request.Option) (*TopActionDispatchOutput, error) {
	req, out := c.TopActionDispatchRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TopActionDispatchInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ActionName is a required field
	ActionName *string `type:"string" json:",omitempty" required:"true"`

	// RequestJson is a required field
	RequestJson *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s TopActionDispatchInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TopActionDispatchInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TopActionDispatchInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TopActionDispatchInput"}
	if s.ActionName == nil {
		invalidParams.Add(request.NewErrParamRequired("ActionName"))
	}
	if s.RequestJson == nil {
		invalidParams.Add(request.NewErrParamRequired("RequestJson"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetActionName sets the ActionName field's value.
func (s *TopActionDispatchInput) SetActionName(v string) *TopActionDispatchInput {
	s.ActionName = &v
	return s
}

// SetRequestJson sets the RequestJson field's value.
func (s *TopActionDispatchInput) SetRequestJson(v string) *TopActionDispatchInput {
	s.RequestJson = &v
	return s
}

type TopActionDispatchOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ResponseJson *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TopActionDispatchOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TopActionDispatchOutput) GoString() string {
	return s.String()
}

// SetResponseJson sets the ResponseJson field's value.
func (s *TopActionDispatchOutput) SetResponseJson(v string) *TopActionDispatchOutput {
	s.ResponseJson = &v
	return s
}
