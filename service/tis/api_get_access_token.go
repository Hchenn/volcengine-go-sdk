// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package tis

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetAccessTokenCommon = "GetAccessToken"

// GetAccessTokenCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetAccessTokenCommon operation. The "output" return
// value will be populated with the GetAccessTokenCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetAccessTokenCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetAccessTokenCommon Send returns without error.
//
// See GetAccessTokenCommon for more information on using the GetAccessTokenCommon
// API call, and error handling.
//
//    // Example sending a request using the GetAccessTokenCommonRequest method.
//    req, resp := client.GetAccessTokenCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TIS) GetAccessTokenCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetAccessTokenCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetAccessTokenCommon API operation for TIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TIS's
// API operation GetAccessTokenCommon for usage and error information.
func (c *TIS) GetAccessTokenCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetAccessTokenCommonRequest(input)
	return out, req.Send()
}

// GetAccessTokenCommonWithContext is the same as GetAccessTokenCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetAccessTokenCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TIS) GetAccessTokenCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetAccessTokenCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetAccessToken = "GetAccessToken"

// GetAccessTokenRequest generates a "volcengine/request.Request" representing the
// client's request for the GetAccessToken operation. The "output" return
// value will be populated with the GetAccessTokenCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetAccessTokenCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetAccessTokenCommon Send returns without error.
//
// See GetAccessToken for more information on using the GetAccessToken
// API call, and error handling.
//
//    // Example sending a request using the GetAccessTokenRequest method.
//    req, resp := client.GetAccessTokenRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TIS) GetAccessTokenRequest(input *GetAccessTokenInput) (req *request.Request, output *GetAccessTokenOutput) {
	op := &request.Operation{
		Name:       opGetAccessToken,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetAccessTokenInput{}
	}

	output = &GetAccessTokenOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetAccessToken API operation for TIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TIS's
// API operation GetAccessToken for usage and error information.
func (c *TIS) GetAccessToken(input *GetAccessTokenInput) (*GetAccessTokenOutput, error) {
	req, out := c.GetAccessTokenRequest(input)
	return out, req.Send()
}

// GetAccessTokenWithContext is the same as GetAccessToken with the addition of
// the ability to pass a context and additional request options.
//
// See GetAccessToken for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TIS) GetAccessTokenWithContext(ctx volcengine.Context, input *GetAccessTokenInput, opts ...request.Option) (*GetAccessTokenOutput, error) {
	req, out := c.GetAccessTokenRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetAccessTokenInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AppId is a required field
	AppId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetAccessTokenInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetAccessTokenInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetAccessTokenInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetAccessTokenInput"}
	if s.AppId == nil {
		invalidParams.Add(request.NewErrParamRequired("AppId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAppId sets the AppId field's value.
func (s *GetAccessTokenInput) SetAppId(v string) *GetAccessTokenInput {
	s.AppId = &v
	return s
}

type GetAccessTokenOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AccessToken *string `type:"string" json:",omitempty"`

	ExpireTime *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s GetAccessTokenOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetAccessTokenOutput) GoString() string {
	return s.String()
}

// SetAccessToken sets the AccessToken field's value.
func (s *GetAccessTokenOutput) SetAccessToken(v string) *GetAccessTokenOutput {
	s.AccessToken = &v
	return s
}

// SetExpireTime sets the ExpireTime field's value.
func (s *GetAccessTokenOutput) SetExpireTime(v int64) *GetAccessTokenOutput {
	s.ExpireTime = &v
	return s
}
