// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateOIDCProviderCommon = "CreateOIDCProvider"

// CreateOIDCProviderCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateOIDCProviderCommon operation. The "output" return
// value will be populated with the CreateOIDCProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateOIDCProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateOIDCProviderCommon Send returns without error.
//
// See CreateOIDCProviderCommon for more information on using the CreateOIDCProviderCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateOIDCProviderCommonRequest method.
//    req, resp := client.CreateOIDCProviderCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) CreateOIDCProviderCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateOIDCProviderCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateOIDCProviderCommon API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation CreateOIDCProviderCommon for usage and error information.
func (c *IAM) CreateOIDCProviderCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateOIDCProviderCommonRequest(input)
	return out, req.Send()
}

// CreateOIDCProviderCommonWithContext is the same as CreateOIDCProviderCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateOIDCProviderCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) CreateOIDCProviderCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateOIDCProviderCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateOIDCProvider = "CreateOIDCProvider"

// CreateOIDCProviderRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateOIDCProvider operation. The "output" return
// value will be populated with the CreateOIDCProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateOIDCProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateOIDCProviderCommon Send returns without error.
//
// See CreateOIDCProvider for more information on using the CreateOIDCProvider
// API call, and error handling.
//
//    // Example sending a request using the CreateOIDCProviderRequest method.
//    req, resp := client.CreateOIDCProviderRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) CreateOIDCProviderRequest(input *CreateOIDCProviderInput) (req *request.Request, output *CreateOIDCProviderOutput) {
	op := &request.Operation{
		Name:       opCreateOIDCProvider,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateOIDCProviderInput{}
	}

	output = &CreateOIDCProviderOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateOIDCProvider API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation CreateOIDCProvider for usage and error information.
func (c *IAM) CreateOIDCProvider(input *CreateOIDCProviderInput) (*CreateOIDCProviderOutput, error) {
	req, out := c.CreateOIDCProviderRequest(input)
	return out, req.Send()
}

// CreateOIDCProviderWithContext is the same as CreateOIDCProvider with the addition of
// the ability to pass a context and additional request options.
//
// See CreateOIDCProvider for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) CreateOIDCProviderWithContext(ctx volcengine.Context, input *CreateOIDCProviderInput, opts ...request.Option) (*CreateOIDCProviderOutput, error) {
	req, out := c.CreateOIDCProviderRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateOIDCProviderInput struct {
	_ struct{} `type:"structure"`

	// ClientIDs is a required field
	ClientIDs []*string `type:"list" required:"true"`

	Description *string `type:"string"`

	IssuanceLimitTime *int32 `type:"int32"`

	// IssuerURL is a required field
	IssuerURL *string `type:"string" required:"true"`

	// OIDCProviderName is a required field
	OIDCProviderName *string `type:"string" required:"true"`

	// Thumbprints is a required field
	Thumbprints []*string `type:"list" required:"true"`
}

// String returns the string representation
func (s CreateOIDCProviderInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateOIDCProviderInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateOIDCProviderInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateOIDCProviderInput"}
	if s.ClientIDs == nil {
		invalidParams.Add(request.NewErrParamRequired("ClientIDs"))
	}
	if s.IssuerURL == nil {
		invalidParams.Add(request.NewErrParamRequired("IssuerURL"))
	}
	if s.OIDCProviderName == nil {
		invalidParams.Add(request.NewErrParamRequired("OIDCProviderName"))
	}
	if s.Thumbprints == nil {
		invalidParams.Add(request.NewErrParamRequired("Thumbprints"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientIDs sets the ClientIDs field's value.
func (s *CreateOIDCProviderInput) SetClientIDs(v []*string) *CreateOIDCProviderInput {
	s.ClientIDs = v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateOIDCProviderInput) SetDescription(v string) *CreateOIDCProviderInput {
	s.Description = &v
	return s
}

// SetIssuanceLimitTime sets the IssuanceLimitTime field's value.
func (s *CreateOIDCProviderInput) SetIssuanceLimitTime(v int32) *CreateOIDCProviderInput {
	s.IssuanceLimitTime = &v
	return s
}

// SetIssuerURL sets the IssuerURL field's value.
func (s *CreateOIDCProviderInput) SetIssuerURL(v string) *CreateOIDCProviderInput {
	s.IssuerURL = &v
	return s
}

// SetOIDCProviderName sets the OIDCProviderName field's value.
func (s *CreateOIDCProviderInput) SetOIDCProviderName(v string) *CreateOIDCProviderInput {
	s.OIDCProviderName = &v
	return s
}

// SetThumbprints sets the Thumbprints field's value.
func (s *CreateOIDCProviderInput) SetThumbprints(v []*string) *CreateOIDCProviderInput {
	s.Thumbprints = v
	return s
}

type CreateOIDCProviderOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	CreateDate *string `type:"string"`

	Description *string `type:"string"`

	OIDCProviderName *string `type:"string"`

	Trn *string `type:"string"`

	UpdateDate *string `type:"string"`
}

// String returns the string representation
func (s CreateOIDCProviderOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateOIDCProviderOutput) GoString() string {
	return s.String()
}

// SetCreateDate sets the CreateDate field's value.
func (s *CreateOIDCProviderOutput) SetCreateDate(v string) *CreateOIDCProviderOutput {
	s.CreateDate = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateOIDCProviderOutput) SetDescription(v string) *CreateOIDCProviderOutput {
	s.Description = &v
	return s
}

// SetOIDCProviderName sets the OIDCProviderName field's value.
func (s *CreateOIDCProviderOutput) SetOIDCProviderName(v string) *CreateOIDCProviderOutput {
	s.OIDCProviderName = &v
	return s
}

// SetTrn sets the Trn field's value.
func (s *CreateOIDCProviderOutput) SetTrn(v string) *CreateOIDCProviderOutput {
	s.Trn = &v
	return s
}

// SetUpdateDate sets the UpdateDate field's value.
func (s *CreateOIDCProviderOutput) SetUpdateDate(v string) *CreateOIDCProviderOutput {
	s.UpdateDate = &v
	return s
}
