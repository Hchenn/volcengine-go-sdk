// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListEntitiesForPolicyCommon = "ListEntitiesForPolicy"

// ListEntitiesForPolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListEntitiesForPolicyCommon operation. The "output" return
// value will be populated with the ListEntitiesForPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListEntitiesForPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListEntitiesForPolicyCommon Send returns without error.
//
// See ListEntitiesForPolicyCommon for more information on using the ListEntitiesForPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the ListEntitiesForPolicyCommonRequest method.
//    req, resp := client.ListEntitiesForPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) ListEntitiesForPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListEntitiesForPolicyCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListEntitiesForPolicyCommon API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation ListEntitiesForPolicyCommon for usage and error information.
func (c *IAM) ListEntitiesForPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListEntitiesForPolicyCommonRequest(input)
	return out, req.Send()
}

// ListEntitiesForPolicyCommonWithContext is the same as ListEntitiesForPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListEntitiesForPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) ListEntitiesForPolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListEntitiesForPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListEntitiesForPolicy = "ListEntitiesForPolicy"

// ListEntitiesForPolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the ListEntitiesForPolicy operation. The "output" return
// value will be populated with the ListEntitiesForPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListEntitiesForPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListEntitiesForPolicyCommon Send returns without error.
//
// See ListEntitiesForPolicy for more information on using the ListEntitiesForPolicy
// API call, and error handling.
//
//    // Example sending a request using the ListEntitiesForPolicyRequest method.
//    req, resp := client.ListEntitiesForPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) ListEntitiesForPolicyRequest(input *ListEntitiesForPolicyInput) (req *request.Request, output *ListEntitiesForPolicyOutput) {
	op := &request.Operation{
		Name:       opListEntitiesForPolicy,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListEntitiesForPolicyInput{}
	}

	output = &ListEntitiesForPolicyOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListEntitiesForPolicy API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation ListEntitiesForPolicy for usage and error information.
func (c *IAM) ListEntitiesForPolicy(input *ListEntitiesForPolicyInput) (*ListEntitiesForPolicyOutput, error) {
	req, out := c.ListEntitiesForPolicyRequest(input)
	return out, req.Send()
}

// ListEntitiesForPolicyWithContext is the same as ListEntitiesForPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See ListEntitiesForPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) ListEntitiesForPolicyWithContext(ctx volcengine.Context, input *ListEntitiesForPolicyInput, opts ...request.Option) (*ListEntitiesForPolicyOutput, error) {
	req, out := c.ListEntitiesForPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListEntitiesForPolicyInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ListEntitiesForPolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListEntitiesForPolicyInput) GoString() string {
	return s.String()
}

type ListEntitiesForPolicyOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ResponseMetadata *interface{} `type:"interface"`
}

// String returns the string representation
func (s ListEntitiesForPolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListEntitiesForPolicyOutput) GoString() string {
	return s.String()
}

// SetResponseMetadata sets the ResponseMetadata field's value.
func (s *ListEntitiesForPolicyOutput) SetResponseMetadata(v interface{}) *ListEntitiesForPolicyOutput {
	s.ResponseMetadata = &v
	return s
}
