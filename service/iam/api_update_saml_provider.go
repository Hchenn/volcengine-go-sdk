// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateSAMLProviderCommon = "UpdateSAMLProvider"

// UpdateSAMLProviderCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateSAMLProviderCommon operation. The "output" return
// value will be populated with the UpdateSAMLProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateSAMLProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateSAMLProviderCommon Send returns without error.
//
// See UpdateSAMLProviderCommon for more information on using the UpdateSAMLProviderCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateSAMLProviderCommonRequest method.
//    req, resp := client.UpdateSAMLProviderCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) UpdateSAMLProviderCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateSAMLProviderCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateSAMLProviderCommon API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation UpdateSAMLProviderCommon for usage and error information.
func (c *IAM) UpdateSAMLProviderCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateSAMLProviderCommonRequest(input)
	return out, req.Send()
}

// UpdateSAMLProviderCommonWithContext is the same as UpdateSAMLProviderCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateSAMLProviderCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) UpdateSAMLProviderCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateSAMLProviderCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateSAMLProvider = "UpdateSAMLProvider"

// UpdateSAMLProviderRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateSAMLProvider operation. The "output" return
// value will be populated with the UpdateSAMLProviderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateSAMLProviderCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateSAMLProviderCommon Send returns without error.
//
// See UpdateSAMLProvider for more information on using the UpdateSAMLProvider
// API call, and error handling.
//
//    // Example sending a request using the UpdateSAMLProviderRequest method.
//    req, resp := client.UpdateSAMLProviderRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) UpdateSAMLProviderRequest(input *UpdateSAMLProviderInput) (req *request.Request, output *UpdateSAMLProviderOutput) {
	op := &request.Operation{
		Name:       opUpdateSAMLProvider,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateSAMLProviderInput{}
	}

	output = &UpdateSAMLProviderOutput{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateSAMLProvider API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation UpdateSAMLProvider for usage and error information.
func (c *IAM) UpdateSAMLProvider(input *UpdateSAMLProviderInput) (*UpdateSAMLProviderOutput, error) {
	req, out := c.UpdateSAMLProviderRequest(input)
	return out, req.Send()
}

// UpdateSAMLProviderWithContext is the same as UpdateSAMLProvider with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateSAMLProvider for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) UpdateSAMLProviderWithContext(ctx volcengine.Context, input *UpdateSAMLProviderInput, opts ...request.Option) (*UpdateSAMLProviderOutput, error) {
	req, out := c.UpdateSAMLProviderRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateSAMLProviderInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s UpdateSAMLProviderInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSAMLProviderInput) GoString() string {
	return s.String()
}

type UpdateSAMLProviderOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ResponseMetadata *interface{} `type:"interface"`
}

// String returns the string representation
func (s UpdateSAMLProviderOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSAMLProviderOutput) GoString() string {
	return s.String()
}

// SetResponseMetadata sets the ResponseMetadata field's value.
func (s *UpdateSAMLProviderOutput) SetResponseMetadata(v interface{}) *UpdateSAMLProviderOutput {
	s.ResponseMetadata = &v
	return s
}
