// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetSecurityContactCommon = "GetSecurityContact"

// GetSecurityContactCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetSecurityContactCommon operation. The "output" return
// value will be populated with the GetSecurityContactCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetSecurityContactCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetSecurityContactCommon Send returns without error.
//
// See GetSecurityContactCommon for more information on using the GetSecurityContactCommon
// API call, and error handling.
//
//    // Example sending a request using the GetSecurityContactCommonRequest method.
//    req, resp := client.GetSecurityContactCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) GetSecurityContactCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetSecurityContactCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetSecurityContactCommon API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation GetSecurityContactCommon for usage and error information.
func (c *IAM) GetSecurityContactCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetSecurityContactCommonRequest(input)
	return out, req.Send()
}

// GetSecurityContactCommonWithContext is the same as GetSecurityContactCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetSecurityContactCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) GetSecurityContactCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetSecurityContactCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetSecurityContact = "GetSecurityContact"

// GetSecurityContactRequest generates a "volcengine/request.Request" representing the
// client's request for the GetSecurityContact operation. The "output" return
// value will be populated with the GetSecurityContactCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetSecurityContactCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetSecurityContactCommon Send returns without error.
//
// See GetSecurityContact for more information on using the GetSecurityContact
// API call, and error handling.
//
//    // Example sending a request using the GetSecurityContactRequest method.
//    req, resp := client.GetSecurityContactRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) GetSecurityContactRequest(input *GetSecurityContactInput) (req *request.Request, output *GetSecurityContactOutput) {
	op := &request.Operation{
		Name:       opGetSecurityContact,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetSecurityContactInput{}
	}

	output = &GetSecurityContactOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetSecurityContact API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation GetSecurityContact for usage and error information.
func (c *IAM) GetSecurityContact(input *GetSecurityContactInput) (*GetSecurityContactOutput, error) {
	req, out := c.GetSecurityContactRequest(input)
	return out, req.Send()
}

// GetSecurityContactWithContext is the same as GetSecurityContact with the addition of
// the ability to pass a context and additional request options.
//
// See GetSecurityContact for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) GetSecurityContactWithContext(ctx volcengine.Context, input *GetSecurityContactInput, opts ...request.Option) (*GetSecurityContactOutput, error) {
	req, out := c.GetSecurityContactRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetSecurityContactInput struct {
	_ struct{} `type:"structure"`

	// UserName is a required field
	UserName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GetSecurityContactInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetSecurityContactInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetSecurityContactInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetSecurityContactInput"}
	if s.UserName == nil {
		invalidParams.Add(request.NewErrParamRequired("UserName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUserName sets the UserName field's value.
func (s *GetSecurityContactInput) SetUserName(v string) *GetSecurityContactInput {
	s.UserName = &v
	return s
}

type GetSecurityContactOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Email *string `type:"string"`

	EmailIsVerify *bool `type:"boolean"`

	MobilePhone *string `type:"string"`

	MobilePhoneIsVerify *bool `type:"boolean"`

	NewSecureContactInfo *NewSecureContactInfoForGetSecurityContactOutput `type:"structure"`
}

// String returns the string representation
func (s GetSecurityContactOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetSecurityContactOutput) GoString() string {
	return s.String()
}

// SetEmail sets the Email field's value.
func (s *GetSecurityContactOutput) SetEmail(v string) *GetSecurityContactOutput {
	s.Email = &v
	return s
}

// SetEmailIsVerify sets the EmailIsVerify field's value.
func (s *GetSecurityContactOutput) SetEmailIsVerify(v bool) *GetSecurityContactOutput {
	s.EmailIsVerify = &v
	return s
}

// SetMobilePhone sets the MobilePhone field's value.
func (s *GetSecurityContactOutput) SetMobilePhone(v string) *GetSecurityContactOutput {
	s.MobilePhone = &v
	return s
}

// SetMobilePhoneIsVerify sets the MobilePhoneIsVerify field's value.
func (s *GetSecurityContactOutput) SetMobilePhoneIsVerify(v bool) *GetSecurityContactOutput {
	s.MobilePhoneIsVerify = &v
	return s
}

// SetNewSecureContactInfo sets the NewSecureContactInfo field's value.
func (s *GetSecurityContactOutput) SetNewSecureContactInfo(v *NewSecureContactInfoForGetSecurityContactOutput) *GetSecurityContactOutput {
	s.NewSecureContactInfo = v
	return s
}

type NewSecureContactInfoForGetSecurityContactOutput struct {
	_ struct{} `type:"structure"`

	Email *string `type:"string"`

	Mobile *string `type:"string"`
}

// String returns the string representation
func (s NewSecureContactInfoForGetSecurityContactOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NewSecureContactInfoForGetSecurityContactOutput) GoString() string {
	return s.String()
}

// SetEmail sets the Email field's value.
func (s *NewSecureContactInfoForGetSecurityContactOutput) SetEmail(v string) *NewSecureContactInfoForGetSecurityContactOutput {
	s.Email = &v
	return s
}

// SetMobile sets the Mobile field's value.
func (s *NewSecureContactInfoForGetSecurityContactOutput) SetMobile(v string) *NewSecureContactInfoForGetSecurityContactOutput {
	s.Mobile = &v
	return s
}
