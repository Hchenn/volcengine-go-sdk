// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRecoverAccessKeyCommon = "RecoverAccessKey"

// RecoverAccessKeyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RecoverAccessKeyCommon operation. The "output" return
// value will be populated with the RecoverAccessKeyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RecoverAccessKeyCommon Request to send the API call to the service.
// the "output" return value is not valid until after RecoverAccessKeyCommon Send returns without error.
//
// See RecoverAccessKeyCommon for more information on using the RecoverAccessKeyCommon
// API call, and error handling.
//
//    // Example sending a request using the RecoverAccessKeyCommonRequest method.
//    req, resp := client.RecoverAccessKeyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) RecoverAccessKeyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRecoverAccessKeyCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RecoverAccessKeyCommon API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation RecoverAccessKeyCommon for usage and error information.
func (c *IAM) RecoverAccessKeyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RecoverAccessKeyCommonRequest(input)
	return out, req.Send()
}

// RecoverAccessKeyCommonWithContext is the same as RecoverAccessKeyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RecoverAccessKeyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) RecoverAccessKeyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RecoverAccessKeyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRecoverAccessKey = "RecoverAccessKey"

// RecoverAccessKeyRequest generates a "volcengine/request.Request" representing the
// client's request for the RecoverAccessKey operation. The "output" return
// value will be populated with the RecoverAccessKeyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RecoverAccessKeyCommon Request to send the API call to the service.
// the "output" return value is not valid until after RecoverAccessKeyCommon Send returns without error.
//
// See RecoverAccessKey for more information on using the RecoverAccessKey
// API call, and error handling.
//
//    // Example sending a request using the RecoverAccessKeyRequest method.
//    req, resp := client.RecoverAccessKeyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) RecoverAccessKeyRequest(input *RecoverAccessKeyInput) (req *request.Request, output *RecoverAccessKeyOutput) {
	op := &request.Operation{
		Name:       opRecoverAccessKey,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RecoverAccessKeyInput{}
	}

	output = &RecoverAccessKeyOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RecoverAccessKey API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation RecoverAccessKey for usage and error information.
func (c *IAM) RecoverAccessKey(input *RecoverAccessKeyInput) (*RecoverAccessKeyOutput, error) {
	req, out := c.RecoverAccessKeyRequest(input)
	return out, req.Send()
}

// RecoverAccessKeyWithContext is the same as RecoverAccessKey with the addition of
// the ability to pass a context and additional request options.
//
// See RecoverAccessKey for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) RecoverAccessKeyWithContext(ctx volcengine.Context, input *RecoverAccessKeyInput, opts ...request.Option) (*RecoverAccessKeyOutput, error) {
	req, out := c.RecoverAccessKeyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RecoverAccessKeyInput struct {
	_ struct{} `type:"structure"`

	// AccessKeyId is a required field
	AccessKeyId *string `type:"string" required:"true"`

	// OwnerType is a required field
	OwnerType *string `type:"string" required:"true" enum:"EnumOfOwnerTypeForRecoverAccessKeyInput"`

	// UserName is a required field
	UserName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RecoverAccessKeyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RecoverAccessKeyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RecoverAccessKeyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RecoverAccessKeyInput"}
	if s.AccessKeyId == nil {
		invalidParams.Add(request.NewErrParamRequired("AccessKeyId"))
	}
	if s.OwnerType == nil {
		invalidParams.Add(request.NewErrParamRequired("OwnerType"))
	}
	if s.UserName == nil {
		invalidParams.Add(request.NewErrParamRequired("UserName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccessKeyId sets the AccessKeyId field's value.
func (s *RecoverAccessKeyInput) SetAccessKeyId(v string) *RecoverAccessKeyInput {
	s.AccessKeyId = &v
	return s
}

// SetOwnerType sets the OwnerType field's value.
func (s *RecoverAccessKeyInput) SetOwnerType(v string) *RecoverAccessKeyInput {
	s.OwnerType = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *RecoverAccessKeyInput) SetUserName(v string) *RecoverAccessKeyInput {
	s.UserName = &v
	return s
}

type RecoverAccessKeyOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s RecoverAccessKeyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RecoverAccessKeyOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfOwnerTypeForRecoverAccessKeyInputUser is a EnumOfOwnerTypeForRecoverAccessKeyInput enum value
	EnumOfOwnerTypeForRecoverAccessKeyInputUser = "User"

	// EnumOfOwnerTypeForRecoverAccessKeyInputRoot is a EnumOfOwnerTypeForRecoverAccessKeyInput enum value
	EnumOfOwnerTypeForRecoverAccessKeyInputRoot = "Root"
)
