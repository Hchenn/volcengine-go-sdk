// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package waf

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAddProhibitionWhiteCommon = "AddProhibitionWhite"

// AddProhibitionWhiteCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AddProhibitionWhiteCommon operation. The "output" return
// value will be populated with the AddProhibitionWhiteCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddProhibitionWhiteCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddProhibitionWhiteCommon Send returns without error.
//
// See AddProhibitionWhiteCommon for more information on using the AddProhibitionWhiteCommon
// API call, and error handling.
//
//    // Example sending a request using the AddProhibitionWhiteCommonRequest method.
//    req, resp := client.AddProhibitionWhiteCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) AddProhibitionWhiteCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddProhibitionWhiteCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddProhibitionWhiteCommon API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation AddProhibitionWhiteCommon for usage and error information.
func (c *WAF) AddProhibitionWhiteCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddProhibitionWhiteCommonRequest(input)
	return out, req.Send()
}

// AddProhibitionWhiteCommonWithContext is the same as AddProhibitionWhiteCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AddProhibitionWhiteCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) AddProhibitionWhiteCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddProhibitionWhiteCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddProhibitionWhite = "AddProhibitionWhite"

// AddProhibitionWhiteRequest generates a "volcengine/request.Request" representing the
// client's request for the AddProhibitionWhite operation. The "output" return
// value will be populated with the AddProhibitionWhiteCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddProhibitionWhiteCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddProhibitionWhiteCommon Send returns without error.
//
// See AddProhibitionWhite for more information on using the AddProhibitionWhite
// API call, and error handling.
//
//    // Example sending a request using the AddProhibitionWhiteRequest method.
//    req, resp := client.AddProhibitionWhiteRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) AddProhibitionWhiteRequest(input *AddProhibitionWhiteInput) (req *request.Request, output *AddProhibitionWhiteOutput) {
	op := &request.Operation{
		Name:       opAddProhibitionWhite,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddProhibitionWhiteInput{}
	}

	output = &AddProhibitionWhiteOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddProhibitionWhite API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation AddProhibitionWhite for usage and error information.
func (c *WAF) AddProhibitionWhite(input *AddProhibitionWhiteInput) (*AddProhibitionWhiteOutput, error) {
	req, out := c.AddProhibitionWhiteRequest(input)
	return out, req.Send()
}

// AddProhibitionWhiteWithContext is the same as AddProhibitionWhite with the addition of
// the ability to pass a context and additional request options.
//
// See AddProhibitionWhite for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) AddProhibitionWhiteWithContext(ctx volcengine.Context, input *AddProhibitionWhiteInput, opts ...request.Option) (*AddProhibitionWhiteOutput, error) {
	req, out := c.AddProhibitionWhiteRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddProhibitionWhiteInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Host is a required field
	Host *string `type:"string" json:",omitempty" required:"true"`

	IpList []*string `type:"list" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AddProhibitionWhiteInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddProhibitionWhiteInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddProhibitionWhiteInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AddProhibitionWhiteInput"}
	if s.Host == nil {
		invalidParams.Add(request.NewErrParamRequired("Host"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetHost sets the Host field's value.
func (s *AddProhibitionWhiteInput) SetHost(v string) *AddProhibitionWhiteInput {
	s.Host = &v
	return s
}

// SetIpList sets the IpList field's value.
func (s *AddProhibitionWhiteInput) SetIpList(v []*string) *AddProhibitionWhiteInput {
	s.IpList = v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *AddProhibitionWhiteInput) SetProjectName(v string) *AddProhibitionWhiteInput {
	s.ProjectName = &v
	return s
}

type AddProhibitionWhiteOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	IpFailed []*IpFailedForAddProhibitionWhiteOutput `type:"list" json:",omitempty"`

	IpSuccess []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s AddProhibitionWhiteOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddProhibitionWhiteOutput) GoString() string {
	return s.String()
}

// SetIpFailed sets the IpFailed field's value.
func (s *AddProhibitionWhiteOutput) SetIpFailed(v []*IpFailedForAddProhibitionWhiteOutput) *AddProhibitionWhiteOutput {
	s.IpFailed = v
	return s
}

// SetIpSuccess sets the IpSuccess field's value.
func (s *AddProhibitionWhiteOutput) SetIpSuccess(v []*string) *AddProhibitionWhiteOutput {
	s.IpSuccess = v
	return s
}

type IpFailedForAddProhibitionWhiteOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Ip *string `type:"string" json:",omitempty"`

	Reason *string `type:"string" json:",omitempty"`

	RuleName *string `type:"string" json:",omitempty"`

	RuleTag *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s IpFailedForAddProhibitionWhiteOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IpFailedForAddProhibitionWhiteOutput) GoString() string {
	return s.String()
}

// SetIp sets the Ip field's value.
func (s *IpFailedForAddProhibitionWhiteOutput) SetIp(v string) *IpFailedForAddProhibitionWhiteOutput {
	s.Ip = &v
	return s
}

// SetReason sets the Reason field's value.
func (s *IpFailedForAddProhibitionWhiteOutput) SetReason(v string) *IpFailedForAddProhibitionWhiteOutput {
	s.Reason = &v
	return s
}

// SetRuleName sets the RuleName field's value.
func (s *IpFailedForAddProhibitionWhiteOutput) SetRuleName(v string) *IpFailedForAddProhibitionWhiteOutput {
	s.RuleName = &v
	return s
}

// SetRuleTag sets the RuleTag field's value.
func (s *IpFailedForAddProhibitionWhiteOutput) SetRuleTag(v string) *IpFailedForAddProhibitionWhiteOutput {
	s.RuleTag = &v
	return s
}
