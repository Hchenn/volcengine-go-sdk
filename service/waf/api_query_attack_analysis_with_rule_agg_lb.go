// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package waf

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQueryAttackAnalysisWithRuleAggLbCommon = "QueryAttackAnalysisWithRuleAggLb"

// QueryAttackAnalysisWithRuleAggLbCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAttackAnalysisWithRuleAggLbCommon operation. The "output" return
// value will be populated with the QueryAttackAnalysisWithRuleAggLbCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAttackAnalysisWithRuleAggLbCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryAttackAnalysisWithRuleAggLbCommon Send returns without error.
//
// See QueryAttackAnalysisWithRuleAggLbCommon for more information on using the QueryAttackAnalysisWithRuleAggLbCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryAttackAnalysisWithRuleAggLbCommonRequest method.
//    req, resp := client.QueryAttackAnalysisWithRuleAggLbCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) QueryAttackAnalysisWithRuleAggLbCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryAttackAnalysisWithRuleAggLbCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryAttackAnalysisWithRuleAggLbCommon API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation QueryAttackAnalysisWithRuleAggLbCommon for usage and error information.
func (c *WAF) QueryAttackAnalysisWithRuleAggLbCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryAttackAnalysisWithRuleAggLbCommonRequest(input)
	return out, req.Send()
}

// QueryAttackAnalysisWithRuleAggLbCommonWithContext is the same as QueryAttackAnalysisWithRuleAggLbCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAttackAnalysisWithRuleAggLbCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) QueryAttackAnalysisWithRuleAggLbCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryAttackAnalysisWithRuleAggLbCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryAttackAnalysisWithRuleAggLb = "QueryAttackAnalysisWithRuleAggLb"

// QueryAttackAnalysisWithRuleAggLbRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAttackAnalysisWithRuleAggLb operation. The "output" return
// value will be populated with the QueryAttackAnalysisWithRuleAggLbCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAttackAnalysisWithRuleAggLbCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryAttackAnalysisWithRuleAggLbCommon Send returns without error.
//
// See QueryAttackAnalysisWithRuleAggLb for more information on using the QueryAttackAnalysisWithRuleAggLb
// API call, and error handling.
//
//    // Example sending a request using the QueryAttackAnalysisWithRuleAggLbRequest method.
//    req, resp := client.QueryAttackAnalysisWithRuleAggLbRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) QueryAttackAnalysisWithRuleAggLbRequest(input *QueryAttackAnalysisWithRuleAggLbInput) (req *request.Request, output *QueryAttackAnalysisWithRuleAggLbOutput) {
	op := &request.Operation{
		Name:       opQueryAttackAnalysisWithRuleAggLb,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryAttackAnalysisWithRuleAggLbInput{}
	}

	output = &QueryAttackAnalysisWithRuleAggLbOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryAttackAnalysisWithRuleAggLb API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation QueryAttackAnalysisWithRuleAggLb for usage and error information.
func (c *WAF) QueryAttackAnalysisWithRuleAggLb(input *QueryAttackAnalysisWithRuleAggLbInput) (*QueryAttackAnalysisWithRuleAggLbOutput, error) {
	req, out := c.QueryAttackAnalysisWithRuleAggLbRequest(input)
	return out, req.Send()
}

// QueryAttackAnalysisWithRuleAggLbWithContext is the same as QueryAttackAnalysisWithRuleAggLb with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAttackAnalysisWithRuleAggLb for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) QueryAttackAnalysisWithRuleAggLbWithContext(ctx volcengine.Context, input *QueryAttackAnalysisWithRuleAggLbInput, opts ...request.Option) (*QueryAttackAnalysisWithRuleAggLbOutput, error) {
	req, out := c.QueryAttackAnalysisWithRuleAggLbRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForQueryAttackAnalysisWithRuleAggLbOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Count *float64 `type:"float" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	RuleTags []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ItemForQueryAttackAnalysisWithRuleAggLbOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForQueryAttackAnalysisWithRuleAggLbOutput) GoString() string {
	return s.String()
}

// SetCount sets the Count field's value.
func (s *ItemForQueryAttackAnalysisWithRuleAggLbOutput) SetCount(v float64) *ItemForQueryAttackAnalysisWithRuleAggLbOutput {
	s.Count = &v
	return s
}

// SetKey sets the Key field's value.
func (s *ItemForQueryAttackAnalysisWithRuleAggLbOutput) SetKey(v string) *ItemForQueryAttackAnalysisWithRuleAggLbOutput {
	s.Key = &v
	return s
}

// SetRuleTags sets the RuleTags field's value.
func (s *ItemForQueryAttackAnalysisWithRuleAggLbOutput) SetRuleTags(v []*string) *ItemForQueryAttackAnalysisWithRuleAggLbOutput {
	s.RuleTags = v
	return s
}

type QueryAttackAnalysisWithRuleAggLbInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AnalysisKey *string `type:"string" json:",omitempty"`

	// EndTime is a required field
	EndTime *int32 `type:"int32" json:",omitempty" required:"true"`

	Host *string `type:"string" json:",omitempty"`

	Plugins []*string `type:"list" json:",omitempty"`

	// StartTime is a required field
	StartTime *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QueryAttackAnalysisWithRuleAggLbInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAttackAnalysisWithRuleAggLbInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryAttackAnalysisWithRuleAggLbInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryAttackAnalysisWithRuleAggLbInput"}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAnalysisKey sets the AnalysisKey field's value.
func (s *QueryAttackAnalysisWithRuleAggLbInput) SetAnalysisKey(v string) *QueryAttackAnalysisWithRuleAggLbInput {
	s.AnalysisKey = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *QueryAttackAnalysisWithRuleAggLbInput) SetEndTime(v int32) *QueryAttackAnalysisWithRuleAggLbInput {
	s.EndTime = &v
	return s
}

// SetHost sets the Host field's value.
func (s *QueryAttackAnalysisWithRuleAggLbInput) SetHost(v string) *QueryAttackAnalysisWithRuleAggLbInput {
	s.Host = &v
	return s
}

// SetPlugins sets the Plugins field's value.
func (s *QueryAttackAnalysisWithRuleAggLbInput) SetPlugins(v []*string) *QueryAttackAnalysisWithRuleAggLbInput {
	s.Plugins = v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *QueryAttackAnalysisWithRuleAggLbInput) SetStartTime(v int32) *QueryAttackAnalysisWithRuleAggLbInput {
	s.StartTime = &v
	return s
}

type QueryAttackAnalysisWithRuleAggLbOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForQueryAttackAnalysisWithRuleAggLbOutput `type:"list" json:",omitempty"`

	Total *float64 `type:"float" json:",omitempty"`
}

// String returns the string representation
func (s QueryAttackAnalysisWithRuleAggLbOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAttackAnalysisWithRuleAggLbOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *QueryAttackAnalysisWithRuleAggLbOutput) SetItems(v []*ItemForQueryAttackAnalysisWithRuleAggLbOutput) *QueryAttackAnalysisWithRuleAggLbOutput {
	s.Items = v
	return s
}

// SetTotal sets the Total field's value.
func (s *QueryAttackAnalysisWithRuleAggLbOutput) SetTotal(v float64) *QueryAttackAnalysisWithRuleAggLbOutput {
	s.Total = &v
	return s
}
