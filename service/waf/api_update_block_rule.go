// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package waf

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateBlockRuleCommon = "UpdateBlockRule"

// UpdateBlockRuleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateBlockRuleCommon operation. The "output" return
// value will be populated with the UpdateBlockRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateBlockRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateBlockRuleCommon Send returns without error.
//
// See UpdateBlockRuleCommon for more information on using the UpdateBlockRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateBlockRuleCommonRequest method.
//    req, resp := client.UpdateBlockRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) UpdateBlockRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateBlockRuleCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateBlockRuleCommon API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation UpdateBlockRuleCommon for usage and error information.
func (c *WAF) UpdateBlockRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateBlockRuleCommonRequest(input)
	return out, req.Send()
}

// UpdateBlockRuleCommonWithContext is the same as UpdateBlockRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateBlockRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) UpdateBlockRuleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateBlockRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateBlockRule = "UpdateBlockRule"

// UpdateBlockRuleRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateBlockRule operation. The "output" return
// value will be populated with the UpdateBlockRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateBlockRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateBlockRuleCommon Send returns without error.
//
// See UpdateBlockRule for more information on using the UpdateBlockRule
// API call, and error handling.
//
//    // Example sending a request using the UpdateBlockRuleRequest method.
//    req, resp := client.UpdateBlockRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) UpdateBlockRuleRequest(input *UpdateBlockRuleInput) (req *request.Request, output *UpdateBlockRuleOutput) {
	op := &request.Operation{
		Name:       opUpdateBlockRule,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateBlockRuleInput{}
	}

	output = &UpdateBlockRuleOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateBlockRule API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation UpdateBlockRule for usage and error information.
func (c *WAF) UpdateBlockRule(input *UpdateBlockRuleInput) (*UpdateBlockRuleOutput, error) {
	req, out := c.UpdateBlockRuleRequest(input)
	return out, req.Send()
}

// UpdateBlockRuleWithContext is the same as UpdateBlockRule with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateBlockRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) UpdateBlockRuleWithContext(ctx volcengine.Context, input *UpdateBlockRuleInput, opts ...request.Option) (*UpdateBlockRuleOutput, error) {
	req, out := c.UpdateBlockRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AccurateForUpdateBlockRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccurateRules []*AccurateRuleForUpdateBlockRuleInput `type:"list" json:",omitempty"`

	Logic *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s AccurateForUpdateBlockRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AccurateForUpdateBlockRuleInput) GoString() string {
	return s.String()
}

// SetAccurateRules sets the AccurateRules field's value.
func (s *AccurateForUpdateBlockRuleInput) SetAccurateRules(v []*AccurateRuleForUpdateBlockRuleInput) *AccurateForUpdateBlockRuleInput {
	s.AccurateRules = v
	return s
}

// SetLogic sets the Logic field's value.
func (s *AccurateForUpdateBlockRuleInput) SetLogic(v int32) *AccurateForUpdateBlockRuleInput {
	s.Logic = &v
	return s
}

type AccurateRuleForUpdateBlockRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	HttpObj *string `type:"string" json:",omitempty"`

	ObjType *int32 `type:"int32" json:",omitempty"`

	Opretar *int32 `type:"int32" json:",omitempty"`

	Property *int32 `type:"int32" json:",omitempty"`

	ValueString *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AccurateRuleForUpdateBlockRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AccurateRuleForUpdateBlockRuleInput) GoString() string {
	return s.String()
}

// SetHttpObj sets the HttpObj field's value.
func (s *AccurateRuleForUpdateBlockRuleInput) SetHttpObj(v string) *AccurateRuleForUpdateBlockRuleInput {
	s.HttpObj = &v
	return s
}

// SetObjType sets the ObjType field's value.
func (s *AccurateRuleForUpdateBlockRuleInput) SetObjType(v int32) *AccurateRuleForUpdateBlockRuleInput {
	s.ObjType = &v
	return s
}

// SetOpretar sets the Opretar field's value.
func (s *AccurateRuleForUpdateBlockRuleInput) SetOpretar(v int32) *AccurateRuleForUpdateBlockRuleInput {
	s.Opretar = &v
	return s
}

// SetProperty sets the Property field's value.
func (s *AccurateRuleForUpdateBlockRuleInput) SetProperty(v int32) *AccurateRuleForUpdateBlockRuleInput {
	s.Property = &v
	return s
}

// SetValueString sets the ValueString field's value.
func (s *AccurateRuleForUpdateBlockRuleInput) SetValueString(v string) *AccurateRuleForUpdateBlockRuleInput {
	s.ValueString = &v
	return s
}

type UpdateBlockRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Accurate *AccurateForUpdateBlockRuleInput `type:"structure" json:",omitempty"`

	// Action is a required field
	Action *string `type:"string" json:",omitempty" required:"true"`

	// Advanced is a required field
	Advanced *int32 `type:"int32" json:",omitempty" required:"true"`

	ClientIp *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Enable *int32 `type:"int32" json:",omitempty"`

	// Host is a required field
	Host *string `type:"string" json:",omitempty" required:"true"`

	// Id is a required field
	Id *int32 `type:"int32" json:",omitempty" required:"true"`

	IpAddType *int32 `type:"int32" json:",omitempty"`

	IpGroupId []*int32 `type:"list" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	ProjectName *string `type:"string" json:",omitempty"`

	// Url is a required field
	Url *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateBlockRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateBlockRuleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateBlockRuleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateBlockRuleInput"}
	if s.Action == nil {
		invalidParams.Add(request.NewErrParamRequired("Action"))
	}
	if s.Advanced == nil {
		invalidParams.Add(request.NewErrParamRequired("Advanced"))
	}
	if s.Host == nil {
		invalidParams.Add(request.NewErrParamRequired("Host"))
	}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Url == nil {
		invalidParams.Add(request.NewErrParamRequired("Url"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccurate sets the Accurate field's value.
func (s *UpdateBlockRuleInput) SetAccurate(v *AccurateForUpdateBlockRuleInput) *UpdateBlockRuleInput {
	s.Accurate = v
	return s
}

// SetAction sets the Action field's value.
func (s *UpdateBlockRuleInput) SetAction(v string) *UpdateBlockRuleInput {
	s.Action = &v
	return s
}

// SetAdvanced sets the Advanced field's value.
func (s *UpdateBlockRuleInput) SetAdvanced(v int32) *UpdateBlockRuleInput {
	s.Advanced = &v
	return s
}

// SetClientIp sets the ClientIp field's value.
func (s *UpdateBlockRuleInput) SetClientIp(v string) *UpdateBlockRuleInput {
	s.ClientIp = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *UpdateBlockRuleInput) SetDescription(v string) *UpdateBlockRuleInput {
	s.Description = &v
	return s
}

// SetEnable sets the Enable field's value.
func (s *UpdateBlockRuleInput) SetEnable(v int32) *UpdateBlockRuleInput {
	s.Enable = &v
	return s
}

// SetHost sets the Host field's value.
func (s *UpdateBlockRuleInput) SetHost(v string) *UpdateBlockRuleInput {
	s.Host = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateBlockRuleInput) SetId(v int32) *UpdateBlockRuleInput {
	s.Id = &v
	return s
}

// SetIpAddType sets the IpAddType field's value.
func (s *UpdateBlockRuleInput) SetIpAddType(v int32) *UpdateBlockRuleInput {
	s.IpAddType = &v
	return s
}

// SetIpGroupId sets the IpGroupId field's value.
func (s *UpdateBlockRuleInput) SetIpGroupId(v []*int32) *UpdateBlockRuleInput {
	s.IpGroupId = v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateBlockRuleInput) SetName(v string) *UpdateBlockRuleInput {
	s.Name = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *UpdateBlockRuleInput) SetProjectName(v string) *UpdateBlockRuleInput {
	s.ProjectName = &v
	return s
}

// SetUrl sets the Url field's value.
func (s *UpdateBlockRuleInput) SetUrl(v string) *UpdateBlockRuleInput {
	s.Url = &v
	return s
}

type UpdateBlockRuleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateBlockRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateBlockRuleOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *UpdateBlockRuleOutput) SetId(v string) *UpdateBlockRuleOutput {
	s.Id = &v
	return s
}
