// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package waf

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUploadWafServiceCertificateCommon = "UploadWafServiceCertificate"

// UploadWafServiceCertificateCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UploadWafServiceCertificateCommon operation. The "output" return
// value will be populated with the UploadWafServiceCertificateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UploadWafServiceCertificateCommon Request to send the API call to the service.
// the "output" return value is not valid until after UploadWafServiceCertificateCommon Send returns without error.
//
// See UploadWafServiceCertificateCommon for more information on using the UploadWafServiceCertificateCommon
// API call, and error handling.
//
//    // Example sending a request using the UploadWafServiceCertificateCommonRequest method.
//    req, resp := client.UploadWafServiceCertificateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) UploadWafServiceCertificateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUploadWafServiceCertificateCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UploadWafServiceCertificateCommon API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation UploadWafServiceCertificateCommon for usage and error information.
func (c *WAF) UploadWafServiceCertificateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UploadWafServiceCertificateCommonRequest(input)
	return out, req.Send()
}

// UploadWafServiceCertificateCommonWithContext is the same as UploadWafServiceCertificateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UploadWafServiceCertificateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) UploadWafServiceCertificateCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UploadWafServiceCertificateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUploadWafServiceCertificate = "UploadWafServiceCertificate"

// UploadWafServiceCertificateRequest generates a "volcengine/request.Request" representing the
// client's request for the UploadWafServiceCertificate operation. The "output" return
// value will be populated with the UploadWafServiceCertificateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UploadWafServiceCertificateCommon Request to send the API call to the service.
// the "output" return value is not valid until after UploadWafServiceCertificateCommon Send returns without error.
//
// See UploadWafServiceCertificate for more information on using the UploadWafServiceCertificate
// API call, and error handling.
//
//    // Example sending a request using the UploadWafServiceCertificateRequest method.
//    req, resp := client.UploadWafServiceCertificateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) UploadWafServiceCertificateRequest(input *UploadWafServiceCertificateInput) (req *request.Request, output *UploadWafServiceCertificateOutput) {
	op := &request.Operation{
		Name:       opUploadWafServiceCertificate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UploadWafServiceCertificateInput{}
	}

	output = &UploadWafServiceCertificateOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UploadWafServiceCertificate API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation UploadWafServiceCertificate for usage and error information.
func (c *WAF) UploadWafServiceCertificate(input *UploadWafServiceCertificateInput) (*UploadWafServiceCertificateOutput, error) {
	req, out := c.UploadWafServiceCertificateRequest(input)
	return out, req.Send()
}

// UploadWafServiceCertificateWithContext is the same as UploadWafServiceCertificate with the addition of
// the ability to pass a context and additional request options.
//
// See UploadWafServiceCertificate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) UploadWafServiceCertificateWithContext(ctx volcengine.Context, input *UploadWafServiceCertificateInput, opts ...request.Option) (*UploadWafServiceCertificateOutput, error) {
	req, out := c.UploadWafServiceCertificateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UploadWafServiceCertificateInput struct {
	_ struct{} `type:"structure"`

	// Description is a required field
	Description *string `type:"string" required:"true"`

	// Name is a required field
	Name *string `type:"string" required:"true"`

	// PrivateKey is a required field
	PrivateKey *string `type:"string" required:"true"`

	// PublicKey is a required field
	PublicKey *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UploadWafServiceCertificateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UploadWafServiceCertificateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UploadWafServiceCertificateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UploadWafServiceCertificateInput"}
	if s.Description == nil {
		invalidParams.Add(request.NewErrParamRequired("Description"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.PrivateKey == nil {
		invalidParams.Add(request.NewErrParamRequired("PrivateKey"))
	}
	if s.PublicKey == nil {
		invalidParams.Add(request.NewErrParamRequired("PublicKey"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *UploadWafServiceCertificateInput) SetDescription(v string) *UploadWafServiceCertificateInput {
	s.Description = &v
	return s
}

// SetName sets the Name field's value.
func (s *UploadWafServiceCertificateInput) SetName(v string) *UploadWafServiceCertificateInput {
	s.Name = &v
	return s
}

// SetPrivateKey sets the PrivateKey field's value.
func (s *UploadWafServiceCertificateInput) SetPrivateKey(v string) *UploadWafServiceCertificateInput {
	s.PrivateKey = &v
	return s
}

// SetPublicKey sets the PublicKey field's value.
func (s *UploadWafServiceCertificateInput) SetPublicKey(v string) *UploadWafServiceCertificateInput {
	s.PublicKey = &v
	return s
}

type UploadWafServiceCertificateOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Id *int32 `type:"int32"`
}

// String returns the string representation
func (s UploadWafServiceCertificateOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UploadWafServiceCertificateOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *UploadWafServiceCertificateOutput) SetId(v int32) *UploadWafServiceCertificateOutput {
	s.Id = &v
	return s
}
