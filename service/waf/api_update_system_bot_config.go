// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package waf

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateSystemBotConfigCommon = "UpdateSystemBotConfig"

// UpdateSystemBotConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateSystemBotConfigCommon operation. The "output" return
// value will be populated with the UpdateSystemBotConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateSystemBotConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateSystemBotConfigCommon Send returns without error.
//
// See UpdateSystemBotConfigCommon for more information on using the UpdateSystemBotConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateSystemBotConfigCommonRequest method.
//    req, resp := client.UpdateSystemBotConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) UpdateSystemBotConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateSystemBotConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateSystemBotConfigCommon API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation UpdateSystemBotConfigCommon for usage and error information.
func (c *WAF) UpdateSystemBotConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateSystemBotConfigCommonRequest(input)
	return out, req.Send()
}

// UpdateSystemBotConfigCommonWithContext is the same as UpdateSystemBotConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateSystemBotConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) UpdateSystemBotConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateSystemBotConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateSystemBotConfig = "UpdateSystemBotConfig"

// UpdateSystemBotConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateSystemBotConfig operation. The "output" return
// value will be populated with the UpdateSystemBotConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateSystemBotConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateSystemBotConfigCommon Send returns without error.
//
// See UpdateSystemBotConfig for more information on using the UpdateSystemBotConfig
// API call, and error handling.
//
//    // Example sending a request using the UpdateSystemBotConfigRequest method.
//    req, resp := client.UpdateSystemBotConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) UpdateSystemBotConfigRequest(input *UpdateSystemBotConfigInput) (req *request.Request, output *UpdateSystemBotConfigOutput) {
	op := &request.Operation{
		Name:       opUpdateSystemBotConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateSystemBotConfigInput{}
	}

	output = &UpdateSystemBotConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateSystemBotConfig API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation UpdateSystemBotConfig for usage and error information.
func (c *WAF) UpdateSystemBotConfig(input *UpdateSystemBotConfigInput) (*UpdateSystemBotConfigOutput, error) {
	req, out := c.UpdateSystemBotConfigRequest(input)
	return out, req.Send()
}

// UpdateSystemBotConfigWithContext is the same as UpdateSystemBotConfig with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateSystemBotConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) UpdateSystemBotConfigWithContext(ctx volcengine.Context, input *UpdateSystemBotConfigInput, opts ...request.Option) (*UpdateSystemBotConfigOutput, error) {
	req, out := c.UpdateSystemBotConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateSystemBotConfigInput struct {
	_ struct{} `type:"structure"`

	Action *string `type:"string"`

	// BotType is a required field
	BotType *string `type:"string" required:"true"`

	Enable *int32 `type:"int32"`

	// Host is a required field
	Host *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateSystemBotConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSystemBotConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateSystemBotConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateSystemBotConfigInput"}
	if s.BotType == nil {
		invalidParams.Add(request.NewErrParamRequired("BotType"))
	}
	if s.Host == nil {
		invalidParams.Add(request.NewErrParamRequired("Host"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAction sets the Action field's value.
func (s *UpdateSystemBotConfigInput) SetAction(v string) *UpdateSystemBotConfigInput {
	s.Action = &v
	return s
}

// SetBotType sets the BotType field's value.
func (s *UpdateSystemBotConfigInput) SetBotType(v string) *UpdateSystemBotConfigInput {
	s.BotType = &v
	return s
}

// SetEnable sets the Enable field's value.
func (s *UpdateSystemBotConfigInput) SetEnable(v int32) *UpdateSystemBotConfigInput {
	s.Enable = &v
	return s
}

// SetHost sets the Host field's value.
func (s *UpdateSystemBotConfigInput) SetHost(v string) *UpdateSystemBotConfigInput {
	s.Host = &v
	return s
}

type UpdateSystemBotConfigOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateSystemBotConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSystemBotConfigOutput) GoString() string {
	return s.String()
}
