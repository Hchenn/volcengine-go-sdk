// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package waf

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQueryAttackSecurityEventCommon = "QueryAttackSecurityEvent"

// QueryAttackSecurityEventCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAttackSecurityEventCommon operation. The "output" return
// value will be populated with the QueryAttackSecurityEventCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAttackSecurityEventCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryAttackSecurityEventCommon Send returns without error.
//
// See QueryAttackSecurityEventCommon for more information on using the QueryAttackSecurityEventCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryAttackSecurityEventCommonRequest method.
//    req, resp := client.QueryAttackSecurityEventCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) QueryAttackSecurityEventCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryAttackSecurityEventCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryAttackSecurityEventCommon API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation QueryAttackSecurityEventCommon for usage and error information.
func (c *WAF) QueryAttackSecurityEventCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryAttackSecurityEventCommonRequest(input)
	return out, req.Send()
}

// QueryAttackSecurityEventCommonWithContext is the same as QueryAttackSecurityEventCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAttackSecurityEventCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) QueryAttackSecurityEventCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryAttackSecurityEventCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryAttackSecurityEvent = "QueryAttackSecurityEvent"

// QueryAttackSecurityEventRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAttackSecurityEvent operation. The "output" return
// value will be populated with the QueryAttackSecurityEventCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAttackSecurityEventCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryAttackSecurityEventCommon Send returns without error.
//
// See QueryAttackSecurityEvent for more information on using the QueryAttackSecurityEvent
// API call, and error handling.
//
//    // Example sending a request using the QueryAttackSecurityEventRequest method.
//    req, resp := client.QueryAttackSecurityEventRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) QueryAttackSecurityEventRequest(input *QueryAttackSecurityEventInput) (req *request.Request, output *QueryAttackSecurityEventOutput) {
	op := &request.Operation{
		Name:       opQueryAttackSecurityEvent,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryAttackSecurityEventInput{}
	}

	output = &QueryAttackSecurityEventOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryAttackSecurityEvent API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation QueryAttackSecurityEvent for usage and error information.
func (c *WAF) QueryAttackSecurityEvent(input *QueryAttackSecurityEventInput) (*QueryAttackSecurityEventOutput, error) {
	req, out := c.QueryAttackSecurityEventRequest(input)
	return out, req.Send()
}

// QueryAttackSecurityEventWithContext is the same as QueryAttackSecurityEvent with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAttackSecurityEvent for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) QueryAttackSecurityEventWithContext(ctx volcengine.Context, input *QueryAttackSecurityEventInput, opts ...request.Option) (*QueryAttackSecurityEventOutput, error) {
	req, out := c.QueryAttackSecurityEventRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type QueryAttackSecurityEventInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AllHost *bool `type:"boolean" json:",omitempty"`

	AllHostDetails []*string `type:"list" json:",omitempty"`

	// EndTime is a required field
	EndTime *int32 `type:"int32" json:",omitempty" required:"true"`

	EventType *string `type:"string" json:",omitempty"`

	FilterAll *bool `type:"boolean" json:",omitempty"`

	Host *string `type:"string" json:",omitempty"`

	Ip *string `type:"string" json:",omitempty"`

	// Page is a required field
	Page *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`

	Path *string `type:"string" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	SecurityLevel *string `type:"string" json:",omitempty"`

	SortFlag *string `type:"string" json:",omitempty"`

	// StartTime is a required field
	StartTime *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QueryAttackSecurityEventInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAttackSecurityEventInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryAttackSecurityEventInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryAttackSecurityEventInput"}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.Page == nil {
		invalidParams.Add(request.NewErrParamRequired("Page"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAllHost sets the AllHost field's value.
func (s *QueryAttackSecurityEventInput) SetAllHost(v bool) *QueryAttackSecurityEventInput {
	s.AllHost = &v
	return s
}

// SetAllHostDetails sets the AllHostDetails field's value.
func (s *QueryAttackSecurityEventInput) SetAllHostDetails(v []*string) *QueryAttackSecurityEventInput {
	s.AllHostDetails = v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *QueryAttackSecurityEventInput) SetEndTime(v int32) *QueryAttackSecurityEventInput {
	s.EndTime = &v
	return s
}

// SetEventType sets the EventType field's value.
func (s *QueryAttackSecurityEventInput) SetEventType(v string) *QueryAttackSecurityEventInput {
	s.EventType = &v
	return s
}

// SetFilterAll sets the FilterAll field's value.
func (s *QueryAttackSecurityEventInput) SetFilterAll(v bool) *QueryAttackSecurityEventInput {
	s.FilterAll = &v
	return s
}

// SetHost sets the Host field's value.
func (s *QueryAttackSecurityEventInput) SetHost(v string) *QueryAttackSecurityEventInput {
	s.Host = &v
	return s
}

// SetIp sets the Ip field's value.
func (s *QueryAttackSecurityEventInput) SetIp(v string) *QueryAttackSecurityEventInput {
	s.Ip = &v
	return s
}

// SetPage sets the Page field's value.
func (s *QueryAttackSecurityEventInput) SetPage(v int32) *QueryAttackSecurityEventInput {
	s.Page = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *QueryAttackSecurityEventInput) SetPageSize(v int32) *QueryAttackSecurityEventInput {
	s.PageSize = &v
	return s
}

// SetPath sets the Path field's value.
func (s *QueryAttackSecurityEventInput) SetPath(v string) *QueryAttackSecurityEventInput {
	s.Path = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *QueryAttackSecurityEventInput) SetProjectName(v string) *QueryAttackSecurityEventInput {
	s.ProjectName = &v
	return s
}

// SetSecurityLevel sets the SecurityLevel field's value.
func (s *QueryAttackSecurityEventInput) SetSecurityLevel(v string) *QueryAttackSecurityEventInput {
	s.SecurityLevel = &v
	return s
}

// SetSortFlag sets the SortFlag field's value.
func (s *QueryAttackSecurityEventInput) SetSortFlag(v string) *QueryAttackSecurityEventInput {
	s.SortFlag = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *QueryAttackSecurityEventInput) SetStartTime(v int32) *QueryAttackSecurityEventInput {
	s.StartTime = &v
	return s
}

type QueryAttackSecurityEventOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AttackCount *int32 `type:"int32" json:",omitempty"`

	Count *int32 `type:"int32" json:",omitempty"`

	CurrentPage *int32 `type:"int32" json:",omitempty"`

	EventEndTime *int32 `type:"int32" json:",omitempty"`

	EventId *string `type:"string" json:",omitempty"`

	EventStartTime *int32 `type:"int32" json:",omitempty"`

	EventType *string `type:"string" json:",omitempty"`

	Host *string `type:"string" json:",omitempty"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	SecurityLevel *string `type:"string" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s QueryAttackSecurityEventOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAttackSecurityEventOutput) GoString() string {
	return s.String()
}

// SetAttackCount sets the AttackCount field's value.
func (s *QueryAttackSecurityEventOutput) SetAttackCount(v int32) *QueryAttackSecurityEventOutput {
	s.AttackCount = &v
	return s
}

// SetCount sets the Count field's value.
func (s *QueryAttackSecurityEventOutput) SetCount(v int32) *QueryAttackSecurityEventOutput {
	s.Count = &v
	return s
}

// SetCurrentPage sets the CurrentPage field's value.
func (s *QueryAttackSecurityEventOutput) SetCurrentPage(v int32) *QueryAttackSecurityEventOutput {
	s.CurrentPage = &v
	return s
}

// SetEventEndTime sets the EventEndTime field's value.
func (s *QueryAttackSecurityEventOutput) SetEventEndTime(v int32) *QueryAttackSecurityEventOutput {
	s.EventEndTime = &v
	return s
}

// SetEventId sets the EventId field's value.
func (s *QueryAttackSecurityEventOutput) SetEventId(v string) *QueryAttackSecurityEventOutput {
	s.EventId = &v
	return s
}

// SetEventStartTime sets the EventStartTime field's value.
func (s *QueryAttackSecurityEventOutput) SetEventStartTime(v int32) *QueryAttackSecurityEventOutput {
	s.EventStartTime = &v
	return s
}

// SetEventType sets the EventType field's value.
func (s *QueryAttackSecurityEventOutput) SetEventType(v string) *QueryAttackSecurityEventOutput {
	s.EventType = &v
	return s
}

// SetHost sets the Host field's value.
func (s *QueryAttackSecurityEventOutput) SetHost(v string) *QueryAttackSecurityEventOutput {
	s.Host = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *QueryAttackSecurityEventOutput) SetPageNumber(v int32) *QueryAttackSecurityEventOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *QueryAttackSecurityEventOutput) SetPageSize(v int32) *QueryAttackSecurityEventOutput {
	s.PageSize = &v
	return s
}

// SetSecurityLevel sets the SecurityLevel field's value.
func (s *QueryAttackSecurityEventOutput) SetSecurityLevel(v string) *QueryAttackSecurityEventOutput {
	s.SecurityLevel = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *QueryAttackSecurityEventOutput) SetTotalCount(v int32) *QueryAttackSecurityEventOutput {
	s.TotalCount = &v
	return s
}
