// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package waf

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetInstanceCtlCommon = "GetInstanceCtl"

// GetInstanceCtlCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetInstanceCtlCommon operation. The "output" return
// value will be populated with the GetInstanceCtlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetInstanceCtlCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetInstanceCtlCommon Send returns without error.
//
// See GetInstanceCtlCommon for more information on using the GetInstanceCtlCommon
// API call, and error handling.
//
//    // Example sending a request using the GetInstanceCtlCommonRequest method.
//    req, resp := client.GetInstanceCtlCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) GetInstanceCtlCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetInstanceCtlCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetInstanceCtlCommon API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation GetInstanceCtlCommon for usage and error information.
func (c *WAF) GetInstanceCtlCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetInstanceCtlCommonRequest(input)
	return out, req.Send()
}

// GetInstanceCtlCommonWithContext is the same as GetInstanceCtlCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetInstanceCtlCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) GetInstanceCtlCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetInstanceCtlCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetInstanceCtl = "GetInstanceCtl"

// GetInstanceCtlRequest generates a "volcengine/request.Request" representing the
// client's request for the GetInstanceCtl operation. The "output" return
// value will be populated with the GetInstanceCtlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetInstanceCtlCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetInstanceCtlCommon Send returns without error.
//
// See GetInstanceCtl for more information on using the GetInstanceCtl
// API call, and error handling.
//
//    // Example sending a request using the GetInstanceCtlRequest method.
//    req, resp := client.GetInstanceCtlRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) GetInstanceCtlRequest(input *GetInstanceCtlInput) (req *request.Request, output *GetInstanceCtlOutput) {
	op := &request.Operation{
		Name:       opGetInstanceCtl,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetInstanceCtlInput{}
	}

	output = &GetInstanceCtlOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetInstanceCtl API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation GetInstanceCtl for usage and error information.
func (c *WAF) GetInstanceCtl(input *GetInstanceCtlInput) (*GetInstanceCtlOutput, error) {
	req, out := c.GetInstanceCtlRequest(input)
	return out, req.Send()
}

// GetInstanceCtlWithContext is the same as GetInstanceCtl with the addition of
// the ability to pass a context and additional request options.
//
// See GetInstanceCtl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) GetInstanceCtlWithContext(ctx volcengine.Context, input *GetInstanceCtlInput, opts ...request.Option) (*GetInstanceCtlOutput, error) {
	req, out := c.GetInstanceCtlRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetInstanceCtlInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	Region *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetInstanceCtlInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstanceCtlInput) GoString() string {
	return s.String()
}

// SetProjectName sets the ProjectName field's value.
func (s *GetInstanceCtlInput) SetProjectName(v string) *GetInstanceCtlInput {
	s.ProjectName = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *GetInstanceCtlInput) SetRegion(v string) *GetInstanceCtlInput {
	s.Region = &v
	return s
}

type GetInstanceCtlOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AllowEnable *int32 `type:"int32" json:",omitempty"`

	BlockEnable *int32 `type:"int32" json:",omitempty"`

	PromptDefenceEnable *int32 `type:"int32" json:",omitempty"`

	Region *string `type:"string" json:",omitempty"`

	TokenConsumeEnable *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s GetInstanceCtlOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstanceCtlOutput) GoString() string {
	return s.String()
}

// SetAllowEnable sets the AllowEnable field's value.
func (s *GetInstanceCtlOutput) SetAllowEnable(v int32) *GetInstanceCtlOutput {
	s.AllowEnable = &v
	return s
}

// SetBlockEnable sets the BlockEnable field's value.
func (s *GetInstanceCtlOutput) SetBlockEnable(v int32) *GetInstanceCtlOutput {
	s.BlockEnable = &v
	return s
}

// SetPromptDefenceEnable sets the PromptDefenceEnable field's value.
func (s *GetInstanceCtlOutput) SetPromptDefenceEnable(v int32) *GetInstanceCtlOutput {
	s.PromptDefenceEnable = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *GetInstanceCtlOutput) SetRegion(v string) *GetInstanceCtlOutput {
	s.Region = &v
	return s
}

// SetTokenConsumeEnable sets the TokenConsumeEnable field's value.
func (s *GetInstanceCtlOutput) SetTokenConsumeEnable(v int32) *GetInstanceCtlOutput {
	s.TokenConsumeEnable = &v
	return s
}
