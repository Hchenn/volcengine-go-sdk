// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package waf

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQueryAttackAnalysisTermsAggLbCommon = "QueryAttackAnalysisTermsAggLb"

// QueryAttackAnalysisTermsAggLbCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAttackAnalysisTermsAggLbCommon operation. The "output" return
// value will be populated with the QueryAttackAnalysisTermsAggLbCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAttackAnalysisTermsAggLbCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryAttackAnalysisTermsAggLbCommon Send returns without error.
//
// See QueryAttackAnalysisTermsAggLbCommon for more information on using the QueryAttackAnalysisTermsAggLbCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryAttackAnalysisTermsAggLbCommonRequest method.
//    req, resp := client.QueryAttackAnalysisTermsAggLbCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) QueryAttackAnalysisTermsAggLbCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryAttackAnalysisTermsAggLbCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryAttackAnalysisTermsAggLbCommon API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation QueryAttackAnalysisTermsAggLbCommon for usage and error information.
func (c *WAF) QueryAttackAnalysisTermsAggLbCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryAttackAnalysisTermsAggLbCommonRequest(input)
	return out, req.Send()
}

// QueryAttackAnalysisTermsAggLbCommonWithContext is the same as QueryAttackAnalysisTermsAggLbCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAttackAnalysisTermsAggLbCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) QueryAttackAnalysisTermsAggLbCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryAttackAnalysisTermsAggLbCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryAttackAnalysisTermsAggLb = "QueryAttackAnalysisTermsAggLb"

// QueryAttackAnalysisTermsAggLbRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAttackAnalysisTermsAggLb operation. The "output" return
// value will be populated with the QueryAttackAnalysisTermsAggLbCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAttackAnalysisTermsAggLbCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryAttackAnalysisTermsAggLbCommon Send returns without error.
//
// See QueryAttackAnalysisTermsAggLb for more information on using the QueryAttackAnalysisTermsAggLb
// API call, and error handling.
//
//    // Example sending a request using the QueryAttackAnalysisTermsAggLbRequest method.
//    req, resp := client.QueryAttackAnalysisTermsAggLbRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) QueryAttackAnalysisTermsAggLbRequest(input *QueryAttackAnalysisTermsAggLbInput) (req *request.Request, output *QueryAttackAnalysisTermsAggLbOutput) {
	op := &request.Operation{
		Name:       opQueryAttackAnalysisTermsAggLb,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryAttackAnalysisTermsAggLbInput{}
	}

	output = &QueryAttackAnalysisTermsAggLbOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryAttackAnalysisTermsAggLb API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation QueryAttackAnalysisTermsAggLb for usage and error information.
func (c *WAF) QueryAttackAnalysisTermsAggLb(input *QueryAttackAnalysisTermsAggLbInput) (*QueryAttackAnalysisTermsAggLbOutput, error) {
	req, out := c.QueryAttackAnalysisTermsAggLbRequest(input)
	return out, req.Send()
}

// QueryAttackAnalysisTermsAggLbWithContext is the same as QueryAttackAnalysisTermsAggLb with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAttackAnalysisTermsAggLb for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) QueryAttackAnalysisTermsAggLbWithContext(ctx volcengine.Context, input *QueryAttackAnalysisTermsAggLbInput, opts ...request.Option) (*QueryAttackAnalysisTermsAggLbOutput, error) {
	req, out := c.QueryAttackAnalysisTermsAggLbRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForQueryAttackAnalysisTermsAggLbOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *float64 `type:"float" json:",omitempty"`
}

// String returns the string representation
func (s ItemForQueryAttackAnalysisTermsAggLbOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForQueryAttackAnalysisTermsAggLbOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *ItemForQueryAttackAnalysisTermsAggLbOutput) SetKey(v string) *ItemForQueryAttackAnalysisTermsAggLbOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *ItemForQueryAttackAnalysisTermsAggLbOutput) SetValue(v float64) *ItemForQueryAttackAnalysisTermsAggLbOutput {
	s.Value = &v
	return s
}

type QueryAttackAnalysisTermsAggLbInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AnalysisKey *string `type:"string" json:",omitempty"`

	// EndTime is a required field
	EndTime *int32 `type:"int32" json:",omitempty" required:"true"`

	Host *string `type:"string" json:",omitempty"`

	Plugins []*string `type:"list" json:",omitempty"`

	// StartTime is a required field
	StartTime *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QueryAttackAnalysisTermsAggLbInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAttackAnalysisTermsAggLbInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryAttackAnalysisTermsAggLbInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryAttackAnalysisTermsAggLbInput"}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAnalysisKey sets the AnalysisKey field's value.
func (s *QueryAttackAnalysisTermsAggLbInput) SetAnalysisKey(v string) *QueryAttackAnalysisTermsAggLbInput {
	s.AnalysisKey = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *QueryAttackAnalysisTermsAggLbInput) SetEndTime(v int32) *QueryAttackAnalysisTermsAggLbInput {
	s.EndTime = &v
	return s
}

// SetHost sets the Host field's value.
func (s *QueryAttackAnalysisTermsAggLbInput) SetHost(v string) *QueryAttackAnalysisTermsAggLbInput {
	s.Host = &v
	return s
}

// SetPlugins sets the Plugins field's value.
func (s *QueryAttackAnalysisTermsAggLbInput) SetPlugins(v []*string) *QueryAttackAnalysisTermsAggLbInput {
	s.Plugins = v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *QueryAttackAnalysisTermsAggLbInput) SetStartTime(v int32) *QueryAttackAnalysisTermsAggLbInput {
	s.StartTime = &v
	return s
}

type QueryAttackAnalysisTermsAggLbOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForQueryAttackAnalysisTermsAggLbOutput `type:"list" json:",omitempty"`

	Total *float64 `type:"float" json:",omitempty"`
}

// String returns the string representation
func (s QueryAttackAnalysisTermsAggLbOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAttackAnalysisTermsAggLbOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *QueryAttackAnalysisTermsAggLbOutput) SetItems(v []*ItemForQueryAttackAnalysisTermsAggLbOutput) *QueryAttackAnalysisTermsAggLbOutput {
	s.Items = v
	return s
}

// SetTotal sets the Total field's value.
func (s *QueryAttackAnalysisTermsAggLbOutput) SetTotal(v float64) *QueryAttackAnalysisTermsAggLbOutput {
	s.Total = &v
	return s
}
