// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package waf

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateInstanceCtlCommon = "UpdateInstanceCtl"

// UpdateInstanceCtlCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateInstanceCtlCommon operation. The "output" return
// value will be populated with the UpdateInstanceCtlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateInstanceCtlCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateInstanceCtlCommon Send returns without error.
//
// See UpdateInstanceCtlCommon for more information on using the UpdateInstanceCtlCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateInstanceCtlCommonRequest method.
//    req, resp := client.UpdateInstanceCtlCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) UpdateInstanceCtlCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateInstanceCtlCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateInstanceCtlCommon API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation UpdateInstanceCtlCommon for usage and error information.
func (c *WAF) UpdateInstanceCtlCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateInstanceCtlCommonRequest(input)
	return out, req.Send()
}

// UpdateInstanceCtlCommonWithContext is the same as UpdateInstanceCtlCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateInstanceCtlCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) UpdateInstanceCtlCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateInstanceCtlCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateInstanceCtl = "UpdateInstanceCtl"

// UpdateInstanceCtlRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateInstanceCtl operation. The "output" return
// value will be populated with the UpdateInstanceCtlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateInstanceCtlCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateInstanceCtlCommon Send returns without error.
//
// See UpdateInstanceCtl for more information on using the UpdateInstanceCtl
// API call, and error handling.
//
//    // Example sending a request using the UpdateInstanceCtlRequest method.
//    req, resp := client.UpdateInstanceCtlRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) UpdateInstanceCtlRequest(input *UpdateInstanceCtlInput) (req *request.Request, output *UpdateInstanceCtlOutput) {
	op := &request.Operation{
		Name:       opUpdateInstanceCtl,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateInstanceCtlInput{}
	}

	output = &UpdateInstanceCtlOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateInstanceCtl API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation UpdateInstanceCtl for usage and error information.
func (c *WAF) UpdateInstanceCtl(input *UpdateInstanceCtlInput) (*UpdateInstanceCtlOutput, error) {
	req, out := c.UpdateInstanceCtlRequest(input)
	return out, req.Send()
}

// UpdateInstanceCtlWithContext is the same as UpdateInstanceCtl with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateInstanceCtl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) UpdateInstanceCtlWithContext(ctx volcengine.Context, input *UpdateInstanceCtlInput, opts ...request.Option) (*UpdateInstanceCtlOutput, error) {
	req, out := c.UpdateInstanceCtlRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateInstanceCtlInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AllowEnable *int32 `type:"int32" json:",omitempty"`

	BlockEnable *int32 `type:"int32" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	// Region is a required field
	Region *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateInstanceCtlInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateInstanceCtlInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateInstanceCtlInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateInstanceCtlInput"}
	if s.Region == nil {
		invalidParams.Add(request.NewErrParamRequired("Region"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAllowEnable sets the AllowEnable field's value.
func (s *UpdateInstanceCtlInput) SetAllowEnable(v int32) *UpdateInstanceCtlInput {
	s.AllowEnable = &v
	return s
}

// SetBlockEnable sets the BlockEnable field's value.
func (s *UpdateInstanceCtlInput) SetBlockEnable(v int32) *UpdateInstanceCtlInput {
	s.BlockEnable = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *UpdateInstanceCtlInput) SetProjectName(v string) *UpdateInstanceCtlInput {
	s.ProjectName = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *UpdateInstanceCtlInput) SetRegion(v string) *UpdateInstanceCtlInput {
	s.Region = &v
	return s
}

type UpdateInstanceCtlOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateInstanceCtlOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateInstanceCtlOutput) GoString() string {
	return s.String()
}
