// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package waf

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAddProhibitionBlackCommon = "AddProhibitionBlack"

// AddProhibitionBlackCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AddProhibitionBlackCommon operation. The "output" return
// value will be populated with the AddProhibitionBlackCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddProhibitionBlackCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddProhibitionBlackCommon Send returns without error.
//
// See AddProhibitionBlackCommon for more information on using the AddProhibitionBlackCommon
// API call, and error handling.
//
//    // Example sending a request using the AddProhibitionBlackCommonRequest method.
//    req, resp := client.AddProhibitionBlackCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) AddProhibitionBlackCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddProhibitionBlackCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddProhibitionBlackCommon API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation AddProhibitionBlackCommon for usage and error information.
func (c *WAF) AddProhibitionBlackCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddProhibitionBlackCommonRequest(input)
	return out, req.Send()
}

// AddProhibitionBlackCommonWithContext is the same as AddProhibitionBlackCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AddProhibitionBlackCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) AddProhibitionBlackCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddProhibitionBlackCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddProhibitionBlack = "AddProhibitionBlack"

// AddProhibitionBlackRequest generates a "volcengine/request.Request" representing the
// client's request for the AddProhibitionBlack operation. The "output" return
// value will be populated with the AddProhibitionBlackCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddProhibitionBlackCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddProhibitionBlackCommon Send returns without error.
//
// See AddProhibitionBlack for more information on using the AddProhibitionBlack
// API call, and error handling.
//
//    // Example sending a request using the AddProhibitionBlackRequest method.
//    req, resp := client.AddProhibitionBlackRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *WAF) AddProhibitionBlackRequest(input *AddProhibitionBlackInput) (req *request.Request, output *AddProhibitionBlackOutput) {
	op := &request.Operation{
		Name:       opAddProhibitionBlack,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddProhibitionBlackInput{}
	}

	output = &AddProhibitionBlackOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddProhibitionBlack API operation for WAF.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for WAF's
// API operation AddProhibitionBlack for usage and error information.
func (c *WAF) AddProhibitionBlack(input *AddProhibitionBlackInput) (*AddProhibitionBlackOutput, error) {
	req, out := c.AddProhibitionBlackRequest(input)
	return out, req.Send()
}

// AddProhibitionBlackWithContext is the same as AddProhibitionBlack with the addition of
// the ability to pass a context and additional request options.
//
// See AddProhibitionBlack for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *WAF) AddProhibitionBlackWithContext(ctx volcengine.Context, input *AddProhibitionBlackInput, opts ...request.Option) (*AddProhibitionBlackOutput, error) {
	req, out := c.AddProhibitionBlackRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddProhibitionBlackInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Host is a required field
	Host *string `type:"string" json:",omitempty" required:"true"`

	IpList []*string `type:"list" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AddProhibitionBlackInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddProhibitionBlackInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddProhibitionBlackInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AddProhibitionBlackInput"}
	if s.Host == nil {
		invalidParams.Add(request.NewErrParamRequired("Host"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetHost sets the Host field's value.
func (s *AddProhibitionBlackInput) SetHost(v string) *AddProhibitionBlackInput {
	s.Host = &v
	return s
}

// SetIpList sets the IpList field's value.
func (s *AddProhibitionBlackInput) SetIpList(v []*string) *AddProhibitionBlackInput {
	s.IpList = v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *AddProhibitionBlackInput) SetProjectName(v string) *AddProhibitionBlackInput {
	s.ProjectName = &v
	return s
}

type AddProhibitionBlackOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	IpFailed []*IpFailedForAddProhibitionBlackOutput `type:"list" json:",omitempty"`

	IpSuccess []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s AddProhibitionBlackOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddProhibitionBlackOutput) GoString() string {
	return s.String()
}

// SetIpFailed sets the IpFailed field's value.
func (s *AddProhibitionBlackOutput) SetIpFailed(v []*IpFailedForAddProhibitionBlackOutput) *AddProhibitionBlackOutput {
	s.IpFailed = v
	return s
}

// SetIpSuccess sets the IpSuccess field's value.
func (s *AddProhibitionBlackOutput) SetIpSuccess(v []*string) *AddProhibitionBlackOutput {
	s.IpSuccess = v
	return s
}

type IpFailedForAddProhibitionBlackOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Ip *string `type:"string" json:",omitempty"`

	Reason *string `type:"string" json:",omitempty"`

	RuleName *string `type:"string" json:",omitempty"`

	RuleTag *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s IpFailedForAddProhibitionBlackOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IpFailedForAddProhibitionBlackOutput) GoString() string {
	return s.String()
}

// SetIp sets the Ip field's value.
func (s *IpFailedForAddProhibitionBlackOutput) SetIp(v string) *IpFailedForAddProhibitionBlackOutput {
	s.Ip = &v
	return s
}

// SetReason sets the Reason field's value.
func (s *IpFailedForAddProhibitionBlackOutput) SetReason(v string) *IpFailedForAddProhibitionBlackOutput {
	s.Reason = &v
	return s
}

// SetRuleName sets the RuleName field's value.
func (s *IpFailedForAddProhibitionBlackOutput) SetRuleName(v string) *IpFailedForAddProhibitionBlackOutput {
	s.RuleName = &v
	return s
}

// SetRuleTag sets the RuleTag field's value.
func (s *IpFailedForAddProhibitionBlackOutput) SetRuleTag(v string) *IpFailedForAddProhibitionBlackOutput {
	s.RuleTag = &v
	return s
}
