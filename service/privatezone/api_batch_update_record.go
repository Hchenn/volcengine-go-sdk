// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBatchUpdateRecordCommon = "BatchUpdateRecord"

// BatchUpdateRecordCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BatchUpdateRecordCommon operation. The "output" return
// value will be populated with the BatchUpdateRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BatchUpdateRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after BatchUpdateRecordCommon Send returns without error.
//
// See BatchUpdateRecordCommon for more information on using the BatchUpdateRecordCommon
// API call, and error handling.
//
//    // Example sending a request using the BatchUpdateRecordCommonRequest method.
//    req, resp := client.BatchUpdateRecordCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) BatchUpdateRecordCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBatchUpdateRecordCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BatchUpdateRecordCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation BatchUpdateRecordCommon for usage and error information.
func (c *PRIVATEZONE) BatchUpdateRecordCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BatchUpdateRecordCommonRequest(input)
	return out, req.Send()
}

// BatchUpdateRecordCommonWithContext is the same as BatchUpdateRecordCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BatchUpdateRecordCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) BatchUpdateRecordCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BatchUpdateRecordCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBatchUpdateRecord = "BatchUpdateRecord"

// BatchUpdateRecordRequest generates a "volcengine/request.Request" representing the
// client's request for the BatchUpdateRecord operation. The "output" return
// value will be populated with the BatchUpdateRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BatchUpdateRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after BatchUpdateRecordCommon Send returns without error.
//
// See BatchUpdateRecord for more information on using the BatchUpdateRecord
// API call, and error handling.
//
//    // Example sending a request using the BatchUpdateRecordRequest method.
//    req, resp := client.BatchUpdateRecordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) BatchUpdateRecordRequest(input *BatchUpdateRecordInput) (req *request.Request, output *BatchUpdateRecordOutput) {
	op := &request.Operation{
		Name:       opBatchUpdateRecord,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BatchUpdateRecordInput{}
	}

	output = &BatchUpdateRecordOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BatchUpdateRecord API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation BatchUpdateRecord for usage and error information.
func (c *PRIVATEZONE) BatchUpdateRecord(input *BatchUpdateRecordInput) (*BatchUpdateRecordOutput, error) {
	req, out := c.BatchUpdateRecordRequest(input)
	return out, req.Send()
}

// BatchUpdateRecordWithContext is the same as BatchUpdateRecord with the addition of
// the ability to pass a context and additional request options.
//
// See BatchUpdateRecord for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) BatchUpdateRecordWithContext(ctx volcengine.Context, input *BatchUpdateRecordInput, opts ...request.Option) (*BatchUpdateRecordOutput, error) {
	req, out := c.BatchUpdateRecordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BatchUpdateRecordInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Records []*RecordForBatchUpdateRecordInput `type:"list" json:",omitempty"`

	// ZID is a required field
	ZID *int64 `type:"int64" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s BatchUpdateRecordInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchUpdateRecordInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *BatchUpdateRecordInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "BatchUpdateRecordInput"}
	if s.ZID == nil {
		invalidParams.Add(request.NewErrParamRequired("ZID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRecords sets the Records field's value.
func (s *BatchUpdateRecordInput) SetRecords(v []*RecordForBatchUpdateRecordInput) *BatchUpdateRecordInput {
	s.Records = v
	return s
}

// SetZID sets the ZID field's value.
func (s *BatchUpdateRecordInput) SetZID(v int64) *BatchUpdateRecordInput {
	s.ZID = &v
	return s
}

type BatchUpdateRecordOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s BatchUpdateRecordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchUpdateRecordOutput) GoString() string {
	return s.String()
}

type RecordForBatchUpdateRecordInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Enable *bool `type:"boolean" json:",omitempty"`

	Host *string `type:"string" json:",omitempty"`

	Line *string `type:"string" json:",omitempty"`

	RecordID *string `type:"string" json:",omitempty"`

	Remark *string `type:"string" json:",omitempty"`

	TTL *int32 `type:"int32" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`

	Weight *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s RecordForBatchUpdateRecordInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RecordForBatchUpdateRecordInput) GoString() string {
	return s.String()
}

// SetEnable sets the Enable field's value.
func (s *RecordForBatchUpdateRecordInput) SetEnable(v bool) *RecordForBatchUpdateRecordInput {
	s.Enable = &v
	return s
}

// SetHost sets the Host field's value.
func (s *RecordForBatchUpdateRecordInput) SetHost(v string) *RecordForBatchUpdateRecordInput {
	s.Host = &v
	return s
}

// SetLine sets the Line field's value.
func (s *RecordForBatchUpdateRecordInput) SetLine(v string) *RecordForBatchUpdateRecordInput {
	s.Line = &v
	return s
}

// SetRecordID sets the RecordID field's value.
func (s *RecordForBatchUpdateRecordInput) SetRecordID(v string) *RecordForBatchUpdateRecordInput {
	s.RecordID = &v
	return s
}

// SetRemark sets the Remark field's value.
func (s *RecordForBatchUpdateRecordInput) SetRemark(v string) *RecordForBatchUpdateRecordInput {
	s.Remark = &v
	return s
}

// SetTTL sets the TTL field's value.
func (s *RecordForBatchUpdateRecordInput) SetTTL(v int32) *RecordForBatchUpdateRecordInput {
	s.TTL = &v
	return s
}

// SetType sets the Type field's value.
func (s *RecordForBatchUpdateRecordInput) SetType(v string) *RecordForBatchUpdateRecordInput {
	s.Type = &v
	return s
}

// SetValue sets the Value field's value.
func (s *RecordForBatchUpdateRecordInput) SetValue(v string) *RecordForBatchUpdateRecordInput {
	s.Value = &v
	return s
}

// SetWeight sets the Weight field's value.
func (s *RecordForBatchUpdateRecordInput) SetWeight(v int32) *RecordForBatchUpdateRecordInput {
	s.Weight = &v
	return s
}
