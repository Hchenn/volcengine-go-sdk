// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateRecordSetCommon = "UpdateRecordSet"

// UpdateRecordSetCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateRecordSetCommon operation. The "output" return
// value will be populated with the UpdateRecordSetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateRecordSetCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateRecordSetCommon Send returns without error.
//
// See UpdateRecordSetCommon for more information on using the UpdateRecordSetCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateRecordSetCommonRequest method.
//    req, resp := client.UpdateRecordSetCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) UpdateRecordSetCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateRecordSetCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateRecordSetCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation UpdateRecordSetCommon for usage and error information.
func (c *PRIVATEZONE) UpdateRecordSetCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateRecordSetCommonRequest(input)
	return out, req.Send()
}

// UpdateRecordSetCommonWithContext is the same as UpdateRecordSetCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateRecordSetCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) UpdateRecordSetCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateRecordSetCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateRecordSet = "UpdateRecordSet"

// UpdateRecordSetRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateRecordSet operation. The "output" return
// value will be populated with the UpdateRecordSetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateRecordSetCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateRecordSetCommon Send returns without error.
//
// See UpdateRecordSet for more information on using the UpdateRecordSet
// API call, and error handling.
//
//    // Example sending a request using the UpdateRecordSetRequest method.
//    req, resp := client.UpdateRecordSetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) UpdateRecordSetRequest(input *UpdateRecordSetInput) (req *request.Request, output *UpdateRecordSetOutput) {
	op := &request.Operation{
		Name:       opUpdateRecordSet,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateRecordSetInput{}
	}

	output = &UpdateRecordSetOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateRecordSet API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation UpdateRecordSet for usage and error information.
func (c *PRIVATEZONE) UpdateRecordSet(input *UpdateRecordSetInput) (*UpdateRecordSetOutput, error) {
	req, out := c.UpdateRecordSetRequest(input)
	return out, req.Send()
}

// UpdateRecordSetWithContext is the same as UpdateRecordSet with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateRecordSet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) UpdateRecordSetWithContext(ctx volcengine.Context, input *UpdateRecordSetInput, opts ...request.Option) (*UpdateRecordSetOutput, error) {
	req, out := c.UpdateRecordSetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateRecordSetInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// RecordSetID is a required field
	RecordSetID *string `type:"string" json:",omitempty" required:"true"`

	// WeightEnabled is a required field
	WeightEnabled *bool `type:"boolean" json:",omitempty" required:"true"`

	ZID *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s UpdateRecordSetInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateRecordSetInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateRecordSetInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateRecordSetInput"}
	if s.RecordSetID == nil {
		invalidParams.Add(request.NewErrParamRequired("RecordSetID"))
	}
	if s.WeightEnabled == nil {
		invalidParams.Add(request.NewErrParamRequired("WeightEnabled"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRecordSetID sets the RecordSetID field's value.
func (s *UpdateRecordSetInput) SetRecordSetID(v string) *UpdateRecordSetInput {
	s.RecordSetID = &v
	return s
}

// SetWeightEnabled sets the WeightEnabled field's value.
func (s *UpdateRecordSetInput) SetWeightEnabled(v bool) *UpdateRecordSetInput {
	s.WeightEnabled = &v
	return s
}

// SetZID sets the ZID field's value.
func (s *UpdateRecordSetInput) SetZID(v int64) *UpdateRecordSetInput {
	s.ZID = &v
	return s
}

type UpdateRecordSetOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	FQDN *string `type:"string" json:",omitempty"`

	Host *string `type:"string" json:",omitempty"`

	ID *string `type:"string" json:",omitempty"`

	Line *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`

	WeightEnabled *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s UpdateRecordSetOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateRecordSetOutput) GoString() string {
	return s.String()
}

// SetFQDN sets the FQDN field's value.
func (s *UpdateRecordSetOutput) SetFQDN(v string) *UpdateRecordSetOutput {
	s.FQDN = &v
	return s
}

// SetHost sets the Host field's value.
func (s *UpdateRecordSetOutput) SetHost(v string) *UpdateRecordSetOutput {
	s.Host = &v
	return s
}

// SetID sets the ID field's value.
func (s *UpdateRecordSetOutput) SetID(v string) *UpdateRecordSetOutput {
	s.ID = &v
	return s
}

// SetLine sets the Line field's value.
func (s *UpdateRecordSetOutput) SetLine(v string) *UpdateRecordSetOutput {
	s.Line = &v
	return s
}

// SetType sets the Type field's value.
func (s *UpdateRecordSetOutput) SetType(v string) *UpdateRecordSetOutput {
	s.Type = &v
	return s
}

// SetWeightEnabled sets the WeightEnabled field's value.
func (s *UpdateRecordSetOutput) SetWeightEnabled(v bool) *UpdateRecordSetOutput {
	s.WeightEnabled = &v
	return s
}
