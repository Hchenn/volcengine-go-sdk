// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBatchCreateRecordCommon = "BatchCreateRecord"

// BatchCreateRecordCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BatchCreateRecordCommon operation. The "output" return
// value will be populated with the BatchCreateRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BatchCreateRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after BatchCreateRecordCommon Send returns without error.
//
// See BatchCreateRecordCommon for more information on using the BatchCreateRecordCommon
// API call, and error handling.
//
//    // Example sending a request using the BatchCreateRecordCommonRequest method.
//    req, resp := client.BatchCreateRecordCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) BatchCreateRecordCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBatchCreateRecordCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BatchCreateRecordCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation BatchCreateRecordCommon for usage and error information.
func (c *PRIVATEZONE) BatchCreateRecordCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BatchCreateRecordCommonRequest(input)
	return out, req.Send()
}

// BatchCreateRecordCommonWithContext is the same as BatchCreateRecordCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BatchCreateRecordCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) BatchCreateRecordCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BatchCreateRecordCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBatchCreateRecord = "BatchCreateRecord"

// BatchCreateRecordRequest generates a "volcengine/request.Request" representing the
// client's request for the BatchCreateRecord operation. The "output" return
// value will be populated with the BatchCreateRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BatchCreateRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after BatchCreateRecordCommon Send returns without error.
//
// See BatchCreateRecord for more information on using the BatchCreateRecord
// API call, and error handling.
//
//    // Example sending a request using the BatchCreateRecordRequest method.
//    req, resp := client.BatchCreateRecordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) BatchCreateRecordRequest(input *BatchCreateRecordInput) (req *request.Request, output *BatchCreateRecordOutput) {
	op := &request.Operation{
		Name:       opBatchCreateRecord,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BatchCreateRecordInput{}
	}

	output = &BatchCreateRecordOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BatchCreateRecord API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation BatchCreateRecord for usage and error information.
func (c *PRIVATEZONE) BatchCreateRecord(input *BatchCreateRecordInput) (*BatchCreateRecordOutput, error) {
	req, out := c.BatchCreateRecordRequest(input)
	return out, req.Send()
}

// BatchCreateRecordWithContext is the same as BatchCreateRecord with the addition of
// the ability to pass a context and additional request options.
//
// See BatchCreateRecord for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) BatchCreateRecordWithContext(ctx volcengine.Context, input *BatchCreateRecordInput, opts ...request.Option) (*BatchCreateRecordOutput, error) {
	req, out := c.BatchCreateRecordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BatchCreateRecordInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClientToken *string `type:"string" json:",omitempty"`

	Records []*RecordForBatchCreateRecordInput `type:"list" json:",omitempty"`

	// ZID is a required field
	ZID *int64 `type:"int64" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s BatchCreateRecordInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchCreateRecordInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *BatchCreateRecordInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "BatchCreateRecordInput"}
	if s.ZID == nil {
		invalidParams.Add(request.NewErrParamRequired("ZID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *BatchCreateRecordInput) SetClientToken(v string) *BatchCreateRecordInput {
	s.ClientToken = &v
	return s
}

// SetRecords sets the Records field's value.
func (s *BatchCreateRecordInput) SetRecords(v []*RecordForBatchCreateRecordInput) *BatchCreateRecordInput {
	s.Records = v
	return s
}

// SetZID sets the ZID field's value.
func (s *BatchCreateRecordInput) SetZID(v int64) *BatchCreateRecordInput {
	s.ZID = &v
	return s
}

type BatchCreateRecordOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	RecordIDs []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s BatchCreateRecordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchCreateRecordOutput) GoString() string {
	return s.String()
}

// SetRecordIDs sets the RecordIDs field's value.
func (s *BatchCreateRecordOutput) SetRecordIDs(v []*string) *BatchCreateRecordOutput {
	s.RecordIDs = v
	return s
}

type RecordForBatchCreateRecordInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Host *string `type:"string" json:",omitempty"`

	Line *string `type:"string" json:",omitempty"`

	Remark *string `type:"string" json:",omitempty"`

	TTL *int32 `type:"int32" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`

	Weight *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s RecordForBatchCreateRecordInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RecordForBatchCreateRecordInput) GoString() string {
	return s.String()
}

// SetHost sets the Host field's value.
func (s *RecordForBatchCreateRecordInput) SetHost(v string) *RecordForBatchCreateRecordInput {
	s.Host = &v
	return s
}

// SetLine sets the Line field's value.
func (s *RecordForBatchCreateRecordInput) SetLine(v string) *RecordForBatchCreateRecordInput {
	s.Line = &v
	return s
}

// SetRemark sets the Remark field's value.
func (s *RecordForBatchCreateRecordInput) SetRemark(v string) *RecordForBatchCreateRecordInput {
	s.Remark = &v
	return s
}

// SetTTL sets the TTL field's value.
func (s *RecordForBatchCreateRecordInput) SetTTL(v int32) *RecordForBatchCreateRecordInput {
	s.TTL = &v
	return s
}

// SetType sets the Type field's value.
func (s *RecordForBatchCreateRecordInput) SetType(v string) *RecordForBatchCreateRecordInput {
	s.Type = &v
	return s
}

// SetValue sets the Value field's value.
func (s *RecordForBatchCreateRecordInput) SetValue(v string) *RecordForBatchCreateRecordInput {
	s.Value = &v
	return s
}

// SetWeight sets the Weight field's value.
func (s *RecordForBatchCreateRecordInput) SetWeight(v int32) *RecordForBatchCreateRecordInput {
	s.Weight = &v
	return s
}
