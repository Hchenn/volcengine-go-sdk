// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateResolverRuleCommon = "UpdateResolverRule"

// UpdateResolverRuleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateResolverRuleCommon operation. The "output" return
// value will be populated with the UpdateResolverRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateResolverRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateResolverRuleCommon Send returns without error.
//
// See UpdateResolverRuleCommon for more information on using the UpdateResolverRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateResolverRuleCommonRequest method.
//    req, resp := client.UpdateResolverRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) UpdateResolverRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateResolverRuleCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateResolverRuleCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation UpdateResolverRuleCommon for usage and error information.
func (c *PRIVATEZONE) UpdateResolverRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateResolverRuleCommonRequest(input)
	return out, req.Send()
}

// UpdateResolverRuleCommonWithContext is the same as UpdateResolverRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateResolverRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) UpdateResolverRuleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateResolverRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateResolverRule = "UpdateResolverRule"

// UpdateResolverRuleRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateResolverRule operation. The "output" return
// value will be populated with the UpdateResolverRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateResolverRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateResolverRuleCommon Send returns without error.
//
// See UpdateResolverRule for more information on using the UpdateResolverRule
// API call, and error handling.
//
//    // Example sending a request using the UpdateResolverRuleRequest method.
//    req, resp := client.UpdateResolverRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) UpdateResolverRuleRequest(input *UpdateResolverRuleInput) (req *request.Request, output *UpdateResolverRuleOutput) {
	op := &request.Operation{
		Name:       opUpdateResolverRule,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateResolverRuleInput{}
	}

	output = &UpdateResolverRuleOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateResolverRule API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation UpdateResolverRule for usage and error information.
func (c *PRIVATEZONE) UpdateResolverRule(input *UpdateResolverRuleInput) (*UpdateResolverRuleOutput, error) {
	req, out := c.UpdateResolverRuleRequest(input)
	return out, req.Send()
}

// UpdateResolverRuleWithContext is the same as UpdateResolverRule with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateResolverRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) UpdateResolverRuleWithContext(ctx volcengine.Context, input *UpdateResolverRuleInput, opts ...request.Option) (*UpdateResolverRuleOutput, error) {
	req, out := c.UpdateResolverRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ForwardIPForUpdateResolverRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	IP *string `type:"string" json:",omitempty"`

	Port *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ForwardIPForUpdateResolverRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ForwardIPForUpdateResolverRuleInput) GoString() string {
	return s.String()
}

// SetIP sets the IP field's value.
func (s *ForwardIPForUpdateResolverRuleInput) SetIP(v string) *ForwardIPForUpdateResolverRuleInput {
	s.IP = &v
	return s
}

// SetPort sets the Port field's value.
func (s *ForwardIPForUpdateResolverRuleInput) SetPort(v int32) *ForwardIPForUpdateResolverRuleInput {
	s.Port = &v
	return s
}

type UpdateResolverRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ForwardIPs []*ForwardIPForUpdateResolverRuleInput `type:"list" json:",omitempty"`

	Line *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	// RuleID is a required field
	RuleID *int64 `type:"int64" json:",omitempty" required:"true"`

	RuleTrn *string `type:"string" json:",omitempty"`

	Vpcs []*VpcForUpdateResolverRuleInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateResolverRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateResolverRuleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateResolverRuleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateResolverRuleInput"}
	if s.RuleID == nil {
		invalidParams.Add(request.NewErrParamRequired("RuleID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetForwardIPs sets the ForwardIPs field's value.
func (s *UpdateResolverRuleInput) SetForwardIPs(v []*ForwardIPForUpdateResolverRuleInput) *UpdateResolverRuleInput {
	s.ForwardIPs = v
	return s
}

// SetLine sets the Line field's value.
func (s *UpdateResolverRuleInput) SetLine(v string) *UpdateResolverRuleInput {
	s.Line = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateResolverRuleInput) SetName(v string) *UpdateResolverRuleInput {
	s.Name = &v
	return s
}

// SetRuleID sets the RuleID field's value.
func (s *UpdateResolverRuleInput) SetRuleID(v int64) *UpdateResolverRuleInput {
	s.RuleID = &v
	return s
}

// SetRuleTrn sets the RuleTrn field's value.
func (s *UpdateResolverRuleInput) SetRuleTrn(v string) *UpdateResolverRuleInput {
	s.RuleTrn = &v
	return s
}

// SetVpcs sets the Vpcs field's value.
func (s *UpdateResolverRuleInput) SetVpcs(v []*VpcForUpdateResolverRuleInput) *UpdateResolverRuleInput {
	s.Vpcs = v
	return s
}

type UpdateResolverRuleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateResolverRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateResolverRuleOutput) GoString() string {
	return s.String()
}

type VpcForUpdateResolverRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Region *string `type:"string" json:",omitempty"`

	VpcId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s VpcForUpdateResolverRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s VpcForUpdateResolverRuleInput) GoString() string {
	return s.String()
}

// SetRegion sets the Region field's value.
func (s *VpcForUpdateResolverRuleInput) SetRegion(v string) *VpcForUpdateResolverRuleInput {
	s.Region = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *VpcForUpdateResolverRuleInput) SetVpcId(v string) *VpcForUpdateResolverRuleInput {
	s.VpcId = &v
	return s
}
