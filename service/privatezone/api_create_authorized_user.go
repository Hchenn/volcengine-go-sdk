// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateAuthorizedUserCommon = "CreateAuthorizedUser"

// CreateAuthorizedUserCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateAuthorizedUserCommon operation. The "output" return
// value will be populated with the CreateAuthorizedUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateAuthorizedUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateAuthorizedUserCommon Send returns without error.
//
// See CreateAuthorizedUserCommon for more information on using the CreateAuthorizedUserCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateAuthorizedUserCommonRequest method.
//    req, resp := client.CreateAuthorizedUserCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) CreateAuthorizedUserCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateAuthorizedUserCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateAuthorizedUserCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation CreateAuthorizedUserCommon for usage and error information.
func (c *PRIVATEZONE) CreateAuthorizedUserCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateAuthorizedUserCommonRequest(input)
	return out, req.Send()
}

// CreateAuthorizedUserCommonWithContext is the same as CreateAuthorizedUserCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAuthorizedUserCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) CreateAuthorizedUserCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateAuthorizedUserCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateAuthorizedUser = "CreateAuthorizedUser"

// CreateAuthorizedUserRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateAuthorizedUser operation. The "output" return
// value will be populated with the CreateAuthorizedUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateAuthorizedUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateAuthorizedUserCommon Send returns without error.
//
// See CreateAuthorizedUser for more information on using the CreateAuthorizedUser
// API call, and error handling.
//
//    // Example sending a request using the CreateAuthorizedUserRequest method.
//    req, resp := client.CreateAuthorizedUserRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) CreateAuthorizedUserRequest(input *CreateAuthorizedUserInput) (req *request.Request, output *CreateAuthorizedUserOutput) {
	op := &request.Operation{
		Name:       opCreateAuthorizedUser,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateAuthorizedUserInput{}
	}

	output = &CreateAuthorizedUserOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateAuthorizedUser API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation CreateAuthorizedUser for usage and error information.
func (c *PRIVATEZONE) CreateAuthorizedUser(input *CreateAuthorizedUserInput) (*CreateAuthorizedUserOutput, error) {
	req, out := c.CreateAuthorizedUserRequest(input)
	return out, req.Send()
}

// CreateAuthorizedUserWithContext is the same as CreateAuthorizedUser with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAuthorizedUser for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) CreateAuthorizedUserWithContext(ctx volcengine.Context, input *CreateAuthorizedUserInput, opts ...request.Option) (*CreateAuthorizedUserOutput, error) {
	req, out := c.CreateAuthorizedUserRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateAuthorizedUserInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AccountID is a required field
	AccountID *string `type:"string" json:",omitempty" required:"true"`

	// AuthType is a required field
	AuthType *int32 `type:"int32" json:",omitempty" required:"true"`

	VerifyCode *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s CreateAuthorizedUserInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateAuthorizedUserInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateAuthorizedUserInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateAuthorizedUserInput"}
	if s.AccountID == nil {
		invalidParams.Add(request.NewErrParamRequired("AccountID"))
	}
	if s.AuthType == nil {
		invalidParams.Add(request.NewErrParamRequired("AuthType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccountID sets the AccountID field's value.
func (s *CreateAuthorizedUserInput) SetAccountID(v string) *CreateAuthorizedUserInput {
	s.AccountID = &v
	return s
}

// SetAuthType sets the AuthType field's value.
func (s *CreateAuthorizedUserInput) SetAuthType(v int32) *CreateAuthorizedUserInput {
	s.AuthType = &v
	return s
}

// SetVerifyCode sets the VerifyCode field's value.
func (s *CreateAuthorizedUserInput) SetVerifyCode(v int32) *CreateAuthorizedUserInput {
	s.VerifyCode = &v
	return s
}

type CreateAuthorizedUserOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CreateAuthorizedUserOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateAuthorizedUserOutput) GoString() string {
	return s.String()
}
