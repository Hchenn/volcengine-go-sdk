// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListRecordsCommon = "ListRecords"

// ListRecordsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRecordsCommon operation. The "output" return
// value will be populated with the ListRecordsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRecordsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRecordsCommon Send returns without error.
//
// See ListRecordsCommon for more information on using the ListRecordsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListRecordsCommonRequest method.
//    req, resp := client.ListRecordsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) ListRecordsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListRecordsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListRecordsCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation ListRecordsCommon for usage and error information.
func (c *PRIVATEZONE) ListRecordsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListRecordsCommonRequest(input)
	return out, req.Send()
}

// ListRecordsCommonWithContext is the same as ListRecordsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListRecordsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) ListRecordsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListRecordsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListRecords = "ListRecords"

// ListRecordsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRecords operation. The "output" return
// value will be populated with the ListRecordsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRecordsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRecordsCommon Send returns without error.
//
// See ListRecords for more information on using the ListRecords
// API call, and error handling.
//
//    // Example sending a request using the ListRecordsRequest method.
//    req, resp := client.ListRecordsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) ListRecordsRequest(input *ListRecordsInput) (req *request.Request, output *ListRecordsOutput) {
	op := &request.Operation{
		Name:       opListRecords,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListRecordsInput{}
	}

	output = &ListRecordsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListRecords API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation ListRecords for usage and error information.
func (c *PRIVATEZONE) ListRecords(input *ListRecordsInput) (*ListRecordsOutput, error) {
	req, out := c.ListRecordsRequest(input)
	return out, req.Send()
}

// ListRecordsWithContext is the same as ListRecords with the addition of
// the ability to pass a context and additional request options.
//
// See ListRecords for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) ListRecordsWithContext(ctx volcengine.Context, input *ListRecordsInput, opts ...request.Option) (*ListRecordsOutput, error) {
	req, out := c.ListRecordsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListRecordsInput struct {
	_ struct{} `type:"structure"`

	Host *string `type:"string"`

	LastOperator *string `type:"string"`

	Line *string `type:"string"`

	Name *string `type:"string"`

	PageNumber *int32 `type:"int32"`

	PageSize *string `type:"string"`

	ProjectName *string `type:"string"`

	RecordIDs *string `type:"string"`

	SearchMode *string `type:"string"`

	Type *string `type:"string"`

	Value *string `type:"string"`

	ZID *int64 `type:"int64"`
}

// String returns the string representation
func (s ListRecordsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRecordsInput) GoString() string {
	return s.String()
}

// SetHost sets the Host field's value.
func (s *ListRecordsInput) SetHost(v string) *ListRecordsInput {
	s.Host = &v
	return s
}

// SetLastOperator sets the LastOperator field's value.
func (s *ListRecordsInput) SetLastOperator(v string) *ListRecordsInput {
	s.LastOperator = &v
	return s
}

// SetLine sets the Line field's value.
func (s *ListRecordsInput) SetLine(v string) *ListRecordsInput {
	s.Line = &v
	return s
}

// SetName sets the Name field's value.
func (s *ListRecordsInput) SetName(v string) *ListRecordsInput {
	s.Name = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListRecordsInput) SetPageNumber(v int32) *ListRecordsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListRecordsInput) SetPageSize(v string) *ListRecordsInput {
	s.PageSize = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *ListRecordsInput) SetProjectName(v string) *ListRecordsInput {
	s.ProjectName = &v
	return s
}

// SetRecordIDs sets the RecordIDs field's value.
func (s *ListRecordsInput) SetRecordIDs(v string) *ListRecordsInput {
	s.RecordIDs = &v
	return s
}

// SetSearchMode sets the SearchMode field's value.
func (s *ListRecordsInput) SetSearchMode(v string) *ListRecordsInput {
	s.SearchMode = &v
	return s
}

// SetType sets the Type field's value.
func (s *ListRecordsInput) SetType(v string) *ListRecordsInput {
	s.Type = &v
	return s
}

// SetValue sets the Value field's value.
func (s *ListRecordsInput) SetValue(v string) *ListRecordsInput {
	s.Value = &v
	return s
}

// SetZID sets the ZID field's value.
func (s *ListRecordsInput) SetZID(v int64) *ListRecordsInput {
	s.ZID = &v
	return s
}

type ListRecordsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	Records []*RecordForListRecordsOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s ListRecordsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRecordsOutput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListRecordsOutput) SetPageNumber(v int32) *ListRecordsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListRecordsOutput) SetPageSize(v int32) *ListRecordsOutput {
	s.PageSize = &v
	return s
}

// SetRecords sets the Records field's value.
func (s *ListRecordsOutput) SetRecords(v []*RecordForListRecordsOutput) *ListRecordsOutput {
	s.Records = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListRecordsOutput) SetTotal(v int32) *ListRecordsOutput {
	s.Total = &v
	return s
}

type RecordForListRecordsOutput struct {
	_ struct{} `type:"structure"`

	CreatedAt *string `type:"string"`

	Enable *bool `type:"boolean"`

	Host *string `type:"string"`

	LastOperator *string `type:"string"`

	Line *string `type:"string"`

	RecordID *string `type:"string"`

	Remark *string `type:"string"`

	TTL *int32 `type:"int32"`

	Type *string `type:"string"`

	UpdatedAt *string `type:"string"`

	Value *string `type:"string"`

	Weight *int32 `type:"int32"`

	ZID *int32 `type:"int32"`
}

// String returns the string representation
func (s RecordForListRecordsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RecordForListRecordsOutput) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *RecordForListRecordsOutput) SetCreatedAt(v string) *RecordForListRecordsOutput {
	s.CreatedAt = &v
	return s
}

// SetEnable sets the Enable field's value.
func (s *RecordForListRecordsOutput) SetEnable(v bool) *RecordForListRecordsOutput {
	s.Enable = &v
	return s
}

// SetHost sets the Host field's value.
func (s *RecordForListRecordsOutput) SetHost(v string) *RecordForListRecordsOutput {
	s.Host = &v
	return s
}

// SetLastOperator sets the LastOperator field's value.
func (s *RecordForListRecordsOutput) SetLastOperator(v string) *RecordForListRecordsOutput {
	s.LastOperator = &v
	return s
}

// SetLine sets the Line field's value.
func (s *RecordForListRecordsOutput) SetLine(v string) *RecordForListRecordsOutput {
	s.Line = &v
	return s
}

// SetRecordID sets the RecordID field's value.
func (s *RecordForListRecordsOutput) SetRecordID(v string) *RecordForListRecordsOutput {
	s.RecordID = &v
	return s
}

// SetRemark sets the Remark field's value.
func (s *RecordForListRecordsOutput) SetRemark(v string) *RecordForListRecordsOutput {
	s.Remark = &v
	return s
}

// SetTTL sets the TTL field's value.
func (s *RecordForListRecordsOutput) SetTTL(v int32) *RecordForListRecordsOutput {
	s.TTL = &v
	return s
}

// SetType sets the Type field's value.
func (s *RecordForListRecordsOutput) SetType(v string) *RecordForListRecordsOutput {
	s.Type = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *RecordForListRecordsOutput) SetUpdatedAt(v string) *RecordForListRecordsOutput {
	s.UpdatedAt = &v
	return s
}

// SetValue sets the Value field's value.
func (s *RecordForListRecordsOutput) SetValue(v string) *RecordForListRecordsOutput {
	s.Value = &v
	return s
}

// SetWeight sets the Weight field's value.
func (s *RecordForListRecordsOutput) SetWeight(v int32) *RecordForListRecordsOutput {
	s.Weight = &v
	return s
}

// SetZID sets the ZID field's value.
func (s *RecordForListRecordsOutput) SetZID(v int32) *RecordForListRecordsOutput {
	s.ZID = &v
	return s
}
