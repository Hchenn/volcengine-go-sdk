// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBatchDeleteRecordCommon = "BatchDeleteRecord"

// BatchDeleteRecordCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BatchDeleteRecordCommon operation. The "output" return
// value will be populated with the BatchDeleteRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BatchDeleteRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after BatchDeleteRecordCommon Send returns without error.
//
// See BatchDeleteRecordCommon for more information on using the BatchDeleteRecordCommon
// API call, and error handling.
//
//    // Example sending a request using the BatchDeleteRecordCommonRequest method.
//    req, resp := client.BatchDeleteRecordCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) BatchDeleteRecordCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBatchDeleteRecordCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BatchDeleteRecordCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation BatchDeleteRecordCommon for usage and error information.
func (c *PRIVATEZONE) BatchDeleteRecordCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BatchDeleteRecordCommonRequest(input)
	return out, req.Send()
}

// BatchDeleteRecordCommonWithContext is the same as BatchDeleteRecordCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BatchDeleteRecordCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) BatchDeleteRecordCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BatchDeleteRecordCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBatchDeleteRecord = "BatchDeleteRecord"

// BatchDeleteRecordRequest generates a "volcengine/request.Request" representing the
// client's request for the BatchDeleteRecord operation. The "output" return
// value will be populated with the BatchDeleteRecordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BatchDeleteRecordCommon Request to send the API call to the service.
// the "output" return value is not valid until after BatchDeleteRecordCommon Send returns without error.
//
// See BatchDeleteRecord for more information on using the BatchDeleteRecord
// API call, and error handling.
//
//    // Example sending a request using the BatchDeleteRecordRequest method.
//    req, resp := client.BatchDeleteRecordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) BatchDeleteRecordRequest(input *BatchDeleteRecordInput) (req *request.Request, output *BatchDeleteRecordOutput) {
	op := &request.Operation{
		Name:       opBatchDeleteRecord,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BatchDeleteRecordInput{}
	}

	output = &BatchDeleteRecordOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BatchDeleteRecord API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation BatchDeleteRecord for usage and error information.
func (c *PRIVATEZONE) BatchDeleteRecord(input *BatchDeleteRecordInput) (*BatchDeleteRecordOutput, error) {
	req, out := c.BatchDeleteRecordRequest(input)
	return out, req.Send()
}

// BatchDeleteRecordWithContext is the same as BatchDeleteRecord with the addition of
// the ability to pass a context and additional request options.
//
// See BatchDeleteRecord for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) BatchDeleteRecordWithContext(ctx volcengine.Context, input *BatchDeleteRecordInput, opts ...request.Option) (*BatchDeleteRecordOutput, error) {
	req, out := c.BatchDeleteRecordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BatchDeleteRecordInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	RecordIDs []*string `type:"list" json:",omitempty"`

	// ZID is a required field
	ZID *int64 `type:"int64" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s BatchDeleteRecordInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchDeleteRecordInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *BatchDeleteRecordInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "BatchDeleteRecordInput"}
	if s.ZID == nil {
		invalidParams.Add(request.NewErrParamRequired("ZID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRecordIDs sets the RecordIDs field's value.
func (s *BatchDeleteRecordInput) SetRecordIDs(v []*string) *BatchDeleteRecordInput {
	s.RecordIDs = v
	return s
}

// SetZID sets the ZID field's value.
func (s *BatchDeleteRecordInput) SetZID(v int64) *BatchDeleteRecordInput {
	s.ZID = &v
	return s
}

type BatchDeleteRecordOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s BatchDeleteRecordOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchDeleteRecordOutput) GoString() string {
	return s.String()
}
