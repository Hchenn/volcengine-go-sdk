// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListUserVPCCommon = "ListUserVPC"

// ListUserVPCCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListUserVPCCommon operation. The "output" return
// value will be populated with the ListUserVPCCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListUserVPCCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListUserVPCCommon Send returns without error.
//
// See ListUserVPCCommon for more information on using the ListUserVPCCommon
// API call, and error handling.
//
//    // Example sending a request using the ListUserVPCCommonRequest method.
//    req, resp := client.ListUserVPCCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) ListUserVPCCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListUserVPCCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListUserVPCCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation ListUserVPCCommon for usage and error information.
func (c *PRIVATEZONE) ListUserVPCCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListUserVPCCommonRequest(input)
	return out, req.Send()
}

// ListUserVPCCommonWithContext is the same as ListUserVPCCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListUserVPCCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) ListUserVPCCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListUserVPCCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListUserVPC = "ListUserVPC"

// ListUserVPCRequest generates a "volcengine/request.Request" representing the
// client's request for the ListUserVPC operation. The "output" return
// value will be populated with the ListUserVPCCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListUserVPCCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListUserVPCCommon Send returns without error.
//
// See ListUserVPC for more information on using the ListUserVPC
// API call, and error handling.
//
//    // Example sending a request using the ListUserVPCRequest method.
//    req, resp := client.ListUserVPCRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) ListUserVPCRequest(input *ListUserVPCInput) (req *request.Request, output *ListUserVPCOutput) {
	op := &request.Operation{
		Name:       opListUserVPC,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListUserVPCInput{}
	}

	output = &ListUserVPCOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListUserVPC API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation ListUserVPC for usage and error information.
func (c *PRIVATEZONE) ListUserVPC(input *ListUserVPCInput) (*ListUserVPCOutput, error) {
	req, out := c.ListUserVPCRequest(input)
	return out, req.Send()
}

// ListUserVPCWithContext is the same as ListUserVPC with the addition of
// the ability to pass a context and additional request options.
//
// See ListUserVPC for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) ListUserVPCWithContext(ctx volcengine.Context, input *ListUserVPCInput, opts ...request.Option) (*ListUserVPCOutput, error) {
	req, out := c.ListUserVPCRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListUserVPCInput struct {
	_ struct{} `type:"structure"`

	// AccountID is a required field
	AccountID *string `type:"string" required:"true"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	// Region is a required field
	Region *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ListUserVPCInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListUserVPCInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListUserVPCInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListUserVPCInput"}
	if s.AccountID == nil {
		invalidParams.Add(request.NewErrParamRequired("AccountID"))
	}
	if s.Region == nil {
		invalidParams.Add(request.NewErrParamRequired("Region"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccountID sets the AccountID field's value.
func (s *ListUserVPCInput) SetAccountID(v string) *ListUserVPCInput {
	s.AccountID = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListUserVPCInput) SetPageNumber(v int32) *ListUserVPCInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListUserVPCInput) SetPageSize(v int32) *ListUserVPCInput {
	s.PageSize = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *ListUserVPCInput) SetRegion(v string) *ListUserVPCInput {
	s.Region = &v
	return s
}

type ListUserVPCOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	Total *int32 `type:"int32"`

	VPCs []*VPCForListUserVPCOutput `type:"list"`
}

// String returns the string representation
func (s ListUserVPCOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListUserVPCOutput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListUserVPCOutput) SetPageNumber(v int32) *ListUserVPCOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListUserVPCOutput) SetPageSize(v int32) *ListUserVPCOutput {
	s.PageSize = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListUserVPCOutput) SetTotal(v int32) *ListUserVPCOutput {
	s.Total = &v
	return s
}

// SetVPCs sets the VPCs field's value.
func (s *ListUserVPCOutput) SetVPCs(v []*VPCForListUserVPCOutput) *ListUserVPCOutput {
	s.VPCs = v
	return s
}

type VPCForListUserVPCOutput struct {
	_ struct{} `type:"structure"`

	ID *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s VPCForListUserVPCOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s VPCForListUserVPCOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *VPCForListUserVPCOutput) SetID(v string) *VPCForListUserVPCOutput {
	s.ID = &v
	return s
}

// SetName sets the Name field's value.
func (s *VPCForListUserVPCOutput) SetName(v string) *VPCForListUserVPCOutput {
	s.Name = &v
	return s
}
