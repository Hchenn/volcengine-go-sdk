// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteResolverRuleCommon = "DeleteResolverRule"

// DeleteResolverRuleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteResolverRuleCommon operation. The "output" return
// value will be populated with the DeleteResolverRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteResolverRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteResolverRuleCommon Send returns without error.
//
// See DeleteResolverRuleCommon for more information on using the DeleteResolverRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteResolverRuleCommonRequest method.
//    req, resp := client.DeleteResolverRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) DeleteResolverRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteResolverRuleCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteResolverRuleCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation DeleteResolverRuleCommon for usage and error information.
func (c *PRIVATEZONE) DeleteResolverRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteResolverRuleCommonRequest(input)
	return out, req.Send()
}

// DeleteResolverRuleCommonWithContext is the same as DeleteResolverRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteResolverRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) DeleteResolverRuleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteResolverRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteResolverRule = "DeleteResolverRule"

// DeleteResolverRuleRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteResolverRule operation. The "output" return
// value will be populated with the DeleteResolverRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteResolverRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteResolverRuleCommon Send returns without error.
//
// See DeleteResolverRule for more information on using the DeleteResolverRule
// API call, and error handling.
//
//    // Example sending a request using the DeleteResolverRuleRequest method.
//    req, resp := client.DeleteResolverRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) DeleteResolverRuleRequest(input *DeleteResolverRuleInput) (req *request.Request, output *DeleteResolverRuleOutput) {
	op := &request.Operation{
		Name:       opDeleteResolverRule,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteResolverRuleInput{}
	}

	output = &DeleteResolverRuleOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteResolverRule API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation DeleteResolverRule for usage and error information.
func (c *PRIVATEZONE) DeleteResolverRule(input *DeleteResolverRuleInput) (*DeleteResolverRuleOutput, error) {
	req, out := c.DeleteResolverRuleRequest(input)
	return out, req.Send()
}

// DeleteResolverRuleWithContext is the same as DeleteResolverRule with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteResolverRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) DeleteResolverRuleWithContext(ctx volcengine.Context, input *DeleteResolverRuleInput, opts ...request.Option) (*DeleteResolverRuleOutput, error) {
	req, out := c.DeleteResolverRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteResolverRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// RuleID is a required field
	RuleID *int64 `type:"int64" json:",omitempty" required:"true"`

	RuleTrn *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteResolverRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteResolverRuleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteResolverRuleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteResolverRuleInput"}
	if s.RuleID == nil {
		invalidParams.Add(request.NewErrParamRequired("RuleID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRuleID sets the RuleID field's value.
func (s *DeleteResolverRuleInput) SetRuleID(v int64) *DeleteResolverRuleInput {
	s.RuleID = &v
	return s
}

// SetRuleTrn sets the RuleTrn field's value.
func (s *DeleteResolverRuleInput) SetRuleTrn(v string) *DeleteResolverRuleInput {
	s.RuleTrn = &v
	return s
}

type DeleteResolverRuleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteResolverRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteResolverRuleOutput) GoString() string {
	return s.String()
}
