// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBindRuleVPCCommon = "BindRuleVPC"

// BindRuleVPCCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BindRuleVPCCommon operation. The "output" return
// value will be populated with the BindRuleVPCCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BindRuleVPCCommon Request to send the API call to the service.
// the "output" return value is not valid until after BindRuleVPCCommon Send returns without error.
//
// See BindRuleVPCCommon for more information on using the BindRuleVPCCommon
// API call, and error handling.
//
//    // Example sending a request using the BindRuleVPCCommonRequest method.
//    req, resp := client.BindRuleVPCCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) BindRuleVPCCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBindRuleVPCCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BindRuleVPCCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation BindRuleVPCCommon for usage and error information.
func (c *PRIVATEZONE) BindRuleVPCCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BindRuleVPCCommonRequest(input)
	return out, req.Send()
}

// BindRuleVPCCommonWithContext is the same as BindRuleVPCCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BindRuleVPCCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) BindRuleVPCCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BindRuleVPCCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBindRuleVPC = "BindRuleVPC"

// BindRuleVPCRequest generates a "volcengine/request.Request" representing the
// client's request for the BindRuleVPC operation. The "output" return
// value will be populated with the BindRuleVPCCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BindRuleVPCCommon Request to send the API call to the service.
// the "output" return value is not valid until after BindRuleVPCCommon Send returns without error.
//
// See BindRuleVPC for more information on using the BindRuleVPC
// API call, and error handling.
//
//    // Example sending a request using the BindRuleVPCRequest method.
//    req, resp := client.BindRuleVPCRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) BindRuleVPCRequest(input *BindRuleVPCInput) (req *request.Request, output *BindRuleVPCOutput) {
	op := &request.Operation{
		Name:       opBindRuleVPC,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BindRuleVPCInput{}
	}

	output = &BindRuleVPCOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BindRuleVPC API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation BindRuleVPC for usage and error information.
func (c *PRIVATEZONE) BindRuleVPC(input *BindRuleVPCInput) (*BindRuleVPCOutput, error) {
	req, out := c.BindRuleVPCRequest(input)
	return out, req.Send()
}

// BindRuleVPCWithContext is the same as BindRuleVPC with the addition of
// the ability to pass a context and additional request options.
//
// See BindRuleVPC for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) BindRuleVPCWithContext(ctx volcengine.Context, input *BindRuleVPCInput, opts ...request.Option) (*BindRuleVPCOutput, error) {
	req, out := c.BindRuleVPCRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BindRuleVPCInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// RuleID is a required field
	RuleID *int64 `type:"int64" json:",omitempty" required:"true"`

	RuleTrn *string `type:"string" json:",omitempty"`

	VpcTrns []*string `type:"list" json:",omitempty"`

	Vpcs []*VpcForBindRuleVPCInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s BindRuleVPCInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindRuleVPCInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *BindRuleVPCInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "BindRuleVPCInput"}
	if s.RuleID == nil {
		invalidParams.Add(request.NewErrParamRequired("RuleID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRuleID sets the RuleID field's value.
func (s *BindRuleVPCInput) SetRuleID(v int64) *BindRuleVPCInput {
	s.RuleID = &v
	return s
}

// SetRuleTrn sets the RuleTrn field's value.
func (s *BindRuleVPCInput) SetRuleTrn(v string) *BindRuleVPCInput {
	s.RuleTrn = &v
	return s
}

// SetVpcTrns sets the VpcTrns field's value.
func (s *BindRuleVPCInput) SetVpcTrns(v []*string) *BindRuleVPCInput {
	s.VpcTrns = v
	return s
}

// SetVpcs sets the Vpcs field's value.
func (s *BindRuleVPCInput) SetVpcs(v []*VpcForBindRuleVPCInput) *BindRuleVPCInput {
	s.Vpcs = v
	return s
}

type BindRuleVPCOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s BindRuleVPCOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindRuleVPCOutput) GoString() string {
	return s.String()
}

type VpcForBindRuleVPCInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Region *string `type:"string" json:",omitempty"`

	VpcId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s VpcForBindRuleVPCInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s VpcForBindRuleVPCInput) GoString() string {
	return s.String()
}

// SetRegion sets the Region field's value.
func (s *VpcForBindRuleVPCInput) SetRegion(v string) *VpcForBindRuleVPCInput {
	s.Region = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *VpcForBindRuleVPCInput) SetVpcId(v string) *VpcForBindRuleVPCInput {
	s.VpcId = &v
	return s
}
