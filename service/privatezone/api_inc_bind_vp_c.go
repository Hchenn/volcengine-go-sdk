// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opIncBindVPCCommon = "IncBindVPC"

// IncBindVPCCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the IncBindVPCCommon operation. The "output" return
// value will be populated with the IncBindVPCCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned IncBindVPCCommon Request to send the API call to the service.
// the "output" return value is not valid until after IncBindVPCCommon Send returns without error.
//
// See IncBindVPCCommon for more information on using the IncBindVPCCommon
// API call, and error handling.
//
//    // Example sending a request using the IncBindVPCCommonRequest method.
//    req, resp := client.IncBindVPCCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) IncBindVPCCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opIncBindVPCCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// IncBindVPCCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation IncBindVPCCommon for usage and error information.
func (c *PRIVATEZONE) IncBindVPCCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.IncBindVPCCommonRequest(input)
	return out, req.Send()
}

// IncBindVPCCommonWithContext is the same as IncBindVPCCommon with the addition of
// the ability to pass a context and additional request options.
//
// See IncBindVPCCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) IncBindVPCCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.IncBindVPCCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opIncBindVPC = "IncBindVPC"

// IncBindVPCRequest generates a "volcengine/request.Request" representing the
// client's request for the IncBindVPC operation. The "output" return
// value will be populated with the IncBindVPCCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned IncBindVPCCommon Request to send the API call to the service.
// the "output" return value is not valid until after IncBindVPCCommon Send returns without error.
//
// See IncBindVPC for more information on using the IncBindVPC
// API call, and error handling.
//
//    // Example sending a request using the IncBindVPCRequest method.
//    req, resp := client.IncBindVPCRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) IncBindVPCRequest(input *IncBindVPCInput) (req *request.Request, output *IncBindVPCOutput) {
	op := &request.Operation{
		Name:       opIncBindVPC,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &IncBindVPCInput{}
	}

	output = &IncBindVPCOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// IncBindVPC API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation IncBindVPC for usage and error information.
func (c *PRIVATEZONE) IncBindVPC(input *IncBindVPCInput) (*IncBindVPCOutput, error) {
	req, out := c.IncBindVPCRequest(input)
	return out, req.Send()
}

// IncBindVPCWithContext is the same as IncBindVPC with the addition of
// the ability to pass a context and additional request options.
//
// See IncBindVPC for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) IncBindVPCWithContext(ctx volcengine.Context, input *IncBindVPCInput, opts ...request.Option) (*IncBindVPCOutput, error) {
	req, out := c.IncBindVPCRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BindForIncBindVPCInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Region *string `type:"string" json:",omitempty"`

	VpcId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BindForIncBindVPCInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindForIncBindVPCInput) GoString() string {
	return s.String()
}

// SetRegion sets the Region field's value.
func (s *BindForIncBindVPCInput) SetRegion(v string) *BindForIncBindVPCInput {
	s.Region = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *BindForIncBindVPCInput) SetVpcId(v string) *BindForIncBindVPCInput {
	s.VpcId = &v
	return s
}

type IncBindVPCInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Binds []*BindForIncBindVPCInput `type:"list" json:",omitempty"`

	Unbinds []*UnbindForIncBindVPCInput `type:"list" json:",omitempty"`

	VpcTrns []*string `type:"list" json:",omitempty"`

	// ZID is a required field
	ZID *int64 `type:"int64" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s IncBindVPCInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IncBindVPCInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *IncBindVPCInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "IncBindVPCInput"}
	if s.ZID == nil {
		invalidParams.Add(request.NewErrParamRequired("ZID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBinds sets the Binds field's value.
func (s *IncBindVPCInput) SetBinds(v []*BindForIncBindVPCInput) *IncBindVPCInput {
	s.Binds = v
	return s
}

// SetUnbinds sets the Unbinds field's value.
func (s *IncBindVPCInput) SetUnbinds(v []*UnbindForIncBindVPCInput) *IncBindVPCInput {
	s.Unbinds = v
	return s
}

// SetVpcTrns sets the VpcTrns field's value.
func (s *IncBindVPCInput) SetVpcTrns(v []*string) *IncBindVPCInput {
	s.VpcTrns = v
	return s
}

// SetZID sets the ZID field's value.
func (s *IncBindVPCInput) SetZID(v int64) *IncBindVPCInput {
	s.ZID = &v
	return s
}

type IncBindVPCOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s IncBindVPCOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IncBindVPCOutput) GoString() string {
	return s.String()
}

type UnbindForIncBindVPCInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Region *string `type:"string" json:",omitempty"`

	VpcId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UnbindForIncBindVPCInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UnbindForIncBindVPCInput) GoString() string {
	return s.String()
}

// SetRegion sets the Region field's value.
func (s *UnbindForIncBindVPCInput) SetRegion(v string) *UnbindForIncBindVPCInput {
	s.Region = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *UnbindForIncBindVPCInput) SetVpcId(v string) *UnbindForIncBindVPCInput {
	s.VpcId = &v
	return s
}
