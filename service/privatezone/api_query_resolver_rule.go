// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package privatezone

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQueryResolverRuleCommon = "QueryResolverRule"

// QueryResolverRuleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryResolverRuleCommon operation. The "output" return
// value will be populated with the QueryResolverRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryResolverRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryResolverRuleCommon Send returns without error.
//
// See QueryResolverRuleCommon for more information on using the QueryResolverRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryResolverRuleCommonRequest method.
//    req, resp := client.QueryResolverRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) QueryResolverRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryResolverRuleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// QueryResolverRuleCommon API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation QueryResolverRuleCommon for usage and error information.
func (c *PRIVATEZONE) QueryResolverRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryResolverRuleCommonRequest(input)
	return out, req.Send()
}

// QueryResolverRuleCommonWithContext is the same as QueryResolverRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryResolverRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) QueryResolverRuleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryResolverRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryResolverRule = "QueryResolverRule"

// QueryResolverRuleRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryResolverRule operation. The "output" return
// value will be populated with the QueryResolverRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryResolverRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryResolverRuleCommon Send returns without error.
//
// See QueryResolverRule for more information on using the QueryResolverRule
// API call, and error handling.
//
//    // Example sending a request using the QueryResolverRuleRequest method.
//    req, resp := client.QueryResolverRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *PRIVATEZONE) QueryResolverRuleRequest(input *QueryResolverRuleInput) (req *request.Request, output *QueryResolverRuleOutput) {
	op := &request.Operation{
		Name:       opQueryResolverRule,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryResolverRuleInput{}
	}

	output = &QueryResolverRuleOutput{}
	req = c.newRequest(op, input, output)

	return
}

// QueryResolverRule API operation for PRIVATE_ZONE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for PRIVATE_ZONE's
// API operation QueryResolverRule for usage and error information.
func (c *PRIVATEZONE) QueryResolverRule(input *QueryResolverRuleInput) (*QueryResolverRuleOutput, error) {
	req, out := c.QueryResolverRuleRequest(input)
	return out, req.Send()
}

// QueryResolverRuleWithContext is the same as QueryResolverRule with the addition of
// the ability to pass a context and additional request options.
//
// See QueryResolverRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *PRIVATEZONE) QueryResolverRuleWithContext(ctx volcengine.Context, input *QueryResolverRuleInput, opts ...request.Option) (*QueryResolverRuleOutput, error) {
	req, out := c.QueryResolverRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BindVPCForQueryResolverRuleOutput struct {
	_ struct{} `type:"structure"`

	AccountID *string `type:"string"`

	ID *string `type:"string"`

	Region *string `type:"string"`

	RegionName *string `type:"string"`
}

// String returns the string representation
func (s BindVPCForQueryResolverRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindVPCForQueryResolverRuleOutput) GoString() string {
	return s.String()
}

// SetAccountID sets the AccountID field's value.
func (s *BindVPCForQueryResolverRuleOutput) SetAccountID(v string) *BindVPCForQueryResolverRuleOutput {
	s.AccountID = &v
	return s
}

// SetID sets the ID field's value.
func (s *BindVPCForQueryResolverRuleOutput) SetID(v string) *BindVPCForQueryResolverRuleOutput {
	s.ID = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *BindVPCForQueryResolverRuleOutput) SetRegion(v string) *BindVPCForQueryResolverRuleOutput {
	s.Region = &v
	return s
}

// SetRegionName sets the RegionName field's value.
func (s *BindVPCForQueryResolverRuleOutput) SetRegionName(v string) *BindVPCForQueryResolverRuleOutput {
	s.RegionName = &v
	return s
}

type ForwardIPForQueryResolverRuleOutput struct {
	_ struct{} `type:"structure"`

	IP *string `type:"string"`

	Port *int32 `type:"int32"`
}

// String returns the string representation
func (s ForwardIPForQueryResolverRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ForwardIPForQueryResolverRuleOutput) GoString() string {
	return s.String()
}

// SetIP sets the IP field's value.
func (s *ForwardIPForQueryResolverRuleOutput) SetIP(v string) *ForwardIPForQueryResolverRuleOutput {
	s.IP = &v
	return s
}

// SetPort sets the Port field's value.
func (s *ForwardIPForQueryResolverRuleOutput) SetPort(v int32) *ForwardIPForQueryResolverRuleOutput {
	s.Port = &v
	return s
}

type QueryResolverRuleInput struct {
	_ struct{} `type:"structure"`

	// RuleID is a required field
	RuleID *int64 `type:"int64" required:"true"`

	RuleTrn *string `type:"string"`
}

// String returns the string representation
func (s QueryResolverRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryResolverRuleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryResolverRuleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryResolverRuleInput"}
	if s.RuleID == nil {
		invalidParams.Add(request.NewErrParamRequired("RuleID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRuleID sets the RuleID field's value.
func (s *QueryResolverRuleInput) SetRuleID(v int64) *QueryResolverRuleInput {
	s.RuleID = &v
	return s
}

// SetRuleTrn sets the RuleTrn field's value.
func (s *QueryResolverRuleInput) SetRuleTrn(v string) *QueryResolverRuleInput {
	s.RuleTrn = &v
	return s
}

type QueryResolverRuleOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	BindVPCs []*BindVPCForQueryResolverRuleOutput `type:"list"`

	CreatedAt *string `type:"string"`

	Enable *bool `type:"boolean"`

	EndpointID *int32 `type:"int32"`

	ForwardIPs []*ForwardIPForQueryResolverRuleOutput `type:"list"`

	ID *int64 `type:"int64"`

	LastOperator *string `type:"string"`

	Line *string `type:"string"`

	Name *string `type:"string"`

	ProjectName *string `type:"string"`

	Tags []*TagForQueryResolverRuleOutput `type:"list"`

	Type *string `type:"string"`

	UpdatedAt *string `type:"string"`

	ZoneName *string `type:"string"`
}

// String returns the string representation
func (s QueryResolverRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryResolverRuleOutput) GoString() string {
	return s.String()
}

// SetBindVPCs sets the BindVPCs field's value.
func (s *QueryResolverRuleOutput) SetBindVPCs(v []*BindVPCForQueryResolverRuleOutput) *QueryResolverRuleOutput {
	s.BindVPCs = v
	return s
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *QueryResolverRuleOutput) SetCreatedAt(v string) *QueryResolverRuleOutput {
	s.CreatedAt = &v
	return s
}

// SetEnable sets the Enable field's value.
func (s *QueryResolverRuleOutput) SetEnable(v bool) *QueryResolverRuleOutput {
	s.Enable = &v
	return s
}

// SetEndpointID sets the EndpointID field's value.
func (s *QueryResolverRuleOutput) SetEndpointID(v int32) *QueryResolverRuleOutput {
	s.EndpointID = &v
	return s
}

// SetForwardIPs sets the ForwardIPs field's value.
func (s *QueryResolverRuleOutput) SetForwardIPs(v []*ForwardIPForQueryResolverRuleOutput) *QueryResolverRuleOutput {
	s.ForwardIPs = v
	return s
}

// SetID sets the ID field's value.
func (s *QueryResolverRuleOutput) SetID(v int64) *QueryResolverRuleOutput {
	s.ID = &v
	return s
}

// SetLastOperator sets the LastOperator field's value.
func (s *QueryResolverRuleOutput) SetLastOperator(v string) *QueryResolverRuleOutput {
	s.LastOperator = &v
	return s
}

// SetLine sets the Line field's value.
func (s *QueryResolverRuleOutput) SetLine(v string) *QueryResolverRuleOutput {
	s.Line = &v
	return s
}

// SetName sets the Name field's value.
func (s *QueryResolverRuleOutput) SetName(v string) *QueryResolverRuleOutput {
	s.Name = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *QueryResolverRuleOutput) SetProjectName(v string) *QueryResolverRuleOutput {
	s.ProjectName = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *QueryResolverRuleOutput) SetTags(v []*TagForQueryResolverRuleOutput) *QueryResolverRuleOutput {
	s.Tags = v
	return s
}

// SetType sets the Type field's value.
func (s *QueryResolverRuleOutput) SetType(v string) *QueryResolverRuleOutput {
	s.Type = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *QueryResolverRuleOutput) SetUpdatedAt(v string) *QueryResolverRuleOutput {
	s.UpdatedAt = &v
	return s
}

// SetZoneName sets the ZoneName field's value.
func (s *QueryResolverRuleOutput) SetZoneName(v string) *QueryResolverRuleOutput {
	s.ZoneName = &v
	return s
}

type TagForQueryResolverRuleOutput struct {
	_ struct{} `type:"structure"`

	Key *string `max:"128" type:"string"`

	Value *string `max:"256" type:"string"`
}

// String returns the string representation
func (s TagForQueryResolverRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForQueryResolverRuleOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForQueryResolverRuleOutput) SetKey(v string) *TagForQueryResolverRuleOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForQueryResolverRuleOutput) SetValue(v string) *TagForQueryResolverRuleOutput {
	s.Value = &v
	return s
}
