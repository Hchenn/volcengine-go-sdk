// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package resourcecenter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetResourceCenterStatusCommon = "GetResourceCenterStatus"

// GetResourceCenterStatusCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetResourceCenterStatusCommon operation. The "output" return
// value will be populated with the GetResourceCenterStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetResourceCenterStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetResourceCenterStatusCommon Send returns without error.
//
// See GetResourceCenterStatusCommon for more information on using the GetResourceCenterStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the GetResourceCenterStatusCommonRequest method.
//    req, resp := client.GetResourceCenterStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCECENTER) GetResourceCenterStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetResourceCenterStatusCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetResourceCenterStatusCommon API operation for RESOURCECENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCECENTER's
// API operation GetResourceCenterStatusCommon for usage and error information.
func (c *RESOURCECENTER) GetResourceCenterStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetResourceCenterStatusCommonRequest(input)
	return out, req.Send()
}

// GetResourceCenterStatusCommonWithContext is the same as GetResourceCenterStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetResourceCenterStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCECENTER) GetResourceCenterStatusCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetResourceCenterStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetResourceCenterStatus = "GetResourceCenterStatus"

// GetResourceCenterStatusRequest generates a "volcengine/request.Request" representing the
// client's request for the GetResourceCenterStatus operation. The "output" return
// value will be populated with the GetResourceCenterStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetResourceCenterStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetResourceCenterStatusCommon Send returns without error.
//
// See GetResourceCenterStatus for more information on using the GetResourceCenterStatus
// API call, and error handling.
//
//    // Example sending a request using the GetResourceCenterStatusRequest method.
//    req, resp := client.GetResourceCenterStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCECENTER) GetResourceCenterStatusRequest(input *GetResourceCenterStatusInput) (req *request.Request, output *GetResourceCenterStatusOutput) {
	op := &request.Operation{
		Name:       opGetResourceCenterStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetResourceCenterStatusInput{}
	}

	output = &GetResourceCenterStatusOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetResourceCenterStatus API operation for RESOURCECENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCECENTER's
// API operation GetResourceCenterStatus for usage and error information.
func (c *RESOURCECENTER) GetResourceCenterStatus(input *GetResourceCenterStatusInput) (*GetResourceCenterStatusOutput, error) {
	req, out := c.GetResourceCenterStatusRequest(input)
	return out, req.Send()
}

// GetResourceCenterStatusWithContext is the same as GetResourceCenterStatus with the addition of
// the ability to pass a context and additional request options.
//
// See GetResourceCenterStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCECENTER) GetResourceCenterStatusWithContext(ctx volcengine.Context, input *GetResourceCenterStatusInput, opts ...request.Option) (*GetResourceCenterStatusOutput, error) {
	req, out := c.GetResourceCenterStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetResourceCenterStatusInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s GetResourceCenterStatusInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetResourceCenterStatusInput) GoString() string {
	return s.String()
}

type GetResourceCenterStatusOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InitStatus *string `type:"string" json:",omitempty"`

	ServiceStatus *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetResourceCenterStatusOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetResourceCenterStatusOutput) GoString() string {
	return s.String()
}

// SetInitStatus sets the InitStatus field's value.
func (s *GetResourceCenterStatusOutput) SetInitStatus(v string) *GetResourceCenterStatusOutput {
	s.InitStatus = &v
	return s
}

// SetServiceStatus sets the ServiceStatus field's value.
func (s *GetResourceCenterStatusOutput) SetServiceStatus(v string) *GetResourceCenterStatusOutput {
	s.ServiceStatus = &v
	return s
}
