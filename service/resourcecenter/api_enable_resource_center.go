// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package resourcecenter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEnableResourceCenterCommon = "EnableResourceCenter"

// EnableResourceCenterCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableResourceCenterCommon operation. The "output" return
// value will be populated with the EnableResourceCenterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableResourceCenterCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableResourceCenterCommon Send returns without error.
//
// See EnableResourceCenterCommon for more information on using the EnableResourceCenterCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableResourceCenterCommonRequest method.
//    req, resp := client.EnableResourceCenterCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCECENTER) EnableResourceCenterCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableResourceCenterCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableResourceCenterCommon API operation for RESOURCECENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCECENTER's
// API operation EnableResourceCenterCommon for usage and error information.
func (c *RESOURCECENTER) EnableResourceCenterCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableResourceCenterCommonRequest(input)
	return out, req.Send()
}

// EnableResourceCenterCommonWithContext is the same as EnableResourceCenterCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableResourceCenterCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCECENTER) EnableResourceCenterCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableResourceCenterCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableResourceCenter = "EnableResourceCenter"

// EnableResourceCenterRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableResourceCenter operation. The "output" return
// value will be populated with the EnableResourceCenterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableResourceCenterCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableResourceCenterCommon Send returns without error.
//
// See EnableResourceCenter for more information on using the EnableResourceCenter
// API call, and error handling.
//
//    // Example sending a request using the EnableResourceCenterRequest method.
//    req, resp := client.EnableResourceCenterRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RESOURCECENTER) EnableResourceCenterRequest(input *EnableResourceCenterInput) (req *request.Request, output *EnableResourceCenterOutput) {
	op := &request.Operation{
		Name:       opEnableResourceCenter,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableResourceCenterInput{}
	}

	output = &EnableResourceCenterOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableResourceCenter API operation for RESOURCECENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RESOURCECENTER's
// API operation EnableResourceCenter for usage and error information.
func (c *RESOURCECENTER) EnableResourceCenter(input *EnableResourceCenterInput) (*EnableResourceCenterOutput, error) {
	req, out := c.EnableResourceCenterRequest(input)
	return out, req.Send()
}

// EnableResourceCenterWithContext is the same as EnableResourceCenter with the addition of
// the ability to pass a context and additional request options.
//
// See EnableResourceCenter for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RESOURCECENTER) EnableResourceCenterWithContext(ctx volcengine.Context, input *EnableResourceCenterInput, opts ...request.Option) (*EnableResourceCenterOutput, error) {
	req, out := c.EnableResourceCenterRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnableResourceCenterInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s EnableResourceCenterInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableResourceCenterInput) GoString() string {
	return s.String()
}

type EnableResourceCenterOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s EnableResourceCenterOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableResourceCenterOutput) GoString() string {
	return s.String()
}
