// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUnbindAssumeRoleCommon = "UnbindAssumeRole"

// UnbindAssumeRoleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UnbindAssumeRoleCommon operation. The "output" return
// value will be populated with the UnbindAssumeRoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UnbindAssumeRoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UnbindAssumeRoleCommon Send returns without error.
//
// See UnbindAssumeRoleCommon for more information on using the UnbindAssumeRoleCommon
// API call, and error handling.
//
//    // Example sending a request using the UnbindAssumeRoleCommonRequest method.
//    req, resp := client.UnbindAssumeRoleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) UnbindAssumeRoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUnbindAssumeRoleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UnbindAssumeRoleCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation UnbindAssumeRoleCommon for usage and error information.
func (c *ECS) UnbindAssumeRoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UnbindAssumeRoleCommonRequest(input)
	return out, req.Send()
}

// UnbindAssumeRoleCommonWithContext is the same as UnbindAssumeRoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UnbindAssumeRoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) UnbindAssumeRoleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UnbindAssumeRoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUnbindAssumeRole = "UnbindAssumeRole"

// UnbindAssumeRoleRequest generates a "volcengine/request.Request" representing the
// client's request for the UnbindAssumeRole operation. The "output" return
// value will be populated with the UnbindAssumeRoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UnbindAssumeRoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UnbindAssumeRoleCommon Send returns without error.
//
// See UnbindAssumeRole for more information on using the UnbindAssumeRole
// API call, and error handling.
//
//    // Example sending a request using the UnbindAssumeRoleRequest method.
//    req, resp := client.UnbindAssumeRoleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) UnbindAssumeRoleRequest(input *UnbindAssumeRoleInput) (req *request.Request, output *UnbindAssumeRoleOutput) {
	op := &request.Operation{
		Name:       opUnbindAssumeRole,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UnbindAssumeRoleInput{}
	}

	output = &UnbindAssumeRoleOutput{}
	req = c.newRequest(op, input, output)

	return
}

// UnbindAssumeRole API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation UnbindAssumeRole for usage and error information.
func (c *ECS) UnbindAssumeRole(input *UnbindAssumeRoleInput) (*UnbindAssumeRoleOutput, error) {
	req, out := c.UnbindAssumeRoleRequest(input)
	return out, req.Send()
}

// UnbindAssumeRoleWithContext is the same as UnbindAssumeRole with the addition of
// the ability to pass a context and additional request options.
//
// See UnbindAssumeRole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) UnbindAssumeRoleWithContext(ctx volcengine.Context, input *UnbindAssumeRoleInput, opts ...request.Option) (*UnbindAssumeRoleOutput, error) {
	req, out := c.UnbindAssumeRoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UnbindAssumeRoleInput struct {
	_ struct{} `type:"structure"`

	AssumeRole *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s UnbindAssumeRoleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UnbindAssumeRoleInput) GoString() string {
	return s.String()
}

// SetAssumeRole sets the AssumeRole field's value.
func (s *UnbindAssumeRoleInput) SetAssumeRole(v string) *UnbindAssumeRoleInput {
	s.AssumeRole = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *UnbindAssumeRoleInput) SetInstanceId(v string) *UnbindAssumeRoleInput {
	s.InstanceId = &v
	return s
}

type UnbindAssumeRoleOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UnbindAssumeRoleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UnbindAssumeRoleOutput) GoString() string {
	return s.String()
}
