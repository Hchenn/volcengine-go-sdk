// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"encoding/json"

	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opReplaceSystemsVolumeCommon = "ReplaceSystemsVolume"

// ReplaceSystemsVolumeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ReplaceSystemsVolumeCommon operation. The "output" return
// value will be populated with the ReplaceSystemsVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ReplaceSystemsVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ReplaceSystemsVolumeCommon Send returns without error.
//
// See ReplaceSystemsVolumeCommon for more information on using the ReplaceSystemsVolumeCommon
// API call, and error handling.
//
//    // Example sending a request using the ReplaceSystemsVolumeCommonRequest method.
//    req, resp := client.ReplaceSystemsVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReplaceSystemsVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opReplaceSystemsVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ReplaceSystemsVolumeCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation ReplaceSystemsVolumeCommon for usage and error information.
func (c *ECS) ReplaceSystemsVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ReplaceSystemsVolumeCommonRequest(input)
	return out, req.Send()
}

// ReplaceSystemsVolumeCommonWithContext is the same as ReplaceSystemsVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ReplaceSystemsVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReplaceSystemsVolumeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ReplaceSystemsVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReplaceSystemsVolume = "ReplaceSystemsVolume"

// ReplaceSystemsVolumeRequest generates a "volcengine/request.Request" representing the
// client's request for the ReplaceSystemsVolume operation. The "output" return
// value will be populated with the ReplaceSystemsVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ReplaceSystemsVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ReplaceSystemsVolumeCommon Send returns without error.
//
// See ReplaceSystemsVolume for more information on using the ReplaceSystemsVolume
// API call, and error handling.
//
//    // Example sending a request using the ReplaceSystemsVolumeRequest method.
//    req, resp := client.ReplaceSystemsVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReplaceSystemsVolumeRequest(input *ReplaceSystemsVolumeInput) (req *request.Request, output *ReplaceSystemsVolumeOutput) {
	op := &request.Operation{
		Name:       opReplaceSystemsVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ReplaceSystemsVolumeInput{}
	}

	output = &ReplaceSystemsVolumeOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ReplaceSystemsVolume API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation ReplaceSystemsVolume for usage and error information.
func (c *ECS) ReplaceSystemsVolume(input *ReplaceSystemsVolumeInput) (*ReplaceSystemsVolumeOutput, error) {
	req, out := c.ReplaceSystemsVolumeRequest(input)
	return out, req.Send()
}

// ReplaceSystemsVolumeWithContext is the same as ReplaceSystemsVolume with the addition of
// the ability to pass a context and additional request options.
//
// See ReplaceSystemsVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReplaceSystemsVolumeWithContext(ctx volcengine.Context, input *ReplaceSystemsVolumeInput, opts ...request.Option) (*ReplaceSystemsVolumeOutput, error) {
	req, out := c.ReplaceSystemsVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ReplaceSystemsVolumeInput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`

	InstanceIds []*string `type:"list"`

	KeyPairName *string `type:"string"`

	Password *string `type:"string"`

	Size *json.Number `type:"json_number"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s ReplaceSystemsVolumeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplaceSystemsVolumeInput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *ReplaceSystemsVolumeInput) SetImageId(v string) *ReplaceSystemsVolumeInput {
	s.ImageId = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *ReplaceSystemsVolumeInput) SetInstanceIds(v []*string) *ReplaceSystemsVolumeInput {
	s.InstanceIds = v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *ReplaceSystemsVolumeInput) SetKeyPairName(v string) *ReplaceSystemsVolumeInput {
	s.KeyPairName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ReplaceSystemsVolumeInput) SetPassword(v string) *ReplaceSystemsVolumeInput {
	s.Password = &v
	return s
}

// SetSize sets the Size field's value.
func (s *ReplaceSystemsVolumeInput) SetSize(v json.Number) *ReplaceSystemsVolumeInput {
	s.Size = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *ReplaceSystemsVolumeInput) SetUserData(v string) *ReplaceSystemsVolumeInput {
	s.UserData = &v
	return s
}

type ReplaceSystemsVolumeOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ReplaceSystemsVolumeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplaceSystemsVolumeOutput) GoString() string {
	return s.String()
}
