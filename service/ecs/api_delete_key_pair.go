// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteKeyPairCommon = "DeleteKeyPair"

// DeleteKeyPairCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteKeyPairCommon operation. The "output" return
// value will be populated with the DeleteKeyPairCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteKeyPairCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteKeyPairCommon Send returns without error.
//
// See DeleteKeyPairCommon for more information on using the DeleteKeyPairCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteKeyPairCommonRequest method.
//    req, resp := client.DeleteKeyPairCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteKeyPairCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteKeyPairCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteKeyPairCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteKeyPairCommon for usage and error information.
func (c *ECS) DeleteKeyPairCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteKeyPairCommonRequest(input)
	return out, req.Send()
}

// DeleteKeyPairCommonWithContext is the same as DeleteKeyPairCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteKeyPairCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteKeyPairCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteKeyPairCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteKeyPair = "DeleteKeyPair"

// DeleteKeyPairRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteKeyPair operation. The "output" return
// value will be populated with the DeleteKeyPairCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteKeyPairCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteKeyPairCommon Send returns without error.
//
// See DeleteKeyPair for more information on using the DeleteKeyPair
// API call, and error handling.
//
//    // Example sending a request using the DeleteKeyPairRequest method.
//    req, resp := client.DeleteKeyPairRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteKeyPairRequest(input *DeleteKeyPairInput) (req *request.Request, output *DeleteKeyPairOutput) {
	op := &request.Operation{
		Name:       opDeleteKeyPair,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteKeyPairInput{}
	}

	output = &DeleteKeyPairOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteKeyPair API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteKeyPair for usage and error information.
func (c *ECS) DeleteKeyPair(input *DeleteKeyPairInput) (*DeleteKeyPairOutput, error) {
	req, out := c.DeleteKeyPairRequest(input)
	return out, req.Send()
}

// DeleteKeyPairWithContext is the same as DeleteKeyPair with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteKeyPair for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteKeyPairWithContext(ctx volcengine.Context, input *DeleteKeyPairInput, opts ...request.Option) (*DeleteKeyPairOutput, error) {
	req, out := c.DeleteKeyPairRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteKeyPairInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	KeyPairId *string `type:"string"`

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s DeleteKeyPairInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteKeyPairInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DeleteKeyPairInput) SetAccountId(v string) *DeleteKeyPairInput {
	s.AccountId = &v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *DeleteKeyPairInput) SetKeyPairId(v string) *DeleteKeyPairInput {
	s.KeyPairId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *DeleteKeyPairInput) SetKeyPairName(v string) *DeleteKeyPairInput {
	s.KeyPairName = &v
	return s
}

type DeleteKeyPairOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s DeleteKeyPairOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteKeyPairOutput) GoString() string {
	return s.String()
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *DeleteKeyPairOutput) SetKeyPairName(v string) *DeleteKeyPairOutput {
	s.KeyPairName = &v
	return s
}
