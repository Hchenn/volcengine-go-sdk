// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeHpcPeeringConnectionsCommon = "DescribeHpcPeeringConnections"

// DescribeHpcPeeringConnectionsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeHpcPeeringConnectionsCommon operation. The "output" return
// value will be populated with the DescribeHpcPeeringConnectionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeHpcPeeringConnectionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeHpcPeeringConnectionsCommon Send returns without error.
//
// See DescribeHpcPeeringConnectionsCommon for more information on using the DescribeHpcPeeringConnectionsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeHpcPeeringConnectionsCommonRequest method.
//    req, resp := client.DescribeHpcPeeringConnectionsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeHpcPeeringConnectionsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeHpcPeeringConnectionsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeHpcPeeringConnectionsCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeHpcPeeringConnectionsCommon for usage and error information.
func (c *ECS) DescribeHpcPeeringConnectionsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeHpcPeeringConnectionsCommonRequest(input)
	return out, req.Send()
}

// DescribeHpcPeeringConnectionsCommonWithContext is the same as DescribeHpcPeeringConnectionsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHpcPeeringConnectionsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeHpcPeeringConnectionsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeHpcPeeringConnectionsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeHpcPeeringConnections = "DescribeHpcPeeringConnections"

// DescribeHpcPeeringConnectionsRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeHpcPeeringConnections operation. The "output" return
// value will be populated with the DescribeHpcPeeringConnectionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeHpcPeeringConnectionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeHpcPeeringConnectionsCommon Send returns without error.
//
// See DescribeHpcPeeringConnections for more information on using the DescribeHpcPeeringConnections
// API call, and error handling.
//
//    // Example sending a request using the DescribeHpcPeeringConnectionsRequest method.
//    req, resp := client.DescribeHpcPeeringConnectionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeHpcPeeringConnectionsRequest(input *DescribeHpcPeeringConnectionsInput) (req *request.Request, output *DescribeHpcPeeringConnectionsOutput) {
	op := &request.Operation{
		Name:       opDescribeHpcPeeringConnections,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeHpcPeeringConnectionsInput{}
	}

	output = &DescribeHpcPeeringConnectionsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeHpcPeeringConnections API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeHpcPeeringConnections for usage and error information.
func (c *ECS) DescribeHpcPeeringConnections(input *DescribeHpcPeeringConnectionsInput) (*DescribeHpcPeeringConnectionsOutput, error) {
	req, out := c.DescribeHpcPeeringConnectionsRequest(input)
	return out, req.Send()
}

// DescribeHpcPeeringConnectionsWithContext is the same as DescribeHpcPeeringConnections with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHpcPeeringConnections for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeHpcPeeringConnectionsWithContext(ctx volcengine.Context, input *DescribeHpcPeeringConnectionsInput, opts ...request.Option) (*DescribeHpcPeeringConnectionsOutput, error) {
	req, out := c.DescribeHpcPeeringConnectionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeHpcPeeringConnectionsInput struct {
	_ struct{} `type:"structure"`

	AccepterHpcClusterId *string `type:"string"`

	MaxResults *int32 `type:"int32"`

	NextToken *string `type:"string"`

	RequesterHpcClusterId *string `type:"string"`
}

// String returns the string representation
func (s DescribeHpcPeeringConnectionsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHpcPeeringConnectionsInput) GoString() string {
	return s.String()
}

// SetAccepterHpcClusterId sets the AccepterHpcClusterId field's value.
func (s *DescribeHpcPeeringConnectionsInput) SetAccepterHpcClusterId(v string) *DescribeHpcPeeringConnectionsInput {
	s.AccepterHpcClusterId = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeHpcPeeringConnectionsInput) SetMaxResults(v int32) *DescribeHpcPeeringConnectionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeHpcPeeringConnectionsInput) SetNextToken(v string) *DescribeHpcPeeringConnectionsInput {
	s.NextToken = &v
	return s
}

// SetRequesterHpcClusterId sets the RequesterHpcClusterId field's value.
func (s *DescribeHpcPeeringConnectionsInput) SetRequesterHpcClusterId(v string) *DescribeHpcPeeringConnectionsInput {
	s.RequesterHpcClusterId = &v
	return s
}

type DescribeHpcPeeringConnectionsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	HpcPeeringConnectionSet []*HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput `type:"list"`

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s DescribeHpcPeeringConnectionsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHpcPeeringConnectionsOutput) GoString() string {
	return s.String()
}

// SetHpcPeeringConnectionSet sets the HpcPeeringConnectionSet field's value.
func (s *DescribeHpcPeeringConnectionsOutput) SetHpcPeeringConnectionSet(v []*HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput) *DescribeHpcPeeringConnectionsOutput {
	s.HpcPeeringConnectionSet = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeHpcPeeringConnectionsOutput) SetNextToken(v string) *DescribeHpcPeeringConnectionsOutput {
	s.NextToken = &v
	return s
}

type HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput struct {
	_ struct{} `type:"structure"`

	AccepterHpcClusterId *string `type:"string"`

	CreatedTime *string `type:"string"`

	ExpiredTime *string `type:"string"`

	Id *string `type:"string"`

	RequesterHpcClusterId *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput) GoString() string {
	return s.String()
}

// SetAccepterHpcClusterId sets the AccepterHpcClusterId field's value.
func (s *HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput) SetAccepterHpcClusterId(v string) *HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput {
	s.AccepterHpcClusterId = &v
	return s
}

// SetCreatedTime sets the CreatedTime field's value.
func (s *HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput) SetCreatedTime(v string) *HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput {
	s.CreatedTime = &v
	return s
}

// SetExpiredTime sets the ExpiredTime field's value.
func (s *HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput) SetExpiredTime(v string) *HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput {
	s.ExpiredTime = &v
	return s
}

// SetId sets the Id field's value.
func (s *HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput) SetId(v string) *HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput {
	s.Id = &v
	return s
}

// SetRequesterHpcClusterId sets the RequesterHpcClusterId field's value.
func (s *HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput) SetRequesterHpcClusterId(v string) *HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput {
	s.RequesterHpcClusterId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput) SetStatus(v string) *HpcPeeringConnectionSetForDescribeHpcPeeringConnectionsOutput {
	s.Status = &v
	return s
}
