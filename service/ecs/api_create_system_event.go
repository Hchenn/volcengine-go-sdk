// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateSystemEventCommon = "CreateSystemEvent"

// CreateSystemEventCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateSystemEventCommon operation. The "output" return
// value will be populated with the CreateSystemEventCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSystemEventCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSystemEventCommon Send returns without error.
//
// See CreateSystemEventCommon for more information on using the CreateSystemEventCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateSystemEventCommonRequest method.
//    req, resp := client.CreateSystemEventCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateSystemEventCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateSystemEventCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSystemEventCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation CreateSystemEventCommon for usage and error information.
func (c *ECS) CreateSystemEventCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateSystemEventCommonRequest(input)
	return out, req.Send()
}

// CreateSystemEventCommonWithContext is the same as CreateSystemEventCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSystemEventCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateSystemEventCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateSystemEventCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSystemEvent = "CreateSystemEvent"

// CreateSystemEventRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateSystemEvent operation. The "output" return
// value will be populated with the CreateSystemEventCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSystemEventCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSystemEventCommon Send returns without error.
//
// See CreateSystemEvent for more information on using the CreateSystemEvent
// API call, and error handling.
//
//    // Example sending a request using the CreateSystemEventRequest method.
//    req, resp := client.CreateSystemEventRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateSystemEventRequest(input *CreateSystemEventInput) (req *request.Request, output *CreateSystemEventOutput) {
	op := &request.Operation{
		Name:       opCreateSystemEvent,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateSystemEventInput{}
	}

	output = &CreateSystemEventOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSystemEvent API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation CreateSystemEvent for usage and error information.
func (c *ECS) CreateSystemEvent(input *CreateSystemEventInput) (*CreateSystemEventOutput, error) {
	req, out := c.CreateSystemEventRequest(input)
	return out, req.Send()
}

// CreateSystemEventWithContext is the same as CreateSystemEvent with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSystemEvent for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateSystemEventWithContext(ctx volcengine.Context, input *CreateSystemEventInput, opts ...request.Option) (*CreateSystemEventOutput, error) {
	req, out := c.CreateSystemEventRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateSystemEventInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	CreatedAt *string `type:"string"`

	ResourceId *string `type:"string"`

	Status *string `type:"string" enum:"StatusForCreateSystemEventInput"`

	TicketId *string `type:"string"`

	Type *string `type:"string" enum:"TypeForCreateSystemEventInput"`

	Uuid *string `type:"string"`
}

// String returns the string representation
func (s CreateSystemEventInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSystemEventInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *CreateSystemEventInput) SetAccountId(v string) *CreateSystemEventInput {
	s.AccountId = &v
	return s
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *CreateSystemEventInput) SetCreatedAt(v string) *CreateSystemEventInput {
	s.CreatedAt = &v
	return s
}

// SetResourceId sets the ResourceId field's value.
func (s *CreateSystemEventInput) SetResourceId(v string) *CreateSystemEventInput {
	s.ResourceId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *CreateSystemEventInput) SetStatus(v string) *CreateSystemEventInput {
	s.Status = &v
	return s
}

// SetTicketId sets the TicketId field's value.
func (s *CreateSystemEventInput) SetTicketId(v string) *CreateSystemEventInput {
	s.TicketId = &v
	return s
}

// SetType sets the Type field's value.
func (s *CreateSystemEventInput) SetType(v string) *CreateSystemEventInput {
	s.Type = &v
	return s
}

// SetUuid sets the Uuid field's value.
func (s *CreateSystemEventInput) SetUuid(v string) *CreateSystemEventInput {
	s.Uuid = &v
	return s
}

type CreateSystemEventOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	EventId *string `type:"string"`
}

// String returns the string representation
func (s CreateSystemEventOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSystemEventOutput) GoString() string {
	return s.String()
}

// SetEventId sets the EventId field's value.
func (s *CreateSystemEventOutput) SetEventId(v string) *CreateSystemEventOutput {
	s.EventId = &v
	return s
}

const (
	// StatusForCreateSystemEventInputUnknownStatus is a StatusForCreateSystemEventInput enum value
	StatusForCreateSystemEventInputUnknownStatus = "UnknownStatus"

	// StatusForCreateSystemEventInputExecuting is a StatusForCreateSystemEventInput enum value
	StatusForCreateSystemEventInputExecuting = "Executing"

	// StatusForCreateSystemEventInputSucceeded is a StatusForCreateSystemEventInput enum value
	StatusForCreateSystemEventInputSucceeded = "Succeeded"

	// StatusForCreateSystemEventInputFailed is a StatusForCreateSystemEventInput enum value
	StatusForCreateSystemEventInputFailed = "Failed"

	// StatusForCreateSystemEventInputInquiring is a StatusForCreateSystemEventInput enum value
	StatusForCreateSystemEventInputInquiring = "Inquiring"

	// StatusForCreateSystemEventInputScheduled is a StatusForCreateSystemEventInput enum value
	StatusForCreateSystemEventInputScheduled = "Scheduled"

	// StatusForCreateSystemEventInputRejected is a StatusForCreateSystemEventInput enum value
	StatusForCreateSystemEventInputRejected = "Rejected"

	// StatusForCreateSystemEventInputCanceled is a StatusForCreateSystemEventInput enum value
	StatusForCreateSystemEventInputCanceled = "Canceled"
)

const (
	// TypeForCreateSystemEventInputUnknownType is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputUnknownType = "UnknownType"

	// TypeForCreateSystemEventInputSystemFailureStop is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputSystemFailureStop = "SystemFailure_Stop"

	// TypeForCreateSystemEventInputSystemFailureReboot is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputSystemFailureReboot = "SystemFailure_Reboot"

	// TypeForCreateSystemEventInputSystemFailurePleaseCheck is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputSystemFailurePleaseCheck = "SystemFailure_PleaseCheck"

	// TypeForCreateSystemEventInputDiskErrorRedeploy is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputDiskErrorRedeploy = "DiskError_Redeploy"

	// TypeForCreateSystemEventInputHddbadSectorRedeploy is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputHddbadSectorRedeploy = "HDDBadSector_Redeploy"

	// TypeForCreateSystemEventInputGpuErrorRedeploy is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputGpuErrorRedeploy = "GpuError_Redeploy"

	// TypeForCreateSystemEventInputSystemMaintenanceRedeploy is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputSystemMaintenanceRedeploy = "SystemMaintenance_Redeploy"

	// TypeForCreateSystemEventInputSystemFailureRedeploy is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputSystemFailureRedeploy = "SystemFailure_Redeploy"

	// TypeForCreateSystemEventInputCreateInstance is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputCreateInstance = "CreateInstance"

	// TypeForCreateSystemEventInputRunInstance is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputRunInstance = "RunInstance"

	// TypeForCreateSystemEventInputStopInstance is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputStopInstance = "StopInstance"

	// TypeForCreateSystemEventInputDeleteInstance is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputDeleteInstance = "DeleteInstance"

	// TypeForCreateSystemEventInputSpotInstanceInterruptionDelete is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputSpotInstanceInterruptionDelete = "SpotInstanceInterruption_Delete"

	// TypeForCreateSystemEventInputAccountUnbalancedStop is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputAccountUnbalancedStop = "AccountUnbalanced_Stop"

	// TypeForCreateSystemEventInputAccountUnbalancedDelete is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputAccountUnbalancedDelete = "AccountUnbalanced_Delete"

	// TypeForCreateSystemEventInputInstanceChargeTypeChange is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputInstanceChargeTypeChange = "InstanceChargeType_Change"

	// TypeForCreateSystemEventInputInstanceConfigurationChange is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputInstanceConfigurationChange = "InstanceConfiguration_Change"

	// TypeForCreateSystemEventInputFileSystemReadOnlyChange is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputFileSystemReadOnlyChange = "FileSystemReadOnly_Change"

	// TypeForCreateSystemEventInputRebootInstance is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputRebootInstance = "RebootInstance"

	// TypeForCreateSystemEventInputInstanceFailure is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputInstanceFailure = "InstanceFailure"

	// TypeForCreateSystemEventInputApplicationFailure is a TypeForCreateSystemEventInput enum value
	TypeForCreateSystemEventInputApplicationFailure = "ApplicationFailure"
)
