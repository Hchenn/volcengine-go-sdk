// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteHpcPeeringConnectionCommon = "DeleteHpcPeeringConnection"

// DeleteHpcPeeringConnectionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteHpcPeeringConnectionCommon operation. The "output" return
// value will be populated with the DeleteHpcPeeringConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteHpcPeeringConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteHpcPeeringConnectionCommon Send returns without error.
//
// See DeleteHpcPeeringConnectionCommon for more information on using the DeleteHpcPeeringConnectionCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteHpcPeeringConnectionCommonRequest method.
//    req, resp := client.DeleteHpcPeeringConnectionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteHpcPeeringConnectionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteHpcPeeringConnectionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteHpcPeeringConnectionCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteHpcPeeringConnectionCommon for usage and error information.
func (c *ECS) DeleteHpcPeeringConnectionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteHpcPeeringConnectionCommonRequest(input)
	return out, req.Send()
}

// DeleteHpcPeeringConnectionCommonWithContext is the same as DeleteHpcPeeringConnectionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteHpcPeeringConnectionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteHpcPeeringConnectionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteHpcPeeringConnectionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteHpcPeeringConnection = "DeleteHpcPeeringConnection"

// DeleteHpcPeeringConnectionRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteHpcPeeringConnection operation. The "output" return
// value will be populated with the DeleteHpcPeeringConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteHpcPeeringConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteHpcPeeringConnectionCommon Send returns without error.
//
// See DeleteHpcPeeringConnection for more information on using the DeleteHpcPeeringConnection
// API call, and error handling.
//
//    // Example sending a request using the DeleteHpcPeeringConnectionRequest method.
//    req, resp := client.DeleteHpcPeeringConnectionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteHpcPeeringConnectionRequest(input *DeleteHpcPeeringConnectionInput) (req *request.Request, output *DeleteHpcPeeringConnectionOutput) {
	op := &request.Operation{
		Name:       opDeleteHpcPeeringConnection,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteHpcPeeringConnectionInput{}
	}

	output = &DeleteHpcPeeringConnectionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteHpcPeeringConnection API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteHpcPeeringConnection for usage and error information.
func (c *ECS) DeleteHpcPeeringConnection(input *DeleteHpcPeeringConnectionInput) (*DeleteHpcPeeringConnectionOutput, error) {
	req, out := c.DeleteHpcPeeringConnectionRequest(input)
	return out, req.Send()
}

// DeleteHpcPeeringConnectionWithContext is the same as DeleteHpcPeeringConnection with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteHpcPeeringConnection for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteHpcPeeringConnectionWithContext(ctx volcengine.Context, input *DeleteHpcPeeringConnectionInput, opts ...request.Option) (*DeleteHpcPeeringConnectionOutput, error) {
	req, out := c.DeleteHpcPeeringConnectionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteHpcPeeringConnectionInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	DryRun *bool `type:"boolean"`

	HpcPeeringConnectionId *string `type:"string"`
}

// String returns the string representation
func (s DeleteHpcPeeringConnectionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteHpcPeeringConnectionInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *DeleteHpcPeeringConnectionInput) SetClientToken(v string) *DeleteHpcPeeringConnectionInput {
	s.ClientToken = &v
	return s
}

// SetDryRun sets the DryRun field's value.
func (s *DeleteHpcPeeringConnectionInput) SetDryRun(v bool) *DeleteHpcPeeringConnectionInput {
	s.DryRun = &v
	return s
}

// SetHpcPeeringConnectionId sets the HpcPeeringConnectionId field's value.
func (s *DeleteHpcPeeringConnectionInput) SetHpcPeeringConnectionId(v string) *DeleteHpcPeeringConnectionInput {
	s.HpcPeeringConnectionId = &v
	return s
}

type DeleteHpcPeeringConnectionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteHpcPeeringConnectionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteHpcPeeringConnectionOutput) GoString() string {
	return s.String()
}
