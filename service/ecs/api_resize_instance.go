// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opResizeInstanceCommon = "ResizeInstance"

// ResizeInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ResizeInstanceCommon operation. The "output" return
// value will be populated with the ResizeInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResizeInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResizeInstanceCommon Send returns without error.
//
// See ResizeInstanceCommon for more information on using the ResizeInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the ResizeInstanceCommonRequest method.
//    req, resp := client.ResizeInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ResizeInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResizeInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ResizeInstanceCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation ResizeInstanceCommon for usage and error information.
func (c *ECS) ResizeInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResizeInstanceCommonRequest(input)
	return out, req.Send()
}

// ResizeInstanceCommonWithContext is the same as ResizeInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResizeInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ResizeInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResizeInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResizeInstance = "ResizeInstance"

// ResizeInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the ResizeInstance operation. The "output" return
// value will be populated with the ResizeInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResizeInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResizeInstanceCommon Send returns without error.
//
// See ResizeInstance for more information on using the ResizeInstance
// API call, and error handling.
//
//    // Example sending a request using the ResizeInstanceRequest method.
//    req, resp := client.ResizeInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ResizeInstanceRequest(input *ResizeInstanceInput) (req *request.Request, output *ResizeInstanceOutput) {
	op := &request.Operation{
		Name:       opResizeInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResizeInstanceInput{}
	}

	output = &ResizeInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ResizeInstance API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation ResizeInstance for usage and error information.
func (c *ECS) ResizeInstance(input *ResizeInstanceInput) (*ResizeInstanceOutput, error) {
	req, out := c.ResizeInstanceRequest(input)
	return out, req.Send()
}

// ResizeInstanceWithContext is the same as ResizeInstance with the addition of
// the ability to pass a context and additional request options.
//
// See ResizeInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ResizeInstanceWithContext(ctx volcengine.Context, input *ResizeInstanceInput, opts ...request.Option) (*ResizeInstanceOutput, error) {
	req, out := c.ResizeInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ResizeInstanceInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	DryRun *bool `type:"boolean"`

	InstanceId *string `type:"string"`

	InstanceType *string `type:"string"`

	InstanceTypeId *string `type:"string"`

	NeedPreorders *bool `type:"boolean"`
}

// String returns the string representation
func (s ResizeInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResizeInstanceInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *ResizeInstanceInput) SetClientToken(v string) *ResizeInstanceInput {
	s.ClientToken = &v
	return s
}

// SetDryRun sets the DryRun field's value.
func (s *ResizeInstanceInput) SetDryRun(v bool) *ResizeInstanceInput {
	s.DryRun = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResizeInstanceInput) SetInstanceId(v string) *ResizeInstanceInput {
	s.InstanceId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *ResizeInstanceInput) SetInstanceType(v string) *ResizeInstanceInput {
	s.InstanceType = &v
	return s
}

// SetInstanceTypeId sets the InstanceTypeId field's value.
func (s *ResizeInstanceInput) SetInstanceTypeId(v string) *ResizeInstanceInput {
	s.InstanceTypeId = &v
	return s
}

// SetNeedPreorders sets the NeedPreorders field's value.
func (s *ResizeInstanceInput) SetNeedPreorders(v bool) *ResizeInstanceInput {
	s.NeedPreorders = &v
	return s
}

type ResizeInstanceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string"`

	OrderId *string `type:"string"`

	PreorderIds []*string `type:"list"`
}

// String returns the string representation
func (s ResizeInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResizeInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResizeInstanceOutput) SetInstanceId(v string) *ResizeInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetOrderId sets the OrderId field's value.
func (s *ResizeInstanceOutput) SetOrderId(v string) *ResizeInstanceOutput {
	s.OrderId = &v
	return s
}

// SetPreorderIds sets the PreorderIds field's value.
func (s *ResizeInstanceOutput) SetPreorderIds(v []*string) *ResizeInstanceOutput {
	s.PreorderIds = v
	return s
}
