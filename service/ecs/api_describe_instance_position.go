// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeInstancePositionCommon = "DescribeInstancePosition"

// DescribeInstancePositionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeInstancePositionCommon operation. The "output" return
// value will be populated with the DescribeInstancePositionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstancePositionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstancePositionCommon Send returns without error.
//
// See DescribeInstancePositionCommon for more information on using the DescribeInstancePositionCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstancePositionCommonRequest method.
//    req, resp := client.DescribeInstancePositionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstancePositionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstancePositionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstancePositionCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeInstancePositionCommon for usage and error information.
func (c *ECS) DescribeInstancePositionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstancePositionCommonRequest(input)
	return out, req.Send()
}

// DescribeInstancePositionCommonWithContext is the same as DescribeInstancePositionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstancePositionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstancePositionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstancePositionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstancePosition = "DescribeInstancePosition"

// DescribeInstancePositionRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeInstancePosition operation. The "output" return
// value will be populated with the DescribeInstancePositionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstancePositionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstancePositionCommon Send returns without error.
//
// See DescribeInstancePosition for more information on using the DescribeInstancePosition
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstancePositionRequest method.
//    req, resp := client.DescribeInstancePositionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstancePositionRequest(input *DescribeInstancePositionInput) (req *request.Request, output *DescribeInstancePositionOutput) {
	op := &request.Operation{
		Name:       opDescribeInstancePosition,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstancePositionInput{}
	}

	output = &DescribeInstancePositionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstancePosition API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeInstancePosition for usage and error information.
func (c *ECS) DescribeInstancePosition(input *DescribeInstancePositionInput) (*DescribeInstancePositionOutput, error) {
	req, out := c.DescribeInstancePositionRequest(input)
	return out, req.Send()
}

// DescribeInstancePositionWithContext is the same as DescribeInstancePosition with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstancePosition for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstancePositionWithContext(ctx volcengine.Context, input *DescribeInstancePositionInput, opts ...request.Option) (*DescribeInstancePositionOutput, error) {
	req, out := c.DescribeInstancePositionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeInstancePositionInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	InstanceIds []*string `type:"list"`

	MaxResults *int32 `type:"int32"`

	NextToken *string `type:"string"`

	VpcId *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstancePositionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstancePositionInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeInstancePositionInput) SetAccountId(v string) *DescribeInstancePositionInput {
	s.AccountId = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *DescribeInstancePositionInput) SetInstanceIds(v []*string) *DescribeInstancePositionInput {
	s.InstanceIds = v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeInstancePositionInput) SetMaxResults(v int32) *DescribeInstancePositionInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeInstancePositionInput) SetNextToken(v string) *DescribeInstancePositionInput {
	s.NextToken = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeInstancePositionInput) SetVpcId(v string) *DescribeInstancePositionInput {
	s.VpcId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeInstancePositionInput) SetZoneId(v string) *DescribeInstancePositionInput {
	s.ZoneId = &v
	return s
}

type DescribeInstancePositionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	InstancePositionInfos []*InstancePositionInfoForDescribeInstancePositionOutput `type:"list"`

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstancePositionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstancePositionOutput) GoString() string {
	return s.String()
}

// SetInstancePositionInfos sets the InstancePositionInfos field's value.
func (s *DescribeInstancePositionOutput) SetInstancePositionInfos(v []*InstancePositionInfoForDescribeInstancePositionOutput) *DescribeInstancePositionOutput {
	s.InstancePositionInfos = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeInstancePositionOutput) SetNextToken(v string) *DescribeInstancePositionOutput {
	s.NextToken = &v
	return s
}

type InstancePositionInfoForDescribeInstancePositionOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	PosCode *string `type:"string"`

	RckName *string `type:"string"`

	SwitchName *string `type:"string"`

	VpcId *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s InstancePositionInfoForDescribeInstancePositionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InstancePositionInfoForDescribeInstancePositionOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *InstancePositionInfoForDescribeInstancePositionOutput) SetInstanceId(v string) *InstancePositionInfoForDescribeInstancePositionOutput {
	s.InstanceId = &v
	return s
}

// SetPosCode sets the PosCode field's value.
func (s *InstancePositionInfoForDescribeInstancePositionOutput) SetPosCode(v string) *InstancePositionInfoForDescribeInstancePositionOutput {
	s.PosCode = &v
	return s
}

// SetRckName sets the RckName field's value.
func (s *InstancePositionInfoForDescribeInstancePositionOutput) SetRckName(v string) *InstancePositionInfoForDescribeInstancePositionOutput {
	s.RckName = &v
	return s
}

// SetSwitchName sets the SwitchName field's value.
func (s *InstancePositionInfoForDescribeInstancePositionOutput) SetSwitchName(v string) *InstancePositionInfoForDescribeInstancePositionOutput {
	s.SwitchName = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *InstancePositionInfoForDescribeInstancePositionOutput) SetVpcId(v string) *InstancePositionInfoForDescribeInstancePositionOutput {
	s.VpcId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *InstancePositionInfoForDescribeInstancePositionOutput) SetZoneId(v string) *InstancePositionInfoForDescribeInstancePositionOutput {
	s.ZoneId = &v
	return s
}
