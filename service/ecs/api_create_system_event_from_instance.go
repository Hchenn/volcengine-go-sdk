// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateSystemEventFromInstanceCommon = "CreateSystemEventFromInstance"

// CreateSystemEventFromInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateSystemEventFromInstanceCommon operation. The "output" return
// value will be populated with the CreateSystemEventFromInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSystemEventFromInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSystemEventFromInstanceCommon Send returns without error.
//
// See CreateSystemEventFromInstanceCommon for more information on using the CreateSystemEventFromInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateSystemEventFromInstanceCommonRequest method.
//    req, resp := client.CreateSystemEventFromInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateSystemEventFromInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateSystemEventFromInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSystemEventFromInstanceCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation CreateSystemEventFromInstanceCommon for usage and error information.
func (c *ECS) CreateSystemEventFromInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateSystemEventFromInstanceCommonRequest(input)
	return out, req.Send()
}

// CreateSystemEventFromInstanceCommonWithContext is the same as CreateSystemEventFromInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSystemEventFromInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateSystemEventFromInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateSystemEventFromInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSystemEventFromInstance = "CreateSystemEventFromInstance"

// CreateSystemEventFromInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateSystemEventFromInstance operation. The "output" return
// value will be populated with the CreateSystemEventFromInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSystemEventFromInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSystemEventFromInstanceCommon Send returns without error.
//
// See CreateSystemEventFromInstance for more information on using the CreateSystemEventFromInstance
// API call, and error handling.
//
//    // Example sending a request using the CreateSystemEventFromInstanceRequest method.
//    req, resp := client.CreateSystemEventFromInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateSystemEventFromInstanceRequest(input *CreateSystemEventFromInstanceInput) (req *request.Request, output *CreateSystemEventFromInstanceOutput) {
	op := &request.Operation{
		Name:       opCreateSystemEventFromInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateSystemEventFromInstanceInput{}
	}

	output = &CreateSystemEventFromInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSystemEventFromInstance API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation CreateSystemEventFromInstance for usage and error information.
func (c *ECS) CreateSystemEventFromInstance(input *CreateSystemEventFromInstanceInput) (*CreateSystemEventFromInstanceOutput, error) {
	req, out := c.CreateSystemEventFromInstanceRequest(input)
	return out, req.Send()
}

// CreateSystemEventFromInstanceWithContext is the same as CreateSystemEventFromInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSystemEventFromInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateSystemEventFromInstanceWithContext(ctx volcengine.Context, input *CreateSystemEventFromInstanceInput, opts ...request.Option) (*CreateSystemEventFromInstanceOutput, error) {
	req, out := c.CreateSystemEventFromInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateSystemEventFromInstanceInput struct {
	_ struct{} `type:"structure"`

	CreatedAt *string `type:"string"`

	Status *string `type:"string" enum:"StatusForCreateSystemEventFromInstanceInput"`

	Type *string `type:"string" enum:"TypeForCreateSystemEventFromInstanceInput"`

	Uuid *string `type:"string"`
}

// String returns the string representation
func (s CreateSystemEventFromInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSystemEventFromInstanceInput) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *CreateSystemEventFromInstanceInput) SetCreatedAt(v string) *CreateSystemEventFromInstanceInput {
	s.CreatedAt = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *CreateSystemEventFromInstanceInput) SetStatus(v string) *CreateSystemEventFromInstanceInput {
	s.Status = &v
	return s
}

// SetType sets the Type field's value.
func (s *CreateSystemEventFromInstanceInput) SetType(v string) *CreateSystemEventFromInstanceInput {
	s.Type = &v
	return s
}

// SetUuid sets the Uuid field's value.
func (s *CreateSystemEventFromInstanceInput) SetUuid(v string) *CreateSystemEventFromInstanceInput {
	s.Uuid = &v
	return s
}

type CreateSystemEventFromInstanceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	EventId *string `type:"string"`
}

// String returns the string representation
func (s CreateSystemEventFromInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSystemEventFromInstanceOutput) GoString() string {
	return s.String()
}

// SetEventId sets the EventId field's value.
func (s *CreateSystemEventFromInstanceOutput) SetEventId(v string) *CreateSystemEventFromInstanceOutput {
	s.EventId = &v
	return s
}

const (
	// StatusForCreateSystemEventFromInstanceInputUnknownStatus is a StatusForCreateSystemEventFromInstanceInput enum value
	StatusForCreateSystemEventFromInstanceInputUnknownStatus = "UnknownStatus"

	// StatusForCreateSystemEventFromInstanceInputExecuting is a StatusForCreateSystemEventFromInstanceInput enum value
	StatusForCreateSystemEventFromInstanceInputExecuting = "Executing"

	// StatusForCreateSystemEventFromInstanceInputSucceeded is a StatusForCreateSystemEventFromInstanceInput enum value
	StatusForCreateSystemEventFromInstanceInputSucceeded = "Succeeded"

	// StatusForCreateSystemEventFromInstanceInputFailed is a StatusForCreateSystemEventFromInstanceInput enum value
	StatusForCreateSystemEventFromInstanceInputFailed = "Failed"

	// StatusForCreateSystemEventFromInstanceInputInquiring is a StatusForCreateSystemEventFromInstanceInput enum value
	StatusForCreateSystemEventFromInstanceInputInquiring = "Inquiring"

	// StatusForCreateSystemEventFromInstanceInputScheduled is a StatusForCreateSystemEventFromInstanceInput enum value
	StatusForCreateSystemEventFromInstanceInputScheduled = "Scheduled"

	// StatusForCreateSystemEventFromInstanceInputRejected is a StatusForCreateSystemEventFromInstanceInput enum value
	StatusForCreateSystemEventFromInstanceInputRejected = "Rejected"

	// StatusForCreateSystemEventFromInstanceInputCanceled is a StatusForCreateSystemEventFromInstanceInput enum value
	StatusForCreateSystemEventFromInstanceInputCanceled = "Canceled"
)

const (
	// TypeForCreateSystemEventFromInstanceInputUnknownType is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputUnknownType = "UnknownType"

	// TypeForCreateSystemEventFromInstanceInputSystemFailureStop is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputSystemFailureStop = "SystemFailure_Stop"

	// TypeForCreateSystemEventFromInstanceInputSystemFailureReboot is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputSystemFailureReboot = "SystemFailure_Reboot"

	// TypeForCreateSystemEventFromInstanceInputSystemFailurePleaseCheck is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputSystemFailurePleaseCheck = "SystemFailure_PleaseCheck"

	// TypeForCreateSystemEventFromInstanceInputDiskErrorRedeploy is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputDiskErrorRedeploy = "DiskError_Redeploy"

	// TypeForCreateSystemEventFromInstanceInputHddbadSectorRedeploy is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputHddbadSectorRedeploy = "HDDBadSector_Redeploy"

	// TypeForCreateSystemEventFromInstanceInputGpuErrorRedeploy is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputGpuErrorRedeploy = "GpuError_Redeploy"

	// TypeForCreateSystemEventFromInstanceInputSystemMaintenanceRedeploy is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputSystemMaintenanceRedeploy = "SystemMaintenance_Redeploy"

	// TypeForCreateSystemEventFromInstanceInputSystemFailureRedeploy is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputSystemFailureRedeploy = "SystemFailure_Redeploy"

	// TypeForCreateSystemEventFromInstanceInputCreateInstance is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputCreateInstance = "CreateInstance"

	// TypeForCreateSystemEventFromInstanceInputRunInstance is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputRunInstance = "RunInstance"

	// TypeForCreateSystemEventFromInstanceInputStopInstance is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputStopInstance = "StopInstance"

	// TypeForCreateSystemEventFromInstanceInputDeleteInstance is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputDeleteInstance = "DeleteInstance"

	// TypeForCreateSystemEventFromInstanceInputSpotInstanceInterruptionDelete is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputSpotInstanceInterruptionDelete = "SpotInstanceInterruption_Delete"

	// TypeForCreateSystemEventFromInstanceInputAccountUnbalancedStop is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputAccountUnbalancedStop = "AccountUnbalanced_Stop"

	// TypeForCreateSystemEventFromInstanceInputAccountUnbalancedDelete is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputAccountUnbalancedDelete = "AccountUnbalanced_Delete"

	// TypeForCreateSystemEventFromInstanceInputInstanceChargeTypeChange is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputInstanceChargeTypeChange = "InstanceChargeType_Change"

	// TypeForCreateSystemEventFromInstanceInputInstanceConfigurationChange is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputInstanceConfigurationChange = "InstanceConfiguration_Change"

	// TypeForCreateSystemEventFromInstanceInputFileSystemReadOnlyChange is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputFileSystemReadOnlyChange = "FileSystemReadOnly_Change"

	// TypeForCreateSystemEventFromInstanceInputRebootInstance is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputRebootInstance = "RebootInstance"

	// TypeForCreateSystemEventFromInstanceInputInstanceFailure is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputInstanceFailure = "InstanceFailure"

	// TypeForCreateSystemEventFromInstanceInputApplicationFailure is a TypeForCreateSystemEventFromInstanceInput enum value
	TypeForCreateSystemEventFromInstanceInputApplicationFailure = "ApplicationFailure"
)
