// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"encoding/json"

	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeSubscriptionsCommon = "DescribeSubscriptions"

// DescribeSubscriptionsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeSubscriptionsCommon operation. The "output" return
// value will be populated with the DescribeSubscriptionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSubscriptionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSubscriptionsCommon Send returns without error.
//
// See DescribeSubscriptionsCommon for more information on using the DescribeSubscriptionsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeSubscriptionsCommonRequest method.
//    req, resp := client.DescribeSubscriptionsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeSubscriptionsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeSubscriptionsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSubscriptionsCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeSubscriptionsCommon for usage and error information.
func (c *ECS) DescribeSubscriptionsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeSubscriptionsCommonRequest(input)
	return out, req.Send()
}

// DescribeSubscriptionsCommonWithContext is the same as DescribeSubscriptionsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSubscriptionsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeSubscriptionsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeSubscriptionsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSubscriptions = "DescribeSubscriptions"

// DescribeSubscriptionsRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeSubscriptions operation. The "output" return
// value will be populated with the DescribeSubscriptionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSubscriptionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSubscriptionsCommon Send returns without error.
//
// See DescribeSubscriptions for more information on using the DescribeSubscriptions
// API call, and error handling.
//
//    // Example sending a request using the DescribeSubscriptionsRequest method.
//    req, resp := client.DescribeSubscriptionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeSubscriptionsRequest(input *DescribeSubscriptionsInput) (req *request.Request, output *DescribeSubscriptionsOutput) {
	op := &request.Operation{
		Name:       opDescribeSubscriptions,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSubscriptionsInput{}
	}

	output = &DescribeSubscriptionsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSubscriptions API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeSubscriptions for usage and error information.
func (c *ECS) DescribeSubscriptions(input *DescribeSubscriptionsInput) (*DescribeSubscriptionsOutput, error) {
	req, out := c.DescribeSubscriptionsRequest(input)
	return out, req.Send()
}

// DescribeSubscriptionsWithContext is the same as DescribeSubscriptions with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSubscriptions for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeSubscriptionsWithContext(ctx volcengine.Context, input *DescribeSubscriptionsInput, opts ...request.Option) (*DescribeSubscriptionsOutput, error) {
	req, out := c.DescribeSubscriptionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeSubscriptionsInput struct {
	_ struct{} `type:"structure"`

	CreatedAtEnd *string `type:"string"`

	CreatedAtStart *string `type:"string"`

	MaxResults *json.Number `type:"json_number"`

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s DescribeSubscriptionsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSubscriptionsInput) GoString() string {
	return s.String()
}

// SetCreatedAtEnd sets the CreatedAtEnd field's value.
func (s *DescribeSubscriptionsInput) SetCreatedAtEnd(v string) *DescribeSubscriptionsInput {
	s.CreatedAtEnd = &v
	return s
}

// SetCreatedAtStart sets the CreatedAtStart field's value.
func (s *DescribeSubscriptionsInput) SetCreatedAtStart(v string) *DescribeSubscriptionsInput {
	s.CreatedAtStart = &v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *DescribeSubscriptionsInput) SetMaxResults(v json.Number) *DescribeSubscriptionsInput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeSubscriptionsInput) SetNextToken(v string) *DescribeSubscriptionsInput {
	s.NextToken = &v
	return s
}

type DescribeSubscriptionsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s DescribeSubscriptionsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSubscriptionsOutput) GoString() string {
	return s.String()
}

// SetNextToken sets the NextToken field's value.
func (s *DescribeSubscriptionsOutput) SetNextToken(v string) *DescribeSubscriptionsOutput {
	s.NextToken = &v
	return s
}
