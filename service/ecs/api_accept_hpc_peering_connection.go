// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAcceptHpcPeeringConnectionCommon = "AcceptHpcPeeringConnection"

// AcceptHpcPeeringConnectionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AcceptHpcPeeringConnectionCommon operation. The "output" return
// value will be populated with the AcceptHpcPeeringConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AcceptHpcPeeringConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after AcceptHpcPeeringConnectionCommon Send returns without error.
//
// See AcceptHpcPeeringConnectionCommon for more information on using the AcceptHpcPeeringConnectionCommon
// API call, and error handling.
//
//    // Example sending a request using the AcceptHpcPeeringConnectionCommonRequest method.
//    req, resp := client.AcceptHpcPeeringConnectionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) AcceptHpcPeeringConnectionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAcceptHpcPeeringConnectionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AcceptHpcPeeringConnectionCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation AcceptHpcPeeringConnectionCommon for usage and error information.
func (c *ECS) AcceptHpcPeeringConnectionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AcceptHpcPeeringConnectionCommonRequest(input)
	return out, req.Send()
}

// AcceptHpcPeeringConnectionCommonWithContext is the same as AcceptHpcPeeringConnectionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AcceptHpcPeeringConnectionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) AcceptHpcPeeringConnectionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AcceptHpcPeeringConnectionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAcceptHpcPeeringConnection = "AcceptHpcPeeringConnection"

// AcceptHpcPeeringConnectionRequest generates a "volcengine/request.Request" representing the
// client's request for the AcceptHpcPeeringConnection operation. The "output" return
// value will be populated with the AcceptHpcPeeringConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AcceptHpcPeeringConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after AcceptHpcPeeringConnectionCommon Send returns without error.
//
// See AcceptHpcPeeringConnection for more information on using the AcceptHpcPeeringConnection
// API call, and error handling.
//
//    // Example sending a request using the AcceptHpcPeeringConnectionRequest method.
//    req, resp := client.AcceptHpcPeeringConnectionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) AcceptHpcPeeringConnectionRequest(input *AcceptHpcPeeringConnectionInput) (req *request.Request, output *AcceptHpcPeeringConnectionOutput) {
	op := &request.Operation{
		Name:       opAcceptHpcPeeringConnection,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AcceptHpcPeeringConnectionInput{}
	}

	output = &AcceptHpcPeeringConnectionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AcceptHpcPeeringConnection API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation AcceptHpcPeeringConnection for usage and error information.
func (c *ECS) AcceptHpcPeeringConnection(input *AcceptHpcPeeringConnectionInput) (*AcceptHpcPeeringConnectionOutput, error) {
	req, out := c.AcceptHpcPeeringConnectionRequest(input)
	return out, req.Send()
}

// AcceptHpcPeeringConnectionWithContext is the same as AcceptHpcPeeringConnection with the addition of
// the ability to pass a context and additional request options.
//
// See AcceptHpcPeeringConnection for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) AcceptHpcPeeringConnectionWithContext(ctx volcengine.Context, input *AcceptHpcPeeringConnectionInput, opts ...request.Option) (*AcceptHpcPeeringConnectionOutput, error) {
	req, out := c.AcceptHpcPeeringConnectionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AcceptHpcPeeringConnectionInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	DryRun *bool `type:"boolean"`

	HpcPeeringConnectionId *string `type:"string"`
}

// String returns the string representation
func (s AcceptHpcPeeringConnectionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AcceptHpcPeeringConnectionInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *AcceptHpcPeeringConnectionInput) SetClientToken(v string) *AcceptHpcPeeringConnectionInput {
	s.ClientToken = &v
	return s
}

// SetDryRun sets the DryRun field's value.
func (s *AcceptHpcPeeringConnectionInput) SetDryRun(v bool) *AcceptHpcPeeringConnectionInput {
	s.DryRun = &v
	return s
}

// SetHpcPeeringConnectionId sets the HpcPeeringConnectionId field's value.
func (s *AcceptHpcPeeringConnectionInput) SetHpcPeeringConnectionId(v string) *AcceptHpcPeeringConnectionInput {
	s.HpcPeeringConnectionId = &v
	return s
}

type AcceptHpcPeeringConnectionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AcceptHpcPeeringConnectionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AcceptHpcPeeringConnectionOutput) GoString() string {
	return s.String()
}
