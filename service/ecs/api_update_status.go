// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateStatusCommon = "UpdateStatus"

// UpdateStatusCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateStatusCommon operation. The "output" return
// value will be populated with the UpdateStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateStatusCommon Send returns without error.
//
// See UpdateStatusCommon for more information on using the UpdateStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateStatusCommonRequest method.
//    req, resp := client.UpdateStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) UpdateStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateStatusCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateStatusCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation UpdateStatusCommon for usage and error information.
func (c *ECS) UpdateStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateStatusCommonRequest(input)
	return out, req.Send()
}

// UpdateStatusCommonWithContext is the same as UpdateStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) UpdateStatusCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateStatus = "UpdateStatus"

// UpdateStatusRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateStatus operation. The "output" return
// value will be populated with the UpdateStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateStatusCommon Send returns without error.
//
// See UpdateStatus for more information on using the UpdateStatus
// API call, and error handling.
//
//    // Example sending a request using the UpdateStatusRequest method.
//    req, resp := client.UpdateStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) UpdateStatusRequest(input *UpdateStatusInput) (req *request.Request, output *UpdateStatusOutput) {
	op := &request.Operation{
		Name:       opUpdateStatus,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateStatusInput{}
	}

	output = &UpdateStatusOutput{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateStatus API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation UpdateStatus for usage and error information.
func (c *ECS) UpdateStatus(input *UpdateStatusInput) (*UpdateStatusOutput, error) {
	req, out := c.UpdateStatusRequest(input)
	return out, req.Send()
}

// UpdateStatusWithContext is the same as UpdateStatus with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) UpdateStatusWithContext(ctx volcengine.Context, input *UpdateStatusInput, opts ...request.Option) (*UpdateStatusOutput, error) {
	req, out := c.UpdateStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateStatusInput struct {
	_ struct{} `type:"structure"`

	ResourceId *string `type:"string"`

	ResourceType *string `type:"string"`

	State *string `type:"string"`
}

// String returns the string representation
func (s UpdateStatusInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateStatusInput) GoString() string {
	return s.String()
}

// SetResourceId sets the ResourceId field's value.
func (s *UpdateStatusInput) SetResourceId(v string) *UpdateStatusInput {
	s.ResourceId = &v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *UpdateStatusInput) SetResourceType(v string) *UpdateStatusInput {
	s.ResourceType = &v
	return s
}

// SetState sets the State field's value.
func (s *UpdateStatusInput) SetState(v string) *UpdateStatusInput {
	s.State = &v
	return s
}

type UpdateStatusOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ReqId *string `type:"string"`
}

// String returns the string representation
func (s UpdateStatusOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateStatusOutput) GoString() string {
	return s.String()
}

// SetReqId sets the ReqId field's value.
func (s *UpdateStatusOutput) SetReqId(v string) *UpdateStatusOutput {
	s.ReqId = &v
	return s
}
