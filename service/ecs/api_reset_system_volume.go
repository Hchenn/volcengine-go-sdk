// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opResetSystemVolumeCommon = "ResetSystemVolume"

// ResetSystemVolumeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ResetSystemVolumeCommon operation. The "output" return
// value will be populated with the ResetSystemVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetSystemVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetSystemVolumeCommon Send returns without error.
//
// See ResetSystemVolumeCommon for more information on using the ResetSystemVolumeCommon
// API call, and error handling.
//
//    // Example sending a request using the ResetSystemVolumeCommonRequest method.
//    req, resp := client.ResetSystemVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ResetSystemVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResetSystemVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ResetSystemVolumeCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation ResetSystemVolumeCommon for usage and error information.
func (c *ECS) ResetSystemVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResetSystemVolumeCommonRequest(input)
	return out, req.Send()
}

// ResetSystemVolumeCommonWithContext is the same as ResetSystemVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResetSystemVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ResetSystemVolumeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResetSystemVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetSystemVolume = "ResetSystemVolume"

// ResetSystemVolumeRequest generates a "volcengine/request.Request" representing the
// client's request for the ResetSystemVolume operation. The "output" return
// value will be populated with the ResetSystemVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetSystemVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetSystemVolumeCommon Send returns without error.
//
// See ResetSystemVolume for more information on using the ResetSystemVolume
// API call, and error handling.
//
//    // Example sending a request using the ResetSystemVolumeRequest method.
//    req, resp := client.ResetSystemVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ResetSystemVolumeRequest(input *ResetSystemVolumeInput) (req *request.Request, output *ResetSystemVolumeOutput) {
	op := &request.Operation{
		Name:       opResetSystemVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResetSystemVolumeInput{}
	}

	output = &ResetSystemVolumeOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ResetSystemVolume API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation ResetSystemVolume for usage and error information.
func (c *ECS) ResetSystemVolume(input *ResetSystemVolumeInput) (*ResetSystemVolumeOutput, error) {
	req, out := c.ResetSystemVolumeRequest(input)
	return out, req.Send()
}

// ResetSystemVolumeWithContext is the same as ResetSystemVolume with the addition of
// the ability to pass a context and additional request options.
//
// See ResetSystemVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ResetSystemVolumeWithContext(ctx volcengine.Context, input *ResetSystemVolumeInput, opts ...request.Option) (*ResetSystemVolumeOutput, error) {
	req, out := c.ResetSystemVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ResetSystemVolumeInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	DryRun *bool `type:"boolean"`

	ImageId *string `type:"string"`

	InstanceId *string `type:"string"`

	KeepImageCredential *bool `type:"boolean"`

	KeyPairName *string `type:"string"`

	NeedRdmaTool *bool `type:"boolean"`

	Password *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s ResetSystemVolumeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetSystemVolumeInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *ResetSystemVolumeInput) SetClientToken(v string) *ResetSystemVolumeInput {
	s.ClientToken = &v
	return s
}

// SetDryRun sets the DryRun field's value.
func (s *ResetSystemVolumeInput) SetDryRun(v bool) *ResetSystemVolumeInput {
	s.DryRun = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *ResetSystemVolumeInput) SetImageId(v string) *ResetSystemVolumeInput {
	s.ImageId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResetSystemVolumeInput) SetInstanceId(v string) *ResetSystemVolumeInput {
	s.InstanceId = &v
	return s
}

// SetKeepImageCredential sets the KeepImageCredential field's value.
func (s *ResetSystemVolumeInput) SetKeepImageCredential(v bool) *ResetSystemVolumeInput {
	s.KeepImageCredential = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *ResetSystemVolumeInput) SetKeyPairName(v string) *ResetSystemVolumeInput {
	s.KeyPairName = &v
	return s
}

// SetNeedRdmaTool sets the NeedRdmaTool field's value.
func (s *ResetSystemVolumeInput) SetNeedRdmaTool(v bool) *ResetSystemVolumeInput {
	s.NeedRdmaTool = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ResetSystemVolumeInput) SetPassword(v string) *ResetSystemVolumeInput {
	s.Password = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *ResetSystemVolumeInput) SetUserData(v string) *ResetSystemVolumeInput {
	s.UserData = &v
	return s
}

type ResetSystemVolumeOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	OrderId *string `type:"string"`
}

// String returns the string representation
func (s ResetSystemVolumeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetSystemVolumeOutput) GoString() string {
	return s.String()
}

// SetOrderId sets the OrderId field's value.
func (s *ResetSystemVolumeOutput) SetOrderId(v string) *ResetSystemVolumeOutput {
	s.OrderId = &v
	return s
}
