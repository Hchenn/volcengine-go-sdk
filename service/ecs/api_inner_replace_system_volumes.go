// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"encoding/json"

	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opInnerReplaceSystemVolumesCommon = "InnerReplaceSystemVolumes"

// InnerReplaceSystemVolumesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the InnerReplaceSystemVolumesCommon operation. The "output" return
// value will be populated with the InnerReplaceSystemVolumesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned InnerReplaceSystemVolumesCommon Request to send the API call to the service.
// the "output" return value is not valid until after InnerReplaceSystemVolumesCommon Send returns without error.
//
// See InnerReplaceSystemVolumesCommon for more information on using the InnerReplaceSystemVolumesCommon
// API call, and error handling.
//
//    // Example sending a request using the InnerReplaceSystemVolumesCommonRequest method.
//    req, resp := client.InnerReplaceSystemVolumesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) InnerReplaceSystemVolumesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opInnerReplaceSystemVolumesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// InnerReplaceSystemVolumesCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation InnerReplaceSystemVolumesCommon for usage and error information.
func (c *ECS) InnerReplaceSystemVolumesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.InnerReplaceSystemVolumesCommonRequest(input)
	return out, req.Send()
}

// InnerReplaceSystemVolumesCommonWithContext is the same as InnerReplaceSystemVolumesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See InnerReplaceSystemVolumesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) InnerReplaceSystemVolumesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.InnerReplaceSystemVolumesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opInnerReplaceSystemVolumes = "InnerReplaceSystemVolumes"

// InnerReplaceSystemVolumesRequest generates a "volcengine/request.Request" representing the
// client's request for the InnerReplaceSystemVolumes operation. The "output" return
// value will be populated with the InnerReplaceSystemVolumesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned InnerReplaceSystemVolumesCommon Request to send the API call to the service.
// the "output" return value is not valid until after InnerReplaceSystemVolumesCommon Send returns without error.
//
// See InnerReplaceSystemVolumes for more information on using the InnerReplaceSystemVolumes
// API call, and error handling.
//
//    // Example sending a request using the InnerReplaceSystemVolumesRequest method.
//    req, resp := client.InnerReplaceSystemVolumesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) InnerReplaceSystemVolumesRequest(input *InnerReplaceSystemVolumesInput) (req *request.Request, output *InnerReplaceSystemVolumesOutput) {
	op := &request.Operation{
		Name:       opInnerReplaceSystemVolumes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &InnerReplaceSystemVolumesInput{}
	}

	output = &InnerReplaceSystemVolumesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// InnerReplaceSystemVolumes API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation InnerReplaceSystemVolumes for usage and error information.
func (c *ECS) InnerReplaceSystemVolumes(input *InnerReplaceSystemVolumesInput) (*InnerReplaceSystemVolumesOutput, error) {
	req, out := c.InnerReplaceSystemVolumesRequest(input)
	return out, req.Send()
}

// InnerReplaceSystemVolumesWithContext is the same as InnerReplaceSystemVolumes with the addition of
// the ability to pass a context and additional request options.
//
// See InnerReplaceSystemVolumes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) InnerReplaceSystemVolumesWithContext(ctx volcengine.Context, input *InnerReplaceSystemVolumesInput, opts ...request.Option) (*InnerReplaceSystemVolumesOutput, error) {
	req, out := c.InnerReplaceSystemVolumesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type InnerReplaceSystemVolumesInput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`

	InstanceIds []*string `type:"list"`

	KeyPairName *string `type:"string"`

	Password *string `type:"string"`

	Size *json.Number `type:"json_number"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s InnerReplaceSystemVolumesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InnerReplaceSystemVolumesInput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *InnerReplaceSystemVolumesInput) SetImageId(v string) *InnerReplaceSystemVolumesInput {
	s.ImageId = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *InnerReplaceSystemVolumesInput) SetInstanceIds(v []*string) *InnerReplaceSystemVolumesInput {
	s.InstanceIds = v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *InnerReplaceSystemVolumesInput) SetKeyPairName(v string) *InnerReplaceSystemVolumesInput {
	s.KeyPairName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *InnerReplaceSystemVolumesInput) SetPassword(v string) *InnerReplaceSystemVolumesInput {
	s.Password = &v
	return s
}

// SetSize sets the Size field's value.
func (s *InnerReplaceSystemVolumesInput) SetSize(v json.Number) *InnerReplaceSystemVolumesInput {
	s.Size = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *InnerReplaceSystemVolumesInput) SetUserData(v string) *InnerReplaceSystemVolumesInput {
	s.UserData = &v
	return s
}

type InnerReplaceSystemVolumesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s InnerReplaceSystemVolumesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InnerReplaceSystemVolumesOutput) GoString() string {
	return s.String()
}
