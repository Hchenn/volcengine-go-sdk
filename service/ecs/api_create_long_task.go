// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateLongTaskCommon = "CreateLongTask"

// CreateLongTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateLongTaskCommon operation. The "output" return
// value will be populated with the CreateLongTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateLongTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateLongTaskCommon Send returns without error.
//
// See CreateLongTaskCommon for more information on using the CreateLongTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateLongTaskCommonRequest method.
//    req, resp := client.CreateLongTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateLongTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateLongTaskCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateLongTaskCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation CreateLongTaskCommon for usage and error information.
func (c *ECS) CreateLongTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateLongTaskCommonRequest(input)
	return out, req.Send()
}

// CreateLongTaskCommonWithContext is the same as CreateLongTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateLongTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateLongTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateLongTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateLongTask = "CreateLongTask"

// CreateLongTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateLongTask operation. The "output" return
// value will be populated with the CreateLongTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateLongTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateLongTaskCommon Send returns without error.
//
// See CreateLongTask for more information on using the CreateLongTask
// API call, and error handling.
//
//    // Example sending a request using the CreateLongTaskRequest method.
//    req, resp := client.CreateLongTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateLongTaskRequest(input *CreateLongTaskInput) (req *request.Request, output *CreateLongTaskOutput) {
	op := &request.Operation{
		Name:       opCreateLongTask,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateLongTaskInput{}
	}

	output = &CreateLongTaskOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateLongTask API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation CreateLongTask for usage and error information.
func (c *ECS) CreateLongTask(input *CreateLongTaskInput) (*CreateLongTaskOutput, error) {
	req, out := c.CreateLongTaskRequest(input)
	return out, req.Send()
}

// CreateLongTaskWithContext is the same as CreateLongTask with the addition of
// the ability to pass a context and additional request options.
//
// See CreateLongTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateLongTaskWithContext(ctx volcengine.Context, input *CreateLongTaskInput, opts ...request.Option) (*CreateLongTaskOutput, error) {
	req, out := c.CreateLongTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateLongTaskInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	CreatedAt *string `type:"string"`

	EndAt *string `type:"string"`

	Progress *int64 `type:"int64"`

	RelatedInfo *string `type:"string"`

	ResourceId *string `type:"string"`

	Status *string `type:"string" enum:"StatusForCreateLongTaskInput"`

	Type *string `type:"string" enum:"TypeForCreateLongTaskInput"`
}

// String returns the string representation
func (s CreateLongTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateLongTaskInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *CreateLongTaskInput) SetAccountId(v string) *CreateLongTaskInput {
	s.AccountId = &v
	return s
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *CreateLongTaskInput) SetCreatedAt(v string) *CreateLongTaskInput {
	s.CreatedAt = &v
	return s
}

// SetEndAt sets the EndAt field's value.
func (s *CreateLongTaskInput) SetEndAt(v string) *CreateLongTaskInput {
	s.EndAt = &v
	return s
}

// SetProgress sets the Progress field's value.
func (s *CreateLongTaskInput) SetProgress(v int64) *CreateLongTaskInput {
	s.Progress = &v
	return s
}

// SetRelatedInfo sets the RelatedInfo field's value.
func (s *CreateLongTaskInput) SetRelatedInfo(v string) *CreateLongTaskInput {
	s.RelatedInfo = &v
	return s
}

// SetResourceId sets the ResourceId field's value.
func (s *CreateLongTaskInput) SetResourceId(v string) *CreateLongTaskInput {
	s.ResourceId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *CreateLongTaskInput) SetStatus(v string) *CreateLongTaskInput {
	s.Status = &v
	return s
}

// SetType sets the Type field's value.
func (s *CreateLongTaskInput) SetType(v string) *CreateLongTaskInput {
	s.Type = &v
	return s
}

type CreateLongTaskOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	TaskId *string `type:"string"`
}

// String returns the string representation
func (s CreateLongTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateLongTaskOutput) GoString() string {
	return s.String()
}

// SetTaskId sets the TaskId field's value.
func (s *CreateLongTaskOutput) SetTaskId(v string) *CreateLongTaskOutput {
	s.TaskId = &v
	return s
}

const (
	// StatusForCreateLongTaskInputUnknownStatus is a StatusForCreateLongTaskInput enum value
	StatusForCreateLongTaskInputUnknownStatus = "UnknownStatus"

	// StatusForCreateLongTaskInputPending is a StatusForCreateLongTaskInput enum value
	StatusForCreateLongTaskInputPending = "Pending"

	// StatusForCreateLongTaskInputRunning is a StatusForCreateLongTaskInput enum value
	StatusForCreateLongTaskInputRunning = "Running"

	// StatusForCreateLongTaskInputSucceeded is a StatusForCreateLongTaskInput enum value
	StatusForCreateLongTaskInputSucceeded = "Succeeded"

	// StatusForCreateLongTaskInputFailed is a StatusForCreateLongTaskInput enum value
	StatusForCreateLongTaskInputFailed = "Failed"
)

const (
	// TypeForCreateLongTaskInputUnknownType is a TypeForCreateLongTaskInput enum value
	TypeForCreateLongTaskInputUnknownType = "UnknownType"

	// TypeForCreateLongTaskInputExportImage is a TypeForCreateLongTaskInput enum value
	TypeForCreateLongTaskInputExportImage = "ExportImage"

	// TypeForCreateLongTaskInputCopyImage is a TypeForCreateLongTaskInput enum value
	TypeForCreateLongTaskInputCopyImage = "CopyImage"

	// TypeForCreateLongTaskInputPreheatImage is a TypeForCreateLongTaskInput enum value
	TypeForCreateLongTaskInputPreheatImage = "PreheatImage"
)
