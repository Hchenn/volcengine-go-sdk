// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetInstanceConsoleCommon = "GetInstanceConsole"

// GetInstanceConsoleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetInstanceConsoleCommon operation. The "output" return
// value will be populated with the GetInstanceConsoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetInstanceConsoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetInstanceConsoleCommon Send returns without error.
//
// See GetInstanceConsoleCommon for more information on using the GetInstanceConsoleCommon
// API call, and error handling.
//
//    // Example sending a request using the GetInstanceConsoleCommonRequest method.
//    req, resp := client.GetInstanceConsoleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) GetInstanceConsoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetInstanceConsoleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetInstanceConsoleCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation GetInstanceConsoleCommon for usage and error information.
func (c *ECS) GetInstanceConsoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetInstanceConsoleCommonRequest(input)
	return out, req.Send()
}

// GetInstanceConsoleCommonWithContext is the same as GetInstanceConsoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetInstanceConsoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) GetInstanceConsoleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetInstanceConsoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetInstanceConsole = "GetInstanceConsole"

// GetInstanceConsoleRequest generates a "volcengine/request.Request" representing the
// client's request for the GetInstanceConsole operation. The "output" return
// value will be populated with the GetInstanceConsoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetInstanceConsoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetInstanceConsoleCommon Send returns without error.
//
// See GetInstanceConsole for more information on using the GetInstanceConsole
// API call, and error handling.
//
//    // Example sending a request using the GetInstanceConsoleRequest method.
//    req, resp := client.GetInstanceConsoleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) GetInstanceConsoleRequest(input *GetInstanceConsoleInput) (req *request.Request, output *GetInstanceConsoleOutput) {
	op := &request.Operation{
		Name:       opGetInstanceConsole,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetInstanceConsoleInput{}
	}

	output = &GetInstanceConsoleOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetInstanceConsole API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation GetInstanceConsole for usage and error information.
func (c *ECS) GetInstanceConsole(input *GetInstanceConsoleInput) (*GetInstanceConsoleOutput, error) {
	req, out := c.GetInstanceConsoleRequest(input)
	return out, req.Send()
}

// GetInstanceConsoleWithContext is the same as GetInstanceConsole with the addition of
// the ability to pass a context and additional request options.
//
// See GetInstanceConsole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) GetInstanceConsoleWithContext(ctx volcengine.Context, input *GetInstanceConsoleInput, opts ...request.Option) (*GetInstanceConsoleOutput, error) {
	req, out := c.GetInstanceConsoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetInstanceConsoleInput struct {
	_ struct{} `type:"structure"`

	Id *string `type:"string"`

	Type *string `type:"string"`
}

// String returns the string representation
func (s GetInstanceConsoleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstanceConsoleInput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *GetInstanceConsoleInput) SetId(v string) *GetInstanceConsoleInput {
	s.Id = &v
	return s
}

// SetType sets the Type field's value.
func (s *GetInstanceConsoleInput) SetType(v string) *GetInstanceConsoleInput {
	s.Type = &v
	return s
}

type GetInstanceConsoleOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ConsoleType *string `type:"string"`

	ConsoleURL *string `type:"string"`
}

// String returns the string representation
func (s GetInstanceConsoleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstanceConsoleOutput) GoString() string {
	return s.String()
}

// SetConsoleType sets the ConsoleType field's value.
func (s *GetInstanceConsoleOutput) SetConsoleType(v string) *GetInstanceConsoleOutput {
	s.ConsoleType = &v
	return s
}

// SetConsoleURL sets the ConsoleURL field's value.
func (s *GetInstanceConsoleOutput) SetConsoleURL(v string) *GetInstanceConsoleOutput {
	s.ConsoleURL = &v
	return s
}
