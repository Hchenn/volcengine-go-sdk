// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBindAssumeRoleCommon = "BindAssumeRole"

// BindAssumeRoleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BindAssumeRoleCommon operation. The "output" return
// value will be populated with the BindAssumeRoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BindAssumeRoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after BindAssumeRoleCommon Send returns without error.
//
// See BindAssumeRoleCommon for more information on using the BindAssumeRoleCommon
// API call, and error handling.
//
//    // Example sending a request using the BindAssumeRoleCommonRequest method.
//    req, resp := client.BindAssumeRoleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) BindAssumeRoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBindAssumeRoleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// BindAssumeRoleCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation BindAssumeRoleCommon for usage and error information.
func (c *ECS) BindAssumeRoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BindAssumeRoleCommonRequest(input)
	return out, req.Send()
}

// BindAssumeRoleCommonWithContext is the same as BindAssumeRoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BindAssumeRoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) BindAssumeRoleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BindAssumeRoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBindAssumeRole = "BindAssumeRole"

// BindAssumeRoleRequest generates a "volcengine/request.Request" representing the
// client's request for the BindAssumeRole operation. The "output" return
// value will be populated with the BindAssumeRoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BindAssumeRoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after BindAssumeRoleCommon Send returns without error.
//
// See BindAssumeRole for more information on using the BindAssumeRole
// API call, and error handling.
//
//    // Example sending a request using the BindAssumeRoleRequest method.
//    req, resp := client.BindAssumeRoleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) BindAssumeRoleRequest(input *BindAssumeRoleInput) (req *request.Request, output *BindAssumeRoleOutput) {
	op := &request.Operation{
		Name:       opBindAssumeRole,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BindAssumeRoleInput{}
	}

	output = &BindAssumeRoleOutput{}
	req = c.newRequest(op, input, output)

	return
}

// BindAssumeRole API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation BindAssumeRole for usage and error information.
func (c *ECS) BindAssumeRole(input *BindAssumeRoleInput) (*BindAssumeRoleOutput, error) {
	req, out := c.BindAssumeRoleRequest(input)
	return out, req.Send()
}

// BindAssumeRoleWithContext is the same as BindAssumeRole with the addition of
// the ability to pass a context and additional request options.
//
// See BindAssumeRole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) BindAssumeRoleWithContext(ctx volcengine.Context, input *BindAssumeRoleInput, opts ...request.Option) (*BindAssumeRoleOutput, error) {
	req, out := c.BindAssumeRoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BindAssumeRoleInput struct {
	_ struct{} `type:"structure"`

	AssumeRole *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s BindAssumeRoleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindAssumeRoleInput) GoString() string {
	return s.String()
}

// SetAssumeRole sets the AssumeRole field's value.
func (s *BindAssumeRoleInput) SetAssumeRole(v string) *BindAssumeRoleInput {
	s.AssumeRole = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *BindAssumeRoleInput) SetInstanceId(v string) *BindAssumeRoleInput {
	s.InstanceId = &v
	return s
}

type BindAssumeRoleOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s BindAssumeRoleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindAssumeRoleOutput) GoString() string {
	return s.String()
}
