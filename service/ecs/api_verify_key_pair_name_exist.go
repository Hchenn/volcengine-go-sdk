// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opVerifyKeyPairNameExistCommon = "VerifyKeyPairNameExist"

// VerifyKeyPairNameExistCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the VerifyKeyPairNameExistCommon operation. The "output" return
// value will be populated with the VerifyKeyPairNameExistCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned VerifyKeyPairNameExistCommon Request to send the API call to the service.
// the "output" return value is not valid until after VerifyKeyPairNameExistCommon Send returns without error.
//
// See VerifyKeyPairNameExistCommon for more information on using the VerifyKeyPairNameExistCommon
// API call, and error handling.
//
//    // Example sending a request using the VerifyKeyPairNameExistCommonRequest method.
//    req, resp := client.VerifyKeyPairNameExistCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) VerifyKeyPairNameExistCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opVerifyKeyPairNameExistCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// VerifyKeyPairNameExistCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation VerifyKeyPairNameExistCommon for usage and error information.
func (c *ECS) VerifyKeyPairNameExistCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.VerifyKeyPairNameExistCommonRequest(input)
	return out, req.Send()
}

// VerifyKeyPairNameExistCommonWithContext is the same as VerifyKeyPairNameExistCommon with the addition of
// the ability to pass a context and additional request options.
//
// See VerifyKeyPairNameExistCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) VerifyKeyPairNameExistCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.VerifyKeyPairNameExistCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opVerifyKeyPairNameExist = "VerifyKeyPairNameExist"

// VerifyKeyPairNameExistRequest generates a "volcengine/request.Request" representing the
// client's request for the VerifyKeyPairNameExist operation. The "output" return
// value will be populated with the VerifyKeyPairNameExistCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned VerifyKeyPairNameExistCommon Request to send the API call to the service.
// the "output" return value is not valid until after VerifyKeyPairNameExistCommon Send returns without error.
//
// See VerifyKeyPairNameExist for more information on using the VerifyKeyPairNameExist
// API call, and error handling.
//
//    // Example sending a request using the VerifyKeyPairNameExistRequest method.
//    req, resp := client.VerifyKeyPairNameExistRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) VerifyKeyPairNameExistRequest(input *VerifyKeyPairNameExistInput) (req *request.Request, output *VerifyKeyPairNameExistOutput) {
	op := &request.Operation{
		Name:       opVerifyKeyPairNameExist,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &VerifyKeyPairNameExistInput{}
	}

	output = &VerifyKeyPairNameExistOutput{}
	req = c.newRequest(op, input, output)

	return
}

// VerifyKeyPairNameExist API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation VerifyKeyPairNameExist for usage and error information.
func (c *ECS) VerifyKeyPairNameExist(input *VerifyKeyPairNameExistInput) (*VerifyKeyPairNameExistOutput, error) {
	req, out := c.VerifyKeyPairNameExistRequest(input)
	return out, req.Send()
}

// VerifyKeyPairNameExistWithContext is the same as VerifyKeyPairNameExist with the addition of
// the ability to pass a context and additional request options.
//
// See VerifyKeyPairNameExist for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) VerifyKeyPairNameExistWithContext(ctx volcengine.Context, input *VerifyKeyPairNameExistInput, opts ...request.Option) (*VerifyKeyPairNameExistOutput, error) {
	req, out := c.VerifyKeyPairNameExistRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type VerifyKeyPairNameExistInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	// KeyPairName is a required field
	KeyPairName *string `type:"string" required:"true"`

	ProjectName *string `type:"string"`
}

// String returns the string representation
func (s VerifyKeyPairNameExistInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s VerifyKeyPairNameExistInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *VerifyKeyPairNameExistInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "VerifyKeyPairNameExistInput"}
	if s.KeyPairName == nil {
		invalidParams.Add(request.NewErrParamRequired("KeyPairName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccountId sets the AccountId field's value.
func (s *VerifyKeyPairNameExistInput) SetAccountId(v string) *VerifyKeyPairNameExistInput {
	s.AccountId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *VerifyKeyPairNameExistInput) SetKeyPairName(v string) *VerifyKeyPairNameExistInput {
	s.KeyPairName = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *VerifyKeyPairNameExistInput) SetProjectName(v string) *VerifyKeyPairNameExistInput {
	s.ProjectName = &v
	return s
}

type VerifyKeyPairNameExistOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	IsExist *bool `type:"boolean"`
}

// String returns the string representation
func (s VerifyKeyPairNameExistOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s VerifyKeyPairNameExistOutput) GoString() string {
	return s.String()
}

// SetIsExist sets the IsExist field's value.
func (s *VerifyKeyPairNameExistOutput) SetIsExist(v bool) *VerifyKeyPairNameExistOutput {
	s.IsExist = &v
	return s
}
