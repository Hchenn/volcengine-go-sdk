// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCancelPreheatImageCommon = "CancelPreheatImage"

// CancelPreheatImageCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CancelPreheatImageCommon operation. The "output" return
// value will be populated with the CancelPreheatImageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelPreheatImageCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelPreheatImageCommon Send returns without error.
//
// See CancelPreheatImageCommon for more information on using the CancelPreheatImageCommon
// API call, and error handling.
//
//    // Example sending a request using the CancelPreheatImageCommonRequest method.
//    req, resp := client.CancelPreheatImageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CancelPreheatImageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCancelPreheatImageCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CancelPreheatImageCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation CancelPreheatImageCommon for usage and error information.
func (c *ECS) CancelPreheatImageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CancelPreheatImageCommonRequest(input)
	return out, req.Send()
}

// CancelPreheatImageCommonWithContext is the same as CancelPreheatImageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CancelPreheatImageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CancelPreheatImageCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CancelPreheatImageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCancelPreheatImage = "CancelPreheatImage"

// CancelPreheatImageRequest generates a "volcengine/request.Request" representing the
// client's request for the CancelPreheatImage operation. The "output" return
// value will be populated with the CancelPreheatImageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelPreheatImageCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelPreheatImageCommon Send returns without error.
//
// See CancelPreheatImage for more information on using the CancelPreheatImage
// API call, and error handling.
//
//    // Example sending a request using the CancelPreheatImageRequest method.
//    req, resp := client.CancelPreheatImageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CancelPreheatImageRequest(input *CancelPreheatImageInput) (req *request.Request, output *CancelPreheatImageOutput) {
	op := &request.Operation{
		Name:       opCancelPreheatImage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CancelPreheatImageInput{}
	}

	output = &CancelPreheatImageOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CancelPreheatImage API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation CancelPreheatImage for usage and error information.
func (c *ECS) CancelPreheatImage(input *CancelPreheatImageInput) (*CancelPreheatImageOutput, error) {
	req, out := c.CancelPreheatImageRequest(input)
	return out, req.Send()
}

// CancelPreheatImageWithContext is the same as CancelPreheatImage with the addition of
// the ability to pass a context and additional request options.
//
// See CancelPreheatImage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CancelPreheatImageWithContext(ctx volcengine.Context, input *CancelPreheatImageInput, opts ...request.Option) (*CancelPreheatImageOutput, error) {
	req, out := c.CancelPreheatImageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CancelPreheatImageInput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`

	StoreType *string `type:"string"`
}

// String returns the string representation
func (s CancelPreheatImageInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelPreheatImageInput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *CancelPreheatImageInput) SetImageId(v string) *CancelPreheatImageInput {
	s.ImageId = &v
	return s
}

// SetStoreType sets the StoreType field's value.
func (s *CancelPreheatImageInput) SetStoreType(v string) *CancelPreheatImageInput {
	s.StoreType = &v
	return s
}

type CancelPreheatImageOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CancelPreheatImageOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelPreheatImageOutput) GoString() string {
	return s.String()
}
