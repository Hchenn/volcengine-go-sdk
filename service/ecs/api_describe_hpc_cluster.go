// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeHpcClusterCommon = "DescribeHpcCluster"

// DescribeHpcClusterCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeHpcClusterCommon operation. The "output" return
// value will be populated with the DescribeHpcClusterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeHpcClusterCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeHpcClusterCommon Send returns without error.
//
// See DescribeHpcClusterCommon for more information on using the DescribeHpcClusterCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeHpcClusterCommonRequest method.
//    req, resp := client.DescribeHpcClusterCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeHpcClusterCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeHpcClusterCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeHpcClusterCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeHpcClusterCommon for usage and error information.
func (c *ECS) DescribeHpcClusterCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeHpcClusterCommonRequest(input)
	return out, req.Send()
}

// DescribeHpcClusterCommonWithContext is the same as DescribeHpcClusterCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHpcClusterCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeHpcClusterCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeHpcClusterCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeHpcCluster = "DescribeHpcCluster"

// DescribeHpcClusterRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeHpcCluster operation. The "output" return
// value will be populated with the DescribeHpcClusterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeHpcClusterCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeHpcClusterCommon Send returns without error.
//
// See DescribeHpcCluster for more information on using the DescribeHpcCluster
// API call, and error handling.
//
//    // Example sending a request using the DescribeHpcClusterRequest method.
//    req, resp := client.DescribeHpcClusterRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeHpcClusterRequest(input *DescribeHpcClusterInput) (req *request.Request, output *DescribeHpcClusterOutput) {
	op := &request.Operation{
		Name:       opDescribeHpcCluster,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeHpcClusterInput{}
	}

	output = &DescribeHpcClusterOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeHpcCluster API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeHpcCluster for usage and error information.
func (c *ECS) DescribeHpcCluster(input *DescribeHpcClusterInput) (*DescribeHpcClusterOutput, error) {
	req, out := c.DescribeHpcClusterRequest(input)
	return out, req.Send()
}

// DescribeHpcClusterWithContext is the same as DescribeHpcCluster with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHpcCluster for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeHpcClusterWithContext(ctx volcengine.Context, input *DescribeHpcClusterInput, opts ...request.Option) (*DescribeHpcClusterOutput, error) {
	req, out := c.DescribeHpcClusterRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeHpcClusterInput struct {
	_ struct{} `type:"structure"`

	// HpcClusterId is a required field
	HpcClusterId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeHpcClusterInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHpcClusterInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeHpcClusterInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeHpcClusterInput"}
	if s.HpcClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("HpcClusterId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *DescribeHpcClusterInput) SetHpcClusterId(v string) *DescribeHpcClusterInput {
	s.HpcClusterId = &v
	return s
}

type DescribeHpcClusterOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	CreatedAt *string `type:"string"`

	Description *string `type:"string"`

	HpcClusterId *string `type:"string"`

	Name *string `type:"string"`

	UpdatedAt *string `type:"string"`

	VpcId *string `type:"string"`

	VpcName *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeHpcClusterOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHpcClusterOutput) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *DescribeHpcClusterOutput) SetCreatedAt(v string) *DescribeHpcClusterOutput {
	s.CreatedAt = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeHpcClusterOutput) SetDescription(v string) *DescribeHpcClusterOutput {
	s.Description = &v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *DescribeHpcClusterOutput) SetHpcClusterId(v string) *DescribeHpcClusterOutput {
	s.HpcClusterId = &v
	return s
}

// SetName sets the Name field's value.
func (s *DescribeHpcClusterOutput) SetName(v string) *DescribeHpcClusterOutput {
	s.Name = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *DescribeHpcClusterOutput) SetUpdatedAt(v string) *DescribeHpcClusterOutput {
	s.UpdatedAt = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeHpcClusterOutput) SetVpcId(v string) *DescribeHpcClusterOutput {
	s.VpcId = &v
	return s
}

// SetVpcName sets the VpcName field's value.
func (s *DescribeHpcClusterOutput) SetVpcName(v string) *DescribeHpcClusterOutput {
	s.VpcName = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeHpcClusterOutput) SetZoneId(v string) *DescribeHpcClusterOutput {
	s.ZoneId = &v
	return s
}
