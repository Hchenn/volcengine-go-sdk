// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeInstanceCreditSpecificationCommon = "DescribeInstanceCreditSpecification"

// DescribeInstanceCreditSpecificationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeInstanceCreditSpecificationCommon operation. The "output" return
// value will be populated with the DescribeInstanceCreditSpecificationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceCreditSpecificationCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceCreditSpecificationCommon Send returns without error.
//
// See DescribeInstanceCreditSpecificationCommon for more information on using the DescribeInstanceCreditSpecificationCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceCreditSpecificationCommonRequest method.
//    req, resp := client.DescribeInstanceCreditSpecificationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceCreditSpecificationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceCreditSpecificationCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceCreditSpecificationCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeInstanceCreditSpecificationCommon for usage and error information.
func (c *ECS) DescribeInstanceCreditSpecificationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceCreditSpecificationCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceCreditSpecificationCommonWithContext is the same as DescribeInstanceCreditSpecificationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceCreditSpecificationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceCreditSpecificationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceCreditSpecificationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceCreditSpecification = "DescribeInstanceCreditSpecification"

// DescribeInstanceCreditSpecificationRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeInstanceCreditSpecification operation. The "output" return
// value will be populated with the DescribeInstanceCreditSpecificationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceCreditSpecificationCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceCreditSpecificationCommon Send returns without error.
//
// See DescribeInstanceCreditSpecification for more information on using the DescribeInstanceCreditSpecification
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceCreditSpecificationRequest method.
//    req, resp := client.DescribeInstanceCreditSpecificationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceCreditSpecificationRequest(input *DescribeInstanceCreditSpecificationInput) (req *request.Request, output *DescribeInstanceCreditSpecificationOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceCreditSpecification,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceCreditSpecificationInput{}
	}

	output = &DescribeInstanceCreditSpecificationOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceCreditSpecification API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeInstanceCreditSpecification for usage and error information.
func (c *ECS) DescribeInstanceCreditSpecification(input *DescribeInstanceCreditSpecificationInput) (*DescribeInstanceCreditSpecificationOutput, error) {
	req, out := c.DescribeInstanceCreditSpecificationRequest(input)
	return out, req.Send()
}

// DescribeInstanceCreditSpecificationWithContext is the same as DescribeInstanceCreditSpecification with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceCreditSpecification for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceCreditSpecificationWithContext(ctx volcengine.Context, input *DescribeInstanceCreditSpecificationInput, opts ...request.Option) (*DescribeInstanceCreditSpecificationOutput, error) {
	req, out := c.DescribeInstanceCreditSpecificationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeInstanceCreditSpecificationInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceCreditSpecificationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceCreditSpecificationInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceCreditSpecificationInput) SetInstanceId(v string) *DescribeInstanceCreditSpecificationInput {
	s.InstanceId = &v
	return s
}

type DescribeInstanceCreditSpecificationOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	CreditSpecification *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceCreditSpecificationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceCreditSpecificationOutput) GoString() string {
	return s.String()
}

// SetCreditSpecification sets the CreditSpecification field's value.
func (s *DescribeInstanceCreditSpecificationOutput) SetCreditSpecification(v string) *DescribeInstanceCreditSpecificationOutput {
	s.CreditSpecification = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceCreditSpecificationOutput) SetInstanceId(v string) *DescribeInstanceCreditSpecificationOutput {
	s.InstanceId = &v
	return s
}
