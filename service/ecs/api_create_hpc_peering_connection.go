// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateHpcPeeringConnectionCommon = "CreateHpcPeeringConnection"

// CreateHpcPeeringConnectionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateHpcPeeringConnectionCommon operation. The "output" return
// value will be populated with the CreateHpcPeeringConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateHpcPeeringConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateHpcPeeringConnectionCommon Send returns without error.
//
// See CreateHpcPeeringConnectionCommon for more information on using the CreateHpcPeeringConnectionCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateHpcPeeringConnectionCommonRequest method.
//    req, resp := client.CreateHpcPeeringConnectionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateHpcPeeringConnectionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateHpcPeeringConnectionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateHpcPeeringConnectionCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation CreateHpcPeeringConnectionCommon for usage and error information.
func (c *ECS) CreateHpcPeeringConnectionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateHpcPeeringConnectionCommonRequest(input)
	return out, req.Send()
}

// CreateHpcPeeringConnectionCommonWithContext is the same as CreateHpcPeeringConnectionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateHpcPeeringConnectionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateHpcPeeringConnectionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateHpcPeeringConnectionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateHpcPeeringConnection = "CreateHpcPeeringConnection"

// CreateHpcPeeringConnectionRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateHpcPeeringConnection operation. The "output" return
// value will be populated with the CreateHpcPeeringConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateHpcPeeringConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateHpcPeeringConnectionCommon Send returns without error.
//
// See CreateHpcPeeringConnection for more information on using the CreateHpcPeeringConnection
// API call, and error handling.
//
//    // Example sending a request using the CreateHpcPeeringConnectionRequest method.
//    req, resp := client.CreateHpcPeeringConnectionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateHpcPeeringConnectionRequest(input *CreateHpcPeeringConnectionInput) (req *request.Request, output *CreateHpcPeeringConnectionOutput) {
	op := &request.Operation{
		Name:       opCreateHpcPeeringConnection,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateHpcPeeringConnectionInput{}
	}

	output = &CreateHpcPeeringConnectionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateHpcPeeringConnection API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation CreateHpcPeeringConnection for usage and error information.
func (c *ECS) CreateHpcPeeringConnection(input *CreateHpcPeeringConnectionInput) (*CreateHpcPeeringConnectionOutput, error) {
	req, out := c.CreateHpcPeeringConnectionRequest(input)
	return out, req.Send()
}

// CreateHpcPeeringConnectionWithContext is the same as CreateHpcPeeringConnection with the addition of
// the ability to pass a context and additional request options.
//
// See CreateHpcPeeringConnection for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateHpcPeeringConnectionWithContext(ctx volcengine.Context, input *CreateHpcPeeringConnectionInput, opts ...request.Option) (*CreateHpcPeeringConnectionOutput, error) {
	req, out := c.CreateHpcPeeringConnectionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateHpcPeeringConnectionInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	DryRun *bool `type:"boolean"`

	HpcClusterId *string `type:"string"`

	PeerAccountId *string `type:"string"`

	PeerHpcClusterId *string `type:"string"`
}

// String returns the string representation
func (s CreateHpcPeeringConnectionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateHpcPeeringConnectionInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateHpcPeeringConnectionInput) SetClientToken(v string) *CreateHpcPeeringConnectionInput {
	s.ClientToken = &v
	return s
}

// SetDryRun sets the DryRun field's value.
func (s *CreateHpcPeeringConnectionInput) SetDryRun(v bool) *CreateHpcPeeringConnectionInput {
	s.DryRun = &v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *CreateHpcPeeringConnectionInput) SetHpcClusterId(v string) *CreateHpcPeeringConnectionInput {
	s.HpcClusterId = &v
	return s
}

// SetPeerAccountId sets the PeerAccountId field's value.
func (s *CreateHpcPeeringConnectionInput) SetPeerAccountId(v string) *CreateHpcPeeringConnectionInput {
	s.PeerAccountId = &v
	return s
}

// SetPeerHpcClusterId sets the PeerHpcClusterId field's value.
func (s *CreateHpcPeeringConnectionInput) SetPeerHpcClusterId(v string) *CreateHpcPeeringConnectionInput {
	s.PeerHpcClusterId = &v
	return s
}

type CreateHpcPeeringConnectionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	HpcPeeringConnectionId *string `type:"string"`
}

// String returns the string representation
func (s CreateHpcPeeringConnectionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateHpcPeeringConnectionOutput) GoString() string {
	return s.String()
}

// SetHpcPeeringConnectionId sets the HpcPeeringConnectionId field's value.
func (s *CreateHpcPeeringConnectionOutput) SetHpcPeeringConnectionId(v string) *CreateHpcPeeringConnectionOutput {
	s.HpcPeeringConnectionId = &v
	return s
}
