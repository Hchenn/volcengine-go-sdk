// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mongodb

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateDBInstanceParamTplCommon = "CreateDBInstanceParamTpl"

// CreateDBInstanceParamTplCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateDBInstanceParamTplCommon operation. The "output" return
// value will be populated with the CreateDBInstanceParamTplCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBInstanceParamTplCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBInstanceParamTplCommon Send returns without error.
//
// See CreateDBInstanceParamTplCommon for more information on using the CreateDBInstanceParamTplCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDBInstanceParamTplCommonRequest method.
//    req, resp := client.CreateDBInstanceParamTplCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) CreateDBInstanceParamTplCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDBInstanceParamTplCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBInstanceParamTplCommon API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation CreateDBInstanceParamTplCommon for usage and error information.
func (c *MONGODB) CreateDBInstanceParamTplCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDBInstanceParamTplCommonRequest(input)
	return out, req.Send()
}

// CreateDBInstanceParamTplCommonWithContext is the same as CreateDBInstanceParamTplCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBInstanceParamTplCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) CreateDBInstanceParamTplCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDBInstanceParamTplCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBInstanceParamTpl = "CreateDBInstanceParamTpl"

// CreateDBInstanceParamTplRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateDBInstanceParamTpl operation. The "output" return
// value will be populated with the CreateDBInstanceParamTplCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBInstanceParamTplCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBInstanceParamTplCommon Send returns without error.
//
// See CreateDBInstanceParamTpl for more information on using the CreateDBInstanceParamTpl
// API call, and error handling.
//
//    // Example sending a request using the CreateDBInstanceParamTplRequest method.
//    req, resp := client.CreateDBInstanceParamTplRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) CreateDBInstanceParamTplRequest(input *CreateDBInstanceParamTplInput) (req *request.Request, output *CreateDBInstanceParamTplOutput) {
	op := &request.Operation{
		Name:       opCreateDBInstanceParamTpl,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBInstanceParamTplInput{}
	}

	output = &CreateDBInstanceParamTplOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBInstanceParamTpl API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation CreateDBInstanceParamTpl for usage and error information.
func (c *MONGODB) CreateDBInstanceParamTpl(input *CreateDBInstanceParamTplInput) (*CreateDBInstanceParamTplOutput, error) {
	req, out := c.CreateDBInstanceParamTplRequest(input)
	return out, req.Send()
}

// CreateDBInstanceParamTplWithContext is the same as CreateDBInstanceParamTpl with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBInstanceParamTpl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) CreateDBInstanceParamTplWithContext(ctx volcengine.Context, input *CreateDBInstanceParamTplInput, opts ...request.Option) (*CreateDBInstanceParamTplOutput, error) {
	req, out := c.CreateDBInstanceParamTplRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateDBInstanceParamTplInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// DBEngineVersion is a required field
	DBEngineVersion *string `type:"string" json:",omitempty" required:"true"`

	Description *string `type:"string" json:",omitempty"`

	// ParamRole is a required field
	ParamRole *string `type:"string" json:",omitempty" required:"true"`

	Params []*ParamForCreateDBInstanceParamTplInput `type:"list" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	// TemplateName is a required field
	TemplateName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateDBInstanceParamTplInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBInstanceParamTplInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateDBInstanceParamTplInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateDBInstanceParamTplInput"}
	if s.DBEngineVersion == nil {
		invalidParams.Add(request.NewErrParamRequired("DBEngineVersion"))
	}
	if s.ParamRole == nil {
		invalidParams.Add(request.NewErrParamRequired("ParamRole"))
	}
	if s.TemplateName == nil {
		invalidParams.Add(request.NewErrParamRequired("TemplateName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDBEngineVersion sets the DBEngineVersion field's value.
func (s *CreateDBInstanceParamTplInput) SetDBEngineVersion(v string) *CreateDBInstanceParamTplInput {
	s.DBEngineVersion = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateDBInstanceParamTplInput) SetDescription(v string) *CreateDBInstanceParamTplInput {
	s.Description = &v
	return s
}

// SetParamRole sets the ParamRole field's value.
func (s *CreateDBInstanceParamTplInput) SetParamRole(v string) *CreateDBInstanceParamTplInput {
	s.ParamRole = &v
	return s
}

// SetParams sets the Params field's value.
func (s *CreateDBInstanceParamTplInput) SetParams(v []*ParamForCreateDBInstanceParamTplInput) *CreateDBInstanceParamTplInput {
	s.Params = v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateDBInstanceParamTplInput) SetProjectName(v string) *CreateDBInstanceParamTplInput {
	s.ProjectName = &v
	return s
}

// SetTemplateName sets the TemplateName field's value.
func (s *CreateDBInstanceParamTplInput) SetTemplateName(v string) *CreateDBInstanceParamTplInput {
	s.TemplateName = &v
	return s
}

type CreateDBInstanceParamTplOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TemplateId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateDBInstanceParamTplOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBInstanceParamTplOutput) GoString() string {
	return s.String()
}

// SetTemplateId sets the TemplateId field's value.
func (s *CreateDBInstanceParamTplOutput) SetTemplateId(v string) *CreateDBInstanceParamTplOutput {
	s.TemplateId = &v
	return s
}

type ParamForCreateDBInstanceParamTplInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ParamName *string `type:"string" json:",omitempty"`

	ParamValue *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ParamForCreateDBInstanceParamTplInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ParamForCreateDBInstanceParamTplInput) GoString() string {
	return s.String()
}

// SetParamName sets the ParamName field's value.
func (s *ParamForCreateDBInstanceParamTplInput) SetParamName(v string) *ParamForCreateDBInstanceParamTplInput {
	s.ParamName = &v
	return s
}

// SetParamValue sets the ParamValue field's value.
func (s *ParamForCreateDBInstanceParamTplInput) SetParamValue(v string) *ParamForCreateDBInstanceParamTplInput {
	s.ParamValue = &v
	return s
}
