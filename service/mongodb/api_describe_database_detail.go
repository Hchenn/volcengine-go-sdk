// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mongodb

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDatabaseDetailCommon = "DescribeDatabaseDetail"

// DescribeDatabaseDetailCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDatabaseDetailCommon operation. The "output" return
// value will be populated with the DescribeDatabaseDetailCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDatabaseDetailCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDatabaseDetailCommon Send returns without error.
//
// See DescribeDatabaseDetailCommon for more information on using the DescribeDatabaseDetailCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDatabaseDetailCommonRequest method.
//    req, resp := client.DescribeDatabaseDetailCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) DescribeDatabaseDetailCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDatabaseDetailCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDatabaseDetailCommon API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation DescribeDatabaseDetailCommon for usage and error information.
func (c *MONGODB) DescribeDatabaseDetailCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDatabaseDetailCommonRequest(input)
	return out, req.Send()
}

// DescribeDatabaseDetailCommonWithContext is the same as DescribeDatabaseDetailCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDatabaseDetailCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) DescribeDatabaseDetailCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDatabaseDetailCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDatabaseDetail = "DescribeDatabaseDetail"

// DescribeDatabaseDetailRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDatabaseDetail operation. The "output" return
// value will be populated with the DescribeDatabaseDetailCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDatabaseDetailCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDatabaseDetailCommon Send returns without error.
//
// See DescribeDatabaseDetail for more information on using the DescribeDatabaseDetail
// API call, and error handling.
//
//    // Example sending a request using the DescribeDatabaseDetailRequest method.
//    req, resp := client.DescribeDatabaseDetailRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) DescribeDatabaseDetailRequest(input *DescribeDatabaseDetailInput) (req *request.Request, output *DescribeDatabaseDetailOutput) {
	op := &request.Operation{
		Name:       opDescribeDatabaseDetail,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDatabaseDetailInput{}
	}

	output = &DescribeDatabaseDetailOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDatabaseDetail API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation DescribeDatabaseDetail for usage and error information.
func (c *MONGODB) DescribeDatabaseDetail(input *DescribeDatabaseDetailInput) (*DescribeDatabaseDetailOutput, error) {
	req, out := c.DescribeDatabaseDetailRequest(input)
	return out, req.Send()
}

// DescribeDatabaseDetailWithContext is the same as DescribeDatabaseDetail with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDatabaseDetail for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) DescribeDatabaseDetailWithContext(ctx volcengine.Context, input *DescribeDatabaseDetailInput, opts ...request.Option) (*DescribeDatabaseDetailOutput, error) {
	req, out := c.DescribeDatabaseDetailRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DatabaseDetailForDescribeDatabaseDetailOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CollectionNames []*string `type:"list" json:",omitempty"`

	DBName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DatabaseDetailForDescribeDatabaseDetailOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DatabaseDetailForDescribeDatabaseDetailOutput) GoString() string {
	return s.String()
}

// SetCollectionNames sets the CollectionNames field's value.
func (s *DatabaseDetailForDescribeDatabaseDetailOutput) SetCollectionNames(v []*string) *DatabaseDetailForDescribeDatabaseDetailOutput {
	s.CollectionNames = v
	return s
}

// SetDBName sets the DBName field's value.
func (s *DatabaseDetailForDescribeDatabaseDetailOutput) SetDBName(v string) *DatabaseDetailForDescribeDatabaseDetailOutput {
	s.DBName = &v
	return s
}

type DescribeDatabaseDetailInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DBName *string `type:"string" json:",omitempty"`

	// InstanceID is a required field
	InstanceID *string `type:"string" json:",omitempty" required:"true"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	ReturnAdminDatabase *bool `type:"boolean" json:",omitempty"`

	ReturnCollectionDetail *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDatabaseDetailInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDatabaseDetailInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDatabaseDetailInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDatabaseDetailInput"}
	if s.InstanceID == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDBName sets the DBName field's value.
func (s *DescribeDatabaseDetailInput) SetDBName(v string) *DescribeDatabaseDetailInput {
	s.DBName = &v
	return s
}

// SetInstanceID sets the InstanceID field's value.
func (s *DescribeDatabaseDetailInput) SetInstanceID(v string) *DescribeDatabaseDetailInput {
	s.InstanceID = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDatabaseDetailInput) SetPageNumber(v int32) *DescribeDatabaseDetailInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDatabaseDetailInput) SetPageSize(v int32) *DescribeDatabaseDetailInput {
	s.PageSize = &v
	return s
}

// SetReturnAdminDatabase sets the ReturnAdminDatabase field's value.
func (s *DescribeDatabaseDetailInput) SetReturnAdminDatabase(v bool) *DescribeDatabaseDetailInput {
	s.ReturnAdminDatabase = &v
	return s
}

// SetReturnCollectionDetail sets the ReturnCollectionDetail field's value.
func (s *DescribeDatabaseDetailInput) SetReturnCollectionDetail(v bool) *DescribeDatabaseDetailInput {
	s.ReturnCollectionDetail = &v
	return s
}

type DescribeDatabaseDetailOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DatabaseDetail []*DatabaseDetailForDescribeDatabaseDetailOutput `type:"list" json:",omitempty"`

	TotalDatabaseCnt *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDatabaseDetailOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDatabaseDetailOutput) GoString() string {
	return s.String()
}

// SetDatabaseDetail sets the DatabaseDetail field's value.
func (s *DescribeDatabaseDetailOutput) SetDatabaseDetail(v []*DatabaseDetailForDescribeDatabaseDetailOutput) *DescribeDatabaseDetailOutput {
	s.DatabaseDetail = v
	return s
}

// SetTotalDatabaseCnt sets the TotalDatabaseCnt field's value.
func (s *DescribeDatabaseDetailOutput) SetTotalDatabaseCnt(v int32) *DescribeDatabaseDetailOutput {
	s.TotalDatabaseCnt = &v
	return s
}
