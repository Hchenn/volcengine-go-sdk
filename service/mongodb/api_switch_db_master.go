// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mongodb

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSwitchDBMasterCommon = "SwitchDBMaster"

// SwitchDBMasterCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SwitchDBMasterCommon operation. The "output" return
// value will be populated with the SwitchDBMasterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SwitchDBMasterCommon Request to send the API call to the service.
// the "output" return value is not valid until after SwitchDBMasterCommon Send returns without error.
//
// See SwitchDBMasterCommon for more information on using the SwitchDBMasterCommon
// API call, and error handling.
//
//    // Example sending a request using the SwitchDBMasterCommonRequest method.
//    req, resp := client.SwitchDBMasterCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) SwitchDBMasterCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSwitchDBMasterCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SwitchDBMasterCommon API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation SwitchDBMasterCommon for usage and error information.
func (c *MONGODB) SwitchDBMasterCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SwitchDBMasterCommonRequest(input)
	return out, req.Send()
}

// SwitchDBMasterCommonWithContext is the same as SwitchDBMasterCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SwitchDBMasterCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) SwitchDBMasterCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SwitchDBMasterCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSwitchDBMaster = "SwitchDBMaster"

// SwitchDBMasterRequest generates a "volcengine/request.Request" representing the
// client's request for the SwitchDBMaster operation. The "output" return
// value will be populated with the SwitchDBMasterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SwitchDBMasterCommon Request to send the API call to the service.
// the "output" return value is not valid until after SwitchDBMasterCommon Send returns without error.
//
// See SwitchDBMaster for more information on using the SwitchDBMaster
// API call, and error handling.
//
//    // Example sending a request using the SwitchDBMasterRequest method.
//    req, resp := client.SwitchDBMasterRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) SwitchDBMasterRequest(input *SwitchDBMasterInput) (req *request.Request, output *SwitchDBMasterOutput) {
	op := &request.Operation{
		Name:       opSwitchDBMaster,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SwitchDBMasterInput{}
	}

	output = &SwitchDBMasterOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SwitchDBMaster API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation SwitchDBMaster for usage and error information.
func (c *MONGODB) SwitchDBMaster(input *SwitchDBMasterInput) (*SwitchDBMasterOutput, error) {
	req, out := c.SwitchDBMasterRequest(input)
	return out, req.Send()
}

// SwitchDBMasterWithContext is the same as SwitchDBMaster with the addition of
// the ability to pass a context and additional request options.
//
// See SwitchDBMaster for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) SwitchDBMasterWithContext(ctx volcengine.Context, input *SwitchDBMasterInput, opts ...request.Option) (*SwitchDBMasterOutput, error) {
	req, out := c.SwitchDBMasterRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SwitchDBMasterInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// NodeId is a required field
	NodeId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s SwitchDBMasterInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SwitchDBMasterInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SwitchDBMasterInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SwitchDBMasterInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.NodeId == nil {
		invalidParams.Add(request.NewErrParamRequired("NodeId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *SwitchDBMasterInput) SetInstanceId(v string) *SwitchDBMasterInput {
	s.InstanceId = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *SwitchDBMasterInput) SetNodeId(v string) *SwitchDBMasterInput {
	s.NodeId = &v
	return s
}

type SwitchDBMasterOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s SwitchDBMasterOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SwitchDBMasterOutput) GoString() string {
	return s.String()
}
