// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mongodb

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateDBAccountPrivilegeCommon = "UpdateDBAccountPrivilege"

// UpdateDBAccountPrivilegeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateDBAccountPrivilegeCommon operation. The "output" return
// value will be populated with the UpdateDBAccountPrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateDBAccountPrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateDBAccountPrivilegeCommon Send returns without error.
//
// See UpdateDBAccountPrivilegeCommon for more information on using the UpdateDBAccountPrivilegeCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateDBAccountPrivilegeCommonRequest method.
//    req, resp := client.UpdateDBAccountPrivilegeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) UpdateDBAccountPrivilegeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateDBAccountPrivilegeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateDBAccountPrivilegeCommon API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation UpdateDBAccountPrivilegeCommon for usage and error information.
func (c *MONGODB) UpdateDBAccountPrivilegeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateDBAccountPrivilegeCommonRequest(input)
	return out, req.Send()
}

// UpdateDBAccountPrivilegeCommonWithContext is the same as UpdateDBAccountPrivilegeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateDBAccountPrivilegeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) UpdateDBAccountPrivilegeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateDBAccountPrivilegeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateDBAccountPrivilege = "UpdateDBAccountPrivilege"

// UpdateDBAccountPrivilegeRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateDBAccountPrivilege operation. The "output" return
// value will be populated with the UpdateDBAccountPrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateDBAccountPrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateDBAccountPrivilegeCommon Send returns without error.
//
// See UpdateDBAccountPrivilege for more information on using the UpdateDBAccountPrivilege
// API call, and error handling.
//
//    // Example sending a request using the UpdateDBAccountPrivilegeRequest method.
//    req, resp := client.UpdateDBAccountPrivilegeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) UpdateDBAccountPrivilegeRequest(input *UpdateDBAccountPrivilegeInput) (req *request.Request, output *UpdateDBAccountPrivilegeOutput) {
	op := &request.Operation{
		Name:       opUpdateDBAccountPrivilege,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateDBAccountPrivilegeInput{}
	}

	output = &UpdateDBAccountPrivilegeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateDBAccountPrivilege API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation UpdateDBAccountPrivilege for usage and error information.
func (c *MONGODB) UpdateDBAccountPrivilege(input *UpdateDBAccountPrivilegeInput) (*UpdateDBAccountPrivilegeOutput, error) {
	req, out := c.UpdateDBAccountPrivilegeRequest(input)
	return out, req.Send()
}

// UpdateDBAccountPrivilegeWithContext is the same as UpdateDBAccountPrivilege with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateDBAccountPrivilege for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) UpdateDBAccountPrivilegeWithContext(ctx volcengine.Context, input *UpdateDBAccountPrivilegeInput, opts ...request.Option) (*UpdateDBAccountPrivilegeOutput, error) {
	req, out := c.UpdateDBAccountPrivilegeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AccountDBPrivilegeForUpdateDBAccountPrivilegeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DBName *string `type:"string" json:",omitempty"`

	RoleNames []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s AccountDBPrivilegeForUpdateDBAccountPrivilegeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AccountDBPrivilegeForUpdateDBAccountPrivilegeInput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *AccountDBPrivilegeForUpdateDBAccountPrivilegeInput) SetDBName(v string) *AccountDBPrivilegeForUpdateDBAccountPrivilegeInput {
	s.DBName = &v
	return s
}

// SetRoleNames sets the RoleNames field's value.
func (s *AccountDBPrivilegeForUpdateDBAccountPrivilegeInput) SetRoleNames(v []*string) *AccountDBPrivilegeForUpdateDBAccountPrivilegeInput {
	s.RoleNames = v
	return s
}

type UpdateDBAccountPrivilegeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccountDBPrivileges []*AccountDBPrivilegeForUpdateDBAccountPrivilegeInput `type:"list" json:",omitempty"`

	AccountDesc *string `type:"string" json:",omitempty"`

	// AccountName is a required field
	AccountName *string `type:"string" json:",omitempty" required:"true"`

	AuthDB *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateDBAccountPrivilegeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDBAccountPrivilegeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateDBAccountPrivilegeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateDBAccountPrivilegeInput"}
	if s.AccountName == nil {
		invalidParams.Add(request.NewErrParamRequired("AccountName"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccountDBPrivileges sets the AccountDBPrivileges field's value.
func (s *UpdateDBAccountPrivilegeInput) SetAccountDBPrivileges(v []*AccountDBPrivilegeForUpdateDBAccountPrivilegeInput) *UpdateDBAccountPrivilegeInput {
	s.AccountDBPrivileges = v
	return s
}

// SetAccountDesc sets the AccountDesc field's value.
func (s *UpdateDBAccountPrivilegeInput) SetAccountDesc(v string) *UpdateDBAccountPrivilegeInput {
	s.AccountDesc = &v
	return s
}

// SetAccountName sets the AccountName field's value.
func (s *UpdateDBAccountPrivilegeInput) SetAccountName(v string) *UpdateDBAccountPrivilegeInput {
	s.AccountName = &v
	return s
}

// SetAuthDB sets the AuthDB field's value.
func (s *UpdateDBAccountPrivilegeInput) SetAuthDB(v string) *UpdateDBAccountPrivilegeInput {
	s.AuthDB = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *UpdateDBAccountPrivilegeInput) SetInstanceId(v string) *UpdateDBAccountPrivilegeInput {
	s.InstanceId = &v
	return s
}

type UpdateDBAccountPrivilegeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateDBAccountPrivilegeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDBAccountPrivilegeOutput) GoString() string {
	return s.String()
}
