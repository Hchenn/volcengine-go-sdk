// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mongodb

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeCreateInstanceProgressCommon = "DescribeCreateInstanceProgress"

// DescribeCreateInstanceProgressCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeCreateInstanceProgressCommon operation. The "output" return
// value will be populated with the DescribeCreateInstanceProgressCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCreateInstanceProgressCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCreateInstanceProgressCommon Send returns without error.
//
// See DescribeCreateInstanceProgressCommon for more information on using the DescribeCreateInstanceProgressCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCreateInstanceProgressCommonRequest method.
//    req, resp := client.DescribeCreateInstanceProgressCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) DescribeCreateInstanceProgressCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCreateInstanceProgressCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeCreateInstanceProgressCommon API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation DescribeCreateInstanceProgressCommon for usage and error information.
func (c *MONGODB) DescribeCreateInstanceProgressCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCreateInstanceProgressCommonRequest(input)
	return out, req.Send()
}

// DescribeCreateInstanceProgressCommonWithContext is the same as DescribeCreateInstanceProgressCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCreateInstanceProgressCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) DescribeCreateInstanceProgressCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCreateInstanceProgressCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCreateInstanceProgress = "DescribeCreateInstanceProgress"

// DescribeCreateInstanceProgressRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeCreateInstanceProgress operation. The "output" return
// value will be populated with the DescribeCreateInstanceProgressCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCreateInstanceProgressCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCreateInstanceProgressCommon Send returns without error.
//
// See DescribeCreateInstanceProgress for more information on using the DescribeCreateInstanceProgress
// API call, and error handling.
//
//    // Example sending a request using the DescribeCreateInstanceProgressRequest method.
//    req, resp := client.DescribeCreateInstanceProgressRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) DescribeCreateInstanceProgressRequest(input *DescribeCreateInstanceProgressInput) (req *request.Request, output *DescribeCreateInstanceProgressOutput) {
	op := &request.Operation{
		Name:       opDescribeCreateInstanceProgress,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCreateInstanceProgressInput{}
	}

	output = &DescribeCreateInstanceProgressOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeCreateInstanceProgress API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation DescribeCreateInstanceProgress for usage and error information.
func (c *MONGODB) DescribeCreateInstanceProgress(input *DescribeCreateInstanceProgressInput) (*DescribeCreateInstanceProgressOutput, error) {
	req, out := c.DescribeCreateInstanceProgressRequest(input)
	return out, req.Send()
}

// DescribeCreateInstanceProgressWithContext is the same as DescribeCreateInstanceProgress with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCreateInstanceProgress for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) DescribeCreateInstanceProgressWithContext(ctx volcengine.Context, input *DescribeCreateInstanceProgressInput, opts ...request.Option) (*DescribeCreateInstanceProgressOutput, error) {
	req, out := c.DescribeCreateInstanceProgressRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeCreateInstanceProgressInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DescribeCreateInstanceProgressInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCreateInstanceProgressInput) GoString() string {
	return s.String()
}

type DescribeCreateInstanceProgressOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DescribeCreateInstanceProgressOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCreateInstanceProgressOutput) GoString() string {
	return s.String()
}
