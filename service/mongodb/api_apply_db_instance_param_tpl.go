// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mongodb

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opApplyDBInstanceParamTplCommon = "ApplyDBInstanceParamTpl"

// ApplyDBInstanceParamTplCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ApplyDBInstanceParamTplCommon operation. The "output" return
// value will be populated with the ApplyDBInstanceParamTplCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ApplyDBInstanceParamTplCommon Request to send the API call to the service.
// the "output" return value is not valid until after ApplyDBInstanceParamTplCommon Send returns without error.
//
// See ApplyDBInstanceParamTplCommon for more information on using the ApplyDBInstanceParamTplCommon
// API call, and error handling.
//
//    // Example sending a request using the ApplyDBInstanceParamTplCommonRequest method.
//    req, resp := client.ApplyDBInstanceParamTplCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) ApplyDBInstanceParamTplCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opApplyDBInstanceParamTplCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ApplyDBInstanceParamTplCommon API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation ApplyDBInstanceParamTplCommon for usage and error information.
func (c *MONGODB) ApplyDBInstanceParamTplCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ApplyDBInstanceParamTplCommonRequest(input)
	return out, req.Send()
}

// ApplyDBInstanceParamTplCommonWithContext is the same as ApplyDBInstanceParamTplCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ApplyDBInstanceParamTplCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) ApplyDBInstanceParamTplCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ApplyDBInstanceParamTplCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opApplyDBInstanceParamTpl = "ApplyDBInstanceParamTpl"

// ApplyDBInstanceParamTplRequest generates a "volcengine/request.Request" representing the
// client's request for the ApplyDBInstanceParamTpl operation. The "output" return
// value will be populated with the ApplyDBInstanceParamTplCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ApplyDBInstanceParamTplCommon Request to send the API call to the service.
// the "output" return value is not valid until after ApplyDBInstanceParamTplCommon Send returns without error.
//
// See ApplyDBInstanceParamTpl for more information on using the ApplyDBInstanceParamTpl
// API call, and error handling.
//
//    // Example sending a request using the ApplyDBInstanceParamTplRequest method.
//    req, resp := client.ApplyDBInstanceParamTplRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MONGODB) ApplyDBInstanceParamTplRequest(input *ApplyDBInstanceParamTplInput) (req *request.Request, output *ApplyDBInstanceParamTplOutput) {
	op := &request.Operation{
		Name:       opApplyDBInstanceParamTpl,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ApplyDBInstanceParamTplInput{}
	}

	output = &ApplyDBInstanceParamTplOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ApplyDBInstanceParamTpl API operation for MONGODB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MONGODB's
// API operation ApplyDBInstanceParamTpl for usage and error information.
func (c *MONGODB) ApplyDBInstanceParamTpl(input *ApplyDBInstanceParamTplInput) (*ApplyDBInstanceParamTplOutput, error) {
	req, out := c.ApplyDBInstanceParamTplRequest(input)
	return out, req.Send()
}

// ApplyDBInstanceParamTplWithContext is the same as ApplyDBInstanceParamTpl with the addition of
// the ability to pass a context and additional request options.
//
// See ApplyDBInstanceParamTpl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MONGODB) ApplyDBInstanceParamTplWithContext(ctx volcengine.Context, input *ApplyDBInstanceParamTplInput, opts ...request.Option) (*ApplyDBInstanceParamTplOutput, error) {
	req, out := c.ApplyDBInstanceParamTplRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ApplyDBInstanceParamTplInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// TemplateId is a required field
	TemplateId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ApplyDBInstanceParamTplInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ApplyDBInstanceParamTplInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ApplyDBInstanceParamTplInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ApplyDBInstanceParamTplInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.TemplateId == nil {
		invalidParams.Add(request.NewErrParamRequired("TemplateId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ApplyDBInstanceParamTplInput) SetInstanceId(v string) *ApplyDBInstanceParamTplInput {
	s.InstanceId = &v
	return s
}

// SetTemplateId sets the TemplateId field's value.
func (s *ApplyDBInstanceParamTplInput) SetTemplateId(v string) *ApplyDBInstanceParamTplInput {
	s.TemplateId = &v
	return s
}

type ApplyDBInstanceParamTplOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ApplyDBInstanceParamTplOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ApplyDBInstanceParamTplOutput) GoString() string {
	return s.String()
}
