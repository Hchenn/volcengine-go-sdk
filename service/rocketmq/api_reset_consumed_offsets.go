// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rocketmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opResetConsumedOffsetsCommon = "ResetConsumedOffsets"

// ResetConsumedOffsetsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ResetConsumedOffsetsCommon operation. The "output" return
// value will be populated with the ResetConsumedOffsetsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetConsumedOffsetsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetConsumedOffsetsCommon Send returns without error.
//
// See ResetConsumedOffsetsCommon for more information on using the ResetConsumedOffsetsCommon
// API call, and error handling.
//
//    // Example sending a request using the ResetConsumedOffsetsCommonRequest method.
//    req, resp := client.ResetConsumedOffsetsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) ResetConsumedOffsetsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResetConsumedOffsetsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ResetConsumedOffsetsCommon API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation ResetConsumedOffsetsCommon for usage and error information.
func (c *ROCKETMQ) ResetConsumedOffsetsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResetConsumedOffsetsCommonRequest(input)
	return out, req.Send()
}

// ResetConsumedOffsetsCommonWithContext is the same as ResetConsumedOffsetsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResetConsumedOffsetsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) ResetConsumedOffsetsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResetConsumedOffsetsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetConsumedOffsets = "ResetConsumedOffsets"

// ResetConsumedOffsetsRequest generates a "volcengine/request.Request" representing the
// client's request for the ResetConsumedOffsets operation. The "output" return
// value will be populated with the ResetConsumedOffsetsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetConsumedOffsetsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetConsumedOffsetsCommon Send returns without error.
//
// See ResetConsumedOffsets for more information on using the ResetConsumedOffsets
// API call, and error handling.
//
//    // Example sending a request using the ResetConsumedOffsetsRequest method.
//    req, resp := client.ResetConsumedOffsetsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) ResetConsumedOffsetsRequest(input *ResetConsumedOffsetsInput) (req *request.Request, output *ResetConsumedOffsetsOutput) {
	op := &request.Operation{
		Name:       opResetConsumedOffsets,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResetConsumedOffsetsInput{}
	}

	output = &ResetConsumedOffsetsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ResetConsumedOffsets API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation ResetConsumedOffsets for usage and error information.
func (c *ROCKETMQ) ResetConsumedOffsets(input *ResetConsumedOffsetsInput) (*ResetConsumedOffsetsOutput, error) {
	req, out := c.ResetConsumedOffsetsRequest(input)
	return out, req.Send()
}

// ResetConsumedOffsetsWithContext is the same as ResetConsumedOffsets with the addition of
// the ability to pass a context and additional request options.
//
// See ResetConsumedOffsets for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) ResetConsumedOffsetsWithContext(ctx volcengine.Context, input *ResetConsumedOffsetsInput, opts ...request.Option) (*ResetConsumedOffsetsOutput, error) {
	req, out := c.ResetConsumedOffsetsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ResetConsumedOffsetsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// GroupId is a required field
	GroupId *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	ResetTimestamp *int64 `type:"int64" json:",omitempty"`

	ResetType *string `type:"string" json:",omitempty"`

	// TopicName is a required field
	TopicName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ResetConsumedOffsetsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetConsumedOffsetsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ResetConsumedOffsetsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ResetConsumedOffsetsInput"}
	if s.GroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("GroupId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.TopicName == nil {
		invalidParams.Add(request.NewErrParamRequired("TopicName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *ResetConsumedOffsetsInput) SetGroupId(v string) *ResetConsumedOffsetsInput {
	s.GroupId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResetConsumedOffsetsInput) SetInstanceId(v string) *ResetConsumedOffsetsInput {
	s.InstanceId = &v
	return s
}

// SetResetTimestamp sets the ResetTimestamp field's value.
func (s *ResetConsumedOffsetsInput) SetResetTimestamp(v int64) *ResetConsumedOffsetsInput {
	s.ResetTimestamp = &v
	return s
}

// SetResetType sets the ResetType field's value.
func (s *ResetConsumedOffsetsInput) SetResetType(v string) *ResetConsumedOffsetsInput {
	s.ResetType = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *ResetConsumedOffsetsInput) SetTopicName(v string) *ResetConsumedOffsetsInput {
	s.TopicName = &v
	return s
}

type ResetConsumedOffsetsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ResetConsumedOffsetsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetConsumedOffsetsOutput) GoString() string {
	return s.String()
}
