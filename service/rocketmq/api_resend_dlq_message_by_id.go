// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rocketmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opResendDLQMessageByIdCommon = "ResendDLQMessageById"

// ResendDLQMessageByIdCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ResendDLQMessageByIdCommon operation. The "output" return
// value will be populated with the ResendDLQMessageByIdCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResendDLQMessageByIdCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResendDLQMessageByIdCommon Send returns without error.
//
// See ResendDLQMessageByIdCommon for more information on using the ResendDLQMessageByIdCommon
// API call, and error handling.
//
//    // Example sending a request using the ResendDLQMessageByIdCommonRequest method.
//    req, resp := client.ResendDLQMessageByIdCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) ResendDLQMessageByIdCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResendDLQMessageByIdCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ResendDLQMessageByIdCommon API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation ResendDLQMessageByIdCommon for usage and error information.
func (c *ROCKETMQ) ResendDLQMessageByIdCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResendDLQMessageByIdCommonRequest(input)
	return out, req.Send()
}

// ResendDLQMessageByIdCommonWithContext is the same as ResendDLQMessageByIdCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResendDLQMessageByIdCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) ResendDLQMessageByIdCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResendDLQMessageByIdCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResendDLQMessageById = "ResendDLQMessageById"

// ResendDLQMessageByIdRequest generates a "volcengine/request.Request" representing the
// client's request for the ResendDLQMessageById operation. The "output" return
// value will be populated with the ResendDLQMessageByIdCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResendDLQMessageByIdCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResendDLQMessageByIdCommon Send returns without error.
//
// See ResendDLQMessageById for more information on using the ResendDLQMessageById
// API call, and error handling.
//
//    // Example sending a request using the ResendDLQMessageByIdRequest method.
//    req, resp := client.ResendDLQMessageByIdRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) ResendDLQMessageByIdRequest(input *ResendDLQMessageByIdInput) (req *request.Request, output *ResendDLQMessageByIdOutput) {
	op := &request.Operation{
		Name:       opResendDLQMessageById,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResendDLQMessageByIdInput{}
	}

	output = &ResendDLQMessageByIdOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ResendDLQMessageById API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation ResendDLQMessageById for usage and error information.
func (c *ROCKETMQ) ResendDLQMessageById(input *ResendDLQMessageByIdInput) (*ResendDLQMessageByIdOutput, error) {
	req, out := c.ResendDLQMessageByIdRequest(input)
	return out, req.Send()
}

// ResendDLQMessageByIdWithContext is the same as ResendDLQMessageById with the addition of
// the ability to pass a context and additional request options.
//
// See ResendDLQMessageById for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) ResendDLQMessageByIdWithContext(ctx volcengine.Context, input *ResendDLQMessageByIdInput, opts ...request.Option) (*ResendDLQMessageByIdOutput, error) {
	req, out := c.ResendDLQMessageByIdRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ResendDLQMessageByIdInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// GroupId is a required field
	GroupId *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	MessageIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ResendDLQMessageByIdInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResendDLQMessageByIdInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ResendDLQMessageByIdInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ResendDLQMessageByIdInput"}
	if s.GroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("GroupId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *ResendDLQMessageByIdInput) SetGroupId(v string) *ResendDLQMessageByIdInput {
	s.GroupId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResendDLQMessageByIdInput) SetInstanceId(v string) *ResendDLQMessageByIdInput {
	s.InstanceId = &v
	return s
}

// SetMessageIds sets the MessageIds field's value.
func (s *ResendDLQMessageByIdInput) SetMessageIds(v []*string) *ResendDLQMessageByIdInput {
	s.MessageIds = v
	return s
}

type ResendDLQMessageByIdOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ResendResult []*ResendResultForResendDLQMessageByIdOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ResendDLQMessageByIdOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResendDLQMessageByIdOutput) GoString() string {
	return s.String()
}

// SetResendResult sets the ResendResult field's value.
func (s *ResendDLQMessageByIdOutput) SetResendResult(v []*ResendResultForResendDLQMessageByIdOutput) *ResendDLQMessageByIdOutput {
	s.ResendResult = v
	return s
}

type ResendResultForResendDLQMessageByIdOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	MessageId *string `type:"string" json:",omitempty"`

	Success *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ResendResultForResendDLQMessageByIdOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResendResultForResendDLQMessageByIdOutput) GoString() string {
	return s.String()
}

// SetMessageId sets the MessageId field's value.
func (s *ResendResultForResendDLQMessageByIdOutput) SetMessageId(v string) *ResendResultForResendDLQMessageByIdOutput {
	s.MessageId = &v
	return s
}

// SetSuccess sets the Success field's value.
func (s *ResendResultForResendDLQMessageByIdOutput) SetSuccess(v bool) *ResendResultForResendDLQMessageByIdOutput {
	s.Success = &v
	return s
}
