// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rocketmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opManualProcessResultCommon = "ManualProcessResult"

// ManualProcessResultCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ManualProcessResultCommon operation. The "output" return
// value will be populated with the ManualProcessResultCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ManualProcessResultCommon Request to send the API call to the service.
// the "output" return value is not valid until after ManualProcessResultCommon Send returns without error.
//
// See ManualProcessResultCommon for more information on using the ManualProcessResultCommon
// API call, and error handling.
//
//    // Example sending a request using the ManualProcessResultCommonRequest method.
//    req, resp := client.ManualProcessResultCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) ManualProcessResultCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opManualProcessResultCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ManualProcessResultCommon API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation ManualProcessResultCommon for usage and error information.
func (c *ROCKETMQ) ManualProcessResultCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ManualProcessResultCommonRequest(input)
	return out, req.Send()
}

// ManualProcessResultCommonWithContext is the same as ManualProcessResultCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ManualProcessResultCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) ManualProcessResultCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ManualProcessResultCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opManualProcessResult = "ManualProcessResult"

// ManualProcessResultRequest generates a "volcengine/request.Request" representing the
// client's request for the ManualProcessResult operation. The "output" return
// value will be populated with the ManualProcessResultCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ManualProcessResultCommon Request to send the API call to the service.
// the "output" return value is not valid until after ManualProcessResultCommon Send returns without error.
//
// See ManualProcessResult for more information on using the ManualProcessResult
// API call, and error handling.
//
//    // Example sending a request using the ManualProcessResultRequest method.
//    req, resp := client.ManualProcessResultRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) ManualProcessResultRequest(input *ManualProcessResultInput) (req *request.Request, output *ManualProcessResultOutput) {
	op := &request.Operation{
		Name:       opManualProcessResult,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ManualProcessResultInput{}
	}

	output = &ManualProcessResultOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ManualProcessResult API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation ManualProcessResult for usage and error information.
func (c *ROCKETMQ) ManualProcessResult(input *ManualProcessResultInput) (*ManualProcessResultOutput, error) {
	req, out := c.ManualProcessResultRequest(input)
	return out, req.Send()
}

// ManualProcessResultWithContext is the same as ManualProcessResult with the addition of
// the ability to pass a context and additional request options.
//
// See ManualProcessResult for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) ManualProcessResultWithContext(ctx volcengine.Context, input *ManualProcessResultInput, opts ...request.Option) (*ManualProcessResultOutput, error) {
	req, out := c.ManualProcessResultRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ManualProcessResultInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// ResultId is a required field
	ResultId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ManualProcessResultInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ManualProcessResultInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ManualProcessResultInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ManualProcessResultInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.ResultId == nil {
		invalidParams.Add(request.NewErrParamRequired("ResultId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ManualProcessResultInput) SetInstanceId(v string) *ManualProcessResultInput {
	s.InstanceId = &v
	return s
}

// SetResultId sets the ResultId field's value.
func (s *ManualProcessResultInput) SetResultId(v string) *ManualProcessResultInput {
	s.ResultId = &v
	return s
}

type ManualProcessResultOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ManualProcessResultOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ManualProcessResultOutput) GoString() string {
	return s.String()
}
