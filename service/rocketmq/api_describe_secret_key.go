// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rocketmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeSecretKeyCommon = "DescribeSecretKey"

// DescribeSecretKeyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeSecretKeyCommon operation. The "output" return
// value will be populated with the DescribeSecretKeyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSecretKeyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSecretKeyCommon Send returns without error.
//
// See DescribeSecretKeyCommon for more information on using the DescribeSecretKeyCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeSecretKeyCommonRequest method.
//    req, resp := client.DescribeSecretKeyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) DescribeSecretKeyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeSecretKeyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeSecretKeyCommon API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation DescribeSecretKeyCommon for usage and error information.
func (c *ROCKETMQ) DescribeSecretKeyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeSecretKeyCommonRequest(input)
	return out, req.Send()
}

// DescribeSecretKeyCommonWithContext is the same as DescribeSecretKeyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSecretKeyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) DescribeSecretKeyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeSecretKeyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSecretKey = "DescribeSecretKey"

// DescribeSecretKeyRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeSecretKey operation. The "output" return
// value will be populated with the DescribeSecretKeyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSecretKeyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSecretKeyCommon Send returns without error.
//
// See DescribeSecretKey for more information on using the DescribeSecretKey
// API call, and error handling.
//
//    // Example sending a request using the DescribeSecretKeyRequest method.
//    req, resp := client.DescribeSecretKeyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) DescribeSecretKeyRequest(input *DescribeSecretKeyInput) (req *request.Request, output *DescribeSecretKeyOutput) {
	op := &request.Operation{
		Name:       opDescribeSecretKey,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSecretKeyInput{}
	}

	output = &DescribeSecretKeyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeSecretKey API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation DescribeSecretKey for usage and error information.
func (c *ROCKETMQ) DescribeSecretKey(input *DescribeSecretKeyInput) (*DescribeSecretKeyOutput, error) {
	req, out := c.DescribeSecretKeyRequest(input)
	return out, req.Send()
}

// DescribeSecretKeyWithContext is the same as DescribeSecretKey with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSecretKey for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) DescribeSecretKeyWithContext(ctx volcengine.Context, input *DescribeSecretKeyInput, opts ...request.Option) (*DescribeSecretKeyOutput, error) {
	req, out := c.DescribeSecretKeyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeSecretKeyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AccessKey is a required field
	AccessKey *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeSecretKeyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSecretKeyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeSecretKeyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeSecretKeyInput"}
	if s.AccessKey == nil {
		invalidParams.Add(request.NewErrParamRequired("AccessKey"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccessKey sets the AccessKey field's value.
func (s *DescribeSecretKeyInput) SetAccessKey(v string) *DescribeSecretKeyInput {
	s.AccessKey = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeSecretKeyInput) SetInstanceId(v string) *DescribeSecretKeyInput {
	s.InstanceId = &v
	return s
}

type DescribeSecretKeyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AccessKey *string `type:"string" json:",omitempty"`

	SecretKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeSecretKeyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSecretKeyOutput) GoString() string {
	return s.String()
}

// SetAccessKey sets the AccessKey field's value.
func (s *DescribeSecretKeyOutput) SetAccessKey(v string) *DescribeSecretKeyOutput {
	s.AccessKey = &v
	return s
}

// SetSecretKey sets the SecretKey field's value.
func (s *DescribeSecretKeyOutput) SetSecretKey(v string) *DescribeSecretKeyOutput {
	s.SecretKey = &v
	return s
}
