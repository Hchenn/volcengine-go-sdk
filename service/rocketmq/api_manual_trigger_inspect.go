// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rocketmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opManualTriggerInspectCommon = "ManualTriggerInspect"

// ManualTriggerInspectCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ManualTriggerInspectCommon operation. The "output" return
// value will be populated with the ManualTriggerInspectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ManualTriggerInspectCommon Request to send the API call to the service.
// the "output" return value is not valid until after ManualTriggerInspectCommon Send returns without error.
//
// See ManualTriggerInspectCommon for more information on using the ManualTriggerInspectCommon
// API call, and error handling.
//
//    // Example sending a request using the ManualTriggerInspectCommonRequest method.
//    req, resp := client.ManualTriggerInspectCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) ManualTriggerInspectCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opManualTriggerInspectCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ManualTriggerInspectCommon API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation ManualTriggerInspectCommon for usage and error information.
func (c *ROCKETMQ) ManualTriggerInspectCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ManualTriggerInspectCommonRequest(input)
	return out, req.Send()
}

// ManualTriggerInspectCommonWithContext is the same as ManualTriggerInspectCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ManualTriggerInspectCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) ManualTriggerInspectCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ManualTriggerInspectCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opManualTriggerInspect = "ManualTriggerInspect"

// ManualTriggerInspectRequest generates a "volcengine/request.Request" representing the
// client's request for the ManualTriggerInspect operation. The "output" return
// value will be populated with the ManualTriggerInspectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ManualTriggerInspectCommon Request to send the API call to the service.
// the "output" return value is not valid until after ManualTriggerInspectCommon Send returns without error.
//
// See ManualTriggerInspect for more information on using the ManualTriggerInspect
// API call, and error handling.
//
//    // Example sending a request using the ManualTriggerInspectRequest method.
//    req, resp := client.ManualTriggerInspectRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) ManualTriggerInspectRequest(input *ManualTriggerInspectInput) (req *request.Request, output *ManualTriggerInspectOutput) {
	op := &request.Operation{
		Name:       opManualTriggerInspect,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ManualTriggerInspectInput{}
	}

	output = &ManualTriggerInspectOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ManualTriggerInspect API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation ManualTriggerInspect for usage and error information.
func (c *ROCKETMQ) ManualTriggerInspect(input *ManualTriggerInspectInput) (*ManualTriggerInspectOutput, error) {
	req, out := c.ManualTriggerInspectRequest(input)
	return out, req.Send()
}

// ManualTriggerInspectWithContext is the same as ManualTriggerInspect with the addition of
// the ability to pass a context and additional request options.
//
// See ManualTriggerInspect for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) ManualTriggerInspectWithContext(ctx volcengine.Context, input *ManualTriggerInspectInput, opts ...request.Option) (*ManualTriggerInspectOutput, error) {
	req, out := c.ManualTriggerInspectRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ManualTriggerInspectInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InspectName is a required field
	InspectName *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// Type is a required field
	Type *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ManualTriggerInspectInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ManualTriggerInspectInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ManualTriggerInspectInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ManualTriggerInspectInput"}
	if s.InspectName == nil {
		invalidParams.Add(request.NewErrParamRequired("InspectName"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInspectName sets the InspectName field's value.
func (s *ManualTriggerInspectInput) SetInspectName(v string) *ManualTriggerInspectInput {
	s.InspectName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ManualTriggerInspectInput) SetInstanceId(v string) *ManualTriggerInspectInput {
	s.InstanceId = &v
	return s
}

// SetType sets the Type field's value.
func (s *ManualTriggerInspectInput) SetType(v string) *ManualTriggerInspectInput {
	s.Type = &v
	return s
}

type ManualTriggerInspectOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ManualTriggerInspectOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ManualTriggerInspectOutput) GoString() string {
	return s.String()
}
