// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rocketmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQueryMessageByMsgIdCommon = "QueryMessageByMsgId"

// QueryMessageByMsgIdCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryMessageByMsgIdCommon operation. The "output" return
// value will be populated with the QueryMessageByMsgIdCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryMessageByMsgIdCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryMessageByMsgIdCommon Send returns without error.
//
// See QueryMessageByMsgIdCommon for more information on using the QueryMessageByMsgIdCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryMessageByMsgIdCommonRequest method.
//    req, resp := client.QueryMessageByMsgIdCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) QueryMessageByMsgIdCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryMessageByMsgIdCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryMessageByMsgIdCommon API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation QueryMessageByMsgIdCommon for usage and error information.
func (c *ROCKETMQ) QueryMessageByMsgIdCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryMessageByMsgIdCommonRequest(input)
	return out, req.Send()
}

// QueryMessageByMsgIdCommonWithContext is the same as QueryMessageByMsgIdCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryMessageByMsgIdCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) QueryMessageByMsgIdCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryMessageByMsgIdCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryMessageByMsgId = "QueryMessageByMsgId"

// QueryMessageByMsgIdRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryMessageByMsgId operation. The "output" return
// value will be populated with the QueryMessageByMsgIdCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryMessageByMsgIdCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryMessageByMsgIdCommon Send returns without error.
//
// See QueryMessageByMsgId for more information on using the QueryMessageByMsgId
// API call, and error handling.
//
//    // Example sending a request using the QueryMessageByMsgIdRequest method.
//    req, resp := client.QueryMessageByMsgIdRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) QueryMessageByMsgIdRequest(input *QueryMessageByMsgIdInput) (req *request.Request, output *QueryMessageByMsgIdOutput) {
	op := &request.Operation{
		Name:       opQueryMessageByMsgId,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryMessageByMsgIdInput{}
	}

	output = &QueryMessageByMsgIdOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryMessageByMsgId API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation QueryMessageByMsgId for usage and error information.
func (c *ROCKETMQ) QueryMessageByMsgId(input *QueryMessageByMsgIdInput) (*QueryMessageByMsgIdOutput, error) {
	req, out := c.QueryMessageByMsgIdRequest(input)
	return out, req.Send()
}

// QueryMessageByMsgIdWithContext is the same as QueryMessageByMsgId with the addition of
// the ability to pass a context and additional request options.
//
// See QueryMessageByMsgId for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) QueryMessageByMsgIdWithContext(ctx volcengine.Context, input *QueryMessageByMsgIdInput, opts ...request.Option) (*QueryMessageByMsgIdOutput, error) {
	req, out := c.QueryMessageByMsgIdRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type MessageInfoForQueryMessageByMsgIdOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Body *string `type:"string" json:",omitempty"`

	CreateTimestamp *int64 `type:"int64" json:",omitempty"`

	IsExist *bool `type:"boolean" json:",omitempty"`

	MessageId *string `type:"string" json:",omitempty"`

	MessageKey *string `type:"string" json:",omitempty"`

	MessageSize *int32 `type:"int32" json:",omitempty"`

	ProducerHost *string `type:"string" json:",omitempty"`

	StoreTimestamp *int64 `type:"int64" json:",omitempty"`

	Tag *string `type:"string" json:",omitempty"`

	TopicName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s MessageInfoForQueryMessageByMsgIdOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MessageInfoForQueryMessageByMsgIdOutput) GoString() string {
	return s.String()
}

// SetBody sets the Body field's value.
func (s *MessageInfoForQueryMessageByMsgIdOutput) SetBody(v string) *MessageInfoForQueryMessageByMsgIdOutput {
	s.Body = &v
	return s
}

// SetCreateTimestamp sets the CreateTimestamp field's value.
func (s *MessageInfoForQueryMessageByMsgIdOutput) SetCreateTimestamp(v int64) *MessageInfoForQueryMessageByMsgIdOutput {
	s.CreateTimestamp = &v
	return s
}

// SetIsExist sets the IsExist field's value.
func (s *MessageInfoForQueryMessageByMsgIdOutput) SetIsExist(v bool) *MessageInfoForQueryMessageByMsgIdOutput {
	s.IsExist = &v
	return s
}

// SetMessageId sets the MessageId field's value.
func (s *MessageInfoForQueryMessageByMsgIdOutput) SetMessageId(v string) *MessageInfoForQueryMessageByMsgIdOutput {
	s.MessageId = &v
	return s
}

// SetMessageKey sets the MessageKey field's value.
func (s *MessageInfoForQueryMessageByMsgIdOutput) SetMessageKey(v string) *MessageInfoForQueryMessageByMsgIdOutput {
	s.MessageKey = &v
	return s
}

// SetMessageSize sets the MessageSize field's value.
func (s *MessageInfoForQueryMessageByMsgIdOutput) SetMessageSize(v int32) *MessageInfoForQueryMessageByMsgIdOutput {
	s.MessageSize = &v
	return s
}

// SetProducerHost sets the ProducerHost field's value.
func (s *MessageInfoForQueryMessageByMsgIdOutput) SetProducerHost(v string) *MessageInfoForQueryMessageByMsgIdOutput {
	s.ProducerHost = &v
	return s
}

// SetStoreTimestamp sets the StoreTimestamp field's value.
func (s *MessageInfoForQueryMessageByMsgIdOutput) SetStoreTimestamp(v int64) *MessageInfoForQueryMessageByMsgIdOutput {
	s.StoreTimestamp = &v
	return s
}

// SetTag sets the Tag field's value.
func (s *MessageInfoForQueryMessageByMsgIdOutput) SetTag(v string) *MessageInfoForQueryMessageByMsgIdOutput {
	s.Tag = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *MessageInfoForQueryMessageByMsgIdOutput) SetTopicName(v string) *MessageInfoForQueryMessageByMsgIdOutput {
	s.TopicName = &v
	return s
}

type QueryMessageByMsgIdInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// MessageId is a required field
	MessageId *string `type:"string" json:",omitempty" required:"true"`

	// TopicName is a required field
	TopicName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QueryMessageByMsgIdInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryMessageByMsgIdInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryMessageByMsgIdInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryMessageByMsgIdInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.MessageId == nil {
		invalidParams.Add(request.NewErrParamRequired("MessageId"))
	}
	if s.TopicName == nil {
		invalidParams.Add(request.NewErrParamRequired("TopicName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *QueryMessageByMsgIdInput) SetInstanceId(v string) *QueryMessageByMsgIdInput {
	s.InstanceId = &v
	return s
}

// SetMessageId sets the MessageId field's value.
func (s *QueryMessageByMsgIdInput) SetMessageId(v string) *QueryMessageByMsgIdInput {
	s.MessageId = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *QueryMessageByMsgIdInput) SetTopicName(v string) *QueryMessageByMsgIdInput {
	s.TopicName = &v
	return s
}

type QueryMessageByMsgIdOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	MessageInfo *MessageInfoForQueryMessageByMsgIdOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s QueryMessageByMsgIdOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryMessageByMsgIdOutput) GoString() string {
	return s.String()
}

// SetMessageInfo sets the MessageInfo field's value.
func (s *QueryMessageByMsgIdOutput) SetMessageInfo(v *MessageInfoForQueryMessageByMsgIdOutput) *QueryMessageByMsgIdOutput {
	s.MessageInfo = v
	return s
}
