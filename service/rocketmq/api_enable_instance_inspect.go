// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rocketmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEnableInstanceInspectCommon = "EnableInstanceInspect"

// EnableInstanceInspectCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableInstanceInspectCommon operation. The "output" return
// value will be populated with the EnableInstanceInspectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableInstanceInspectCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableInstanceInspectCommon Send returns without error.
//
// See EnableInstanceInspectCommon for more information on using the EnableInstanceInspectCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableInstanceInspectCommonRequest method.
//    req, resp := client.EnableInstanceInspectCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) EnableInstanceInspectCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableInstanceInspectCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableInstanceInspectCommon API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation EnableInstanceInspectCommon for usage and error information.
func (c *ROCKETMQ) EnableInstanceInspectCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableInstanceInspectCommonRequest(input)
	return out, req.Send()
}

// EnableInstanceInspectCommonWithContext is the same as EnableInstanceInspectCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableInstanceInspectCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) EnableInstanceInspectCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableInstanceInspectCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableInstanceInspect = "EnableInstanceInspect"

// EnableInstanceInspectRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableInstanceInspect operation. The "output" return
// value will be populated with the EnableInstanceInspectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableInstanceInspectCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableInstanceInspectCommon Send returns without error.
//
// See EnableInstanceInspect for more information on using the EnableInstanceInspect
// API call, and error handling.
//
//    // Example sending a request using the EnableInstanceInspectRequest method.
//    req, resp := client.EnableInstanceInspectRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) EnableInstanceInspectRequest(input *EnableInstanceInspectInput) (req *request.Request, output *EnableInstanceInspectOutput) {
	op := &request.Operation{
		Name:       opEnableInstanceInspect,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableInstanceInspectInput{}
	}

	output = &EnableInstanceInspectOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableInstanceInspect API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation EnableInstanceInspect for usage and error information.
func (c *ROCKETMQ) EnableInstanceInspect(input *EnableInstanceInspectInput) (*EnableInstanceInspectOutput, error) {
	req, out := c.EnableInstanceInspectRequest(input)
	return out, req.Send()
}

// EnableInstanceInspectWithContext is the same as EnableInstanceInspect with the addition of
// the ability to pass a context and additional request options.
//
// See EnableInstanceInspect for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) EnableInstanceInspectWithContext(ctx volcengine.Context, input *EnableInstanceInspectInput, opts ...request.Option) (*EnableInstanceInspectOutput, error) {
	req, out := c.EnableInstanceInspectRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnableInstanceInspectInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Enable is a required field
	Enable *bool `type:"boolean" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s EnableInstanceInspectInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableInstanceInspectInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableInstanceInspectInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnableInstanceInspectInput"}
	if s.Enable == nil {
		invalidParams.Add(request.NewErrParamRequired("Enable"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEnable sets the Enable field's value.
func (s *EnableInstanceInspectInput) SetEnable(v bool) *EnableInstanceInspectInput {
	s.Enable = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *EnableInstanceInspectInput) SetInstanceId(v string) *EnableInstanceInspectInput {
	s.InstanceId = &v
	return s
}

type EnableInstanceInspectOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s EnableInstanceInspectOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableInstanceInspectOutput) GoString() string {
	return s.String()
}
