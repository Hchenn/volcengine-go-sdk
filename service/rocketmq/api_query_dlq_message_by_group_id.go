// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rocketmq

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQueryDLQMessageByGroupIdCommon = "QueryDLQMessageByGroupId"

// QueryDLQMessageByGroupIdCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryDLQMessageByGroupIdCommon operation. The "output" return
// value will be populated with the QueryDLQMessageByGroupIdCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryDLQMessageByGroupIdCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryDLQMessageByGroupIdCommon Send returns without error.
//
// See QueryDLQMessageByGroupIdCommon for more information on using the QueryDLQMessageByGroupIdCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryDLQMessageByGroupIdCommonRequest method.
//    req, resp := client.QueryDLQMessageByGroupIdCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) QueryDLQMessageByGroupIdCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryDLQMessageByGroupIdCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryDLQMessageByGroupIdCommon API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation QueryDLQMessageByGroupIdCommon for usage and error information.
func (c *ROCKETMQ) QueryDLQMessageByGroupIdCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryDLQMessageByGroupIdCommonRequest(input)
	return out, req.Send()
}

// QueryDLQMessageByGroupIdCommonWithContext is the same as QueryDLQMessageByGroupIdCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryDLQMessageByGroupIdCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) QueryDLQMessageByGroupIdCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryDLQMessageByGroupIdCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryDLQMessageByGroupId = "QueryDLQMessageByGroupId"

// QueryDLQMessageByGroupIdRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryDLQMessageByGroupId operation. The "output" return
// value will be populated with the QueryDLQMessageByGroupIdCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryDLQMessageByGroupIdCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryDLQMessageByGroupIdCommon Send returns without error.
//
// See QueryDLQMessageByGroupId for more information on using the QueryDLQMessageByGroupId
// API call, and error handling.
//
//    // Example sending a request using the QueryDLQMessageByGroupIdRequest method.
//    req, resp := client.QueryDLQMessageByGroupIdRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ROCKETMQ) QueryDLQMessageByGroupIdRequest(input *QueryDLQMessageByGroupIdInput) (req *request.Request, output *QueryDLQMessageByGroupIdOutput) {
	op := &request.Operation{
		Name:       opQueryDLQMessageByGroupId,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryDLQMessageByGroupIdInput{}
	}

	output = &QueryDLQMessageByGroupIdOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryDLQMessageByGroupId API operation for ROCKETMQ.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ROCKETMQ's
// API operation QueryDLQMessageByGroupId for usage and error information.
func (c *ROCKETMQ) QueryDLQMessageByGroupId(input *QueryDLQMessageByGroupIdInput) (*QueryDLQMessageByGroupIdOutput, error) {
	req, out := c.QueryDLQMessageByGroupIdRequest(input)
	return out, req.Send()
}

// QueryDLQMessageByGroupIdWithContext is the same as QueryDLQMessageByGroupId with the addition of
// the ability to pass a context and additional request options.
//
// See QueryDLQMessageByGroupId for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ROCKETMQ) QueryDLQMessageByGroupIdWithContext(ctx volcengine.Context, input *QueryDLQMessageByGroupIdInput, opts ...request.Option) (*QueryDLQMessageByGroupIdOutput, error) {
	req, out := c.QueryDLQMessageByGroupIdRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DLQMessageListForQueryDLQMessageByGroupIdOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTimestamp *int64 `type:"int64" json:",omitempty"`

	IsExist *bool `type:"boolean" json:",omitempty"`

	MessageId *string `type:"string" json:",omitempty"`

	MessageKey *string `type:"string" json:",omitempty"`

	MessageSize *int32 `type:"int32" json:",omitempty"`

	ProducerHost *string `type:"string" json:",omitempty"`

	ReconsumeTimes *int32 `type:"int32" json:",omitempty"`

	StoreTimestamp *int64 `type:"int64" json:",omitempty"`

	Tag *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DLQMessageListForQueryDLQMessageByGroupIdOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DLQMessageListForQueryDLQMessageByGroupIdOutput) GoString() string {
	return s.String()
}

// SetCreateTimestamp sets the CreateTimestamp field's value.
func (s *DLQMessageListForQueryDLQMessageByGroupIdOutput) SetCreateTimestamp(v int64) *DLQMessageListForQueryDLQMessageByGroupIdOutput {
	s.CreateTimestamp = &v
	return s
}

// SetIsExist sets the IsExist field's value.
func (s *DLQMessageListForQueryDLQMessageByGroupIdOutput) SetIsExist(v bool) *DLQMessageListForQueryDLQMessageByGroupIdOutput {
	s.IsExist = &v
	return s
}

// SetMessageId sets the MessageId field's value.
func (s *DLQMessageListForQueryDLQMessageByGroupIdOutput) SetMessageId(v string) *DLQMessageListForQueryDLQMessageByGroupIdOutput {
	s.MessageId = &v
	return s
}

// SetMessageKey sets the MessageKey field's value.
func (s *DLQMessageListForQueryDLQMessageByGroupIdOutput) SetMessageKey(v string) *DLQMessageListForQueryDLQMessageByGroupIdOutput {
	s.MessageKey = &v
	return s
}

// SetMessageSize sets the MessageSize field's value.
func (s *DLQMessageListForQueryDLQMessageByGroupIdOutput) SetMessageSize(v int32) *DLQMessageListForQueryDLQMessageByGroupIdOutput {
	s.MessageSize = &v
	return s
}

// SetProducerHost sets the ProducerHost field's value.
func (s *DLQMessageListForQueryDLQMessageByGroupIdOutput) SetProducerHost(v string) *DLQMessageListForQueryDLQMessageByGroupIdOutput {
	s.ProducerHost = &v
	return s
}

// SetReconsumeTimes sets the ReconsumeTimes field's value.
func (s *DLQMessageListForQueryDLQMessageByGroupIdOutput) SetReconsumeTimes(v int32) *DLQMessageListForQueryDLQMessageByGroupIdOutput {
	s.ReconsumeTimes = &v
	return s
}

// SetStoreTimestamp sets the StoreTimestamp field's value.
func (s *DLQMessageListForQueryDLQMessageByGroupIdOutput) SetStoreTimestamp(v int64) *DLQMessageListForQueryDLQMessageByGroupIdOutput {
	s.StoreTimestamp = &v
	return s
}

// SetTag sets the Tag field's value.
func (s *DLQMessageListForQueryDLQMessageByGroupIdOutput) SetTag(v string) *DLQMessageListForQueryDLQMessageByGroupIdOutput {
	s.Tag = &v
	return s
}

type QueryDLQMessageByGroupIdInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// GroupId is a required field
	GroupId *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// QueryEndTimestamp is a required field
	QueryEndTimestamp *string `type:"string" json:",omitempty" required:"true"`

	// QueryStartTimestamp is a required field
	QueryStartTimestamp *string `type:"string" json:",omitempty" required:"true"`

	Refresh *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s QueryDLQMessageByGroupIdInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryDLQMessageByGroupIdInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryDLQMessageByGroupIdInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryDLQMessageByGroupIdInput"}
	if s.GroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("GroupId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.QueryEndTimestamp == nil {
		invalidParams.Add(request.NewErrParamRequired("QueryEndTimestamp"))
	}
	if s.QueryStartTimestamp == nil {
		invalidParams.Add(request.NewErrParamRequired("QueryStartTimestamp"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGroupId sets the GroupId field's value.
func (s *QueryDLQMessageByGroupIdInput) SetGroupId(v string) *QueryDLQMessageByGroupIdInput {
	s.GroupId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *QueryDLQMessageByGroupIdInput) SetInstanceId(v string) *QueryDLQMessageByGroupIdInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *QueryDLQMessageByGroupIdInput) SetPageNumber(v int32) *QueryDLQMessageByGroupIdInput {
	s.PageNumber = &v
	return s
}

// SetQueryEndTimestamp sets the QueryEndTimestamp field's value.
func (s *QueryDLQMessageByGroupIdInput) SetQueryEndTimestamp(v string) *QueryDLQMessageByGroupIdInput {
	s.QueryEndTimestamp = &v
	return s
}

// SetQueryStartTimestamp sets the QueryStartTimestamp field's value.
func (s *QueryDLQMessageByGroupIdInput) SetQueryStartTimestamp(v string) *QueryDLQMessageByGroupIdInput {
	s.QueryStartTimestamp = &v
	return s
}

// SetRefresh sets the Refresh field's value.
func (s *QueryDLQMessageByGroupIdInput) SetRefresh(v bool) *QueryDLQMessageByGroupIdInput {
	s.Refresh = &v
	return s
}

type QueryDLQMessageByGroupIdOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DLQMessageList []*DLQMessageListForQueryDLQMessageByGroupIdOutput `type:"list" json:",omitempty"`

	HasMoreMessage *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s QueryDLQMessageByGroupIdOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryDLQMessageByGroupIdOutput) GoString() string {
	return s.String()
}

// SetDLQMessageList sets the DLQMessageList field's value.
func (s *QueryDLQMessageByGroupIdOutput) SetDLQMessageList(v []*DLQMessageListForQueryDLQMessageByGroupIdOutput) *QueryDLQMessageByGroupIdOutput {
	s.DLQMessageList = v
	return s
}

// SetHasMoreMessage sets the HasMoreMessage field's value.
func (s *QueryDLQMessageByGroupIdOutput) SetHasMoreMessage(v bool) *QueryDLQMessageByGroupIdOutput {
	s.HasMoreMessage = &v
	return s
}
