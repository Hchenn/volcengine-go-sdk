// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudtrail20180101

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStopLoggingCommon = "StopLogging"

// StopLoggingCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StopLoggingCommon operation. The "output" return
// value will be populated with the StopLoggingCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopLoggingCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopLoggingCommon Send returns without error.
//
// See StopLoggingCommon for more information on using the StopLoggingCommon
// API call, and error handling.
//
//    // Example sending a request using the StopLoggingCommonRequest method.
//    req, resp := client.StopLoggingCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDTRAIL20180101) StopLoggingCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopLoggingCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StopLoggingCommon API operation for CLOUD_TRAIL20180101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUD_TRAIL20180101's
// API operation StopLoggingCommon for usage and error information.
func (c *CLOUDTRAIL20180101) StopLoggingCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopLoggingCommonRequest(input)
	return out, req.Send()
}

// StopLoggingCommonWithContext is the same as StopLoggingCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopLoggingCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDTRAIL20180101) StopLoggingCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopLoggingCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopLogging = "StopLogging"

// StopLoggingRequest generates a "volcengine/request.Request" representing the
// client's request for the StopLogging operation. The "output" return
// value will be populated with the StopLoggingCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopLoggingCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopLoggingCommon Send returns without error.
//
// See StopLogging for more information on using the StopLogging
// API call, and error handling.
//
//    // Example sending a request using the StopLoggingRequest method.
//    req, resp := client.StopLoggingRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDTRAIL20180101) StopLoggingRequest(input *StopLoggingInput) (req *request.Request, output *StopLoggingOutput) {
	op := &request.Operation{
		Name:       opStopLogging,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopLoggingInput{}
	}

	output = &StopLoggingOutput{}
	req = c.newRequest(op, input, output)

	return
}

// StopLogging API operation for CLOUD_TRAIL20180101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUD_TRAIL20180101's
// API operation StopLogging for usage and error information.
func (c *CLOUDTRAIL20180101) StopLogging(input *StopLoggingInput) (*StopLoggingOutput, error) {
	req, out := c.StopLoggingRequest(input)
	return out, req.Send()
}

// StopLoggingWithContext is the same as StopLogging with the addition of
// the ability to pass a context and additional request options.
//
// See StopLogging for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDTRAIL20180101) StopLoggingWithContext(ctx volcengine.Context, input *StopLoggingInput, opts ...request.Option) (*StopLoggingOutput, error) {
	req, out := c.StopLoggingRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StopLoggingInput struct {
	_ struct{} `type:"structure"`

	TrailName *string `type:"string"`
}

// String returns the string representation
func (s StopLoggingInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopLoggingInput) GoString() string {
	return s.String()
}

// SetTrailName sets the TrailName field's value.
func (s *StopLoggingInput) SetTrailName(v string) *StopLoggingInput {
	s.TrailName = &v
	return s
}

type StopLoggingOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s StopLoggingOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopLoggingOutput) GoString() string {
	return s.String()
}
