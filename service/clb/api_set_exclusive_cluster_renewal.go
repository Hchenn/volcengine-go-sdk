// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package clb

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSetExclusiveClusterRenewalCommon = "SetExclusiveClusterRenewal"

// SetExclusiveClusterRenewalCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SetExclusiveClusterRenewalCommon operation. The "output" return
// value will be populated with the SetExclusiveClusterRenewalCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetExclusiveClusterRenewalCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetExclusiveClusterRenewalCommon Send returns without error.
//
// See SetExclusiveClusterRenewalCommon for more information on using the SetExclusiveClusterRenewalCommon
// API call, and error handling.
//
//    // Example sending a request using the SetExclusiveClusterRenewalCommonRequest method.
//    req, resp := client.SetExclusiveClusterRenewalCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) SetExclusiveClusterRenewalCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSetExclusiveClusterRenewalCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// SetExclusiveClusterRenewalCommon API operation for CLB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLB's
// API operation SetExclusiveClusterRenewalCommon for usage and error information.
func (c *CLB) SetExclusiveClusterRenewalCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SetExclusiveClusterRenewalCommonRequest(input)
	return out, req.Send()
}

// SetExclusiveClusterRenewalCommonWithContext is the same as SetExclusiveClusterRenewalCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SetExclusiveClusterRenewalCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) SetExclusiveClusterRenewalCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SetExclusiveClusterRenewalCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetExclusiveClusterRenewal = "SetExclusiveClusterRenewal"

// SetExclusiveClusterRenewalRequest generates a "volcengine/request.Request" representing the
// client's request for the SetExclusiveClusterRenewal operation. The "output" return
// value will be populated with the SetExclusiveClusterRenewalCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetExclusiveClusterRenewalCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetExclusiveClusterRenewalCommon Send returns without error.
//
// See SetExclusiveClusterRenewal for more information on using the SetExclusiveClusterRenewal
// API call, and error handling.
//
//    // Example sending a request using the SetExclusiveClusterRenewalRequest method.
//    req, resp := client.SetExclusiveClusterRenewalRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) SetExclusiveClusterRenewalRequest(input *SetExclusiveClusterRenewalInput) (req *request.Request, output *SetExclusiveClusterRenewalOutput) {
	op := &request.Operation{
		Name:       opSetExclusiveClusterRenewal,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SetExclusiveClusterRenewalInput{}
	}

	output = &SetExclusiveClusterRenewalOutput{}
	req = c.newRequest(op, input, output)

	return
}

// SetExclusiveClusterRenewal API operation for CLB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLB's
// API operation SetExclusiveClusterRenewal for usage and error information.
func (c *CLB) SetExclusiveClusterRenewal(input *SetExclusiveClusterRenewalInput) (*SetExclusiveClusterRenewalOutput, error) {
	req, out := c.SetExclusiveClusterRenewalRequest(input)
	return out, req.Send()
}

// SetExclusiveClusterRenewalWithContext is the same as SetExclusiveClusterRenewal with the addition of
// the ability to pass a context and additional request options.
//
// See SetExclusiveClusterRenewal for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) SetExclusiveClusterRenewalWithContext(ctx volcengine.Context, input *SetExclusiveClusterRenewalInput, opts ...request.Option) (*SetExclusiveClusterRenewalOutput, error) {
	req, out := c.SetExclusiveClusterRenewalRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SetExclusiveClusterRenewalInput struct {
	_ struct{} `type:"structure"`

	// ExclusiveClusterId is a required field
	ExclusiveClusterId *string `type:"string" required:"true"`

	RemainRenewTimes *int64 `type:"integer"`

	RenewPeriodTimes *int64 `type:"integer"`

	// RenewType is a required field
	RenewType *int64 `min:"1" max:"2" type:"integer" required:"true"`
}

// String returns the string representation
func (s SetExclusiveClusterRenewalInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetExclusiveClusterRenewalInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetExclusiveClusterRenewalInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SetExclusiveClusterRenewalInput"}
	if s.ExclusiveClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ExclusiveClusterId"))
	}
	if s.RenewType == nil {
		invalidParams.Add(request.NewErrParamRequired("RenewType"))
	}
	if s.RenewType != nil && *s.RenewType < 1 {
		invalidParams.Add(request.NewErrParamMinValue("RenewType", 1))
	}
	if s.RenewType != nil && *s.RenewType > 2 {
		invalidParams.Add(request.NewErrParamMaxValue("RenewType", 2))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetExclusiveClusterId sets the ExclusiveClusterId field's value.
func (s *SetExclusiveClusterRenewalInput) SetExclusiveClusterId(v string) *SetExclusiveClusterRenewalInput {
	s.ExclusiveClusterId = &v
	return s
}

// SetRemainRenewTimes sets the RemainRenewTimes field's value.
func (s *SetExclusiveClusterRenewalInput) SetRemainRenewTimes(v int64) *SetExclusiveClusterRenewalInput {
	s.RemainRenewTimes = &v
	return s
}

// SetRenewPeriodTimes sets the RenewPeriodTimes field's value.
func (s *SetExclusiveClusterRenewalInput) SetRenewPeriodTimes(v int64) *SetExclusiveClusterRenewalInput {
	s.RenewPeriodTimes = &v
	return s
}

// SetRenewType sets the RenewType field's value.
func (s *SetExclusiveClusterRenewalInput) SetRenewType(v int64) *SetExclusiveClusterRenewalInput {
	s.RenewType = &v
	return s
}

type SetExclusiveClusterRenewalOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s SetExclusiveClusterRenewalOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetExclusiveClusterRenewalOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *SetExclusiveClusterRenewalOutput) SetRequestId(v string) *SetExclusiveClusterRenewalOutput {
	s.RequestId = &v
	return s
}
