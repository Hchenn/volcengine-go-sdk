// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package clb

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteExclusiveClusterCommon = "DeleteExclusiveCluster"

// DeleteExclusiveClusterCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteExclusiveClusterCommon operation. The "output" return
// value will be populated with the DeleteExclusiveClusterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteExclusiveClusterCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteExclusiveClusterCommon Send returns without error.
//
// See DeleteExclusiveClusterCommon for more information on using the DeleteExclusiveClusterCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteExclusiveClusterCommonRequest method.
//    req, resp := client.DeleteExclusiveClusterCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteExclusiveClusterCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteExclusiveClusterCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteExclusiveClusterCommon API operation for CLB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLB's
// API operation DeleteExclusiveClusterCommon for usage and error information.
func (c *CLB) DeleteExclusiveClusterCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteExclusiveClusterCommonRequest(input)
	return out, req.Send()
}

// DeleteExclusiveClusterCommonWithContext is the same as DeleteExclusiveClusterCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteExclusiveClusterCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteExclusiveClusterCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteExclusiveClusterCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteExclusiveCluster = "DeleteExclusiveCluster"

// DeleteExclusiveClusterRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteExclusiveCluster operation. The "output" return
// value will be populated with the DeleteExclusiveClusterCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteExclusiveClusterCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteExclusiveClusterCommon Send returns without error.
//
// See DeleteExclusiveCluster for more information on using the DeleteExclusiveCluster
// API call, and error handling.
//
//    // Example sending a request using the DeleteExclusiveClusterRequest method.
//    req, resp := client.DeleteExclusiveClusterRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteExclusiveClusterRequest(input *DeleteExclusiveClusterInput) (req *request.Request, output *DeleteExclusiveClusterOutput) {
	op := &request.Operation{
		Name:       opDeleteExclusiveCluster,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteExclusiveClusterInput{}
	}

	output = &DeleteExclusiveClusterOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteExclusiveCluster API operation for CLB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLB's
// API operation DeleteExclusiveCluster for usage and error information.
func (c *CLB) DeleteExclusiveCluster(input *DeleteExclusiveClusterInput) (*DeleteExclusiveClusterOutput, error) {
	req, out := c.DeleteExclusiveClusterRequest(input)
	return out, req.Send()
}

// DeleteExclusiveClusterWithContext is the same as DeleteExclusiveCluster with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteExclusiveCluster for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteExclusiveClusterWithContext(ctx volcengine.Context, input *DeleteExclusiveClusterInput, opts ...request.Option) (*DeleteExclusiveClusterOutput, error) {
	req, out := c.DeleteExclusiveClusterRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteExclusiveClusterInput struct {
	_ struct{} `type:"structure"`

	// ExclusiveClusterId is a required field
	ExclusiveClusterId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteExclusiveClusterInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteExclusiveClusterInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteExclusiveClusterInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteExclusiveClusterInput"}
	if s.ExclusiveClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ExclusiveClusterId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetExclusiveClusterId sets the ExclusiveClusterId field's value.
func (s *DeleteExclusiveClusterInput) SetExclusiveClusterId(v string) *DeleteExclusiveClusterInput {
	s.ExclusiveClusterId = &v
	return s
}

type DeleteExclusiveClusterOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteExclusiveClusterOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteExclusiveClusterOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteExclusiveClusterOutput) SetRequestId(v string) *DeleteExclusiveClusterOutput {
	s.RequestId = &v
	return s
}
