// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package advdefence20230308

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateFwdRuleCommon = "UpdateFwdRule"

// UpdateFwdRuleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateFwdRuleCommon operation. The "output" return
// value will be populated with the UpdateFwdRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateFwdRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateFwdRuleCommon Send returns without error.
//
// See UpdateFwdRuleCommon for more information on using the UpdateFwdRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateFwdRuleCommonRequest method.
//    req, resp := client.UpdateFwdRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ADVDEFENCE20230308) UpdateFwdRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateFwdRuleCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateFwdRuleCommon API operation for ADVDEFENCE20230308.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ADVDEFENCE20230308's
// API operation UpdateFwdRuleCommon for usage and error information.
func (c *ADVDEFENCE20230308) UpdateFwdRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateFwdRuleCommonRequest(input)
	return out, req.Send()
}

// UpdateFwdRuleCommonWithContext is the same as UpdateFwdRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateFwdRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ADVDEFENCE20230308) UpdateFwdRuleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateFwdRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateFwdRule = "UpdateFwdRule"

// UpdateFwdRuleRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateFwdRule operation. The "output" return
// value will be populated with the UpdateFwdRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateFwdRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateFwdRuleCommon Send returns without error.
//
// See UpdateFwdRule for more information on using the UpdateFwdRule
// API call, and error handling.
//
//    // Example sending a request using the UpdateFwdRuleRequest method.
//    req, resp := client.UpdateFwdRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ADVDEFENCE20230308) UpdateFwdRuleRequest(input *UpdateFwdRuleInput) (req *request.Request, output *UpdateFwdRuleOutput) {
	op := &request.Operation{
		Name:       opUpdateFwdRule,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateFwdRuleInput{}
	}

	output = &UpdateFwdRuleOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateFwdRule API operation for ADVDEFENCE20230308.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ADVDEFENCE20230308's
// API operation UpdateFwdRule for usage and error information.
func (c *ADVDEFENCE20230308) UpdateFwdRule(input *UpdateFwdRuleInput) (*UpdateFwdRuleOutput, error) {
	req, out := c.UpdateFwdRuleRequest(input)
	return out, req.Send()
}

// UpdateFwdRuleWithContext is the same as UpdateFwdRule with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateFwdRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ADVDEFENCE20230308) UpdateFwdRuleWithContext(ctx volcengine.Context, input *UpdateFwdRuleInput, opts ...request.Option) (*UpdateFwdRuleOutput, error) {
	req, out := c.UpdateFwdRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateFwdRuleInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FwdPort is a required field
	FwdPort *int32 `type:"int32" json:",omitempty" required:"true"`

	// InstanceIp is a required field
	InstanceIp *string `type:"string" json:",omitempty" required:"true"`

	// Proto is a required field
	Proto *string `type:"string" json:",omitempty" required:"true"`

	SrcIpList []*string `type:"list" json:",omitempty"`

	// SrcPort is a required field
	SrcPort *int32 `type:"int32" json:",omitempty" required:"true"`

	// TimeOut is a required field
	TimeOut *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateFwdRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFwdRuleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateFwdRuleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateFwdRuleInput"}
	if s.FwdPort == nil {
		invalidParams.Add(request.NewErrParamRequired("FwdPort"))
	}
	if s.InstanceIp == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceIp"))
	}
	if s.Proto == nil {
		invalidParams.Add(request.NewErrParamRequired("Proto"))
	}
	if s.SrcPort == nil {
		invalidParams.Add(request.NewErrParamRequired("SrcPort"))
	}
	if s.TimeOut == nil {
		invalidParams.Add(request.NewErrParamRequired("TimeOut"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFwdPort sets the FwdPort field's value.
func (s *UpdateFwdRuleInput) SetFwdPort(v int32) *UpdateFwdRuleInput {
	s.FwdPort = &v
	return s
}

// SetInstanceIp sets the InstanceIp field's value.
func (s *UpdateFwdRuleInput) SetInstanceIp(v string) *UpdateFwdRuleInput {
	s.InstanceIp = &v
	return s
}

// SetProto sets the Proto field's value.
func (s *UpdateFwdRuleInput) SetProto(v string) *UpdateFwdRuleInput {
	s.Proto = &v
	return s
}

// SetSrcIpList sets the SrcIpList field's value.
func (s *UpdateFwdRuleInput) SetSrcIpList(v []*string) *UpdateFwdRuleInput {
	s.SrcIpList = v
	return s
}

// SetSrcPort sets the SrcPort field's value.
func (s *UpdateFwdRuleInput) SetSrcPort(v int32) *UpdateFwdRuleInput {
	s.SrcPort = &v
	return s
}

// SetTimeOut sets the TimeOut field's value.
func (s *UpdateFwdRuleInput) SetTimeOut(v int32) *UpdateFwdRuleInput {
	s.TimeOut = &v
	return s
}

type UpdateFwdRuleOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateFwdRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFwdRuleOutput) GoString() string {
	return s.String()
}
