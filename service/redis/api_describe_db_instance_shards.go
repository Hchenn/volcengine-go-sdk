// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDBInstanceShardsCommon = "DescribeDBInstanceShards"

// DescribeDBInstanceShardsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceShardsCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceShardsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceShardsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceShardsCommon Send returns without error.
//
// See DescribeDBInstanceShardsCommon for more information on using the DescribeDBInstanceShardsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceShardsCommonRequest method.
//    req, resp := client.DescribeDBInstanceShardsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeDBInstanceShardsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceShardsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceShardsCommon API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation DescribeDBInstanceShardsCommon for usage and error information.
func (c *REDIS) DescribeDBInstanceShardsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceShardsCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceShardsCommonWithContext is the same as DescribeDBInstanceShardsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceShardsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeDBInstanceShardsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceShardsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceShards = "DescribeDBInstanceShards"

// DescribeDBInstanceShardsRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceShards operation. The "output" return
// value will be populated with the DescribeDBInstanceShardsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceShardsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceShardsCommon Send returns without error.
//
// See DescribeDBInstanceShards for more information on using the DescribeDBInstanceShards
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceShardsRequest method.
//    req, resp := client.DescribeDBInstanceShardsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeDBInstanceShardsRequest(input *DescribeDBInstanceShardsInput) (req *request.Request, output *DescribeDBInstanceShardsOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceShards,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceShardsInput{}
	}

	output = &DescribeDBInstanceShardsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceShards API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation DescribeDBInstanceShards for usage and error information.
func (c *REDIS) DescribeDBInstanceShards(input *DescribeDBInstanceShardsInput) (*DescribeDBInstanceShardsOutput, error) {
	req, out := c.DescribeDBInstanceShardsRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceShardsWithContext is the same as DescribeDBInstanceShards with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceShards for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeDBInstanceShardsWithContext(ctx volcengine.Context, input *DescribeDBInstanceShardsInput, opts ...request.Option) (*DescribeDBInstanceShardsOutput, error) {
	req, out := c.DescribeDBInstanceShardsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeDBInstanceShardsInput struct {
	_ struct{} `type:"structure"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" required:"true"`
}

// String returns the string representation
func (s DescribeDBInstanceShardsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceShardsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDBInstanceShardsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDBInstanceShardsInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceShardsInput) SetInstanceId(v string) *DescribeDBInstanceShardsInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDBInstanceShardsInput) SetPageNumber(v int32) *DescribeDBInstanceShardsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDBInstanceShardsInput) SetPageSize(v int32) *DescribeDBInstanceShardsInput {
	s.PageSize = &v
	return s
}

type DescribeDBInstanceShardsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	InstanceShards []*InstanceShardForDescribeDBInstanceShardsOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeDBInstanceShardsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceShardsOutput) GoString() string {
	return s.String()
}

// SetInstanceShards sets the InstanceShards field's value.
func (s *DescribeDBInstanceShardsOutput) SetInstanceShards(v []*InstanceShardForDescribeDBInstanceShardsOutput) *DescribeDBInstanceShardsOutput {
	s.InstanceShards = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeDBInstanceShardsOutput) SetTotal(v int32) *DescribeDBInstanceShardsOutput {
	s.Total = &v
	return s
}

type InstanceShardForDescribeDBInstanceShardsOutput struct {
	_ struct{} `type:"structure"`

	NodeNumber *int32 `type:"int32"`

	ServerNodes []*ServerNodeForDescribeDBInstanceShardsOutput `type:"list"`

	ShardId *string `type:"string"`
}

// String returns the string representation
func (s InstanceShardForDescribeDBInstanceShardsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceShardForDescribeDBInstanceShardsOutput) GoString() string {
	return s.String()
}

// SetNodeNumber sets the NodeNumber field's value.
func (s *InstanceShardForDescribeDBInstanceShardsOutput) SetNodeNumber(v int32) *InstanceShardForDescribeDBInstanceShardsOutput {
	s.NodeNumber = &v
	return s
}

// SetServerNodes sets the ServerNodes field's value.
func (s *InstanceShardForDescribeDBInstanceShardsOutput) SetServerNodes(v []*ServerNodeForDescribeDBInstanceShardsOutput) *InstanceShardForDescribeDBInstanceShardsOutput {
	s.ServerNodes = v
	return s
}

// SetShardId sets the ShardId field's value.
func (s *InstanceShardForDescribeDBInstanceShardsOutput) SetShardId(v string) *InstanceShardForDescribeDBInstanceShardsOutput {
	s.ShardId = &v
	return s
}

type ServerNodeForDescribeDBInstanceShardsOutput struct {
	_ struct{} `type:"structure"`

	CurrentRole *string `type:"string"`

	NodeId *string `type:"string"`

	Status *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s ServerNodeForDescribeDBInstanceShardsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ServerNodeForDescribeDBInstanceShardsOutput) GoString() string {
	return s.String()
}

// SetCurrentRole sets the CurrentRole field's value.
func (s *ServerNodeForDescribeDBInstanceShardsOutput) SetCurrentRole(v string) *ServerNodeForDescribeDBInstanceShardsOutput {
	s.CurrentRole = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *ServerNodeForDescribeDBInstanceShardsOutput) SetNodeId(v string) *ServerNodeForDescribeDBInstanceShardsOutput {
	s.NodeId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ServerNodeForDescribeDBInstanceShardsOutput) SetStatus(v string) *ServerNodeForDescribeDBInstanceShardsOutput {
	s.Status = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *ServerNodeForDescribeDBInstanceShardsOutput) SetZoneId(v string) *ServerNodeForDescribeDBInstanceShardsOutput {
	s.ZoneId = &v
	return s
}
