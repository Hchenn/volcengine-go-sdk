// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudidentity

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteUserProvisioningCommon = "DeleteUserProvisioning"

// DeleteUserProvisioningCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteUserProvisioningCommon operation. The "output" return
// value will be populated with the DeleteUserProvisioningCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteUserProvisioningCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteUserProvisioningCommon Send returns without error.
//
// See DeleteUserProvisioningCommon for more information on using the DeleteUserProvisioningCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteUserProvisioningCommonRequest method.
//    req, resp := client.DeleteUserProvisioningCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDIDENTITY) DeleteUserProvisioningCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteUserProvisioningCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteUserProvisioningCommon API operation for CLOUDIDENTITY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDIDENTITY's
// API operation DeleteUserProvisioningCommon for usage and error information.
func (c *CLOUDIDENTITY) DeleteUserProvisioningCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteUserProvisioningCommonRequest(input)
	return out, req.Send()
}

// DeleteUserProvisioningCommonWithContext is the same as DeleteUserProvisioningCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteUserProvisioningCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDIDENTITY) DeleteUserProvisioningCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteUserProvisioningCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteUserProvisioning = "DeleteUserProvisioning"

// DeleteUserProvisioningRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteUserProvisioning operation. The "output" return
// value will be populated with the DeleteUserProvisioningCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteUserProvisioningCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteUserProvisioningCommon Send returns without error.
//
// See DeleteUserProvisioning for more information on using the DeleteUserProvisioning
// API call, and error handling.
//
//    // Example sending a request using the DeleteUserProvisioningRequest method.
//    req, resp := client.DeleteUserProvisioningRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDIDENTITY) DeleteUserProvisioningRequest(input *DeleteUserProvisioningInput) (req *request.Request, output *DeleteUserProvisioningOutput) {
	op := &request.Operation{
		Name:       opDeleteUserProvisioning,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteUserProvisioningInput{}
	}

	output = &DeleteUserProvisioningOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteUserProvisioning API operation for CLOUDIDENTITY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDIDENTITY's
// API operation DeleteUserProvisioning for usage and error information.
func (c *CLOUDIDENTITY) DeleteUserProvisioning(input *DeleteUserProvisioningInput) (*DeleteUserProvisioningOutput, error) {
	req, out := c.DeleteUserProvisioningRequest(input)
	return out, req.Send()
}

// DeleteUserProvisioningWithContext is the same as DeleteUserProvisioning with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteUserProvisioning for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDIDENTITY) DeleteUserProvisioningWithContext(ctx volcengine.Context, input *DeleteUserProvisioningInput, opts ...request.Option) (*DeleteUserProvisioningOutput, error) {
	req, out := c.DeleteUserProvisioningRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteUserProvisioningInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// UserProvisioningId is a required field
	UserProvisioningId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteUserProvisioningInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteUserProvisioningInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteUserProvisioningInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteUserProvisioningInput"}
	if s.UserProvisioningId == nil {
		invalidParams.Add(request.NewErrParamRequired("UserProvisioningId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUserProvisioningId sets the UserProvisioningId field's value.
func (s *DeleteUserProvisioningInput) SetUserProvisioningId(v string) *DeleteUserProvisioningInput {
	s.UserProvisioningId = &v
	return s
}

type DeleteUserProvisioningOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteUserProvisioningOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteUserProvisioningOutput) GoString() string {
	return s.String()
}
