// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudidentity

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListPortalLoginSettingsCommon = "ListPortalLoginSettings"

// ListPortalLoginSettingsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListPortalLoginSettingsCommon operation. The "output" return
// value will be populated with the ListPortalLoginSettingsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListPortalLoginSettingsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListPortalLoginSettingsCommon Send returns without error.
//
// See ListPortalLoginSettingsCommon for more information on using the ListPortalLoginSettingsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListPortalLoginSettingsCommonRequest method.
//    req, resp := client.ListPortalLoginSettingsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDIDENTITY) ListPortalLoginSettingsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListPortalLoginSettingsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListPortalLoginSettingsCommon API operation for CLOUDIDENTITY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDIDENTITY's
// API operation ListPortalLoginSettingsCommon for usage and error information.
func (c *CLOUDIDENTITY) ListPortalLoginSettingsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListPortalLoginSettingsCommonRequest(input)
	return out, req.Send()
}

// ListPortalLoginSettingsCommonWithContext is the same as ListPortalLoginSettingsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListPortalLoginSettingsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDIDENTITY) ListPortalLoginSettingsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListPortalLoginSettingsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListPortalLoginSettings = "ListPortalLoginSettings"

// ListPortalLoginSettingsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListPortalLoginSettings operation. The "output" return
// value will be populated with the ListPortalLoginSettingsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListPortalLoginSettingsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListPortalLoginSettingsCommon Send returns without error.
//
// See ListPortalLoginSettings for more information on using the ListPortalLoginSettings
// API call, and error handling.
//
//    // Example sending a request using the ListPortalLoginSettingsRequest method.
//    req, resp := client.ListPortalLoginSettingsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDIDENTITY) ListPortalLoginSettingsRequest(input *ListPortalLoginSettingsInput) (req *request.Request, output *ListPortalLoginSettingsOutput) {
	op := &request.Operation{
		Name:       opListPortalLoginSettings,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListPortalLoginSettingsInput{}
	}

	output = &ListPortalLoginSettingsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListPortalLoginSettings API operation for CLOUDIDENTITY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDIDENTITY's
// API operation ListPortalLoginSettings for usage and error information.
func (c *CLOUDIDENTITY) ListPortalLoginSettings(input *ListPortalLoginSettingsInput) (*ListPortalLoginSettingsOutput, error) {
	req, out := c.ListPortalLoginSettingsRequest(input)
	return out, req.Send()
}

// ListPortalLoginSettingsWithContext is the same as ListPortalLoginSettings with the addition of
// the ability to pass a context and additional request options.
//
// See ListPortalLoginSettings for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDIDENTITY) ListPortalLoginSettingsWithContext(ctx volcengine.Context, input *ListPortalLoginSettingsInput, opts ...request.Option) (*ListPortalLoginSettingsOutput, error) {
	req, out := c.ListPortalLoginSettingsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListPortalLoginSettingsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ListPortalLoginSettingsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListPortalLoginSettingsInput) GoString() string {
	return s.String()
}

type ListPortalLoginSettingsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	PortalLoginSettings []*PortalLoginSettingForListPortalLoginSettingsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListPortalLoginSettingsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListPortalLoginSettingsOutput) GoString() string {
	return s.String()
}

// SetPortalLoginSettings sets the PortalLoginSettings field's value.
func (s *ListPortalLoginSettingsOutput) SetPortalLoginSettings(v []*PortalLoginSettingForListPortalLoginSettingsOutput) *ListPortalLoginSettingsOutput {
	s.PortalLoginSettings = v
	return s
}

type PortalLoginSettingForListPortalLoginSettingsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	LoginType *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PortalLoginSettingForListPortalLoginSettingsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PortalLoginSettingForListPortalLoginSettingsOutput) GoString() string {
	return s.String()
}

// SetLoginType sets the LoginType field's value.
func (s *PortalLoginSettingForListPortalLoginSettingsOutput) SetLoginType(v string) *PortalLoginSettingForListPortalLoginSettingsOutput {
	s.LoginType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *PortalLoginSettingForListPortalLoginSettingsOutput) SetStatus(v string) *PortalLoginSettingForListPortalLoginSettingsOutput {
	s.Status = &v
	return s
}
