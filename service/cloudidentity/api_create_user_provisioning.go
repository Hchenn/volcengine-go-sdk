// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudidentity

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateUserProvisioningCommon = "CreateUserProvisioning"

// CreateUserProvisioningCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateUserProvisioningCommon operation. The "output" return
// value will be populated with the CreateUserProvisioningCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateUserProvisioningCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateUserProvisioningCommon Send returns without error.
//
// See CreateUserProvisioningCommon for more information on using the CreateUserProvisioningCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateUserProvisioningCommonRequest method.
//    req, resp := client.CreateUserProvisioningCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDIDENTITY) CreateUserProvisioningCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateUserProvisioningCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateUserProvisioningCommon API operation for CLOUDIDENTITY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDIDENTITY's
// API operation CreateUserProvisioningCommon for usage and error information.
func (c *CLOUDIDENTITY) CreateUserProvisioningCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateUserProvisioningCommonRequest(input)
	return out, req.Send()
}

// CreateUserProvisioningCommonWithContext is the same as CreateUserProvisioningCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateUserProvisioningCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDIDENTITY) CreateUserProvisioningCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateUserProvisioningCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateUserProvisioning = "CreateUserProvisioning"

// CreateUserProvisioningRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateUserProvisioning operation. The "output" return
// value will be populated with the CreateUserProvisioningCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateUserProvisioningCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateUserProvisioningCommon Send returns without error.
//
// See CreateUserProvisioning for more information on using the CreateUserProvisioning
// API call, and error handling.
//
//    // Example sending a request using the CreateUserProvisioningRequest method.
//    req, resp := client.CreateUserProvisioningRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDIDENTITY) CreateUserProvisioningRequest(input *CreateUserProvisioningInput) (req *request.Request, output *CreateUserProvisioningOutput) {
	op := &request.Operation{
		Name:       opCreateUserProvisioning,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateUserProvisioningInput{}
	}

	output = &CreateUserProvisioningOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateUserProvisioning API operation for CLOUDIDENTITY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDIDENTITY's
// API operation CreateUserProvisioning for usage and error information.
func (c *CLOUDIDENTITY) CreateUserProvisioning(input *CreateUserProvisioningInput) (*CreateUserProvisioningOutput, error) {
	req, out := c.CreateUserProvisioningRequest(input)
	return out, req.Send()
}

// CreateUserProvisioningWithContext is the same as CreateUserProvisioning with the addition of
// the ability to pass a context and additional request options.
//
// See CreateUserProvisioning for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDIDENTITY) CreateUserProvisioningWithContext(ctx volcengine.Context, input *CreateUserProvisioningInput, opts ...request.Option) (*CreateUserProvisioningOutput, error) {
	req, out := c.CreateUserProvisioningRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateUserProvisioningInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// DeletionStrategy is a required field
	DeletionStrategy *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfDeletionStrategyForCreateUserProvisioningInput"`

	Description *string `type:"string" json:",omitempty"`

	// DuplicationStrategy is a required field
	DuplicationStrategy *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfDuplicationStrategyForCreateUserProvisioningInput"`

	DuplicationSuffix *string `type:"string" json:",omitempty"`

	// IdentitySourceStrategy is a required field
	IdentitySourceStrategy *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfIdentitySourceStrategyForCreateUserProvisioningInput"`

	// PrincipalId is a required field
	PrincipalId *string `type:"string" json:",omitempty" required:"true"`

	// PrincipalType is a required field
	PrincipalType *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfPrincipalTypeForCreateUserProvisioningInput"`

	// TargetId is a required field
	TargetId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateUserProvisioningInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateUserProvisioningInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateUserProvisioningInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateUserProvisioningInput"}
	if s.DeletionStrategy == nil {
		invalidParams.Add(request.NewErrParamRequired("DeletionStrategy"))
	}
	if s.DuplicationStrategy == nil {
		invalidParams.Add(request.NewErrParamRequired("DuplicationStrategy"))
	}
	if s.IdentitySourceStrategy == nil {
		invalidParams.Add(request.NewErrParamRequired("IdentitySourceStrategy"))
	}
	if s.PrincipalId == nil {
		invalidParams.Add(request.NewErrParamRequired("PrincipalId"))
	}
	if s.PrincipalType == nil {
		invalidParams.Add(request.NewErrParamRequired("PrincipalType"))
	}
	if s.TargetId == nil {
		invalidParams.Add(request.NewErrParamRequired("TargetId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDeletionStrategy sets the DeletionStrategy field's value.
func (s *CreateUserProvisioningInput) SetDeletionStrategy(v string) *CreateUserProvisioningInput {
	s.DeletionStrategy = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateUserProvisioningInput) SetDescription(v string) *CreateUserProvisioningInput {
	s.Description = &v
	return s
}

// SetDuplicationStrategy sets the DuplicationStrategy field's value.
func (s *CreateUserProvisioningInput) SetDuplicationStrategy(v string) *CreateUserProvisioningInput {
	s.DuplicationStrategy = &v
	return s
}

// SetDuplicationSuffix sets the DuplicationSuffix field's value.
func (s *CreateUserProvisioningInput) SetDuplicationSuffix(v string) *CreateUserProvisioningInput {
	s.DuplicationSuffix = &v
	return s
}

// SetIdentitySourceStrategy sets the IdentitySourceStrategy field's value.
func (s *CreateUserProvisioningInput) SetIdentitySourceStrategy(v string) *CreateUserProvisioningInput {
	s.IdentitySourceStrategy = &v
	return s
}

// SetPrincipalId sets the PrincipalId field's value.
func (s *CreateUserProvisioningInput) SetPrincipalId(v string) *CreateUserProvisioningInput {
	s.PrincipalId = &v
	return s
}

// SetPrincipalType sets the PrincipalType field's value.
func (s *CreateUserProvisioningInput) SetPrincipalType(v string) *CreateUserProvisioningInput {
	s.PrincipalType = &v
	return s
}

// SetTargetId sets the TargetId field's value.
func (s *CreateUserProvisioningInput) SetTargetId(v string) *CreateUserProvisioningInput {
	s.TargetId = &v
	return s
}

type CreateUserProvisioningOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DeletionStrategy *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	DuplicationStrategy *string `type:"string" json:",omitempty"`

	DuplicationSuffix *string `type:"string" json:",omitempty"`

	IdentitySourceStrategy *string `type:"string" json:",omitempty"`

	PrincipalId *string `type:"string" json:",omitempty"`

	PrincipalType *string `type:"string" json:",omitempty"`

	ProvisionStatus *string `type:"string" json:",omitempty"`

	Remark *string `type:"string" json:",omitempty"`

	TargetId *string `type:"string" json:",omitempty"`

	UserProvisioningId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateUserProvisioningOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateUserProvisioningOutput) GoString() string {
	return s.String()
}

// SetDeletionStrategy sets the DeletionStrategy field's value.
func (s *CreateUserProvisioningOutput) SetDeletionStrategy(v string) *CreateUserProvisioningOutput {
	s.DeletionStrategy = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateUserProvisioningOutput) SetDescription(v string) *CreateUserProvisioningOutput {
	s.Description = &v
	return s
}

// SetDuplicationStrategy sets the DuplicationStrategy field's value.
func (s *CreateUserProvisioningOutput) SetDuplicationStrategy(v string) *CreateUserProvisioningOutput {
	s.DuplicationStrategy = &v
	return s
}

// SetDuplicationSuffix sets the DuplicationSuffix field's value.
func (s *CreateUserProvisioningOutput) SetDuplicationSuffix(v string) *CreateUserProvisioningOutput {
	s.DuplicationSuffix = &v
	return s
}

// SetIdentitySourceStrategy sets the IdentitySourceStrategy field's value.
func (s *CreateUserProvisioningOutput) SetIdentitySourceStrategy(v string) *CreateUserProvisioningOutput {
	s.IdentitySourceStrategy = &v
	return s
}

// SetPrincipalId sets the PrincipalId field's value.
func (s *CreateUserProvisioningOutput) SetPrincipalId(v string) *CreateUserProvisioningOutput {
	s.PrincipalId = &v
	return s
}

// SetPrincipalType sets the PrincipalType field's value.
func (s *CreateUserProvisioningOutput) SetPrincipalType(v string) *CreateUserProvisioningOutput {
	s.PrincipalType = &v
	return s
}

// SetProvisionStatus sets the ProvisionStatus field's value.
func (s *CreateUserProvisioningOutput) SetProvisionStatus(v string) *CreateUserProvisioningOutput {
	s.ProvisionStatus = &v
	return s
}

// SetRemark sets the Remark field's value.
func (s *CreateUserProvisioningOutput) SetRemark(v string) *CreateUserProvisioningOutput {
	s.Remark = &v
	return s
}

// SetTargetId sets the TargetId field's value.
func (s *CreateUserProvisioningOutput) SetTargetId(v string) *CreateUserProvisioningOutput {
	s.TargetId = &v
	return s
}

// SetUserProvisioningId sets the UserProvisioningId field's value.
func (s *CreateUserProvisioningOutput) SetUserProvisioningId(v string) *CreateUserProvisioningOutput {
	s.UserProvisioningId = &v
	return s
}

const (
	// EnumOfDeletionStrategyForCreateUserProvisioningInputKeep is a EnumOfDeletionStrategyForCreateUserProvisioningInput enum value
	EnumOfDeletionStrategyForCreateUserProvisioningInputKeep = "Keep"

	// EnumOfDeletionStrategyForCreateUserProvisioningInputDelete is a EnumOfDeletionStrategyForCreateUserProvisioningInput enum value
	EnumOfDeletionStrategyForCreateUserProvisioningInputDelete = "Delete"
)

const (
	// EnumOfDuplicationStrategyForCreateUserProvisioningInputKeepBoth is a EnumOfDuplicationStrategyForCreateUserProvisioningInput enum value
	EnumOfDuplicationStrategyForCreateUserProvisioningInputKeepBoth = "KeepBoth"

	// EnumOfDuplicationStrategyForCreateUserProvisioningInputTakeover is a EnumOfDuplicationStrategyForCreateUserProvisioningInput enum value
	EnumOfDuplicationStrategyForCreateUserProvisioningInputTakeover = "Takeover"
)

const (
	// EnumOfIdentitySourceStrategyForCreateUserProvisioningInputCreate is a EnumOfIdentitySourceStrategyForCreateUserProvisioningInput enum value
	EnumOfIdentitySourceStrategyForCreateUserProvisioningInputCreate = "Create"

	// EnumOfIdentitySourceStrategyForCreateUserProvisioningInputIgnore is a EnumOfIdentitySourceStrategyForCreateUserProvisioningInput enum value
	EnumOfIdentitySourceStrategyForCreateUserProvisioningInputIgnore = "Ignore"
)

const (
	// EnumOfPrincipalTypeForCreateUserProvisioningInputUser is a EnumOfPrincipalTypeForCreateUserProvisioningInput enum value
	EnumOfPrincipalTypeForCreateUserProvisioningInputUser = "User"

	// EnumOfPrincipalTypeForCreateUserProvisioningInputGroup is a EnumOfPrincipalTypeForCreateUserProvisioningInput enum value
	EnumOfPrincipalTypeForCreateUserProvisioningInputGroup = "Group"
)
