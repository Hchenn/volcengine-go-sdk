// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudidentity

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeprovisionPermissionSetCommon = "DeprovisionPermissionSet"

// DeprovisionPermissionSetCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeprovisionPermissionSetCommon operation. The "output" return
// value will be populated with the DeprovisionPermissionSetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeprovisionPermissionSetCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeprovisionPermissionSetCommon Send returns without error.
//
// See DeprovisionPermissionSetCommon for more information on using the DeprovisionPermissionSetCommon
// API call, and error handling.
//
//    // Example sending a request using the DeprovisionPermissionSetCommonRequest method.
//    req, resp := client.DeprovisionPermissionSetCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDIDENTITY) DeprovisionPermissionSetCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeprovisionPermissionSetCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeprovisionPermissionSetCommon API operation for CLOUDIDENTITY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDIDENTITY's
// API operation DeprovisionPermissionSetCommon for usage and error information.
func (c *CLOUDIDENTITY) DeprovisionPermissionSetCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeprovisionPermissionSetCommonRequest(input)
	return out, req.Send()
}

// DeprovisionPermissionSetCommonWithContext is the same as DeprovisionPermissionSetCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeprovisionPermissionSetCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDIDENTITY) DeprovisionPermissionSetCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeprovisionPermissionSetCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeprovisionPermissionSet = "DeprovisionPermissionSet"

// DeprovisionPermissionSetRequest generates a "volcengine/request.Request" representing the
// client's request for the DeprovisionPermissionSet operation. The "output" return
// value will be populated with the DeprovisionPermissionSetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeprovisionPermissionSetCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeprovisionPermissionSetCommon Send returns without error.
//
// See DeprovisionPermissionSet for more information on using the DeprovisionPermissionSet
// API call, and error handling.
//
//    // Example sending a request using the DeprovisionPermissionSetRequest method.
//    req, resp := client.DeprovisionPermissionSetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDIDENTITY) DeprovisionPermissionSetRequest(input *DeprovisionPermissionSetInput) (req *request.Request, output *DeprovisionPermissionSetOutput) {
	op := &request.Operation{
		Name:       opDeprovisionPermissionSet,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeprovisionPermissionSetInput{}
	}

	output = &DeprovisionPermissionSetOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeprovisionPermissionSet API operation for CLOUDIDENTITY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDIDENTITY's
// API operation DeprovisionPermissionSet for usage and error information.
func (c *CLOUDIDENTITY) DeprovisionPermissionSet(input *DeprovisionPermissionSetInput) (*DeprovisionPermissionSetOutput, error) {
	req, out := c.DeprovisionPermissionSetRequest(input)
	return out, req.Send()
}

// DeprovisionPermissionSetWithContext is the same as DeprovisionPermissionSet with the addition of
// the ability to pass a context and additional request options.
//
// See DeprovisionPermissionSet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDIDENTITY) DeprovisionPermissionSetWithContext(ctx volcengine.Context, input *DeprovisionPermissionSetInput, opts ...request.Option) (*DeprovisionPermissionSetOutput, error) {
	req, out := c.DeprovisionPermissionSetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeprovisionPermissionSetInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// PermissionSetId is a required field
	PermissionSetId *string `type:"string" json:",omitempty" required:"true"`

	// TargetId is a required field
	TargetId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeprovisionPermissionSetInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeprovisionPermissionSetInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeprovisionPermissionSetInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeprovisionPermissionSetInput"}
	if s.PermissionSetId == nil {
		invalidParams.Add(request.NewErrParamRequired("PermissionSetId"))
	}
	if s.TargetId == nil {
		invalidParams.Add(request.NewErrParamRequired("TargetId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPermissionSetId sets the PermissionSetId field's value.
func (s *DeprovisionPermissionSetInput) SetPermissionSetId(v string) *DeprovisionPermissionSetInput {
	s.PermissionSetId = &v
	return s
}

// SetTargetId sets the TargetId field's value.
func (s *DeprovisionPermissionSetInput) SetTargetId(v string) *DeprovisionPermissionSetInput {
	s.TargetId = &v
	return s
}

type DeprovisionPermissionSetOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TaskId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeprovisionPermissionSetOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeprovisionPermissionSetOutput) GoString() string {
	return s.String()
}

// SetTaskId sets the TaskId field's value.
func (s *DeprovisionPermissionSetOutput) SetTaskId(v string) *DeprovisionPermissionSetOutput {
	s.TaskId = &v
	return s
}
