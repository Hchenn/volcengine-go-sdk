// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudidentity

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAttachPolicyToUserProvisionCommon = "AttachPolicyToUserProvision"

// AttachPolicyToUserProvisionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AttachPolicyToUserProvisionCommon operation. The "output" return
// value will be populated with the AttachPolicyToUserProvisionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachPolicyToUserProvisionCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachPolicyToUserProvisionCommon Send returns without error.
//
// See AttachPolicyToUserProvisionCommon for more information on using the AttachPolicyToUserProvisionCommon
// API call, and error handling.
//
//    // Example sending a request using the AttachPolicyToUserProvisionCommonRequest method.
//    req, resp := client.AttachPolicyToUserProvisionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDIDENTITY) AttachPolicyToUserProvisionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAttachPolicyToUserProvisionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AttachPolicyToUserProvisionCommon API operation for CLOUDIDENTITY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDIDENTITY's
// API operation AttachPolicyToUserProvisionCommon for usage and error information.
func (c *CLOUDIDENTITY) AttachPolicyToUserProvisionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AttachPolicyToUserProvisionCommonRequest(input)
	return out, req.Send()
}

// AttachPolicyToUserProvisionCommonWithContext is the same as AttachPolicyToUserProvisionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AttachPolicyToUserProvisionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDIDENTITY) AttachPolicyToUserProvisionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AttachPolicyToUserProvisionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAttachPolicyToUserProvision = "AttachPolicyToUserProvision"

// AttachPolicyToUserProvisionRequest generates a "volcengine/request.Request" representing the
// client's request for the AttachPolicyToUserProvision operation. The "output" return
// value will be populated with the AttachPolicyToUserProvisionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachPolicyToUserProvisionCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachPolicyToUserProvisionCommon Send returns without error.
//
// See AttachPolicyToUserProvision for more information on using the AttachPolicyToUserProvision
// API call, and error handling.
//
//    // Example sending a request using the AttachPolicyToUserProvisionRequest method.
//    req, resp := client.AttachPolicyToUserProvisionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLOUDIDENTITY) AttachPolicyToUserProvisionRequest(input *AttachPolicyToUserProvisionInput) (req *request.Request, output *AttachPolicyToUserProvisionOutput) {
	op := &request.Operation{
		Name:       opAttachPolicyToUserProvision,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AttachPolicyToUserProvisionInput{}
	}

	output = &AttachPolicyToUserProvisionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AttachPolicyToUserProvision API operation for CLOUDIDENTITY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLOUDIDENTITY's
// API operation AttachPolicyToUserProvision for usage and error information.
func (c *CLOUDIDENTITY) AttachPolicyToUserProvision(input *AttachPolicyToUserProvisionInput) (*AttachPolicyToUserProvisionOutput, error) {
	req, out := c.AttachPolicyToUserProvisionRequest(input)
	return out, req.Send()
}

// AttachPolicyToUserProvisionWithContext is the same as AttachPolicyToUserProvision with the addition of
// the ability to pass a context and additional request options.
//
// See AttachPolicyToUserProvision for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLOUDIDENTITY) AttachPolicyToUserProvisionWithContext(ctx volcengine.Context, input *AttachPolicyToUserProvisionInput, opts ...request.Option) (*AttachPolicyToUserProvisionOutput, error) {
	req, out := c.AttachPolicyToUserProvisionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AttachPolicyToUserProvisionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// PolicyName is a required field
	PolicyName *string `type:"string" json:",omitempty" required:"true"`

	// UserProvisioningId is a required field
	UserProvisioningId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s AttachPolicyToUserProvisionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachPolicyToUserProvisionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AttachPolicyToUserProvisionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AttachPolicyToUserProvisionInput"}
	if s.PolicyName == nil {
		invalidParams.Add(request.NewErrParamRequired("PolicyName"))
	}
	if s.UserProvisioningId == nil {
		invalidParams.Add(request.NewErrParamRequired("UserProvisioningId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPolicyName sets the PolicyName field's value.
func (s *AttachPolicyToUserProvisionInput) SetPolicyName(v string) *AttachPolicyToUserProvisionInput {
	s.PolicyName = &v
	return s
}

// SetUserProvisioningId sets the UserProvisioningId field's value.
func (s *AttachPolicyToUserProvisionInput) SetUserProvisioningId(v string) *AttachPolicyToUserProvisionInput {
	s.UserProvisioningId = &v
	return s
}

type AttachPolicyToUserProvisionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AttachPolicyToUserProvisionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachPolicyToUserProvisionOutput) GoString() string {
	return s.String()
}
