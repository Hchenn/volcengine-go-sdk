// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDcdnRegionAndIspCommon = "DescribeDcdnRegionAndIsp"

// DescribeDcdnRegionAndIspCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDcdnRegionAndIspCommon operation. The "output" return
// value will be populated with the DescribeDcdnRegionAndIspCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDcdnRegionAndIspCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDcdnRegionAndIspCommon Send returns without error.
//
// See DescribeDcdnRegionAndIspCommon for more information on using the DescribeDcdnRegionAndIspCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDcdnRegionAndIspCommonRequest method.
//    req, resp := client.DescribeDcdnRegionAndIspCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeDcdnRegionAndIspCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDcdnRegionAndIspCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDcdnRegionAndIspCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeDcdnRegionAndIspCommon for usage and error information.
func (c *DCDN) DescribeDcdnRegionAndIspCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDcdnRegionAndIspCommonRequest(input)
	return out, req.Send()
}

// DescribeDcdnRegionAndIspCommonWithContext is the same as DescribeDcdnRegionAndIspCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDcdnRegionAndIspCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeDcdnRegionAndIspCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDcdnRegionAndIspCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDcdnRegionAndIsp = "DescribeDcdnRegionAndIsp"

// DescribeDcdnRegionAndIspRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDcdnRegionAndIsp operation. The "output" return
// value will be populated with the DescribeDcdnRegionAndIspCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDcdnRegionAndIspCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDcdnRegionAndIspCommon Send returns without error.
//
// See DescribeDcdnRegionAndIsp for more information on using the DescribeDcdnRegionAndIsp
// API call, and error handling.
//
//    // Example sending a request using the DescribeDcdnRegionAndIspRequest method.
//    req, resp := client.DescribeDcdnRegionAndIspRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeDcdnRegionAndIspRequest(input *DescribeDcdnRegionAndIspInput) (req *request.Request, output *DescribeDcdnRegionAndIspOutput) {
	op := &request.Operation{
		Name:       opDescribeDcdnRegionAndIsp,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDcdnRegionAndIspInput{}
	}

	output = &DescribeDcdnRegionAndIspOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDcdnRegionAndIsp API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeDcdnRegionAndIsp for usage and error information.
func (c *DCDN) DescribeDcdnRegionAndIsp(input *DescribeDcdnRegionAndIspInput) (*DescribeDcdnRegionAndIspOutput, error) {
	req, out := c.DescribeDcdnRegionAndIspRequest(input)
	return out, req.Send()
}

// DescribeDcdnRegionAndIspWithContext is the same as DescribeDcdnRegionAndIsp with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDcdnRegionAndIsp for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeDcdnRegionAndIspWithContext(ctx volcengine.Context, input *DescribeDcdnRegionAndIspInput, opts ...request.Option) (*DescribeDcdnRegionAndIspOutput, error) {
	req, out := c.DescribeDcdnRegionAndIspRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeDcdnRegionAndIspInput struct {
	_ struct{} `type:"structure"`

	// Area is a required field
	Area *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeDcdnRegionAndIspInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDcdnRegionAndIspInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDcdnRegionAndIspInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDcdnRegionAndIspInput"}
	if s.Area == nil {
		invalidParams.Add(request.NewErrParamRequired("Area"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetArea sets the Area field's value.
func (s *DescribeDcdnRegionAndIspInput) SetArea(v string) *DescribeDcdnRegionAndIspInput {
	s.Area = &v
	return s
}

type DescribeDcdnRegionAndIspOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Isps []*IspForDescribeDcdnRegionAndIspOutput `type:"list"`

	Regions []*RegionForDescribeDcdnRegionAndIspOutput `type:"list"`
}

// String returns the string representation
func (s DescribeDcdnRegionAndIspOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDcdnRegionAndIspOutput) GoString() string {
	return s.String()
}

// SetIsps sets the Isps field's value.
func (s *DescribeDcdnRegionAndIspOutput) SetIsps(v []*IspForDescribeDcdnRegionAndIspOutput) *DescribeDcdnRegionAndIspOutput {
	s.Isps = v
	return s
}

// SetRegions sets the Regions field's value.
func (s *DescribeDcdnRegionAndIspOutput) SetRegions(v []*RegionForDescribeDcdnRegionAndIspOutput) *DescribeDcdnRegionAndIspOutput {
	s.Regions = v
	return s
}

type IspForDescribeDcdnRegionAndIspOutput struct {
	_ struct{} `type:"structure"`

	Code *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s IspForDescribeDcdnRegionAndIspOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IspForDescribeDcdnRegionAndIspOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *IspForDescribeDcdnRegionAndIspOutput) SetCode(v string) *IspForDescribeDcdnRegionAndIspOutput {
	s.Code = &v
	return s
}

// SetName sets the Name field's value.
func (s *IspForDescribeDcdnRegionAndIspOutput) SetName(v string) *IspForDescribeDcdnRegionAndIspOutput {
	s.Name = &v
	return s
}

type RegionForDescribeDcdnRegionAndIspOutput struct {
	_ struct{} `type:"structure"`

	Code *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s RegionForDescribeDcdnRegionAndIspOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RegionForDescribeDcdnRegionAndIspOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *RegionForDescribeDcdnRegionAndIspOutput) SetCode(v string) *RegionForDescribeDcdnRegionAndIspOutput {
	s.Code = &v
	return s
}

// SetName sets the Name field's value.
func (s *RegionForDescribeDcdnRegionAndIspOutput) SetName(v string) *RegionForDescribeDcdnRegionAndIspOutput {
	s.Name = &v
	return s
}
