// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCheckPurgePrefetchTaskCommon = "CheckPurgePrefetchTask"

// CheckPurgePrefetchTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CheckPurgePrefetchTaskCommon operation. The "output" return
// value will be populated with the CheckPurgePrefetchTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CheckPurgePrefetchTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after CheckPurgePrefetchTaskCommon Send returns without error.
//
// See CheckPurgePrefetchTaskCommon for more information on using the CheckPurgePrefetchTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the CheckPurgePrefetchTaskCommonRequest method.
//    req, resp := client.CheckPurgePrefetchTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) CheckPurgePrefetchTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCheckPurgePrefetchTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CheckPurgePrefetchTaskCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation CheckPurgePrefetchTaskCommon for usage and error information.
func (c *DCDN) CheckPurgePrefetchTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CheckPurgePrefetchTaskCommonRequest(input)
	return out, req.Send()
}

// CheckPurgePrefetchTaskCommonWithContext is the same as CheckPurgePrefetchTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CheckPurgePrefetchTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) CheckPurgePrefetchTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CheckPurgePrefetchTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCheckPurgePrefetchTask = "CheckPurgePrefetchTask"

// CheckPurgePrefetchTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the CheckPurgePrefetchTask operation. The "output" return
// value will be populated with the CheckPurgePrefetchTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CheckPurgePrefetchTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after CheckPurgePrefetchTaskCommon Send returns without error.
//
// See CheckPurgePrefetchTask for more information on using the CheckPurgePrefetchTask
// API call, and error handling.
//
//    // Example sending a request using the CheckPurgePrefetchTaskRequest method.
//    req, resp := client.CheckPurgePrefetchTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) CheckPurgePrefetchTaskRequest(input *CheckPurgePrefetchTaskInput) (req *request.Request, output *CheckPurgePrefetchTaskOutput) {
	op := &request.Operation{
		Name:       opCheckPurgePrefetchTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CheckPurgePrefetchTaskInput{}
	}

	output = &CheckPurgePrefetchTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CheckPurgePrefetchTask API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation CheckPurgePrefetchTask for usage and error information.
func (c *DCDN) CheckPurgePrefetchTask(input *CheckPurgePrefetchTaskInput) (*CheckPurgePrefetchTaskOutput, error) {
	req, out := c.CheckPurgePrefetchTaskRequest(input)
	return out, req.Send()
}

// CheckPurgePrefetchTaskWithContext is the same as CheckPurgePrefetchTask with the addition of
// the ability to pass a context and additional request options.
//
// See CheckPurgePrefetchTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) CheckPurgePrefetchTaskWithContext(ctx volcengine.Context, input *CheckPurgePrefetchTaskInput, opts ...request.Option) (*CheckPurgePrefetchTaskOutput, error) {
	req, out := c.CheckPurgePrefetchTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CheckPurgePrefetchTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EndTime *string `type:"string" json:",omitempty"`

	OrderType *string `type:"string" json:",omitempty"`

	Page *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	StartTime *string `type:"string" json:",omitempty"`

	TaskId *string `type:"string" json:",omitempty"`

	TaskStatus []*string `type:"list" json:",omitempty"`

	TaskType []*string `type:"list" json:",omitempty"`

	Url *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CheckPurgePrefetchTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckPurgePrefetchTaskInput) GoString() string {
	return s.String()
}

// SetEndTime sets the EndTime field's value.
func (s *CheckPurgePrefetchTaskInput) SetEndTime(v string) *CheckPurgePrefetchTaskInput {
	s.EndTime = &v
	return s
}

// SetOrderType sets the OrderType field's value.
func (s *CheckPurgePrefetchTaskInput) SetOrderType(v string) *CheckPurgePrefetchTaskInput {
	s.OrderType = &v
	return s
}

// SetPage sets the Page field's value.
func (s *CheckPurgePrefetchTaskInput) SetPage(v int32) *CheckPurgePrefetchTaskInput {
	s.Page = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *CheckPurgePrefetchTaskInput) SetPageSize(v int32) *CheckPurgePrefetchTaskInput {
	s.PageSize = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *CheckPurgePrefetchTaskInput) SetStartTime(v string) *CheckPurgePrefetchTaskInput {
	s.StartTime = &v
	return s
}

// SetTaskId sets the TaskId field's value.
func (s *CheckPurgePrefetchTaskInput) SetTaskId(v string) *CheckPurgePrefetchTaskInput {
	s.TaskId = &v
	return s
}

// SetTaskStatus sets the TaskStatus field's value.
func (s *CheckPurgePrefetchTaskInput) SetTaskStatus(v []*string) *CheckPurgePrefetchTaskInput {
	s.TaskStatus = v
	return s
}

// SetTaskType sets the TaskType field's value.
func (s *CheckPurgePrefetchTaskInput) SetTaskType(v []*string) *CheckPurgePrefetchTaskInput {
	s.TaskType = v
	return s
}

// SetUrl sets the Url field's value.
func (s *CheckPurgePrefetchTaskInput) SetUrl(v string) *CheckPurgePrefetchTaskInput {
	s.Url = &v
	return s
}

type CheckPurgePrefetchTaskOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TaskList []*TaskListForCheckPurgePrefetchTaskOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s CheckPurgePrefetchTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckPurgePrefetchTaskOutput) GoString() string {
	return s.String()
}

// SetTaskList sets the TaskList field's value.
func (s *CheckPurgePrefetchTaskOutput) SetTaskList(v []*TaskListForCheckPurgePrefetchTaskOutput) *CheckPurgePrefetchTaskOutput {
	s.TaskList = v
	return s
}

// SetTotal sets the Total field's value.
func (s *CheckPurgePrefetchTaskOutput) SetTotal(v int32) *CheckPurgePrefetchTaskOutput {
	s.Total = &v
	return s
}

type TaskListForCheckPurgePrefetchTaskOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Account *string `type:"string" json:",omitempty"`

	FileName *string `type:"string" json:",omitempty"`

	OpTime *string `type:"string" json:",omitempty"`

	Operator *string `type:"string" json:",omitempty"`

	Retries *int32 `type:"int32" json:",omitempty"`

	TaskId *string `type:"string" json:",omitempty"`

	TaskStatus *string `type:"string" json:",omitempty"`

	TaskType *string `type:"string" json:",omitempty"`

	Urls []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s TaskListForCheckPurgePrefetchTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TaskListForCheckPurgePrefetchTaskOutput) GoString() string {
	return s.String()
}

// SetAccount sets the Account field's value.
func (s *TaskListForCheckPurgePrefetchTaskOutput) SetAccount(v string) *TaskListForCheckPurgePrefetchTaskOutput {
	s.Account = &v
	return s
}

// SetFileName sets the FileName field's value.
func (s *TaskListForCheckPurgePrefetchTaskOutput) SetFileName(v string) *TaskListForCheckPurgePrefetchTaskOutput {
	s.FileName = &v
	return s
}

// SetOpTime sets the OpTime field's value.
func (s *TaskListForCheckPurgePrefetchTaskOutput) SetOpTime(v string) *TaskListForCheckPurgePrefetchTaskOutput {
	s.OpTime = &v
	return s
}

// SetOperator sets the Operator field's value.
func (s *TaskListForCheckPurgePrefetchTaskOutput) SetOperator(v string) *TaskListForCheckPurgePrefetchTaskOutput {
	s.Operator = &v
	return s
}

// SetRetries sets the Retries field's value.
func (s *TaskListForCheckPurgePrefetchTaskOutput) SetRetries(v int32) *TaskListForCheckPurgePrefetchTaskOutput {
	s.Retries = &v
	return s
}

// SetTaskId sets the TaskId field's value.
func (s *TaskListForCheckPurgePrefetchTaskOutput) SetTaskId(v string) *TaskListForCheckPurgePrefetchTaskOutput {
	s.TaskId = &v
	return s
}

// SetTaskStatus sets the TaskStatus field's value.
func (s *TaskListForCheckPurgePrefetchTaskOutput) SetTaskStatus(v string) *TaskListForCheckPurgePrefetchTaskOutput {
	s.TaskStatus = &v
	return s
}

// SetTaskType sets the TaskType field's value.
func (s *TaskListForCheckPurgePrefetchTaskOutput) SetTaskType(v string) *TaskListForCheckPurgePrefetchTaskOutput {
	s.TaskType = &v
	return s
}

// SetUrls sets the Urls field's value.
func (s *TaskListForCheckPurgePrefetchTaskOutput) SetUrls(v []*string) *TaskListForCheckPurgePrefetchTaskOutput {
	s.Urls = v
	return s
}
