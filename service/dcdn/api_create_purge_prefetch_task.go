// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreatePurgePrefetchTaskCommon = "CreatePurgePrefetchTask"

// CreatePurgePrefetchTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreatePurgePrefetchTaskCommon operation. The "output" return
// value will be populated with the CreatePurgePrefetchTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreatePurgePrefetchTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreatePurgePrefetchTaskCommon Send returns without error.
//
// See CreatePurgePrefetchTaskCommon for more information on using the CreatePurgePrefetchTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the CreatePurgePrefetchTaskCommonRequest method.
//    req, resp := client.CreatePurgePrefetchTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) CreatePurgePrefetchTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreatePurgePrefetchTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreatePurgePrefetchTaskCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation CreatePurgePrefetchTaskCommon for usage and error information.
func (c *DCDN) CreatePurgePrefetchTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreatePurgePrefetchTaskCommonRequest(input)
	return out, req.Send()
}

// CreatePurgePrefetchTaskCommonWithContext is the same as CreatePurgePrefetchTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreatePurgePrefetchTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) CreatePurgePrefetchTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreatePurgePrefetchTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreatePurgePrefetchTask = "CreatePurgePrefetchTask"

// CreatePurgePrefetchTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the CreatePurgePrefetchTask operation. The "output" return
// value will be populated with the CreatePurgePrefetchTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreatePurgePrefetchTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreatePurgePrefetchTaskCommon Send returns without error.
//
// See CreatePurgePrefetchTask for more information on using the CreatePurgePrefetchTask
// API call, and error handling.
//
//    // Example sending a request using the CreatePurgePrefetchTaskRequest method.
//    req, resp := client.CreatePurgePrefetchTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) CreatePurgePrefetchTaskRequest(input *CreatePurgePrefetchTaskInput) (req *request.Request, output *CreatePurgePrefetchTaskOutput) {
	op := &request.Operation{
		Name:       opCreatePurgePrefetchTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreatePurgePrefetchTaskInput{}
	}

	output = &CreatePurgePrefetchTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreatePurgePrefetchTask API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation CreatePurgePrefetchTask for usage and error information.
func (c *DCDN) CreatePurgePrefetchTask(input *CreatePurgePrefetchTaskInput) (*CreatePurgePrefetchTaskOutput, error) {
	req, out := c.CreatePurgePrefetchTaskRequest(input)
	return out, req.Send()
}

// CreatePurgePrefetchTaskWithContext is the same as CreatePurgePrefetchTask with the addition of
// the ability to pass a context and additional request options.
//
// See CreatePurgePrefetchTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) CreatePurgePrefetchTaskWithContext(ctx volcengine.Context, input *CreatePurgePrefetchTaskInput, opts ...request.Option) (*CreatePurgePrefetchTaskOutput, error) {
	req, out := c.CreatePurgePrefetchTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreatePurgePrefetchTaskInput struct {
	_ struct{} `type:"structure"`

	// TaskType is a required field
	TaskType *string `type:"string" required:"true"`

	Urls []*string `type:"list"`
}

// String returns the string representation
func (s CreatePurgePrefetchTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreatePurgePrefetchTaskInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreatePurgePrefetchTaskInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreatePurgePrefetchTaskInput"}
	if s.TaskType == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTaskType sets the TaskType field's value.
func (s *CreatePurgePrefetchTaskInput) SetTaskType(v string) *CreatePurgePrefetchTaskInput {
	s.TaskType = &v
	return s
}

// SetUrls sets the Urls field's value.
func (s *CreatePurgePrefetchTaskInput) SetUrls(v []*string) *CreatePurgePrefetchTaskInput {
	s.Urls = v
	return s
}

type CreatePurgePrefetchTaskOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	TaskId *string `type:"string"`

	TaskQuotaRemain *int32 `type:"int32"`

	TaskStatus *string `type:"string"`
}

// String returns the string representation
func (s CreatePurgePrefetchTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreatePurgePrefetchTaskOutput) GoString() string {
	return s.String()
}

// SetTaskId sets the TaskId field's value.
func (s *CreatePurgePrefetchTaskOutput) SetTaskId(v string) *CreatePurgePrefetchTaskOutput {
	s.TaskId = &v
	return s
}

// SetTaskQuotaRemain sets the TaskQuotaRemain field's value.
func (s *CreatePurgePrefetchTaskOutput) SetTaskQuotaRemain(v int32) *CreatePurgePrefetchTaskOutput {
	s.TaskQuotaRemain = &v
	return s
}

// SetTaskStatus sets the TaskStatus field's value.
func (s *CreatePurgePrefetchTaskOutput) SetTaskStatus(v string) *CreatePurgePrefetchTaskOutput {
	s.TaskStatus = &v
	return s
}
