// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDomainUVDataCommon = "DescribeDomainUVData"

// DescribeDomainUVDataCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDomainUVDataCommon operation. The "output" return
// value will be populated with the DescribeDomainUVDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDomainUVDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDomainUVDataCommon Send returns without error.
//
// See DescribeDomainUVDataCommon for more information on using the DescribeDomainUVDataCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDomainUVDataCommonRequest method.
//    req, resp := client.DescribeDomainUVDataCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeDomainUVDataCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDomainUVDataCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDomainUVDataCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeDomainUVDataCommon for usage and error information.
func (c *DCDN) DescribeDomainUVDataCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDomainUVDataCommonRequest(input)
	return out, req.Send()
}

// DescribeDomainUVDataCommonWithContext is the same as DescribeDomainUVDataCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDomainUVDataCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeDomainUVDataCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDomainUVDataCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDomainUVData = "DescribeDomainUVData"

// DescribeDomainUVDataRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDomainUVData operation. The "output" return
// value will be populated with the DescribeDomainUVDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDomainUVDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDomainUVDataCommon Send returns without error.
//
// See DescribeDomainUVData for more information on using the DescribeDomainUVData
// API call, and error handling.
//
//    // Example sending a request using the DescribeDomainUVDataRequest method.
//    req, resp := client.DescribeDomainUVDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeDomainUVDataRequest(input *DescribeDomainUVDataInput) (req *request.Request, output *DescribeDomainUVDataOutput) {
	op := &request.Operation{
		Name:       opDescribeDomainUVData,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDomainUVDataInput{}
	}

	output = &DescribeDomainUVDataOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDomainUVData API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeDomainUVData for usage and error information.
func (c *DCDN) DescribeDomainUVData(input *DescribeDomainUVDataInput) (*DescribeDomainUVDataOutput, error) {
	req, out := c.DescribeDomainUVDataRequest(input)
	return out, req.Send()
}

// DescribeDomainUVDataWithContext is the same as DescribeDomainUVData with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDomainUVData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeDomainUVDataWithContext(ctx volcengine.Context, input *DescribeDomainUVDataInput, opts ...request.Option) (*DescribeDomainUVDataOutput, error) {
	req, out := c.DescribeDomainUVDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeDomainUVDataInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Domain is a required field
	Domain *string `type:"string" json:",omitempty" required:"true"`

	// EndTime is a required field
	EndTime *string `type:"string" json:",omitempty" required:"true"`

	ProjectName []*string `type:"list" json:",omitempty"`

	// StartTime is a required field
	StartTime *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeDomainUVDataInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDomainUVDataInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDomainUVDataInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDomainUVDataInput"}
	if s.Domain == nil {
		invalidParams.Add(request.NewErrParamRequired("Domain"))
	}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDomain sets the Domain field's value.
func (s *DescribeDomainUVDataInput) SetDomain(v string) *DescribeDomainUVDataInput {
	s.Domain = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *DescribeDomainUVDataInput) SetEndTime(v string) *DescribeDomainUVDataInput {
	s.EndTime = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeDomainUVDataInput) SetProjectName(v []*string) *DescribeDomainUVDataInput {
	s.ProjectName = v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DescribeDomainUVDataInput) SetStartTime(v string) *DescribeDomainUVDataInput {
	s.StartTime = &v
	return s
}

type DescribeDomainUVDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DataInterval *int32 `type:"int32" json:",omitempty"`

	DomainName *string `type:"string" json:",omitempty"`

	EndTime *string `type:"string" json:",omitempty"`

	Results []*ResultForDescribeDomainUVDataOutput `type:"list" json:",omitempty"`

	StartTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDomainUVDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDomainUVDataOutput) GoString() string {
	return s.String()
}

// SetDataInterval sets the DataInterval field's value.
func (s *DescribeDomainUVDataOutput) SetDataInterval(v int32) *DescribeDomainUVDataOutput {
	s.DataInterval = &v
	return s
}

// SetDomainName sets the DomainName field's value.
func (s *DescribeDomainUVDataOutput) SetDomainName(v string) *DescribeDomainUVDataOutput {
	s.DomainName = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *DescribeDomainUVDataOutput) SetEndTime(v string) *DescribeDomainUVDataOutput {
	s.EndTime = &v
	return s
}

// SetResults sets the Results field's value.
func (s *DescribeDomainUVDataOutput) SetResults(v []*ResultForDescribeDomainUVDataOutput) *DescribeDomainUVDataOutput {
	s.Results = v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DescribeDomainUVDataOutput) SetStartTime(v string) *DescribeDomainUVDataOutput {
	s.StartTime = &v
	return s
}

type ResultForDescribeDomainUVDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Domain *string `type:"string" json:",omitempty"`

	TimeStamp *string `type:"string" json:",omitempty"`

	Value *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ResultForDescribeDomainUVDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResultForDescribeDomainUVDataOutput) GoString() string {
	return s.String()
}

// SetDomain sets the Domain field's value.
func (s *ResultForDescribeDomainUVDataOutput) SetDomain(v string) *ResultForDescribeDomainUVDataOutput {
	s.Domain = &v
	return s
}

// SetTimeStamp sets the TimeStamp field's value.
func (s *ResultForDescribeDomainUVDataOutput) SetTimeStamp(v string) *ResultForDescribeDomainUVDataOutput {
	s.TimeStamp = &v
	return s
}

// SetValue sets the Value field's value.
func (s *ResultForDescribeDomainUVDataOutput) SetValue(v int32) *ResultForDescribeDomainUVDataOutput {
	s.Value = &v
	return s
}
