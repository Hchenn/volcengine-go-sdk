// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStopDomainCommon = "StopDomain"

// StopDomainCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StopDomainCommon operation. The "output" return
// value will be populated with the StopDomainCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopDomainCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopDomainCommon Send returns without error.
//
// See StopDomainCommon for more information on using the StopDomainCommon
// API call, and error handling.
//
//    // Example sending a request using the StopDomainCommonRequest method.
//    req, resp := client.StopDomainCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) StopDomainCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopDomainCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StopDomainCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation StopDomainCommon for usage and error information.
func (c *DCDN) StopDomainCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopDomainCommonRequest(input)
	return out, req.Send()
}

// StopDomainCommonWithContext is the same as StopDomainCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopDomainCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) StopDomainCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopDomainCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopDomain = "StopDomain"

// StopDomainRequest generates a "volcengine/request.Request" representing the
// client's request for the StopDomain operation. The "output" return
// value will be populated with the StopDomainCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopDomainCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopDomainCommon Send returns without error.
//
// See StopDomain for more information on using the StopDomain
// API call, and error handling.
//
//    // Example sending a request using the StopDomainRequest method.
//    req, resp := client.StopDomainRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) StopDomainRequest(input *StopDomainInput) (req *request.Request, output *StopDomainOutput) {
	op := &request.Operation{
		Name:       opStopDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopDomainInput{}
	}

	output = &StopDomainOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StopDomain API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation StopDomain for usage and error information.
func (c *DCDN) StopDomain(input *StopDomainInput) (*StopDomainOutput, error) {
	req, out := c.StopDomainRequest(input)
	return out, req.Send()
}

// StopDomainWithContext is the same as StopDomain with the addition of
// the ability to pass a context and additional request options.
//
// See StopDomain for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) StopDomainWithContext(ctx volcengine.Context, input *StopDomainInput, opts ...request.Option) (*StopDomainOutput, error) {
	req, out := c.StopDomainRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StopDomainInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Domains []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s StopDomainInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopDomainInput) GoString() string {
	return s.String()
}

// SetDomains sets the Domains field's value.
func (s *StopDomainInput) SetDomains(v []*string) *StopDomainInput {
	s.Domains = v
	return s
}

type StopDomainOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s StopDomainOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopDomainOutput) GoString() string {
	return s.String()
}
