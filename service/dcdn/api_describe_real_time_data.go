// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeRealTimeDataCommon = "DescribeRealTimeData"

// DescribeRealTimeDataCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeRealTimeDataCommon operation. The "output" return
// value will be populated with the DescribeRealTimeDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeRealTimeDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeRealTimeDataCommon Send returns without error.
//
// See DescribeRealTimeDataCommon for more information on using the DescribeRealTimeDataCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeRealTimeDataCommonRequest method.
//    req, resp := client.DescribeRealTimeDataCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeRealTimeDataCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeRealTimeDataCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeRealTimeDataCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeRealTimeDataCommon for usage and error information.
func (c *DCDN) DescribeRealTimeDataCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeRealTimeDataCommonRequest(input)
	return out, req.Send()
}

// DescribeRealTimeDataCommonWithContext is the same as DescribeRealTimeDataCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRealTimeDataCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeRealTimeDataCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeRealTimeDataCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRealTimeData = "DescribeRealTimeData"

// DescribeRealTimeDataRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeRealTimeData operation. The "output" return
// value will be populated with the DescribeRealTimeDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeRealTimeDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeRealTimeDataCommon Send returns without error.
//
// See DescribeRealTimeData for more information on using the DescribeRealTimeData
// API call, and error handling.
//
//    // Example sending a request using the DescribeRealTimeDataRequest method.
//    req, resp := client.DescribeRealTimeDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeRealTimeDataRequest(input *DescribeRealTimeDataInput) (req *request.Request, output *DescribeRealTimeDataOutput) {
	op := &request.Operation{
		Name:       opDescribeRealTimeData,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeRealTimeDataInput{}
	}

	output = &DescribeRealTimeDataOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeRealTimeData API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeRealTimeData for usage and error information.
func (c *DCDN) DescribeRealTimeData(input *DescribeRealTimeDataInput) (*DescribeRealTimeDataOutput, error) {
	req, out := c.DescribeRealTimeDataRequest(input)
	return out, req.Send()
}

// DescribeRealTimeDataWithContext is the same as DescribeRealTimeData with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRealTimeData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeRealTimeDataWithContext(ctx volcengine.Context, input *DescribeRealTimeDataInput, opts ...request.Option) (*DescribeRealTimeDataOutput, error) {
	req, out := c.DescribeRealTimeDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeRealTimeDataInput struct {
	_ struct{} `type:"structure"`

	AcceleratingRegion *string `type:"string"`

	AcceleratingScope *string `type:"string"`

	Area *string `type:"string"`

	Domains []*string `type:"list"`

	// EndTime is a required field
	EndTime *string `type:"string" required:"true"`

	IPVersion *string `type:"string"`

	IspNameEn []*string `type:"list"`

	Metrics []*string `type:"list"`

	ProjectName []*string `type:"list"`

	Protocol []*string `type:"list"`

	Region []*string `type:"list"`

	// StartTime is a required field
	StartTime *string `type:"string" required:"true"`

	Type *string `type:"string"`
}

// String returns the string representation
func (s DescribeRealTimeDataInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeRealTimeDataInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeRealTimeDataInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeRealTimeDataInput"}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAcceleratingRegion sets the AcceleratingRegion field's value.
func (s *DescribeRealTimeDataInput) SetAcceleratingRegion(v string) *DescribeRealTimeDataInput {
	s.AcceleratingRegion = &v
	return s
}

// SetAcceleratingScope sets the AcceleratingScope field's value.
func (s *DescribeRealTimeDataInput) SetAcceleratingScope(v string) *DescribeRealTimeDataInput {
	s.AcceleratingScope = &v
	return s
}

// SetArea sets the Area field's value.
func (s *DescribeRealTimeDataInput) SetArea(v string) *DescribeRealTimeDataInput {
	s.Area = &v
	return s
}

// SetDomains sets the Domains field's value.
func (s *DescribeRealTimeDataInput) SetDomains(v []*string) *DescribeRealTimeDataInput {
	s.Domains = v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *DescribeRealTimeDataInput) SetEndTime(v string) *DescribeRealTimeDataInput {
	s.EndTime = &v
	return s
}

// SetIPVersion sets the IPVersion field's value.
func (s *DescribeRealTimeDataInput) SetIPVersion(v string) *DescribeRealTimeDataInput {
	s.IPVersion = &v
	return s
}

// SetIspNameEn sets the IspNameEn field's value.
func (s *DescribeRealTimeDataInput) SetIspNameEn(v []*string) *DescribeRealTimeDataInput {
	s.IspNameEn = v
	return s
}

// SetMetrics sets the Metrics field's value.
func (s *DescribeRealTimeDataInput) SetMetrics(v []*string) *DescribeRealTimeDataInput {
	s.Metrics = v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeRealTimeDataInput) SetProjectName(v []*string) *DescribeRealTimeDataInput {
	s.ProjectName = v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *DescribeRealTimeDataInput) SetProtocol(v []*string) *DescribeRealTimeDataInput {
	s.Protocol = v
	return s
}

// SetRegion sets the Region field's value.
func (s *DescribeRealTimeDataInput) SetRegion(v []*string) *DescribeRealTimeDataInput {
	s.Region = v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DescribeRealTimeDataInput) SetStartTime(v string) *DescribeRealTimeDataInput {
	s.StartTime = &v
	return s
}

// SetType sets the Type field's value.
func (s *DescribeRealTimeDataInput) SetType(v string) *DescribeRealTimeDataInput {
	s.Type = &v
	return s
}

type DescribeRealTimeDataOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	DomainCount *int32 `type:"int32"`

	EndTime *string `type:"string"`

	Metrics []*string `type:"list"`

	Results []*ResultForDescribeRealTimeDataOutput `type:"list"`

	StartTime *string `type:"string"`
}

// String returns the string representation
func (s DescribeRealTimeDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeRealTimeDataOutput) GoString() string {
	return s.String()
}

// SetDomainCount sets the DomainCount field's value.
func (s *DescribeRealTimeDataOutput) SetDomainCount(v int32) *DescribeRealTimeDataOutput {
	s.DomainCount = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *DescribeRealTimeDataOutput) SetEndTime(v string) *DescribeRealTimeDataOutput {
	s.EndTime = &v
	return s
}

// SetMetrics sets the Metrics field's value.
func (s *DescribeRealTimeDataOutput) SetMetrics(v []*string) *DescribeRealTimeDataOutput {
	s.Metrics = v
	return s
}

// SetResults sets the Results field's value.
func (s *DescribeRealTimeDataOutput) SetResults(v []*ResultForDescribeRealTimeDataOutput) *DescribeRealTimeDataOutput {
	s.Results = v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DescribeRealTimeDataOutput) SetStartTime(v string) *DescribeRealTimeDataOutput {
	s.StartTime = &v
	return s
}

type DetailInfoForDescribeRealTimeDataOutput struct {
	_ struct{} `type:"structure"`

	Name *string `type:"string"`

	Value *float64 `type:"float"`
}

// String returns the string representation
func (s DetailInfoForDescribeRealTimeDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DetailInfoForDescribeRealTimeDataOutput) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *DetailInfoForDescribeRealTimeDataOutput) SetName(v string) *DetailInfoForDescribeRealTimeDataOutput {
	s.Name = &v
	return s
}

// SetValue sets the Value field's value.
func (s *DetailInfoForDescribeRealTimeDataOutput) SetValue(v float64) *DetailInfoForDescribeRealTimeDataOutput {
	s.Value = &v
	return s
}

type RealTimeResultForDescribeRealTimeDataOutput struct {
	_ struct{} `type:"structure"`

	DetailInfo []*DetailInfoForDescribeRealTimeDataOutput `type:"list"`

	DomainName *string `type:"string"`
}

// String returns the string representation
func (s RealTimeResultForDescribeRealTimeDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RealTimeResultForDescribeRealTimeDataOutput) GoString() string {
	return s.String()
}

// SetDetailInfo sets the DetailInfo field's value.
func (s *RealTimeResultForDescribeRealTimeDataOutput) SetDetailInfo(v []*DetailInfoForDescribeRealTimeDataOutput) *RealTimeResultForDescribeRealTimeDataOutput {
	s.DetailInfo = v
	return s
}

// SetDomainName sets the DomainName field's value.
func (s *RealTimeResultForDescribeRealTimeDataOutput) SetDomainName(v string) *RealTimeResultForDescribeRealTimeDataOutput {
	s.DomainName = &v
	return s
}

type ResultForDescribeRealTimeDataOutput struct {
	_ struct{} `type:"structure"`

	RealTimeResults []*RealTimeResultForDescribeRealTimeDataOutput `type:"list"`

	TimeStamp *string `type:"string"`
}

// String returns the string representation
func (s ResultForDescribeRealTimeDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResultForDescribeRealTimeDataOutput) GoString() string {
	return s.String()
}

// SetRealTimeResults sets the RealTimeResults field's value.
func (s *ResultForDescribeRealTimeDataOutput) SetRealTimeResults(v []*RealTimeResultForDescribeRealTimeDataOutput) *ResultForDescribeRealTimeDataOutput {
	s.RealTimeResults = v
	return s
}

// SetTimeStamp sets the TimeStamp field's value.
func (s *ResultForDescribeRealTimeDataOutput) SetTimeStamp(v string) *ResultForDescribeRealTimeDataOutput {
	s.TimeStamp = &v
	return s
}
