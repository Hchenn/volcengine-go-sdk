// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeTopIPCommon = "DescribeTopIP"

// DescribeTopIPCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeTopIPCommon operation. The "output" return
// value will be populated with the DescribeTopIPCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTopIPCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTopIPCommon Send returns without error.
//
// See DescribeTopIPCommon for more information on using the DescribeTopIPCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeTopIPCommonRequest method.
//    req, resp := client.DescribeTopIPCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeTopIPCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeTopIPCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeTopIPCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeTopIPCommon for usage and error information.
func (c *DCDN) DescribeTopIPCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeTopIPCommonRequest(input)
	return out, req.Send()
}

// DescribeTopIPCommonWithContext is the same as DescribeTopIPCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTopIPCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeTopIPCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeTopIPCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeTopIP = "DescribeTopIP"

// DescribeTopIPRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeTopIP operation. The "output" return
// value will be populated with the DescribeTopIPCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTopIPCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTopIPCommon Send returns without error.
//
// See DescribeTopIP for more information on using the DescribeTopIP
// API call, and error handling.
//
//    // Example sending a request using the DescribeTopIPRequest method.
//    req, resp := client.DescribeTopIPRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeTopIPRequest(input *DescribeTopIPInput) (req *request.Request, output *DescribeTopIPOutput) {
	op := &request.Operation{
		Name:       opDescribeTopIP,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeTopIPInput{}
	}

	output = &DescribeTopIPOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeTopIP API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeTopIP for usage and error information.
func (c *DCDN) DescribeTopIP(input *DescribeTopIPInput) (*DescribeTopIPOutput, error) {
	req, out := c.DescribeTopIPRequest(input)
	return out, req.Send()
}

// DescribeTopIPWithContext is the same as DescribeTopIP with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTopIP for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeTopIPWithContext(ctx volcengine.Context, input *DescribeTopIPInput, opts ...request.Option) (*DescribeTopIPOutput, error) {
	req, out := c.DescribeTopIPRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeTopIPInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EndTime is a required field
	EndTime *string `type:"string" json:",omitempty" required:"true"`

	Limit *int32 `type:"int32" json:",omitempty"`

	ProjectName []*string `type:"list" json:",omitempty"`

	// Sort is a required field
	Sort *string `type:"string" json:",omitempty" required:"true"`

	// StartTime is a required field
	StartTime *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeTopIPInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTopIPInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeTopIPInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeTopIPInput"}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.Sort == nil {
		invalidParams.Add(request.NewErrParamRequired("Sort"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndTime sets the EndTime field's value.
func (s *DescribeTopIPInput) SetEndTime(v string) *DescribeTopIPInput {
	s.EndTime = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *DescribeTopIPInput) SetLimit(v int32) *DescribeTopIPInput {
	s.Limit = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeTopIPInput) SetProjectName(v []*string) *DescribeTopIPInput {
	s.ProjectName = v
	return s
}

// SetSort sets the Sort field's value.
func (s *DescribeTopIPInput) SetSort(v string) *DescribeTopIPInput {
	s.Sort = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DescribeTopIPInput) SetStartTime(v string) *DescribeTopIPInput {
	s.StartTime = &v
	return s
}

type DescribeTopIPOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TopIPs []*TopIPForDescribeTopIPOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeTopIPOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTopIPOutput) GoString() string {
	return s.String()
}

// SetTopIPs sets the TopIPs field's value.
func (s *DescribeTopIPOutput) SetTopIPs(v []*TopIPForDescribeTopIPOutput) *DescribeTopIPOutput {
	s.TopIPs = v
	return s
}

type TopIPForDescribeTopIPOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Bandwidth *float64 `type:"float" json:",omitempty"`

	IP *string `type:"string" json:",omitempty"`

	QPS *float64 `type:"float" json:",omitempty"`

	Rank *float64 `type:"float" json:",omitempty"`

	Request *float64 `type:"float" json:",omitempty"`

	Traffic *float64 `type:"float" json:",omitempty"`
}

// String returns the string representation
func (s TopIPForDescribeTopIPOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TopIPForDescribeTopIPOutput) GoString() string {
	return s.String()
}

// SetBandwidth sets the Bandwidth field's value.
func (s *TopIPForDescribeTopIPOutput) SetBandwidth(v float64) *TopIPForDescribeTopIPOutput {
	s.Bandwidth = &v
	return s
}

// SetIP sets the IP field's value.
func (s *TopIPForDescribeTopIPOutput) SetIP(v string) *TopIPForDescribeTopIPOutput {
	s.IP = &v
	return s
}

// SetQPS sets the QPS field's value.
func (s *TopIPForDescribeTopIPOutput) SetQPS(v float64) *TopIPForDescribeTopIPOutput {
	s.QPS = &v
	return s
}

// SetRank sets the Rank field's value.
func (s *TopIPForDescribeTopIPOutput) SetRank(v float64) *TopIPForDescribeTopIPOutput {
	s.Rank = &v
	return s
}

// SetRequest sets the Request field's value.
func (s *TopIPForDescribeTopIPOutput) SetRequest(v float64) *TopIPForDescribeTopIPOutput {
	s.Request = &v
	return s
}

// SetTraffic sets the Traffic field's value.
func (s *TopIPForDescribeTopIPOutput) SetTraffic(v float64) *TopIPForDescribeTopIPOutput {
	s.Traffic = &v
	return s
}
