// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeTopURLCommon = "DescribeTopURL"

// DescribeTopURLCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeTopURLCommon operation. The "output" return
// value will be populated with the DescribeTopURLCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTopURLCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTopURLCommon Send returns without error.
//
// See DescribeTopURLCommon for more information on using the DescribeTopURLCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeTopURLCommonRequest method.
//    req, resp := client.DescribeTopURLCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeTopURLCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeTopURLCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeTopURLCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeTopURLCommon for usage and error information.
func (c *DCDN) DescribeTopURLCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeTopURLCommonRequest(input)
	return out, req.Send()
}

// DescribeTopURLCommonWithContext is the same as DescribeTopURLCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTopURLCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeTopURLCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeTopURLCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeTopURL = "DescribeTopURL"

// DescribeTopURLRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeTopURL operation. The "output" return
// value will be populated with the DescribeTopURLCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeTopURLCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeTopURLCommon Send returns without error.
//
// See DescribeTopURL for more information on using the DescribeTopURL
// API call, and error handling.
//
//    // Example sending a request using the DescribeTopURLRequest method.
//    req, resp := client.DescribeTopURLRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) DescribeTopURLRequest(input *DescribeTopURLInput) (req *request.Request, output *DescribeTopURLOutput) {
	op := &request.Operation{
		Name:       opDescribeTopURL,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeTopURLInput{}
	}

	output = &DescribeTopURLOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeTopURL API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation DescribeTopURL for usage and error information.
func (c *DCDN) DescribeTopURL(input *DescribeTopURLInput) (*DescribeTopURLOutput, error) {
	req, out := c.DescribeTopURLRequest(input)
	return out, req.Send()
}

// DescribeTopURLWithContext is the same as DescribeTopURL with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeTopURL for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) DescribeTopURLWithContext(ctx volcengine.Context, input *DescribeTopURLInput, opts ...request.Option) (*DescribeTopURLOutput, error) {
	req, out := c.DescribeTopURLRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeTopURLInput struct {
	_ struct{} `type:"structure"`

	Domain *string `type:"string"`

	// EndTime is a required field
	EndTime *string `type:"string" required:"true"`

	Limit *int32 `type:"int32"`

	ProjectName []*string `type:"list"`

	// Sort is a required field
	Sort *string `type:"string" required:"true"`

	// StartTime is a required field
	StartTime *string `type:"string" required:"true"`

	StatusCode []*string `type:"list"`
}

// String returns the string representation
func (s DescribeTopURLInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTopURLInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeTopURLInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeTopURLInput"}
	if s.EndTime == nil {
		invalidParams.Add(request.NewErrParamRequired("EndTime"))
	}
	if s.Sort == nil {
		invalidParams.Add(request.NewErrParamRequired("Sort"))
	}
	if s.StartTime == nil {
		invalidParams.Add(request.NewErrParamRequired("StartTime"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDomain sets the Domain field's value.
func (s *DescribeTopURLInput) SetDomain(v string) *DescribeTopURLInput {
	s.Domain = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *DescribeTopURLInput) SetEndTime(v string) *DescribeTopURLInput {
	s.EndTime = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *DescribeTopURLInput) SetLimit(v int32) *DescribeTopURLInput {
	s.Limit = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeTopURLInput) SetProjectName(v []*string) *DescribeTopURLInput {
	s.ProjectName = v
	return s
}

// SetSort sets the Sort field's value.
func (s *DescribeTopURLInput) SetSort(v string) *DescribeTopURLInput {
	s.Sort = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DescribeTopURLInput) SetStartTime(v string) *DescribeTopURLInput {
	s.StartTime = &v
	return s
}

// SetStatusCode sets the StatusCode field's value.
func (s *DescribeTopURLInput) SetStatusCode(v []*string) *DescribeTopURLInput {
	s.StatusCode = v
	return s
}

type DescribeTopURLOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	TopURLs []*TopURLForDescribeTopURLOutput `type:"list"`
}

// String returns the string representation
func (s DescribeTopURLOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeTopURLOutput) GoString() string {
	return s.String()
}

// SetTopURLs sets the TopURLs field's value.
func (s *DescribeTopURLOutput) SetTopURLs(v []*TopURLForDescribeTopURLOutput) *DescribeTopURLOutput {
	s.TopURLs = v
	return s
}

type TopURLForDescribeTopURLOutput struct {
	_ struct{} `type:"structure"`

	Bandwidth *float64 `type:"float"`

	QPS *float64 `type:"float"`

	Rank *float64 `type:"float"`

	Request *float64 `type:"float"`

	Traffic *float64 `type:"float"`

	URL *string `type:"string"`
}

// String returns the string representation
func (s TopURLForDescribeTopURLOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TopURLForDescribeTopURLOutput) GoString() string {
	return s.String()
}

// SetBandwidth sets the Bandwidth field's value.
func (s *TopURLForDescribeTopURLOutput) SetBandwidth(v float64) *TopURLForDescribeTopURLOutput {
	s.Bandwidth = &v
	return s
}

// SetQPS sets the QPS field's value.
func (s *TopURLForDescribeTopURLOutput) SetQPS(v float64) *TopURLForDescribeTopURLOutput {
	s.QPS = &v
	return s
}

// SetRank sets the Rank field's value.
func (s *TopURLForDescribeTopURLOutput) SetRank(v float64) *TopURLForDescribeTopURLOutput {
	s.Rank = &v
	return s
}

// SetRequest sets the Request field's value.
func (s *TopURLForDescribeTopURLOutput) SetRequest(v float64) *TopURLForDescribeTopURLOutput {
	s.Request = &v
	return s
}

// SetTraffic sets the Traffic field's value.
func (s *TopURLForDescribeTopURLOutput) SetTraffic(v float64) *TopURLForDescribeTopURLOutput {
	s.Traffic = &v
	return s
}

// SetURL sets the URL field's value.
func (s *TopURLForDescribeTopURLOutput) SetURL(v string) *TopURLForDescribeTopURLOutput {
	s.URL = &v
	return s
}
