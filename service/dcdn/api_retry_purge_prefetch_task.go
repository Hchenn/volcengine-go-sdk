// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRetryPurgePrefetchTaskCommon = "RetryPurgePrefetchTask"

// RetryPurgePrefetchTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RetryPurgePrefetchTaskCommon operation. The "output" return
// value will be populated with the RetryPurgePrefetchTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RetryPurgePrefetchTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after RetryPurgePrefetchTaskCommon Send returns without error.
//
// See RetryPurgePrefetchTaskCommon for more information on using the RetryPurgePrefetchTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the RetryPurgePrefetchTaskCommonRequest method.
//    req, resp := client.RetryPurgePrefetchTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) RetryPurgePrefetchTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRetryPurgePrefetchTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RetryPurgePrefetchTaskCommon API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation RetryPurgePrefetchTaskCommon for usage and error information.
func (c *DCDN) RetryPurgePrefetchTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RetryPurgePrefetchTaskCommonRequest(input)
	return out, req.Send()
}

// RetryPurgePrefetchTaskCommonWithContext is the same as RetryPurgePrefetchTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RetryPurgePrefetchTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) RetryPurgePrefetchTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RetryPurgePrefetchTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRetryPurgePrefetchTask = "RetryPurgePrefetchTask"

// RetryPurgePrefetchTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the RetryPurgePrefetchTask operation. The "output" return
// value will be populated with the RetryPurgePrefetchTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RetryPurgePrefetchTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after RetryPurgePrefetchTaskCommon Send returns without error.
//
// See RetryPurgePrefetchTask for more information on using the RetryPurgePrefetchTask
// API call, and error handling.
//
//    // Example sending a request using the RetryPurgePrefetchTaskRequest method.
//    req, resp := client.RetryPurgePrefetchTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DCDN) RetryPurgePrefetchTaskRequest(input *RetryPurgePrefetchTaskInput) (req *request.Request, output *RetryPurgePrefetchTaskOutput) {
	op := &request.Operation{
		Name:       opRetryPurgePrefetchTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RetryPurgePrefetchTaskInput{}
	}

	output = &RetryPurgePrefetchTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RetryPurgePrefetchTask API operation for DCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DCDN's
// API operation RetryPurgePrefetchTask for usage and error information.
func (c *DCDN) RetryPurgePrefetchTask(input *RetryPurgePrefetchTaskInput) (*RetryPurgePrefetchTaskOutput, error) {
	req, out := c.RetryPurgePrefetchTaskRequest(input)
	return out, req.Send()
}

// RetryPurgePrefetchTaskWithContext is the same as RetryPurgePrefetchTask with the addition of
// the ability to pass a context and additional request options.
//
// See RetryPurgePrefetchTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DCDN) RetryPurgePrefetchTaskWithContext(ctx volcengine.Context, input *RetryPurgePrefetchTaskInput, opts ...request.Option) (*RetryPurgePrefetchTaskOutput, error) {
	req, out := c.RetryPurgePrefetchTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RetryPurgePrefetchTaskInput struct {
	_ struct{} `type:"structure"`

	// TaskId is a required field
	TaskId *string `type:"string" required:"true"`

	// TaskType is a required field
	TaskType *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RetryPurgePrefetchTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RetryPurgePrefetchTaskInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RetryPurgePrefetchTaskInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RetryPurgePrefetchTaskInput"}
	if s.TaskId == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskId"))
	}
	if s.TaskType == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTaskId sets the TaskId field's value.
func (s *RetryPurgePrefetchTaskInput) SetTaskId(v string) *RetryPurgePrefetchTaskInput {
	s.TaskId = &v
	return s
}

// SetTaskType sets the TaskType field's value.
func (s *RetryPurgePrefetchTaskInput) SetTaskType(v string) *RetryPurgePrefetchTaskInput {
	s.TaskType = &v
	return s
}

type RetryPurgePrefetchTaskOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	TaskId *string `type:"string"`

	TaskStatus *string `type:"string"`
}

// String returns the string representation
func (s RetryPurgePrefetchTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RetryPurgePrefetchTaskOutput) GoString() string {
	return s.String()
}

// SetTaskId sets the TaskId field's value.
func (s *RetryPurgePrefetchTaskOutput) SetTaskId(v string) *RetryPurgePrefetchTaskOutput {
	s.TaskId = &v
	return s
}

// SetTaskStatus sets the TaskStatus field's value.
func (s *RetryPurgePrefetchTaskOutput) SetTaskStatus(v string) *RetryPurgePrefetchTaskOutput {
	s.TaskStatus = &v
	return s
}
