// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package spark

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateApplicationCommon = "updateApplication"

// UpdateApplicationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateApplicationCommon operation. The "output" return
// value will be populated with the UpdateApplicationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateApplicationCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateApplicationCommon Send returns without error.
//
// See UpdateApplicationCommon for more information on using the UpdateApplicationCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateApplicationCommonRequest method.
//    req, resp := client.UpdateApplicationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPARK) UpdateApplicationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateApplicationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateApplicationCommon API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation UpdateApplicationCommon for usage and error information.
func (c *SPARK) UpdateApplicationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateApplicationCommonRequest(input)
	return out, req.Send()
}

// UpdateApplicationCommonWithContext is the same as UpdateApplicationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateApplicationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) UpdateApplicationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateApplicationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateApplication = "updateApplication"

// UpdateApplicationRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateApplication operation. The "output" return
// value will be populated with the UpdateApplicationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateApplicationCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateApplicationCommon Send returns without error.
//
// See UpdateApplication for more information on using the UpdateApplication
// API call, and error handling.
//
//    // Example sending a request using the UpdateApplicationRequest method.
//    req, resp := client.UpdateApplicationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPARK) UpdateApplicationRequest(input *UpdateApplicationInput) (req *request.Request, output *UpdateApplicationOutput) {
	op := &request.Operation{
		Name:       opUpdateApplication,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateApplicationInput{}
	}

	output = &UpdateApplicationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateApplication API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation UpdateApplication for usage and error information.
func (c *SPARK) UpdateApplication(input *UpdateApplicationInput) (*UpdateApplicationOutput, error) {
	req, out := c.UpdateApplicationRequest(input)
	return out, req.Send()
}

// UpdateApplicationWithContext is the same as UpdateApplication with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateApplication for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) UpdateApplicationWithContext(ctx volcengine.Context, input *UpdateApplicationInput, opts ...request.Option) (*UpdateApplicationOutput, error) {
	req, out := c.UpdateApplicationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DependencyForupdateApplicationInput struct {
	_ struct{} `type:"structure"`

	Archives []*string `type:"list"`

	Files []*string `type:"list"`

	Jars []*string `type:"list"`

	PyFiles []*string `type:"list"`
}

// String returns the string representation
func (s DependencyForupdateApplicationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DependencyForupdateApplicationInput) GoString() string {
	return s.String()
}

// SetArchives sets the Archives field's value.
func (s *DependencyForupdateApplicationInput) SetArchives(v []*string) *DependencyForupdateApplicationInput {
	s.Archives = v
	return s
}

// SetFiles sets the Files field's value.
func (s *DependencyForupdateApplicationInput) SetFiles(v []*string) *DependencyForupdateApplicationInput {
	s.Files = v
	return s
}

// SetJars sets the Jars field's value.
func (s *DependencyForupdateApplicationInput) SetJars(v []*string) *DependencyForupdateApplicationInput {
	s.Jars = v
	return s
}

// SetPyFiles sets the PyFiles field's value.
func (s *DependencyForupdateApplicationInput) SetPyFiles(v []*string) *DependencyForupdateApplicationInput {
	s.PyFiles = v
	return s
}

type DeployRequestForupdateApplicationInput struct {
	_ struct{} `type:"structure"`

	Priority *string `type:"string"`

	ResourcePoolTrn *string `type:"string"`

	SchedulePolicy *string `type:"string"`

	ScheduleTimeout *string `type:"string"`
}

// String returns the string representation
func (s DeployRequestForupdateApplicationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeployRequestForupdateApplicationInput) GoString() string {
	return s.String()
}

// SetPriority sets the Priority field's value.
func (s *DeployRequestForupdateApplicationInput) SetPriority(v string) *DeployRequestForupdateApplicationInput {
	s.Priority = &v
	return s
}

// SetResourcePoolTrn sets the ResourcePoolTrn field's value.
func (s *DeployRequestForupdateApplicationInput) SetResourcePoolTrn(v string) *DeployRequestForupdateApplicationInput {
	s.ResourcePoolTrn = &v
	return s
}

// SetSchedulePolicy sets the SchedulePolicy field's value.
func (s *DeployRequestForupdateApplicationInput) SetSchedulePolicy(v string) *DeployRequestForupdateApplicationInput {
	s.SchedulePolicy = &v
	return s
}

// SetScheduleTimeout sets the ScheduleTimeout field's value.
func (s *DeployRequestForupdateApplicationInput) SetScheduleTimeout(v string) *DeployRequestForupdateApplicationInput {
	s.ScheduleTimeout = &v
	return s
}

type UpdateApplicationInput struct {
	_ struct{} `type:"structure"`

	ApplicationTrn *string `type:"string"`

	Args *string `type:"string"`

	Conf map[string]*string `type:"map"`

	Dependency *DependencyForupdateApplicationInput `type:"structure"`

	DeployRequest *DeployRequestForupdateApplicationInput `type:"structure"`

	EngineVersion *string `type:"string" enum:"EnumOfEngineVersionForupdateApplicationInput"`

	Image *string `type:"string"`

	Jar *string `type:"string"`

	JobName *string `type:"string"`

	MainClass *string `type:"string"`

	SqlText *string `type:"string"`

	UniqueKey *string `type:"string"`
}

// String returns the string representation
func (s UpdateApplicationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateApplicationInput) GoString() string {
	return s.String()
}

// SetApplicationTrn sets the ApplicationTrn field's value.
func (s *UpdateApplicationInput) SetApplicationTrn(v string) *UpdateApplicationInput {
	s.ApplicationTrn = &v
	return s
}

// SetArgs sets the Args field's value.
func (s *UpdateApplicationInput) SetArgs(v string) *UpdateApplicationInput {
	s.Args = &v
	return s
}

// SetConf sets the Conf field's value.
func (s *UpdateApplicationInput) SetConf(v map[string]*string) *UpdateApplicationInput {
	s.Conf = v
	return s
}

// SetDependency sets the Dependency field's value.
func (s *UpdateApplicationInput) SetDependency(v *DependencyForupdateApplicationInput) *UpdateApplicationInput {
	s.Dependency = v
	return s
}

// SetDeployRequest sets the DeployRequest field's value.
func (s *UpdateApplicationInput) SetDeployRequest(v *DeployRequestForupdateApplicationInput) *UpdateApplicationInput {
	s.DeployRequest = v
	return s
}

// SetEngineVersion sets the EngineVersion field's value.
func (s *UpdateApplicationInput) SetEngineVersion(v string) *UpdateApplicationInput {
	s.EngineVersion = &v
	return s
}

// SetImage sets the Image field's value.
func (s *UpdateApplicationInput) SetImage(v string) *UpdateApplicationInput {
	s.Image = &v
	return s
}

// SetJar sets the Jar field's value.
func (s *UpdateApplicationInput) SetJar(v string) *UpdateApplicationInput {
	s.Jar = &v
	return s
}

// SetJobName sets the JobName field's value.
func (s *UpdateApplicationInput) SetJobName(v string) *UpdateApplicationInput {
	s.JobName = &v
	return s
}

// SetMainClass sets the MainClass field's value.
func (s *UpdateApplicationInput) SetMainClass(v string) *UpdateApplicationInput {
	s.MainClass = &v
	return s
}

// SetSqlText sets the SqlText field's value.
func (s *UpdateApplicationInput) SetSqlText(v string) *UpdateApplicationInput {
	s.SqlText = &v
	return s
}

// SetUniqueKey sets the UniqueKey field's value.
func (s *UpdateApplicationInput) SetUniqueKey(v string) *UpdateApplicationInput {
	s.UniqueKey = &v
	return s
}

type UpdateApplicationOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s UpdateApplicationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateApplicationOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *UpdateApplicationOutput) SetMessage(v string) *UpdateApplicationOutput {
	s.Message = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *UpdateApplicationOutput) SetStatus(v string) *UpdateApplicationOutput {
	s.Status = &v
	return s
}

const (
	// EnumOfEngineVersionForupdateApplicationInputSparkVersion301Os is a EnumOfEngineVersionForupdateApplicationInput enum value
	EnumOfEngineVersionForupdateApplicationInputSparkVersion301Os = "SPARK_VERSION_3_0_1_OS"

	// EnumOfEngineVersionForupdateApplicationInputSparkVersion322 is a EnumOfEngineVersionForupdateApplicationInput enum value
	EnumOfEngineVersionForupdateApplicationInputSparkVersion322 = "SPARK_VERSION_3_2_2"
)
