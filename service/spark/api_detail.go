// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package spark

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDetailCommon = "detail"

// DetailCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DetailCommon operation. The "output" return
// value will be populated with the DetailCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DetailCommon Request to send the API call to the service.
// the "output" return value is not valid until after DetailCommon Send returns without error.
//
// See DetailCommon for more information on using the DetailCommon
// API call, and error handling.
//
//    // Example sending a request using the DetailCommonRequest method.
//    req, resp := client.DetailCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPARK) DetailCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDetailCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DetailCommon API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation DetailCommon for usage and error information.
func (c *SPARK) DetailCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DetailCommonRequest(input)
	return out, req.Send()
}

// DetailCommonWithContext is the same as DetailCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DetailCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) DetailCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DetailCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDetail = "detail"

// DetailRequest generates a "volcengine/request.Request" representing the
// client's request for the Detail operation. The "output" return
// value will be populated with the DetailCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DetailCommon Request to send the API call to the service.
// the "output" return value is not valid until after DetailCommon Send returns without error.
//
// See Detail for more information on using the Detail
// API call, and error handling.
//
//    // Example sending a request using the DetailRequest method.
//    req, resp := client.DetailRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPARK) DetailRequest(input *DetailInput) (req *request.Request, output *DetailOutput) {
	op := &request.Operation{
		Name:       opDetail,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DetailInput{}
	}

	output = &DetailOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// Detail API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation Detail for usage and error information.
func (c *SPARK) Detail(input *DetailInput) (*DetailOutput, error) {
	req, out := c.DetailRequest(input)
	return out, req.Send()
}

// DetailWithContext is the same as Detail with the addition of
// the ability to pass a context and additional request options.
//
// See Detail for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) DetailWithContext(ctx volcengine.Context, input *DetailInput, opts ...request.Option) (*DetailOutput, error) {
	req, out := c.DetailRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DetailInput struct {
	_ struct{} `type:"structure"`

	ResourcePoolTrn *string `type:"string"`
}

// String returns the string representation
func (s DetailInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DetailInput) GoString() string {
	return s.String()
}

// SetResourcePoolTrn sets the ResourcePoolTrn field's value.
func (s *DetailInput) SetResourcePoolTrn(v string) *DetailInput {
	s.ResourcePoolTrn = &v
	return s
}

type DetailOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	BillingType *string `type:"string"`

	CreateTime *string `type:"string"`

	Name *string `type:"string"`

	ProjectId *string `type:"string"`

	RegionId *string `type:"string"`

	ResourcePoolTrn *string `type:"string"`

	Status *string `type:"string"`

	StatusMessage *string `type:"string"`

	UpdateTime *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DetailOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DetailOutput) GoString() string {
	return s.String()
}

// SetBillingType sets the BillingType field's value.
func (s *DetailOutput) SetBillingType(v string) *DetailOutput {
	s.BillingType = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *DetailOutput) SetCreateTime(v string) *DetailOutput {
	s.CreateTime = &v
	return s
}

// SetName sets the Name field's value.
func (s *DetailOutput) SetName(v string) *DetailOutput {
	s.Name = &v
	return s
}

// SetProjectId sets the ProjectId field's value.
func (s *DetailOutput) SetProjectId(v string) *DetailOutput {
	s.ProjectId = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *DetailOutput) SetRegionId(v string) *DetailOutput {
	s.RegionId = &v
	return s
}

// SetResourcePoolTrn sets the ResourcePoolTrn field's value.
func (s *DetailOutput) SetResourcePoolTrn(v string) *DetailOutput {
	s.ResourcePoolTrn = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DetailOutput) SetStatus(v string) *DetailOutput {
	s.Status = &v
	return s
}

// SetStatusMessage sets the StatusMessage field's value.
func (s *DetailOutput) SetStatusMessage(v string) *DetailOutput {
	s.StatusMessage = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DetailOutput) SetUpdateTime(v string) *DetailOutput {
	s.UpdateTime = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DetailOutput) SetZoneId(v string) *DetailOutput {
	s.ZoneId = &v
	return s
}
