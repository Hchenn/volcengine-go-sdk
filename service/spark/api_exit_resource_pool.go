// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package spark

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opExitResourcePoolCommon = "exitResourcePool"

// ExitResourcePoolCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ExitResourcePoolCommon operation. The "output" return
// value will be populated with the ExitResourcePoolCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExitResourcePoolCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExitResourcePoolCommon Send returns without error.
//
// See ExitResourcePoolCommon for more information on using the ExitResourcePoolCommon
// API call, and error handling.
//
//    // Example sending a request using the ExitResourcePoolCommonRequest method.
//    req, resp := client.ExitResourcePoolCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPARK) ExitResourcePoolCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opExitResourcePoolCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ExitResourcePoolCommon API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation ExitResourcePoolCommon for usage and error information.
func (c *SPARK) ExitResourcePoolCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ExitResourcePoolCommonRequest(input)
	return out, req.Send()
}

// ExitResourcePoolCommonWithContext is the same as ExitResourcePoolCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ExitResourcePoolCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) ExitResourcePoolCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ExitResourcePoolCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opExitResourcePool = "exitResourcePool"

// ExitResourcePoolRequest generates a "volcengine/request.Request" representing the
// client's request for the ExitResourcePool operation. The "output" return
// value will be populated with the ExitResourcePoolCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExitResourcePoolCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExitResourcePoolCommon Send returns without error.
//
// See ExitResourcePool for more information on using the ExitResourcePool
// API call, and error handling.
//
//    // Example sending a request using the ExitResourcePoolRequest method.
//    req, resp := client.ExitResourcePoolRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPARK) ExitResourcePoolRequest(input *ExitResourcePoolInput) (req *request.Request, output *ExitResourcePoolOutput) {
	op := &request.Operation{
		Name:       opExitResourcePool,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ExitResourcePoolInput{}
	}

	output = &ExitResourcePoolOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ExitResourcePool API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation ExitResourcePool for usage and error information.
func (c *SPARK) ExitResourcePool(input *ExitResourcePoolInput) (*ExitResourcePoolOutput, error) {
	req, out := c.ExitResourcePoolRequest(input)
	return out, req.Send()
}

// ExitResourcePoolWithContext is the same as ExitResourcePool with the addition of
// the ability to pass a context and additional request options.
//
// See ExitResourcePool for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) ExitResourcePoolWithContext(ctx volcengine.Context, input *ExitResourcePoolInput, opts ...request.Option) (*ExitResourcePoolOutput, error) {
	req, out := c.ExitResourcePoolRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ExitResourcePoolInput struct {
	_ struct{} `type:"structure"`

	Name *string `type:"string"`

	ProjectId *string `type:"string"`
}

// String returns the string representation
func (s ExitResourcePoolInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ExitResourcePoolInput) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *ExitResourcePoolInput) SetName(v string) *ExitResourcePoolInput {
	s.Name = &v
	return s
}

// SetProjectId sets the ProjectId field's value.
func (s *ExitResourcePoolInput) SetProjectId(v string) *ExitResourcePoolInput {
	s.ProjectId = &v
	return s
}

type ExitResourcePoolOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Existed *bool `type:"boolean"`
}

// String returns the string representation
func (s ExitResourcePoolOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ExitResourcePoolOutput) GoString() string {
	return s.String()
}

// SetExisted sets the Existed field's value.
func (s *ExitResourcePoolOutput) SetExisted(v bool) *ExitResourcePoolOutput {
	s.Existed = &v
	return s
}
