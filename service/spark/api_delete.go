// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package spark

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteCommon = "delete"

// DeleteCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteCommon operation. The "output" return
// value will be populated with the DeleteCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCommon Send returns without error.
//
// See DeleteCommon for more information on using the DeleteCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteCommonRequest method.
//    req, resp := client.DeleteCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPARK) DeleteCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteCommon API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation DeleteCommon for usage and error information.
func (c *SPARK) DeleteCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteCommonRequest(input)
	return out, req.Send()
}

// DeleteCommonWithContext is the same as DeleteCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) DeleteCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDelete = "delete"

// DeleteRequest generates a "volcengine/request.Request" representing the
// client's request for the Delete operation. The "output" return
// value will be populated with the DeleteCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCommon Send returns without error.
//
// See Delete for more information on using the Delete
// API call, and error handling.
//
//    // Example sending a request using the DeleteRequest method.
//    req, resp := client.DeleteRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPARK) DeleteRequest(input *DeleteInput) (req *request.Request, output *DeleteOutput) {
	op := &request.Operation{
		Name:       opDelete,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteInput{}
	}

	output = &DeleteOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// Delete API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation Delete for usage and error information.
func (c *SPARK) Delete(input *DeleteInput) (*DeleteOutput, error) {
	req, out := c.DeleteRequest(input)
	return out, req.Send()
}

// DeleteWithContext is the same as Delete with the addition of
// the ability to pass a context and additional request options.
//
// See Delete for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) DeleteWithContext(ctx volcengine.Context, input *DeleteInput, opts ...request.Option) (*DeleteOutput, error) {
	req, out := c.DeleteRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteInput struct {
	_ struct{} `type:"structure"`

	ResourcePoolTrn *string `type:"string"`
}

// String returns the string representation
func (s DeleteInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteInput) GoString() string {
	return s.String()
}

// SetResourcePoolTrn sets the ResourcePoolTrn field's value.
func (s *DeleteInput) SetResourcePoolTrn(v string) *DeleteInput {
	s.ResourcePoolTrn = &v
	return s
}

type DeleteOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s DeleteOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *DeleteOutput) SetMessage(v string) *DeleteOutput {
	s.Message = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DeleteOutput) SetStatus(v string) *DeleteOutput {
	s.Status = &v
	return s
}
