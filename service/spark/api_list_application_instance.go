// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package spark

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListApplicationInstanceCommon = "listApplicationInstance"

// ListApplicationInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListApplicationInstanceCommon operation. The "output" return
// value will be populated with the ListApplicationInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListApplicationInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListApplicationInstanceCommon Send returns without error.
//
// See ListApplicationInstanceCommon for more information on using the ListApplicationInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the ListApplicationInstanceCommonRequest method.
//    req, resp := client.ListApplicationInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPARK) ListApplicationInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListApplicationInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListApplicationInstanceCommon API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation ListApplicationInstanceCommon for usage and error information.
func (c *SPARK) ListApplicationInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListApplicationInstanceCommonRequest(input)
	return out, req.Send()
}

// ListApplicationInstanceCommonWithContext is the same as ListApplicationInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListApplicationInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) ListApplicationInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListApplicationInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListApplicationInstance = "listApplicationInstance"

// ListApplicationInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the ListApplicationInstance operation. The "output" return
// value will be populated with the ListApplicationInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListApplicationInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListApplicationInstanceCommon Send returns without error.
//
// See ListApplicationInstance for more information on using the ListApplicationInstance
// API call, and error handling.
//
//    // Example sending a request using the ListApplicationInstanceRequest method.
//    req, resp := client.ListApplicationInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SPARK) ListApplicationInstanceRequest(input *ListApplicationInstanceInput) (req *request.Request, output *ListApplicationInstanceOutput) {
	op := &request.Operation{
		Name:       opListApplicationInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListApplicationInstanceInput{}
	}

	output = &ListApplicationInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListApplicationInstance API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation ListApplicationInstance for usage and error information.
func (c *SPARK) ListApplicationInstance(input *ListApplicationInstanceInput) (*ListApplicationInstanceOutput, error) {
	req, out := c.ListApplicationInstanceRequest(input)
	return out, req.Send()
}

// ListApplicationInstanceWithContext is the same as ListApplicationInstance with the addition of
// the ability to pass a context and additional request options.
//
// See ListApplicationInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) ListApplicationInstanceWithContext(ctx volcengine.Context, input *ListApplicationInstanceInput, opts ...request.Option) (*ListApplicationInstanceOutput, error) {
	req, out := c.ListApplicationInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListApplicationInstanceInput struct {
	_ struct{} `type:"structure"`

	ApplicationName *string `type:"string"`

	ApplicationTrn *string `type:"string"`

	EngineVersion *string `type:"string" enum:"EnumOfEngineVersionForlistApplicationInstanceInput"`

	InstanceId *int64 `type:"int64"`

	PageNum *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	ProjectId *string `type:"string"`

	ResourcePoolTrn *string `type:"string"`

	SortField *string `type:"string"`

	SortOrder *string `type:"string"`

	State *string `type:"string" enum:"EnumOfStateForlistApplicationInstanceInput"`
}

// String returns the string representation
func (s ListApplicationInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListApplicationInstanceInput) GoString() string {
	return s.String()
}

// SetApplicationName sets the ApplicationName field's value.
func (s *ListApplicationInstanceInput) SetApplicationName(v string) *ListApplicationInstanceInput {
	s.ApplicationName = &v
	return s
}

// SetApplicationTrn sets the ApplicationTrn field's value.
func (s *ListApplicationInstanceInput) SetApplicationTrn(v string) *ListApplicationInstanceInput {
	s.ApplicationTrn = &v
	return s
}

// SetEngineVersion sets the EngineVersion field's value.
func (s *ListApplicationInstanceInput) SetEngineVersion(v string) *ListApplicationInstanceInput {
	s.EngineVersion = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ListApplicationInstanceInput) SetInstanceId(v int64) *ListApplicationInstanceInput {
	s.InstanceId = &v
	return s
}

// SetPageNum sets the PageNum field's value.
func (s *ListApplicationInstanceInput) SetPageNum(v int32) *ListApplicationInstanceInput {
	s.PageNum = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListApplicationInstanceInput) SetPageSize(v int32) *ListApplicationInstanceInput {
	s.PageSize = &v
	return s
}

// SetProjectId sets the ProjectId field's value.
func (s *ListApplicationInstanceInput) SetProjectId(v string) *ListApplicationInstanceInput {
	s.ProjectId = &v
	return s
}

// SetResourcePoolTrn sets the ResourcePoolTrn field's value.
func (s *ListApplicationInstanceInput) SetResourcePoolTrn(v string) *ListApplicationInstanceInput {
	s.ResourcePoolTrn = &v
	return s
}

// SetSortField sets the SortField field's value.
func (s *ListApplicationInstanceInput) SetSortField(v string) *ListApplicationInstanceInput {
	s.SortField = &v
	return s
}

// SetSortOrder sets the SortOrder field's value.
func (s *ListApplicationInstanceInput) SetSortOrder(v string) *ListApplicationInstanceInput {
	s.SortOrder = &v
	return s
}

// SetState sets the State field's value.
func (s *ListApplicationInstanceInput) SetState(v string) *ListApplicationInstanceInput {
	s.State = &v
	return s
}

type ListApplicationInstanceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Current *int64 `type:"int64"`

	Records []*interface{} `type:"list"`

	Size *int64 `type:"int64"`

	Total *int64 `type:"int64"`
}

// String returns the string representation
func (s ListApplicationInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListApplicationInstanceOutput) GoString() string {
	return s.String()
}

// SetCurrent sets the Current field's value.
func (s *ListApplicationInstanceOutput) SetCurrent(v int64) *ListApplicationInstanceOutput {
	s.Current = &v
	return s
}

// SetRecords sets the Records field's value.
func (s *ListApplicationInstanceOutput) SetRecords(v []*interface{}) *ListApplicationInstanceOutput {
	s.Records = v
	return s
}

// SetSize sets the Size field's value.
func (s *ListApplicationInstanceOutput) SetSize(v int64) *ListApplicationInstanceOutput {
	s.Size = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListApplicationInstanceOutput) SetTotal(v int64) *ListApplicationInstanceOutput {
	s.Total = &v
	return s
}

const (
	// EnumOfEngineVersionForlistApplicationInstanceInputFlinkVersion111 is a EnumOfEngineVersionForlistApplicationInstanceInput enum value
	EnumOfEngineVersionForlistApplicationInstanceInputFlinkVersion111 = "FLINK_VERSION_1_11"

	// EnumOfEngineVersionForlistApplicationInstanceInputFlinkVersion112 is a EnumOfEngineVersionForlistApplicationInstanceInput enum value
	EnumOfEngineVersionForlistApplicationInstanceInputFlinkVersion112 = "FLINK_VERSION_1_12"

	// EnumOfEngineVersionForlistApplicationInstanceInputFlinkVersion116 is a EnumOfEngineVersionForlistApplicationInstanceInput enum value
	EnumOfEngineVersionForlistApplicationInstanceInputFlinkVersion116 = "FLINK_VERSION_1_16"

	// EnumOfEngineVersionForlistApplicationInstanceInputSparkVersion301Os is a EnumOfEngineVersionForlistApplicationInstanceInput enum value
	EnumOfEngineVersionForlistApplicationInstanceInputSparkVersion301Os = "SPARK_VERSION_3_0_1_OS"

	// EnumOfEngineVersionForlistApplicationInstanceInputSparkVersion322 is a EnumOfEngineVersionForlistApplicationInstanceInput enum value
	EnumOfEngineVersionForlistApplicationInstanceInputSparkVersion322 = "SPARK_VERSION_3_2_2"

	// EnumOfEngineVersionForlistApplicationInstanceInputRayVersion113 is a EnumOfEngineVersionForlistApplicationInstanceInput enum value
	EnumOfEngineVersionForlistApplicationInstanceInputRayVersion113 = "RAY_VERSION_1_13"

	// EnumOfEngineVersionForlistApplicationInstanceInputPrimusVersion113 is a EnumOfEngineVersionForlistApplicationInstanceInput enum value
	EnumOfEngineVersionForlistApplicationInstanceInputPrimusVersion113 = "PRIMUS_VERSION_1_13"

	// EnumOfEngineVersionForlistApplicationInstanceInputUnknown is a EnumOfEngineVersionForlistApplicationInstanceInput enum value
	EnumOfEngineVersionForlistApplicationInstanceInputUnknown = "UNKNOWN"
)

const (
	// EnumOfStateForlistApplicationInstanceInputDeployed is a EnumOfStateForlistApplicationInstanceInput enum value
	EnumOfStateForlistApplicationInstanceInputDeployed = "DEPLOYED"

	// EnumOfStateForlistApplicationInstanceInputCreated is a EnumOfStateForlistApplicationInstanceInput enum value
	EnumOfStateForlistApplicationInstanceInputCreated = "CREATED"

	// EnumOfStateForlistApplicationInstanceInputStarting is a EnumOfStateForlistApplicationInstanceInput enum value
	EnumOfStateForlistApplicationInstanceInputStarting = "STARTING"

	// EnumOfStateForlistApplicationInstanceInputRunning is a EnumOfStateForlistApplicationInstanceInput enum value
	EnumOfStateForlistApplicationInstanceInputRunning = "RUNNING"

	// EnumOfStateForlistApplicationInstanceInputFailed is a EnumOfStateForlistApplicationInstanceInput enum value
	EnumOfStateForlistApplicationInstanceInputFailed = "FAILED"

	// EnumOfStateForlistApplicationInstanceInputCancelling is a EnumOfStateForlistApplicationInstanceInput enum value
	EnumOfStateForlistApplicationInstanceInputCancelling = "CANCELLING"

	// EnumOfStateForlistApplicationInstanceInputSucceeded is a EnumOfStateForlistApplicationInstanceInput enum value
	EnumOfStateForlistApplicationInstanceInputSucceeded = "SUCCEEDED"

	// EnumOfStateForlistApplicationInstanceInputStopped is a EnumOfStateForlistApplicationInstanceInput enum value
	EnumOfStateForlistApplicationInstanceInputStopped = "STOPPED"

	// EnumOfStateForlistApplicationInstanceInputUnknown is a EnumOfStateForlistApplicationInstanceInput enum value
	EnumOfStateForlistApplicationInstanceInputUnknown = "UNKNOWN"
)
