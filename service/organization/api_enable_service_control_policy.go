// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package organization

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEnableServiceControlPolicyCommon = "EnableServiceControlPolicy"

// EnableServiceControlPolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableServiceControlPolicyCommon operation. The "output" return
// value will be populated with the EnableServiceControlPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableServiceControlPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableServiceControlPolicyCommon Send returns without error.
//
// See EnableServiceControlPolicyCommon for more information on using the EnableServiceControlPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableServiceControlPolicyCommonRequest method.
//    req, resp := client.EnableServiceControlPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) EnableServiceControlPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableServiceControlPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableServiceControlPolicyCommon API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation EnableServiceControlPolicyCommon for usage and error information.
func (c *ORGANIZATION) EnableServiceControlPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableServiceControlPolicyCommonRequest(input)
	return out, req.Send()
}

// EnableServiceControlPolicyCommonWithContext is the same as EnableServiceControlPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableServiceControlPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) EnableServiceControlPolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableServiceControlPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableServiceControlPolicy = "EnableServiceControlPolicy"

// EnableServiceControlPolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableServiceControlPolicy operation. The "output" return
// value will be populated with the EnableServiceControlPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableServiceControlPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableServiceControlPolicyCommon Send returns without error.
//
// See EnableServiceControlPolicy for more information on using the EnableServiceControlPolicy
// API call, and error handling.
//
//    // Example sending a request using the EnableServiceControlPolicyRequest method.
//    req, resp := client.EnableServiceControlPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) EnableServiceControlPolicyRequest(input *EnableServiceControlPolicyInput) (req *request.Request, output *EnableServiceControlPolicyOutput) {
	op := &request.Operation{
		Name:       opEnableServiceControlPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableServiceControlPolicyInput{}
	}

	output = &EnableServiceControlPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableServiceControlPolicy API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation EnableServiceControlPolicy for usage and error information.
func (c *ORGANIZATION) EnableServiceControlPolicy(input *EnableServiceControlPolicyInput) (*EnableServiceControlPolicyOutput, error) {
	req, out := c.EnableServiceControlPolicyRequest(input)
	return out, req.Send()
}

// EnableServiceControlPolicyWithContext is the same as EnableServiceControlPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See EnableServiceControlPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) EnableServiceControlPolicyWithContext(ctx volcengine.Context, input *EnableServiceControlPolicyInput, opts ...request.Option) (*EnableServiceControlPolicyOutput, error) {
	req, out := c.EnableServiceControlPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnableServiceControlPolicyInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EnableServiceControlPolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableServiceControlPolicyInput) GoString() string {
	return s.String()
}

type EnableServiceControlPolicyOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Status *string `type:"string"`
}

// String returns the string representation
func (s EnableServiceControlPolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableServiceControlPolicyOutput) GoString() string {
	return s.String()
}

// SetStatus sets the Status field's value.
func (s *EnableServiceControlPolicyOutput) SetStatus(v string) *EnableServiceControlPolicyOutput {
	s.Status = &v
	return s
}
