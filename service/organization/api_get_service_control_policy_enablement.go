// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package organization

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetServiceControlPolicyEnablementCommon = "GetServiceControlPolicyEnablement"

// GetServiceControlPolicyEnablementCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetServiceControlPolicyEnablementCommon operation. The "output" return
// value will be populated with the GetServiceControlPolicyEnablementCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetServiceControlPolicyEnablementCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetServiceControlPolicyEnablementCommon Send returns without error.
//
// See GetServiceControlPolicyEnablementCommon for more information on using the GetServiceControlPolicyEnablementCommon
// API call, and error handling.
//
//    // Example sending a request using the GetServiceControlPolicyEnablementCommonRequest method.
//    req, resp := client.GetServiceControlPolicyEnablementCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) GetServiceControlPolicyEnablementCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetServiceControlPolicyEnablementCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetServiceControlPolicyEnablementCommon API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation GetServiceControlPolicyEnablementCommon for usage and error information.
func (c *ORGANIZATION) GetServiceControlPolicyEnablementCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetServiceControlPolicyEnablementCommonRequest(input)
	return out, req.Send()
}

// GetServiceControlPolicyEnablementCommonWithContext is the same as GetServiceControlPolicyEnablementCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetServiceControlPolicyEnablementCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) GetServiceControlPolicyEnablementCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetServiceControlPolicyEnablementCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetServiceControlPolicyEnablement = "GetServiceControlPolicyEnablement"

// GetServiceControlPolicyEnablementRequest generates a "volcengine/request.Request" representing the
// client's request for the GetServiceControlPolicyEnablement operation. The "output" return
// value will be populated with the GetServiceControlPolicyEnablementCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetServiceControlPolicyEnablementCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetServiceControlPolicyEnablementCommon Send returns without error.
//
// See GetServiceControlPolicyEnablement for more information on using the GetServiceControlPolicyEnablement
// API call, and error handling.
//
//    // Example sending a request using the GetServiceControlPolicyEnablementRequest method.
//    req, resp := client.GetServiceControlPolicyEnablementRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) GetServiceControlPolicyEnablementRequest(input *GetServiceControlPolicyEnablementInput) (req *request.Request, output *GetServiceControlPolicyEnablementOutput) {
	op := &request.Operation{
		Name:       opGetServiceControlPolicyEnablement,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetServiceControlPolicyEnablementInput{}
	}

	output = &GetServiceControlPolicyEnablementOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetServiceControlPolicyEnablement API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation GetServiceControlPolicyEnablement for usage and error information.
func (c *ORGANIZATION) GetServiceControlPolicyEnablement(input *GetServiceControlPolicyEnablementInput) (*GetServiceControlPolicyEnablementOutput, error) {
	req, out := c.GetServiceControlPolicyEnablementRequest(input)
	return out, req.Send()
}

// GetServiceControlPolicyEnablementWithContext is the same as GetServiceControlPolicyEnablement with the addition of
// the ability to pass a context and additional request options.
//
// See GetServiceControlPolicyEnablement for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) GetServiceControlPolicyEnablementWithContext(ctx volcengine.Context, input *GetServiceControlPolicyEnablementInput, opts ...request.Option) (*GetServiceControlPolicyEnablementOutput, error) {
	req, out := c.GetServiceControlPolicyEnablementRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetServiceControlPolicyEnablementInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s GetServiceControlPolicyEnablementInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetServiceControlPolicyEnablementInput) GoString() string {
	return s.String()
}

type GetServiceControlPolicyEnablementOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	CanFullAccessDetach *bool `type:"boolean"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s GetServiceControlPolicyEnablementOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetServiceControlPolicyEnablementOutput) GoString() string {
	return s.String()
}

// SetCanFullAccessDetach sets the CanFullAccessDetach field's value.
func (s *GetServiceControlPolicyEnablementOutput) SetCanFullAccessDetach(v bool) *GetServiceControlPolicyEnablementOutput {
	s.CanFullAccessDetach = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *GetServiceControlPolicyEnablementOutput) SetStatus(v string) *GetServiceControlPolicyEnablementOutput {
	s.Status = &v
	return s
}
