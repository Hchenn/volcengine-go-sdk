// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package organization

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListPoliciesForTargetCommon = "ListPoliciesForTarget"

// ListPoliciesForTargetCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListPoliciesForTargetCommon operation. The "output" return
// value will be populated with the ListPoliciesForTargetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListPoliciesForTargetCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListPoliciesForTargetCommon Send returns without error.
//
// See ListPoliciesForTargetCommon for more information on using the ListPoliciesForTargetCommon
// API call, and error handling.
//
//    // Example sending a request using the ListPoliciesForTargetCommonRequest method.
//    req, resp := client.ListPoliciesForTargetCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) ListPoliciesForTargetCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListPoliciesForTargetCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListPoliciesForTargetCommon API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation ListPoliciesForTargetCommon for usage and error information.
func (c *ORGANIZATION) ListPoliciesForTargetCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListPoliciesForTargetCommonRequest(input)
	return out, req.Send()
}

// ListPoliciesForTargetCommonWithContext is the same as ListPoliciesForTargetCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListPoliciesForTargetCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) ListPoliciesForTargetCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListPoliciesForTargetCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListPoliciesForTarget = "ListPoliciesForTarget"

// ListPoliciesForTargetRequest generates a "volcengine/request.Request" representing the
// client's request for the ListPoliciesForTarget operation. The "output" return
// value will be populated with the ListPoliciesForTargetCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListPoliciesForTargetCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListPoliciesForTargetCommon Send returns without error.
//
// See ListPoliciesForTarget for more information on using the ListPoliciesForTarget
// API call, and error handling.
//
//    // Example sending a request using the ListPoliciesForTargetRequest method.
//    req, resp := client.ListPoliciesForTargetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) ListPoliciesForTargetRequest(input *ListPoliciesForTargetInput) (req *request.Request, output *ListPoliciesForTargetOutput) {
	op := &request.Operation{
		Name:       opListPoliciesForTarget,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListPoliciesForTargetInput{}
	}

	output = &ListPoliciesForTargetOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListPoliciesForTarget API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation ListPoliciesForTarget for usage and error information.
func (c *ORGANIZATION) ListPoliciesForTarget(input *ListPoliciesForTargetInput) (*ListPoliciesForTargetOutput, error) {
	req, out := c.ListPoliciesForTargetRequest(input)
	return out, req.Send()
}

// ListPoliciesForTargetWithContext is the same as ListPoliciesForTarget with the addition of
// the ability to pass a context and additional request options.
//
// See ListPoliciesForTarget for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) ListPoliciesForTargetWithContext(ctx volcengine.Context, input *ListPoliciesForTargetInput, opts ...request.Option) (*ListPoliciesForTargetOutput, error) {
	req, out := c.ListPoliciesForTargetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListPoliciesForTargetInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Limit *int32 `type:"int32" json:",omitempty"`

	Offset *int32 `type:"int32" json:",omitempty"`

	// TargetID is a required field
	TargetID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListPoliciesForTargetInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListPoliciesForTargetInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListPoliciesForTargetInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListPoliciesForTargetInput"}
	if s.TargetID == nil {
		invalidParams.Add(request.NewErrParamRequired("TargetID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLimit sets the Limit field's value.
func (s *ListPoliciesForTargetInput) SetLimit(v int32) *ListPoliciesForTargetInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListPoliciesForTargetInput) SetOffset(v int32) *ListPoliciesForTargetInput {
	s.Offset = &v
	return s
}

// SetTargetID sets the TargetID field's value.
func (s *ListPoliciesForTargetInput) SetTargetID(v string) *ListPoliciesForTargetInput {
	s.TargetID = &v
	return s
}

type ListPoliciesForTargetOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Limit *int32 `type:"int32" json:",omitempty"`

	Offset *int32 `type:"int32" json:",omitempty"`

	Policies []*PolicyForListPoliciesForTargetOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListPoliciesForTargetOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListPoliciesForTargetOutput) GoString() string {
	return s.String()
}

// SetLimit sets the Limit field's value.
func (s *ListPoliciesForTargetOutput) SetLimit(v int32) *ListPoliciesForTargetOutput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListPoliciesForTargetOutput) SetOffset(v int32) *ListPoliciesForTargetOutput {
	s.Offset = &v
	return s
}

// SetPolicies sets the Policies field's value.
func (s *ListPoliciesForTargetOutput) SetPolicies(v []*PolicyForListPoliciesForTargetOutput) *ListPoliciesForTargetOutput {
	s.Policies = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListPoliciesForTargetOutput) SetTotal(v int32) *ListPoliciesForTargetOutput {
	s.Total = &v
	return s
}

type PolicyForListPoliciesForTargetOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AttachedTime *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	PolicyID *string `type:"string" json:",omitempty"`

	PolicyName *string `type:"string" json:",omitempty"`

	PolicyType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PolicyForListPoliciesForTargetOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PolicyForListPoliciesForTargetOutput) GoString() string {
	return s.String()
}

// SetAttachedTime sets the AttachedTime field's value.
func (s *PolicyForListPoliciesForTargetOutput) SetAttachedTime(v string) *PolicyForListPoliciesForTargetOutput {
	s.AttachedTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *PolicyForListPoliciesForTargetOutput) SetDescription(v string) *PolicyForListPoliciesForTargetOutput {
	s.Description = &v
	return s
}

// SetPolicyID sets the PolicyID field's value.
func (s *PolicyForListPoliciesForTargetOutput) SetPolicyID(v string) *PolicyForListPoliciesForTargetOutput {
	s.PolicyID = &v
	return s
}

// SetPolicyName sets the PolicyName field's value.
func (s *PolicyForListPoliciesForTargetOutput) SetPolicyName(v string) *PolicyForListPoliciesForTargetOutput {
	s.PolicyName = &v
	return s
}

// SetPolicyType sets the PolicyType field's value.
func (s *PolicyForListPoliciesForTargetOutput) SetPolicyType(v string) *PolicyForListPoliciesForTargetOutput {
	s.PolicyType = &v
	return s
}
