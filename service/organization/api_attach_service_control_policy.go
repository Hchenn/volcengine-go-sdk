// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package organization

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAttachServiceControlPolicyCommon = "AttachServiceControlPolicy"

// AttachServiceControlPolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AttachServiceControlPolicyCommon operation. The "output" return
// value will be populated with the AttachServiceControlPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachServiceControlPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachServiceControlPolicyCommon Send returns without error.
//
// See AttachServiceControlPolicyCommon for more information on using the AttachServiceControlPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the AttachServiceControlPolicyCommonRequest method.
//    req, resp := client.AttachServiceControlPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) AttachServiceControlPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAttachServiceControlPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AttachServiceControlPolicyCommon API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation AttachServiceControlPolicyCommon for usage and error information.
func (c *ORGANIZATION) AttachServiceControlPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AttachServiceControlPolicyCommonRequest(input)
	return out, req.Send()
}

// AttachServiceControlPolicyCommonWithContext is the same as AttachServiceControlPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AttachServiceControlPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) AttachServiceControlPolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AttachServiceControlPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAttachServiceControlPolicy = "AttachServiceControlPolicy"

// AttachServiceControlPolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the AttachServiceControlPolicy operation. The "output" return
// value will be populated with the AttachServiceControlPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachServiceControlPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachServiceControlPolicyCommon Send returns without error.
//
// See AttachServiceControlPolicy for more information on using the AttachServiceControlPolicy
// API call, and error handling.
//
//    // Example sending a request using the AttachServiceControlPolicyRequest method.
//    req, resp := client.AttachServiceControlPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) AttachServiceControlPolicyRequest(input *AttachServiceControlPolicyInput) (req *request.Request, output *AttachServiceControlPolicyOutput) {
	op := &request.Operation{
		Name:       opAttachServiceControlPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AttachServiceControlPolicyInput{}
	}

	output = &AttachServiceControlPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AttachServiceControlPolicy API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation AttachServiceControlPolicy for usage and error information.
func (c *ORGANIZATION) AttachServiceControlPolicy(input *AttachServiceControlPolicyInput) (*AttachServiceControlPolicyOutput, error) {
	req, out := c.AttachServiceControlPolicyRequest(input)
	return out, req.Send()
}

// AttachServiceControlPolicyWithContext is the same as AttachServiceControlPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See AttachServiceControlPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) AttachServiceControlPolicyWithContext(ctx volcengine.Context, input *AttachServiceControlPolicyInput, opts ...request.Option) (*AttachServiceControlPolicyOutput, error) {
	req, out := c.AttachServiceControlPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AttachServiceControlPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// PolicyID is a required field
	PolicyID *string `type:"string" json:",omitempty" required:"true"`

	// TargetID is a required field
	TargetID *string `type:"string" json:",omitempty" required:"true"`

	// TargetType is a required field
	TargetType *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s AttachServiceControlPolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachServiceControlPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AttachServiceControlPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AttachServiceControlPolicyInput"}
	if s.PolicyID == nil {
		invalidParams.Add(request.NewErrParamRequired("PolicyID"))
	}
	if s.TargetID == nil {
		invalidParams.Add(request.NewErrParamRequired("TargetID"))
	}
	if s.TargetType == nil {
		invalidParams.Add(request.NewErrParamRequired("TargetType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPolicyID sets the PolicyID field's value.
func (s *AttachServiceControlPolicyInput) SetPolicyID(v string) *AttachServiceControlPolicyInput {
	s.PolicyID = &v
	return s
}

// SetTargetID sets the TargetID field's value.
func (s *AttachServiceControlPolicyInput) SetTargetID(v string) *AttachServiceControlPolicyInput {
	s.TargetID = &v
	return s
}

// SetTargetType sets the TargetType field's value.
func (s *AttachServiceControlPolicyInput) SetTargetType(v int32) *AttachServiceControlPolicyInput {
	s.TargetType = &v
	return s
}

type AttachServiceControlPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AttachServiceControlPolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachServiceControlPolicyOutput) GoString() string {
	return s.String()
}
