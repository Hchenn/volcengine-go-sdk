// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package organization

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAcceptInvitationCommon = "AcceptInvitation"

// AcceptInvitationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AcceptInvitationCommon operation. The "output" return
// value will be populated with the AcceptInvitationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AcceptInvitationCommon Request to send the API call to the service.
// the "output" return value is not valid until after AcceptInvitationCommon Send returns without error.
//
// See AcceptInvitationCommon for more information on using the AcceptInvitationCommon
// API call, and error handling.
//
//    // Example sending a request using the AcceptInvitationCommonRequest method.
//    req, resp := client.AcceptInvitationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) AcceptInvitationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAcceptInvitationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AcceptInvitationCommon API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation AcceptInvitationCommon for usage and error information.
func (c *ORGANIZATION) AcceptInvitationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AcceptInvitationCommonRequest(input)
	return out, req.Send()
}

// AcceptInvitationCommonWithContext is the same as AcceptInvitationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AcceptInvitationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) AcceptInvitationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AcceptInvitationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAcceptInvitation = "AcceptInvitation"

// AcceptInvitationRequest generates a "volcengine/request.Request" representing the
// client's request for the AcceptInvitation operation. The "output" return
// value will be populated with the AcceptInvitationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AcceptInvitationCommon Request to send the API call to the service.
// the "output" return value is not valid until after AcceptInvitationCommon Send returns without error.
//
// See AcceptInvitation for more information on using the AcceptInvitation
// API call, and error handling.
//
//    // Example sending a request using the AcceptInvitationRequest method.
//    req, resp := client.AcceptInvitationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) AcceptInvitationRequest(input *AcceptInvitationInput) (req *request.Request, output *AcceptInvitationOutput) {
	op := &request.Operation{
		Name:       opAcceptInvitation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AcceptInvitationInput{}
	}

	output = &AcceptInvitationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AcceptInvitation API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation AcceptInvitation for usage and error information.
func (c *ORGANIZATION) AcceptInvitation(input *AcceptInvitationInput) (*AcceptInvitationOutput, error) {
	req, out := c.AcceptInvitationRequest(input)
	return out, req.Send()
}

// AcceptInvitationWithContext is the same as AcceptInvitation with the addition of
// the ability to pass a context and additional request options.
//
// See AcceptInvitation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) AcceptInvitationWithContext(ctx volcengine.Context, input *AcceptInvitationInput, opts ...request.Option) (*AcceptInvitationOutput, error) {
	req, out := c.AcceptInvitationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AcceptInvitationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InviteId is a required field
	InviteId *string `type:"string" json:",omitempty" required:"true"`

	// LinkId is a required field
	LinkId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s AcceptInvitationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AcceptInvitationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AcceptInvitationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AcceptInvitationInput"}
	if s.InviteId == nil {
		invalidParams.Add(request.NewErrParamRequired("InviteId"))
	}
	if s.LinkId == nil {
		invalidParams.Add(request.NewErrParamRequired("LinkId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInviteId sets the InviteId field's value.
func (s *AcceptInvitationInput) SetInviteId(v string) *AcceptInvitationInput {
	s.InviteId = &v
	return s
}

// SetLinkId sets the LinkId field's value.
func (s *AcceptInvitationInput) SetLinkId(v string) *AcceptInvitationInput {
	s.LinkId = &v
	return s
}

type AcceptInvitationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AcceptInvitationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AcceptInvitationOutput) GoString() string {
	return s.String()
}
