// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package organization

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateServiceControlPolicyCommon = "UpdateServiceControlPolicy"

// UpdateServiceControlPolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateServiceControlPolicyCommon operation. The "output" return
// value will be populated with the UpdateServiceControlPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateServiceControlPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateServiceControlPolicyCommon Send returns without error.
//
// See UpdateServiceControlPolicyCommon for more information on using the UpdateServiceControlPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateServiceControlPolicyCommonRequest method.
//    req, resp := client.UpdateServiceControlPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) UpdateServiceControlPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateServiceControlPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateServiceControlPolicyCommon API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation UpdateServiceControlPolicyCommon for usage and error information.
func (c *ORGANIZATION) UpdateServiceControlPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateServiceControlPolicyCommonRequest(input)
	return out, req.Send()
}

// UpdateServiceControlPolicyCommonWithContext is the same as UpdateServiceControlPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateServiceControlPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) UpdateServiceControlPolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateServiceControlPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateServiceControlPolicy = "UpdateServiceControlPolicy"

// UpdateServiceControlPolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateServiceControlPolicy operation. The "output" return
// value will be populated with the UpdateServiceControlPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateServiceControlPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateServiceControlPolicyCommon Send returns without error.
//
// See UpdateServiceControlPolicy for more information on using the UpdateServiceControlPolicy
// API call, and error handling.
//
//    // Example sending a request using the UpdateServiceControlPolicyRequest method.
//    req, resp := client.UpdateServiceControlPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) UpdateServiceControlPolicyRequest(input *UpdateServiceControlPolicyInput) (req *request.Request, output *UpdateServiceControlPolicyOutput) {
	op := &request.Operation{
		Name:       opUpdateServiceControlPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateServiceControlPolicyInput{}
	}

	output = &UpdateServiceControlPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateServiceControlPolicy API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation UpdateServiceControlPolicy for usage and error information.
func (c *ORGANIZATION) UpdateServiceControlPolicy(input *UpdateServiceControlPolicyInput) (*UpdateServiceControlPolicyOutput, error) {
	req, out := c.UpdateServiceControlPolicyRequest(input)
	return out, req.Send()
}

// UpdateServiceControlPolicyWithContext is the same as UpdateServiceControlPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateServiceControlPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) UpdateServiceControlPolicyWithContext(ctx volcengine.Context, input *UpdateServiceControlPolicyInput, opts ...request.Option) (*UpdateServiceControlPolicyOutput, error) {
	req, out := c.UpdateServiceControlPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateServiceControlPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// PolicyID is a required field
	PolicyID *string `type:"string" json:",omitempty" required:"true"`

	// PolicyName is a required field
	PolicyName *string `type:"string" json:",omitempty" required:"true"`

	// Statement is a required field
	Statement *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateServiceControlPolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateServiceControlPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateServiceControlPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateServiceControlPolicyInput"}
	if s.PolicyID == nil {
		invalidParams.Add(request.NewErrParamRequired("PolicyID"))
	}
	if s.PolicyName == nil {
		invalidParams.Add(request.NewErrParamRequired("PolicyName"))
	}
	if s.Statement == nil {
		invalidParams.Add(request.NewErrParamRequired("Statement"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *UpdateServiceControlPolicyInput) SetDescription(v string) *UpdateServiceControlPolicyInput {
	s.Description = &v
	return s
}

// SetPolicyID sets the PolicyID field's value.
func (s *UpdateServiceControlPolicyInput) SetPolicyID(v string) *UpdateServiceControlPolicyInput {
	s.PolicyID = &v
	return s
}

// SetPolicyName sets the PolicyName field's value.
func (s *UpdateServiceControlPolicyInput) SetPolicyName(v string) *UpdateServiceControlPolicyInput {
	s.PolicyName = &v
	return s
}

// SetStatement sets the Statement field's value.
func (s *UpdateServiceControlPolicyInput) SetStatement(v string) *UpdateServiceControlPolicyInput {
	s.Statement = &v
	return s
}

type UpdateServiceControlPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CreateDate *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	PolicyID *string `type:"string" json:",omitempty"`

	PolicyName *string `type:"string" json:",omitempty"`

	PolicyType *string `type:"string" json:",omitempty"`

	Statement *string `type:"string" json:",omitempty"`

	UpdateDate *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateServiceControlPolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateServiceControlPolicyOutput) GoString() string {
	return s.String()
}

// SetCreateDate sets the CreateDate field's value.
func (s *UpdateServiceControlPolicyOutput) SetCreateDate(v string) *UpdateServiceControlPolicyOutput {
	s.CreateDate = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *UpdateServiceControlPolicyOutput) SetDescription(v string) *UpdateServiceControlPolicyOutput {
	s.Description = &v
	return s
}

// SetPolicyID sets the PolicyID field's value.
func (s *UpdateServiceControlPolicyOutput) SetPolicyID(v string) *UpdateServiceControlPolicyOutput {
	s.PolicyID = &v
	return s
}

// SetPolicyName sets the PolicyName field's value.
func (s *UpdateServiceControlPolicyOutput) SetPolicyName(v string) *UpdateServiceControlPolicyOutput {
	s.PolicyName = &v
	return s
}

// SetPolicyType sets the PolicyType field's value.
func (s *UpdateServiceControlPolicyOutput) SetPolicyType(v string) *UpdateServiceControlPolicyOutput {
	s.PolicyType = &v
	return s
}

// SetStatement sets the Statement field's value.
func (s *UpdateServiceControlPolicyOutput) SetStatement(v string) *UpdateServiceControlPolicyOutput {
	s.Statement = &v
	return s
}

// SetUpdateDate sets the UpdateDate field's value.
func (s *UpdateServiceControlPolicyOutput) SetUpdateDate(v string) *UpdateServiceControlPolicyOutput {
	s.UpdateDate = &v
	return s
}
