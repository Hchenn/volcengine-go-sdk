// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package organization

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRejectInvitationCommon = "RejectInvitation"

// RejectInvitationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RejectInvitationCommon operation. The "output" return
// value will be populated with the RejectInvitationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RejectInvitationCommon Request to send the API call to the service.
// the "output" return value is not valid until after RejectInvitationCommon Send returns without error.
//
// See RejectInvitationCommon for more information on using the RejectInvitationCommon
// API call, and error handling.
//
//    // Example sending a request using the RejectInvitationCommonRequest method.
//    req, resp := client.RejectInvitationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) RejectInvitationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRejectInvitationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RejectInvitationCommon API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation RejectInvitationCommon for usage and error information.
func (c *ORGANIZATION) RejectInvitationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RejectInvitationCommonRequest(input)
	return out, req.Send()
}

// RejectInvitationCommonWithContext is the same as RejectInvitationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RejectInvitationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) RejectInvitationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RejectInvitationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRejectInvitation = "RejectInvitation"

// RejectInvitationRequest generates a "volcengine/request.Request" representing the
// client's request for the RejectInvitation operation. The "output" return
// value will be populated with the RejectInvitationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RejectInvitationCommon Request to send the API call to the service.
// the "output" return value is not valid until after RejectInvitationCommon Send returns without error.
//
// See RejectInvitation for more information on using the RejectInvitation
// API call, and error handling.
//
//    // Example sending a request using the RejectInvitationRequest method.
//    req, resp := client.RejectInvitationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ORGANIZATION) RejectInvitationRequest(input *RejectInvitationInput) (req *request.Request, output *RejectInvitationOutput) {
	op := &request.Operation{
		Name:       opRejectInvitation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RejectInvitationInput{}
	}

	output = &RejectInvitationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RejectInvitation API operation for ORGANIZATION.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ORGANIZATION's
// API operation RejectInvitation for usage and error information.
func (c *ORGANIZATION) RejectInvitation(input *RejectInvitationInput) (*RejectInvitationOutput, error) {
	req, out := c.RejectInvitationRequest(input)
	return out, req.Send()
}

// RejectInvitationWithContext is the same as RejectInvitation with the addition of
// the ability to pass a context and additional request options.
//
// See RejectInvitation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ORGANIZATION) RejectInvitationWithContext(ctx volcengine.Context, input *RejectInvitationInput, opts ...request.Option) (*RejectInvitationOutput, error) {
	req, out := c.RejectInvitationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RejectInvitationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InviteId is a required field
	InviteId *string `type:"string" json:",omitempty" required:"true"`

	// LinkId is a required field
	LinkId *string `type:"string" json:",omitempty" required:"true"`

	Reason *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RejectInvitationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RejectInvitationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RejectInvitationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RejectInvitationInput"}
	if s.InviteId == nil {
		invalidParams.Add(request.NewErrParamRequired("InviteId"))
	}
	if s.LinkId == nil {
		invalidParams.Add(request.NewErrParamRequired("LinkId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInviteId sets the InviteId field's value.
func (s *RejectInvitationInput) SetInviteId(v string) *RejectInvitationInput {
	s.InviteId = &v
	return s
}

// SetLinkId sets the LinkId field's value.
func (s *RejectInvitationInput) SetLinkId(v string) *RejectInvitationInput {
	s.LinkId = &v
	return s
}

// SetReason sets the Reason field's value.
func (s *RejectInvitationInput) SetReason(v string) *RejectInvitationInput {
	s.Reason = &v
	return s
}

type RejectInvitationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s RejectInvitationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RejectInvitationOutput) GoString() string {
	return s.String()
}
