// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRefreshFingerprintDataCommon = "RefreshFingerprintData"

// RefreshFingerprintDataCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RefreshFingerprintDataCommon operation. The "output" return
// value will be populated with the RefreshFingerprintDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RefreshFingerprintDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after RefreshFingerprintDataCommon Send returns without error.
//
// See RefreshFingerprintDataCommon for more information on using the RefreshFingerprintDataCommon
// API call, and error handling.
//
//    // Example sending a request using the RefreshFingerprintDataCommonRequest method.
//    req, resp := client.RefreshFingerprintDataCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) RefreshFingerprintDataCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRefreshFingerprintDataCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RefreshFingerprintDataCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation RefreshFingerprintDataCommon for usage and error information.
func (c *SECCENTER20240508) RefreshFingerprintDataCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RefreshFingerprintDataCommonRequest(input)
	return out, req.Send()
}

// RefreshFingerprintDataCommonWithContext is the same as RefreshFingerprintDataCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RefreshFingerprintDataCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) RefreshFingerprintDataCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RefreshFingerprintDataCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRefreshFingerprintData = "RefreshFingerprintData"

// RefreshFingerprintDataRequest generates a "volcengine/request.Request" representing the
// client's request for the RefreshFingerprintData operation. The "output" return
// value will be populated with the RefreshFingerprintDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RefreshFingerprintDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after RefreshFingerprintDataCommon Send returns without error.
//
// See RefreshFingerprintData for more information on using the RefreshFingerprintData
// API call, and error handling.
//
//    // Example sending a request using the RefreshFingerprintDataRequest method.
//    req, resp := client.RefreshFingerprintDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) RefreshFingerprintDataRequest(input *RefreshFingerprintDataInput) (req *request.Request, output *RefreshFingerprintDataOutput) {
	op := &request.Operation{
		Name:       opRefreshFingerprintData,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RefreshFingerprintDataInput{}
	}

	output = &RefreshFingerprintDataOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RefreshFingerprintData API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation RefreshFingerprintData for usage and error information.
func (c *SECCENTER20240508) RefreshFingerprintData(input *RefreshFingerprintDataInput) (*RefreshFingerprintDataOutput, error) {
	req, out := c.RefreshFingerprintDataRequest(input)
	return out, req.Send()
}

// RefreshFingerprintDataWithContext is the same as RefreshFingerprintData with the addition of
// the ability to pass a context and additional request options.
//
// See RefreshFingerprintData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) RefreshFingerprintDataWithContext(ctx volcengine.Context, input *RefreshFingerprintDataInput, opts ...request.Option) (*RefreshFingerprintDataOutput, error) {
	req, out := c.RefreshFingerprintDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConditionsForRefreshFingerprintDataInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentIDList []*string `type:"list" json:",omitempty"`

	IfAllHost *bool `type:"boolean" json:",omitempty"`

	LeafGroupIDs []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ConditionsForRefreshFingerprintDataInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConditionsForRefreshFingerprintDataInput) GoString() string {
	return s.String()
}

// SetAgentIDList sets the AgentIDList field's value.
func (s *ConditionsForRefreshFingerprintDataInput) SetAgentIDList(v []*string) *ConditionsForRefreshFingerprintDataInput {
	s.AgentIDList = v
	return s
}

// SetIfAllHost sets the IfAllHost field's value.
func (s *ConditionsForRefreshFingerprintDataInput) SetIfAllHost(v bool) *ConditionsForRefreshFingerprintDataInput {
	s.IfAllHost = &v
	return s
}

// SetLeafGroupIDs sets the LeafGroupIDs field's value.
func (s *ConditionsForRefreshFingerprintDataInput) SetLeafGroupIDs(v []*string) *ConditionsForRefreshFingerprintDataInput {
	s.LeafGroupIDs = v
	return s
}

type RefreshFingerprintDataInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Conditions *ConditionsForRefreshFingerprintDataInput `type:"structure" json:",omitempty"`

	// FingerprintType is a required field
	FingerprintType *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s RefreshFingerprintDataInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RefreshFingerprintDataInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RefreshFingerprintDataInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RefreshFingerprintDataInput"}
	if s.FingerprintType == nil {
		invalidParams.Add(request.NewErrParamRequired("FingerprintType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConditions sets the Conditions field's value.
func (s *RefreshFingerprintDataInput) SetConditions(v *ConditionsForRefreshFingerprintDataInput) *RefreshFingerprintDataInput {
	s.Conditions = v
	return s
}

// SetFingerprintType sets the FingerprintType field's value.
func (s *RefreshFingerprintDataInput) SetFingerprintType(v string) *RefreshFingerprintDataInput {
	s.FingerprintType = &v
	return s
}

type RefreshFingerprintDataOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	List []*string `type:"list" json:",omitempty"`

	TaskID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RefreshFingerprintDataOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RefreshFingerprintDataOutput) GoString() string {
	return s.String()
}

// SetList sets the List field's value.
func (s *RefreshFingerprintDataOutput) SetList(v []*string) *RefreshFingerprintDataOutput {
	s.List = v
	return s
}

// SetTaskID sets the TaskID field's value.
func (s *RefreshFingerprintDataOutput) SetTaskID(v string) *RefreshFingerprintDataOutput {
	s.TaskID = &v
	return s
}
