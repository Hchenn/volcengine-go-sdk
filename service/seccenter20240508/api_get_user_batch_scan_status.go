// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetUserBatchScanStatusCommon = "GetUserBatchScanStatus"

// GetUserBatchScanStatusCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetUserBatchScanStatusCommon operation. The "output" return
// value will be populated with the GetUserBatchScanStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetUserBatchScanStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetUserBatchScanStatusCommon Send returns without error.
//
// See GetUserBatchScanStatusCommon for more information on using the GetUserBatchScanStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the GetUserBatchScanStatusCommonRequest method.
//    req, resp := client.GetUserBatchScanStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetUserBatchScanStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetUserBatchScanStatusCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetUserBatchScanStatusCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetUserBatchScanStatusCommon for usage and error information.
func (c *SECCENTER20240508) GetUserBatchScanStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetUserBatchScanStatusCommonRequest(input)
	return out, req.Send()
}

// GetUserBatchScanStatusCommonWithContext is the same as GetUserBatchScanStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetUserBatchScanStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetUserBatchScanStatusCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetUserBatchScanStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetUserBatchScanStatus = "GetUserBatchScanStatus"

// GetUserBatchScanStatusRequest generates a "volcengine/request.Request" representing the
// client's request for the GetUserBatchScanStatus operation. The "output" return
// value will be populated with the GetUserBatchScanStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetUserBatchScanStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetUserBatchScanStatusCommon Send returns without error.
//
// See GetUserBatchScanStatus for more information on using the GetUserBatchScanStatus
// API call, and error handling.
//
//    // Example sending a request using the GetUserBatchScanStatusRequest method.
//    req, resp := client.GetUserBatchScanStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetUserBatchScanStatusRequest(input *GetUserBatchScanStatusInput) (req *request.Request, output *GetUserBatchScanStatusOutput) {
	op := &request.Operation{
		Name:       opGetUserBatchScanStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetUserBatchScanStatusInput{}
	}

	output = &GetUserBatchScanStatusOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetUserBatchScanStatus API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetUserBatchScanStatus for usage and error information.
func (c *SECCENTER20240508) GetUserBatchScanStatus(input *GetUserBatchScanStatusInput) (*GetUserBatchScanStatusOutput, error) {
	req, out := c.GetUserBatchScanStatusRequest(input)
	return out, req.Send()
}

// GetUserBatchScanStatusWithContext is the same as GetUserBatchScanStatus with the addition of
// the ability to pass a context and additional request options.
//
// See GetUserBatchScanStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetUserBatchScanStatusWithContext(ctx volcengine.Context, input *GetUserBatchScanStatusInput, opts ...request.Option) (*GetUserBatchScanStatusOutput, error) {
	req, out := c.GetUserBatchScanStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForGetUserBatchScanStatusOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	FinishTime *int32 `type:"int32" json:",omitempty"`

	ID *string `type:"string" json:",omitempty"`

	Process *int32 `type:"int32" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForGetUserBatchScanStatusOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForGetUserBatchScanStatusOutput) GoString() string {
	return s.String()
}

// SetFinishTime sets the FinishTime field's value.
func (s *DataForGetUserBatchScanStatusOutput) SetFinishTime(v int32) *DataForGetUserBatchScanStatusOutput {
	s.FinishTime = &v
	return s
}

// SetID sets the ID field's value.
func (s *DataForGetUserBatchScanStatusOutput) SetID(v string) *DataForGetUserBatchScanStatusOutput {
	s.ID = &v
	return s
}

// SetProcess sets the Process field's value.
func (s *DataForGetUserBatchScanStatusOutput) SetProcess(v int32) *DataForGetUserBatchScanStatusOutput {
	s.Process = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DataForGetUserBatchScanStatusOutput) SetStatus(v string) *DataForGetUserBatchScanStatusOutput {
	s.Status = &v
	return s
}

type GetUserBatchScanStatusInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AssetType is a required field
	AssetType *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetUserBatchScanStatusInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetUserBatchScanStatusInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetUserBatchScanStatusInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetUserBatchScanStatusInput"}
	if s.AssetType == nil {
		invalidParams.Add(request.NewErrParamRequired("AssetType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAssetType sets the AssetType field's value.
func (s *GetUserBatchScanStatusInput) SetAssetType(v string) *GetUserBatchScanStatusInput {
	s.AssetType = &v
	return s
}

type GetUserBatchScanStatusOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *DataForGetUserBatchScanStatusOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s GetUserBatchScanStatusOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetUserBatchScanStatusOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *GetUserBatchScanStatusOutput) SetData(v *DataForGetUserBatchScanStatusOutput) *GetUserBatchScanStatusOutput {
	s.Data = v
	return s
}
