// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListRegistryNamespaceIDsCommon = "ListRegistryNamespaceIDs"

// ListRegistryNamespaceIDsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRegistryNamespaceIDsCommon operation. The "output" return
// value will be populated with the ListRegistryNamespaceIDsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRegistryNamespaceIDsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRegistryNamespaceIDsCommon Send returns without error.
//
// See ListRegistryNamespaceIDsCommon for more information on using the ListRegistryNamespaceIDsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListRegistryNamespaceIDsCommonRequest method.
//    req, resp := client.ListRegistryNamespaceIDsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) ListRegistryNamespaceIDsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListRegistryNamespaceIDsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListRegistryNamespaceIDsCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation ListRegistryNamespaceIDsCommon for usage and error information.
func (c *SECCENTER20240508) ListRegistryNamespaceIDsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListRegistryNamespaceIDsCommonRequest(input)
	return out, req.Send()
}

// ListRegistryNamespaceIDsCommonWithContext is the same as ListRegistryNamespaceIDsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListRegistryNamespaceIDsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) ListRegistryNamespaceIDsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListRegistryNamespaceIDsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListRegistryNamespaceIDs = "ListRegistryNamespaceIDs"

// ListRegistryNamespaceIDsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListRegistryNamespaceIDs operation. The "output" return
// value will be populated with the ListRegistryNamespaceIDsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListRegistryNamespaceIDsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListRegistryNamespaceIDsCommon Send returns without error.
//
// See ListRegistryNamespaceIDs for more information on using the ListRegistryNamespaceIDs
// API call, and error handling.
//
//    // Example sending a request using the ListRegistryNamespaceIDsRequest method.
//    req, resp := client.ListRegistryNamespaceIDsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) ListRegistryNamespaceIDsRequest(input *ListRegistryNamespaceIDsInput) (req *request.Request, output *ListRegistryNamespaceIDsOutput) {
	op := &request.Operation{
		Name:       opListRegistryNamespaceIDs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListRegistryNamespaceIDsInput{}
	}

	output = &ListRegistryNamespaceIDsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListRegistryNamespaceIDs API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation ListRegistryNamespaceIDs for usage and error information.
func (c *SECCENTER20240508) ListRegistryNamespaceIDs(input *ListRegistryNamespaceIDsInput) (*ListRegistryNamespaceIDsOutput, error) {
	req, out := c.ListRegistryNamespaceIDsRequest(input)
	return out, req.Send()
}

// ListRegistryNamespaceIDsWithContext is the same as ListRegistryNamespaceIDs with the addition of
// the ability to pass a context and additional request options.
//
// See ListRegistryNamespaceIDs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) ListRegistryNamespaceIDsWithContext(ctx volcengine.Context, input *ListRegistryNamespaceIDsInput, opts ...request.Option) (*ListRegistryNamespaceIDsOutput, error) {
	req, out := c.ListRegistryNamespaceIDsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FilterForListRegistryNamespaceIDsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Namespace *string `type:"string" json:",omitempty"`

	NamespaceIDs []*string `type:"list" json:",omitempty"`

	RegistryName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FilterForListRegistryNamespaceIDsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForListRegistryNamespaceIDsInput) GoString() string {
	return s.String()
}

// SetNamespace sets the Namespace field's value.
func (s *FilterForListRegistryNamespaceIDsInput) SetNamespace(v string) *FilterForListRegistryNamespaceIDsInput {
	s.Namespace = &v
	return s
}

// SetNamespaceIDs sets the NamespaceIDs field's value.
func (s *FilterForListRegistryNamespaceIDsInput) SetNamespaceIDs(v []*string) *FilterForListRegistryNamespaceIDsInput {
	s.NamespaceIDs = v
	return s
}

// SetRegistryName sets the RegistryName field's value.
func (s *FilterForListRegistryNamespaceIDsInput) SetRegistryName(v string) *FilterForListRegistryNamespaceIDsInput {
	s.RegistryName = &v
	return s
}

type ListRegistryNamespaceIDsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filter *FilterForListRegistryNamespaceIDsInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ListRegistryNamespaceIDsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRegistryNamespaceIDsInput) GoString() string {
	return s.String()
}

// SetFilter sets the Filter field's value.
func (s *ListRegistryNamespaceIDsInput) SetFilter(v *FilterForListRegistryNamespaceIDsInput) *ListRegistryNamespaceIDsInput {
	s.Filter = v
	return s
}

type ListRegistryNamespaceIDsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListRegistryNamespaceIDsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListRegistryNamespaceIDsOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ListRegistryNamespaceIDsOutput) SetData(v []*string) *ListRegistryNamespaceIDsOutput {
	s.Data = v
	return s
}
