// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateMLPUpdateSoftwareTaskCommon = "CreateMLPUpdateSoftwareTask"

// CreateMLPUpdateSoftwareTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateMLPUpdateSoftwareTaskCommon operation. The "output" return
// value will be populated with the CreateMLPUpdateSoftwareTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateMLPUpdateSoftwareTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateMLPUpdateSoftwareTaskCommon Send returns without error.
//
// See CreateMLPUpdateSoftwareTaskCommon for more information on using the CreateMLPUpdateSoftwareTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateMLPUpdateSoftwareTaskCommonRequest method.
//    req, resp := client.CreateMLPUpdateSoftwareTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) CreateMLPUpdateSoftwareTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateMLPUpdateSoftwareTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateMLPUpdateSoftwareTaskCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation CreateMLPUpdateSoftwareTaskCommon for usage and error information.
func (c *SECCENTER20240508) CreateMLPUpdateSoftwareTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateMLPUpdateSoftwareTaskCommonRequest(input)
	return out, req.Send()
}

// CreateMLPUpdateSoftwareTaskCommonWithContext is the same as CreateMLPUpdateSoftwareTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateMLPUpdateSoftwareTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) CreateMLPUpdateSoftwareTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateMLPUpdateSoftwareTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateMLPUpdateSoftwareTask = "CreateMLPUpdateSoftwareTask"

// CreateMLPUpdateSoftwareTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateMLPUpdateSoftwareTask operation. The "output" return
// value will be populated with the CreateMLPUpdateSoftwareTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateMLPUpdateSoftwareTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateMLPUpdateSoftwareTaskCommon Send returns without error.
//
// See CreateMLPUpdateSoftwareTask for more information on using the CreateMLPUpdateSoftwareTask
// API call, and error handling.
//
//    // Example sending a request using the CreateMLPUpdateSoftwareTaskRequest method.
//    req, resp := client.CreateMLPUpdateSoftwareTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) CreateMLPUpdateSoftwareTaskRequest(input *CreateMLPUpdateSoftwareTaskInput) (req *request.Request, output *CreateMLPUpdateSoftwareTaskOutput) {
	op := &request.Operation{
		Name:       opCreateMLPUpdateSoftwareTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateMLPUpdateSoftwareTaskInput{}
	}

	output = &CreateMLPUpdateSoftwareTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateMLPUpdateSoftwareTask API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation CreateMLPUpdateSoftwareTask for usage and error information.
func (c *SECCENTER20240508) CreateMLPUpdateSoftwareTask(input *CreateMLPUpdateSoftwareTaskInput) (*CreateMLPUpdateSoftwareTaskOutput, error) {
	req, out := c.CreateMLPUpdateSoftwareTaskRequest(input)
	return out, req.Send()
}

// CreateMLPUpdateSoftwareTaskWithContext is the same as CreateMLPUpdateSoftwareTask with the addition of
// the ability to pass a context and additional request options.
//
// See CreateMLPUpdateSoftwareTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) CreateMLPUpdateSoftwareTaskWithContext(ctx volcengine.Context, input *CreateMLPUpdateSoftwareTaskInput, opts ...request.Option) (*CreateMLPUpdateSoftwareTaskOutput, error) {
	req, out := c.CreateMLPUpdateSoftwareTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateMLPUpdateSoftwareTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AssetIds []*string `type:"list" json:",omitempty"`

	IsAll *bool `type:"boolean" json:",omitempty"`

	SoftName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateMLPUpdateSoftwareTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateMLPUpdateSoftwareTaskInput) GoString() string {
	return s.String()
}

// SetAssetIds sets the AssetIds field's value.
func (s *CreateMLPUpdateSoftwareTaskInput) SetAssetIds(v []*string) *CreateMLPUpdateSoftwareTaskInput {
	s.AssetIds = v
	return s
}

// SetIsAll sets the IsAll field's value.
func (s *CreateMLPUpdateSoftwareTaskInput) SetIsAll(v bool) *CreateMLPUpdateSoftwareTaskInput {
	s.IsAll = &v
	return s
}

// SetSoftName sets the SoftName field's value.
func (s *CreateMLPUpdateSoftwareTaskInput) SetSoftName(v string) *CreateMLPUpdateSoftwareTaskInput {
	s.SoftName = &v
	return s
}

type CreateMLPUpdateSoftwareTaskOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateMLPUpdateSoftwareTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateMLPUpdateSoftwareTaskOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *CreateMLPUpdateSoftwareTaskOutput) SetData(v string) *CreateMLPUpdateSoftwareTaskOutput {
	s.Data = &v
	return s
}
