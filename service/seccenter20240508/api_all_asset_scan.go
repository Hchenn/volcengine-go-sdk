// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAllAssetScanCommon = "AllAssetScan"

// AllAssetScanCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AllAssetScanCommon operation. The "output" return
// value will be populated with the AllAssetScanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AllAssetScanCommon Request to send the API call to the service.
// the "output" return value is not valid until after AllAssetScanCommon Send returns without error.
//
// See AllAssetScanCommon for more information on using the AllAssetScanCommon
// API call, and error handling.
//
//    // Example sending a request using the AllAssetScanCommonRequest method.
//    req, resp := client.AllAssetScanCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) AllAssetScanCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAllAssetScanCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AllAssetScanCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation AllAssetScanCommon for usage and error information.
func (c *SECCENTER20240508) AllAssetScanCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AllAssetScanCommonRequest(input)
	return out, req.Send()
}

// AllAssetScanCommonWithContext is the same as AllAssetScanCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AllAssetScanCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) AllAssetScanCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AllAssetScanCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAllAssetScan = "AllAssetScan"

// AllAssetScanRequest generates a "volcengine/request.Request" representing the
// client's request for the AllAssetScan operation. The "output" return
// value will be populated with the AllAssetScanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AllAssetScanCommon Request to send the API call to the service.
// the "output" return value is not valid until after AllAssetScanCommon Send returns without error.
//
// See AllAssetScan for more information on using the AllAssetScan
// API call, and error handling.
//
//    // Example sending a request using the AllAssetScanRequest method.
//    req, resp := client.AllAssetScanRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) AllAssetScanRequest(input *AllAssetScanInput) (req *request.Request, output *AllAssetScanOutput) {
	op := &request.Operation{
		Name:       opAllAssetScan,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AllAssetScanInput{}
	}

	output = &AllAssetScanOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AllAssetScan API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation AllAssetScan for usage and error information.
func (c *SECCENTER20240508) AllAssetScan(input *AllAssetScanInput) (*AllAssetScanOutput, error) {
	req, out := c.AllAssetScanRequest(input)
	return out, req.Send()
}

// AllAssetScanWithContext is the same as AllAssetScan with the addition of
// the ability to pass a context and additional request options.
//
// See AllAssetScan for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) AllAssetScanWithContext(ctx volcengine.Context, input *AllAssetScanInput, opts ...request.Option) (*AllAssetScanOutput, error) {
	req, out := c.AllAssetScanRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AllAssetScanInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AssetType is a required field
	AssetType *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s AllAssetScanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AllAssetScanInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AllAssetScanInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AllAssetScanInput"}
	if s.AssetType == nil {
		invalidParams.Add(request.NewErrParamRequired("AssetType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAssetType sets the AssetType field's value.
func (s *AllAssetScanInput) SetAssetType(v string) *AllAssetScanInput {
	s.AssetType = &v
	return s
}

type AllAssetScanOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *DataForAllAssetScanOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s AllAssetScanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AllAssetScanOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *AllAssetScanOutput) SetData(v *DataForAllAssetScanOutput) *AllAssetScanOutput {
	s.Data = v
	return s
}

type DataForAllAssetScanOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DataForAllAssetScanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForAllAssetScanOutput) GoString() string {
	return s.String()
}
