// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opOperateAgentRaspConfigSwitchCommon = "OperateAgentRaspConfigSwitch"

// OperateAgentRaspConfigSwitchCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the OperateAgentRaspConfigSwitchCommon operation. The "output" return
// value will be populated with the OperateAgentRaspConfigSwitchCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned OperateAgentRaspConfigSwitchCommon Request to send the API call to the service.
// the "output" return value is not valid until after OperateAgentRaspConfigSwitchCommon Send returns without error.
//
// See OperateAgentRaspConfigSwitchCommon for more information on using the OperateAgentRaspConfigSwitchCommon
// API call, and error handling.
//
//    // Example sending a request using the OperateAgentRaspConfigSwitchCommonRequest method.
//    req, resp := client.OperateAgentRaspConfigSwitchCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) OperateAgentRaspConfigSwitchCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opOperateAgentRaspConfigSwitchCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// OperateAgentRaspConfigSwitchCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation OperateAgentRaspConfigSwitchCommon for usage and error information.
func (c *SECCENTER20240508) OperateAgentRaspConfigSwitchCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.OperateAgentRaspConfigSwitchCommonRequest(input)
	return out, req.Send()
}

// OperateAgentRaspConfigSwitchCommonWithContext is the same as OperateAgentRaspConfigSwitchCommon with the addition of
// the ability to pass a context and additional request options.
//
// See OperateAgentRaspConfigSwitchCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) OperateAgentRaspConfigSwitchCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.OperateAgentRaspConfigSwitchCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opOperateAgentRaspConfigSwitch = "OperateAgentRaspConfigSwitch"

// OperateAgentRaspConfigSwitchRequest generates a "volcengine/request.Request" representing the
// client's request for the OperateAgentRaspConfigSwitch operation. The "output" return
// value will be populated with the OperateAgentRaspConfigSwitchCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned OperateAgentRaspConfigSwitchCommon Request to send the API call to the service.
// the "output" return value is not valid until after OperateAgentRaspConfigSwitchCommon Send returns without error.
//
// See OperateAgentRaspConfigSwitch for more information on using the OperateAgentRaspConfigSwitch
// API call, and error handling.
//
//    // Example sending a request using the OperateAgentRaspConfigSwitchRequest method.
//    req, resp := client.OperateAgentRaspConfigSwitchRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) OperateAgentRaspConfigSwitchRequest(input *OperateAgentRaspConfigSwitchInput) (req *request.Request, output *OperateAgentRaspConfigSwitchOutput) {
	op := &request.Operation{
		Name:       opOperateAgentRaspConfigSwitch,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &OperateAgentRaspConfigSwitchInput{}
	}

	output = &OperateAgentRaspConfigSwitchOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// OperateAgentRaspConfigSwitch API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation OperateAgentRaspConfigSwitch for usage and error information.
func (c *SECCENTER20240508) OperateAgentRaspConfigSwitch(input *OperateAgentRaspConfigSwitchInput) (*OperateAgentRaspConfigSwitchOutput, error) {
	req, out := c.OperateAgentRaspConfigSwitchRequest(input)
	return out, req.Send()
}

// OperateAgentRaspConfigSwitchWithContext is the same as OperateAgentRaspConfigSwitch with the addition of
// the ability to pass a context and additional request options.
//
// See OperateAgentRaspConfigSwitch for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) OperateAgentRaspConfigSwitchWithContext(ctx volcengine.Context, input *OperateAgentRaspConfigSwitchInput, opts ...request.Option) (*OperateAgentRaspConfigSwitchOutput, error) {
	req, out := c.OperateAgentRaspConfigSwitchRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type OperateAgentRaspConfigSwitchInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentIDs []*string `type:"list" json:",omitempty"`

	SwitchOn *bool `type:"boolean" json:",omitempty"`

	TopGroupID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s OperateAgentRaspConfigSwitchInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OperateAgentRaspConfigSwitchInput) GoString() string {
	return s.String()
}

// SetAgentIDs sets the AgentIDs field's value.
func (s *OperateAgentRaspConfigSwitchInput) SetAgentIDs(v []*string) *OperateAgentRaspConfigSwitchInput {
	s.AgentIDs = v
	return s
}

// SetSwitchOn sets the SwitchOn field's value.
func (s *OperateAgentRaspConfigSwitchInput) SetSwitchOn(v bool) *OperateAgentRaspConfigSwitchInput {
	s.SwitchOn = &v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *OperateAgentRaspConfigSwitchInput) SetTopGroupID(v string) *OperateAgentRaspConfigSwitchInput {
	s.TopGroupID = &v
	return s
}

type OperateAgentRaspConfigSwitchOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Reason *string `type:"string" json:",omitempty"`

	Success *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s OperateAgentRaspConfigSwitchOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OperateAgentRaspConfigSwitchOutput) GoString() string {
	return s.String()
}

// SetReason sets the Reason field's value.
func (s *OperateAgentRaspConfigSwitchOutput) SetReason(v string) *OperateAgentRaspConfigSwitchOutput {
	s.Reason = &v
	return s
}

// SetSuccess sets the Success field's value.
func (s *OperateAgentRaspConfigSwitchOutput) SetSuccess(v bool) *OperateAgentRaspConfigSwitchOutput {
	s.Success = &v
	return s
}
