// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetClustersPermissionResultCommon = "GetClustersPermissionResult"

// GetClustersPermissionResultCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetClustersPermissionResultCommon operation. The "output" return
// value will be populated with the GetClustersPermissionResultCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetClustersPermissionResultCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetClustersPermissionResultCommon Send returns without error.
//
// See GetClustersPermissionResultCommon for more information on using the GetClustersPermissionResultCommon
// API call, and error handling.
//
//    // Example sending a request using the GetClustersPermissionResultCommonRequest method.
//    req, resp := client.GetClustersPermissionResultCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetClustersPermissionResultCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetClustersPermissionResultCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetClustersPermissionResultCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetClustersPermissionResultCommon for usage and error information.
func (c *SECCENTER20240508) GetClustersPermissionResultCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetClustersPermissionResultCommonRequest(input)
	return out, req.Send()
}

// GetClustersPermissionResultCommonWithContext is the same as GetClustersPermissionResultCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetClustersPermissionResultCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetClustersPermissionResultCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetClustersPermissionResultCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetClustersPermissionResult = "GetClustersPermissionResult"

// GetClustersPermissionResultRequest generates a "volcengine/request.Request" representing the
// client's request for the GetClustersPermissionResult operation. The "output" return
// value will be populated with the GetClustersPermissionResultCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetClustersPermissionResultCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetClustersPermissionResultCommon Send returns without error.
//
// See GetClustersPermissionResult for more information on using the GetClustersPermissionResult
// API call, and error handling.
//
//    // Example sending a request using the GetClustersPermissionResultRequest method.
//    req, resp := client.GetClustersPermissionResultRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetClustersPermissionResultRequest(input *GetClustersPermissionResultInput) (req *request.Request, output *GetClustersPermissionResultOutput) {
	op := &request.Operation{
		Name:       opGetClustersPermissionResult,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetClustersPermissionResultInput{}
	}

	output = &GetClustersPermissionResultOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetClustersPermissionResult API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetClustersPermissionResult for usage and error information.
func (c *SECCENTER20240508) GetClustersPermissionResult(input *GetClustersPermissionResultInput) (*GetClustersPermissionResultOutput, error) {
	req, out := c.GetClustersPermissionResultRequest(input)
	return out, req.Send()
}

// GetClustersPermissionResultWithContext is the same as GetClustersPermissionResult with the addition of
// the ability to pass a context and additional request options.
//
// See GetClustersPermissionResult for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetClustersPermissionResultWithContext(ctx volcengine.Context, input *GetClustersPermissionResultInput, opts ...request.Option) (*GetClustersPermissionResultOutput, error) {
	req, out := c.GetClustersPermissionResultRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForGetClustersPermissionResultOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	HasAuthorize *bool `type:"boolean" json:",omitempty"`

	Policy *string `type:"string" json:",omitempty"`

	Role *string `type:"string" json:",omitempty"`

	ServiceName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DataForGetClustersPermissionResultOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForGetClustersPermissionResultOutput) GoString() string {
	return s.String()
}

// SetHasAuthorize sets the HasAuthorize field's value.
func (s *DataForGetClustersPermissionResultOutput) SetHasAuthorize(v bool) *DataForGetClustersPermissionResultOutput {
	s.HasAuthorize = &v
	return s
}

// SetPolicy sets the Policy field's value.
func (s *DataForGetClustersPermissionResultOutput) SetPolicy(v string) *DataForGetClustersPermissionResultOutput {
	s.Policy = &v
	return s
}

// SetRole sets the Role field's value.
func (s *DataForGetClustersPermissionResultOutput) SetRole(v string) *DataForGetClustersPermissionResultOutput {
	s.Role = &v
	return s
}

// SetServiceName sets the ServiceName field's value.
func (s *DataForGetClustersPermissionResultOutput) SetServiceName(v string) *DataForGetClustersPermissionResultOutput {
	s.ServiceName = &v
	return s
}

type GetClustersPermissionResultInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s GetClustersPermissionResultInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetClustersPermissionResultInput) GoString() string {
	return s.String()
}

type GetClustersPermissionResultOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *DataForGetClustersPermissionResultOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s GetClustersPermissionResultOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetClustersPermissionResultOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *GetClustersPermissionResultOutput) SetData(v *DataForGetClustersPermissionResultOutput) *GetClustersPermissionResultOutput {
	s.Data = v
	return s
}
