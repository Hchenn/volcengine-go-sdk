// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAssetScanCommon = "AssetScan"

// AssetScanCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AssetScanCommon operation. The "output" return
// value will be populated with the AssetScanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssetScanCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssetScanCommon Send returns without error.
//
// See AssetScanCommon for more information on using the AssetScanCommon
// API call, and error handling.
//
//    // Example sending a request using the AssetScanCommonRequest method.
//    req, resp := client.AssetScanCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) AssetScanCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAssetScanCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AssetScanCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation AssetScanCommon for usage and error information.
func (c *SECCENTER20240508) AssetScanCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AssetScanCommonRequest(input)
	return out, req.Send()
}

// AssetScanCommonWithContext is the same as AssetScanCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AssetScanCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) AssetScanCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AssetScanCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAssetScan = "AssetScan"

// AssetScanRequest generates a "volcengine/request.Request" representing the
// client's request for the AssetScan operation. The "output" return
// value will be populated with the AssetScanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssetScanCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssetScanCommon Send returns without error.
//
// See AssetScan for more information on using the AssetScan
// API call, and error handling.
//
//    // Example sending a request using the AssetScanRequest method.
//    req, resp := client.AssetScanRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) AssetScanRequest(input *AssetScanInput) (req *request.Request, output *AssetScanOutput) {
	op := &request.Operation{
		Name:       opAssetScan,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AssetScanInput{}
	}

	output = &AssetScanOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AssetScan API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation AssetScan for usage and error information.
func (c *SECCENTER20240508) AssetScan(input *AssetScanInput) (*AssetScanOutput, error) {
	req, out := c.AssetScanRequest(input)
	return out, req.Send()
}

// AssetScanWithContext is the same as AssetScan with the addition of
// the ability to pass a context and additional request options.
//
// See AssetScan for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) AssetScanWithContext(ctx volcengine.Context, input *AssetScanInput, opts ...request.Option) (*AssetScanOutput, error) {
	req, out := c.AssetScanRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AssetScanInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AssetID is a required field
	AssetID *string `type:"string" json:",omitempty" required:"true"`

	// AssetType is a required field
	AssetType *string `type:"string" json:",omitempty" required:"true"`

	ScanItems []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s AssetScanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AssetScanInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssetScanInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AssetScanInput"}
	if s.AssetID == nil {
		invalidParams.Add(request.NewErrParamRequired("AssetID"))
	}
	if s.AssetType == nil {
		invalidParams.Add(request.NewErrParamRequired("AssetType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAssetID sets the AssetID field's value.
func (s *AssetScanInput) SetAssetID(v string) *AssetScanInput {
	s.AssetID = &v
	return s
}

// SetAssetType sets the AssetType field's value.
func (s *AssetScanInput) SetAssetType(v string) *AssetScanInput {
	s.AssetType = &v
	return s
}

// SetScanItems sets the ScanItems field's value.
func (s *AssetScanInput) SetScanItems(v []*string) *AssetScanInput {
	s.ScanItems = v
	return s
}

type AssetScanOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *DataForAssetScanOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s AssetScanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AssetScanOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *AssetScanOutput) SetData(v *DataForAssetScanOutput) *AssetScanOutput {
	s.Data = v
	return s
}

type DataForAssetScanOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DataForAssetScanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForAssetScanOutput) GoString() string {
	return s.String()
}
