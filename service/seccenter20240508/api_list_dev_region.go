// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListDevRegionCommon = "ListDevRegion"

// ListDevRegionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListDevRegionCommon operation. The "output" return
// value will be populated with the ListDevRegionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDevRegionCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDevRegionCommon Send returns without error.
//
// See ListDevRegionCommon for more information on using the ListDevRegionCommon
// API call, and error handling.
//
//    // Example sending a request using the ListDevRegionCommonRequest method.
//    req, resp := client.ListDevRegionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) ListDevRegionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListDevRegionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDevRegionCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation ListDevRegionCommon for usage and error information.
func (c *SECCENTER20240508) ListDevRegionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListDevRegionCommonRequest(input)
	return out, req.Send()
}

// ListDevRegionCommonWithContext is the same as ListDevRegionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListDevRegionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) ListDevRegionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListDevRegionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDevRegion = "ListDevRegion"

// ListDevRegionRequest generates a "volcengine/request.Request" representing the
// client's request for the ListDevRegion operation. The "output" return
// value will be populated with the ListDevRegionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDevRegionCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDevRegionCommon Send returns without error.
//
// See ListDevRegion for more information on using the ListDevRegion
// API call, and error handling.
//
//    // Example sending a request using the ListDevRegionRequest method.
//    req, resp := client.ListDevRegionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) ListDevRegionRequest(input *ListDevRegionInput) (req *request.Request, output *ListDevRegionOutput) {
	op := &request.Operation{
		Name:       opListDevRegion,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListDevRegionInput{}
	}

	output = &ListDevRegionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDevRegion API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation ListDevRegion for usage and error information.
func (c *SECCENTER20240508) ListDevRegion(input *ListDevRegionInput) (*ListDevRegionOutput, error) {
	req, out := c.ListDevRegionRequest(input)
	return out, req.Send()
}

// ListDevRegionWithContext is the same as ListDevRegion with the addition of
// the ability to pass a context and additional request options.
//
// See ListDevRegion for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) ListDevRegionWithContext(ctx volcengine.Context, input *ListDevRegionInput, opts ...request.Option) (*ListDevRegionOutput, error) {
	req, out := c.ListDevRegionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListDevRegionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ListDevRegionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDevRegionInput) GoString() string {
	return s.String()
}

type ListDevRegionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListDevRegionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDevRegionOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *ListDevRegionOutput) SetData(v []*string) *ListDevRegionOutput {
	s.Data = v
	return s
}
