// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opIsolateFileCommon = "IsolateFile"

// IsolateFileCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the IsolateFileCommon operation. The "output" return
// value will be populated with the IsolateFileCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned IsolateFileCommon Request to send the API call to the service.
// the "output" return value is not valid until after IsolateFileCommon Send returns without error.
//
// See IsolateFileCommon for more information on using the IsolateFileCommon
// API call, and error handling.
//
//    // Example sending a request using the IsolateFileCommonRequest method.
//    req, resp := client.IsolateFileCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) IsolateFileCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opIsolateFileCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// IsolateFileCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation IsolateFileCommon for usage and error information.
func (c *SECCENTER20240508) IsolateFileCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.IsolateFileCommonRequest(input)
	return out, req.Send()
}

// IsolateFileCommonWithContext is the same as IsolateFileCommon with the addition of
// the ability to pass a context and additional request options.
//
// See IsolateFileCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) IsolateFileCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.IsolateFileCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opIsolateFile = "IsolateFile"

// IsolateFileRequest generates a "volcengine/request.Request" representing the
// client's request for the IsolateFile operation. The "output" return
// value will be populated with the IsolateFileCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned IsolateFileCommon Request to send the API call to the service.
// the "output" return value is not valid until after IsolateFileCommon Send returns without error.
//
// See IsolateFile for more information on using the IsolateFile
// API call, and error handling.
//
//    // Example sending a request using the IsolateFileRequest method.
//    req, resp := client.IsolateFileRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) IsolateFileRequest(input *IsolateFileInput) (req *request.Request, output *IsolateFileOutput) {
	op := &request.Operation{
		Name:       opIsolateFile,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &IsolateFileInput{}
	}

	output = &IsolateFileOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// IsolateFile API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation IsolateFile for usage and error information.
func (c *SECCENTER20240508) IsolateFile(input *IsolateFileInput) (*IsolateFileOutput, error) {
	req, out := c.IsolateFileRequest(input)
	return out, req.Send()
}

// IsolateFileWithContext is the same as IsolateFile with the addition of
// the ability to pass a context and additional request options.
//
// See IsolateFile for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) IsolateFileWithContext(ctx volcengine.Context, input *IsolateFileInput, opts ...request.Option) (*IsolateFileOutput, error) {
	req, out := c.IsolateFileRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type IsolateFileInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	FileboxID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s IsolateFileInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IsolateFileInput) GoString() string {
	return s.String()
}

// SetFileboxID sets the FileboxID field's value.
func (s *IsolateFileInput) SetFileboxID(v string) *IsolateFileInput {
	s.FileboxID = &v
	return s
}

type IsolateFileOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s IsolateFileOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IsolateFileOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *IsolateFileOutput) SetData(v string) *IsolateFileOutput {
	s.Data = &v
	return s
}
