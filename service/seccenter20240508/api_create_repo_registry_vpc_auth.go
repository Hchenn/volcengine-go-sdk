// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateRepoRegistryVpcAuthCommon = "CreateRepoRegistryVpcAuth"

// CreateRepoRegistryVpcAuthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateRepoRegistryVpcAuthCommon operation. The "output" return
// value will be populated with the CreateRepoRegistryVpcAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateRepoRegistryVpcAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateRepoRegistryVpcAuthCommon Send returns without error.
//
// See CreateRepoRegistryVpcAuthCommon for more information on using the CreateRepoRegistryVpcAuthCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateRepoRegistryVpcAuthCommonRequest method.
//    req, resp := client.CreateRepoRegistryVpcAuthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) CreateRepoRegistryVpcAuthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateRepoRegistryVpcAuthCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateRepoRegistryVpcAuthCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation CreateRepoRegistryVpcAuthCommon for usage and error information.
func (c *SECCENTER20240508) CreateRepoRegistryVpcAuthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateRepoRegistryVpcAuthCommonRequest(input)
	return out, req.Send()
}

// CreateRepoRegistryVpcAuthCommonWithContext is the same as CreateRepoRegistryVpcAuthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateRepoRegistryVpcAuthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) CreateRepoRegistryVpcAuthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateRepoRegistryVpcAuthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateRepoRegistryVpcAuth = "CreateRepoRegistryVpcAuth"

// CreateRepoRegistryVpcAuthRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateRepoRegistryVpcAuth operation. The "output" return
// value will be populated with the CreateRepoRegistryVpcAuthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateRepoRegistryVpcAuthCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateRepoRegistryVpcAuthCommon Send returns without error.
//
// See CreateRepoRegistryVpcAuth for more information on using the CreateRepoRegistryVpcAuth
// API call, and error handling.
//
//    // Example sending a request using the CreateRepoRegistryVpcAuthRequest method.
//    req, resp := client.CreateRepoRegistryVpcAuthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) CreateRepoRegistryVpcAuthRequest(input *CreateRepoRegistryVpcAuthInput) (req *request.Request, output *CreateRepoRegistryVpcAuthOutput) {
	op := &request.Operation{
		Name:       opCreateRepoRegistryVpcAuth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateRepoRegistryVpcAuthInput{}
	}

	output = &CreateRepoRegistryVpcAuthOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateRepoRegistryVpcAuth API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation CreateRepoRegistryVpcAuth for usage and error information.
func (c *SECCENTER20240508) CreateRepoRegistryVpcAuth(input *CreateRepoRegistryVpcAuthInput) (*CreateRepoRegistryVpcAuthOutput, error) {
	req, out := c.CreateRepoRegistryVpcAuthRequest(input)
	return out, req.Send()
}

// CreateRepoRegistryVpcAuthWithContext is the same as CreateRepoRegistryVpcAuth with the addition of
// the ability to pass a context and additional request options.
//
// See CreateRepoRegistryVpcAuth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) CreateRepoRegistryVpcAuthWithContext(ctx volcengine.Context, input *CreateRepoRegistryVpcAuthInput, opts ...request.Option) (*CreateRepoRegistryVpcAuthOutput, error) {
	req, out := c.CreateRepoRegistryVpcAuthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateRepoRegistryVpcAuthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// RegistryID is a required field
	RegistryID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateRepoRegistryVpcAuthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateRepoRegistryVpcAuthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateRepoRegistryVpcAuthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateRepoRegistryVpcAuthInput"}
	if s.RegistryID == nil {
		invalidParams.Add(request.NewErrParamRequired("RegistryID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRegistryID sets the RegistryID field's value.
func (s *CreateRepoRegistryVpcAuthInput) SetRegistryID(v string) *CreateRepoRegistryVpcAuthInput {
	s.RegistryID = &v
	return s
}

type CreateRepoRegistryVpcAuthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateRepoRegistryVpcAuthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateRepoRegistryVpcAuthOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *CreateRepoRegistryVpcAuthOutput) SetData(v string) *CreateRepoRegistryVpcAuthOutput {
	s.Data = &v
	return s
}
