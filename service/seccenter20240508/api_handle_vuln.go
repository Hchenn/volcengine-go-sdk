// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opHandleVulnCommon = "HandleVuln"

// HandleVulnCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the HandleVulnCommon operation. The "output" return
// value will be populated with the HandleVulnCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned HandleVulnCommon Request to send the API call to the service.
// the "output" return value is not valid until after HandleVulnCommon Send returns without error.
//
// See HandleVulnCommon for more information on using the HandleVulnCommon
// API call, and error handling.
//
//    // Example sending a request using the HandleVulnCommonRequest method.
//    req, resp := client.HandleVulnCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) HandleVulnCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opHandleVulnCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// HandleVulnCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation HandleVulnCommon for usage and error information.
func (c *SECCENTER20240508) HandleVulnCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.HandleVulnCommonRequest(input)
	return out, req.Send()
}

// HandleVulnCommonWithContext is the same as HandleVulnCommon with the addition of
// the ability to pass a context and additional request options.
//
// See HandleVulnCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) HandleVulnCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.HandleVulnCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opHandleVuln = "HandleVuln"

// HandleVulnRequest generates a "volcengine/request.Request" representing the
// client's request for the HandleVuln operation. The "output" return
// value will be populated with the HandleVulnCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned HandleVulnCommon Request to send the API call to the service.
// the "output" return value is not valid until after HandleVulnCommon Send returns without error.
//
// See HandleVuln for more information on using the HandleVuln
// API call, and error handling.
//
//    // Example sending a request using the HandleVulnRequest method.
//    req, resp := client.HandleVulnRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) HandleVulnRequest(input *HandleVulnInput) (req *request.Request, output *HandleVulnOutput) {
	op := &request.Operation{
		Name:       opHandleVuln,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &HandleVulnInput{}
	}

	output = &HandleVulnOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// HandleVuln API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation HandleVuln for usage and error information.
func (c *SECCENTER20240508) HandleVuln(input *HandleVulnInput) (*HandleVulnOutput, error) {
	req, out := c.HandleVulnRequest(input)
	return out, req.Send()
}

// HandleVulnWithContext is the same as HandleVuln with the addition of
// the ability to pass a context and additional request options.
//
// See HandleVuln for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) HandleVulnWithContext(ctx volcengine.Context, input *HandleVulnInput, opts ...request.Option) (*HandleVulnOutput, error) {
	req, out := c.HandleVulnRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type HandleVulnInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AfterStatus *string `type:"string" json:",omitempty"`

	AgentIDList []*string `type:"list" json:",omitempty"`

	AssetIDs []*string `type:"list" json:",omitempty"`

	AssetType *string `type:"string" json:",omitempty" enum:"EnumOfAssetTypeForHandleVulnInput"`

	BeforeStatus *string `type:"string" json:",omitempty"`

	CwppIDList []*string `type:"list" json:",omitempty"`

	Reason *string `type:"string" json:",omitempty"`

	TopGroupID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s HandleVulnInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HandleVulnInput) GoString() string {
	return s.String()
}

// SetAfterStatus sets the AfterStatus field's value.
func (s *HandleVulnInput) SetAfterStatus(v string) *HandleVulnInput {
	s.AfterStatus = &v
	return s
}

// SetAgentIDList sets the AgentIDList field's value.
func (s *HandleVulnInput) SetAgentIDList(v []*string) *HandleVulnInput {
	s.AgentIDList = v
	return s
}

// SetAssetIDs sets the AssetIDs field's value.
func (s *HandleVulnInput) SetAssetIDs(v []*string) *HandleVulnInput {
	s.AssetIDs = v
	return s
}

// SetAssetType sets the AssetType field's value.
func (s *HandleVulnInput) SetAssetType(v string) *HandleVulnInput {
	s.AssetType = &v
	return s
}

// SetBeforeStatus sets the BeforeStatus field's value.
func (s *HandleVulnInput) SetBeforeStatus(v string) *HandleVulnInput {
	s.BeforeStatus = &v
	return s
}

// SetCwppIDList sets the CwppIDList field's value.
func (s *HandleVulnInput) SetCwppIDList(v []*string) *HandleVulnInput {
	s.CwppIDList = v
	return s
}

// SetReason sets the Reason field's value.
func (s *HandleVulnInput) SetReason(v string) *HandleVulnInput {
	s.Reason = &v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *HandleVulnInput) SetTopGroupID(v string) *HandleVulnInput {
	s.TopGroupID = &v
	return s
}

type HandleVulnOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s HandleVulnOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s HandleVulnOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *HandleVulnOutput) SetData(v string) *HandleVulnOutput {
	s.Data = &v
	return s
}

const (
	// EnumOfAssetTypeForHandleVulnInputHost is a EnumOfAssetTypeForHandleVulnInput enum value
	EnumOfAssetTypeForHandleVulnInputHost = "Host"

	// EnumOfAssetTypeForHandleVulnInputDev is a EnumOfAssetTypeForHandleVulnInput enum value
	EnumOfAssetTypeForHandleVulnInputDev = "Dev"
)
