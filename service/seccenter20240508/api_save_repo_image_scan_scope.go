// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSaveRepoImageScanScopeCommon = "SaveRepoImageScanScope"

// SaveRepoImageScanScopeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SaveRepoImageScanScopeCommon operation. The "output" return
// value will be populated with the SaveRepoImageScanScopeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SaveRepoImageScanScopeCommon Request to send the API call to the service.
// the "output" return value is not valid until after SaveRepoImageScanScopeCommon Send returns without error.
//
// See SaveRepoImageScanScopeCommon for more information on using the SaveRepoImageScanScopeCommon
// API call, and error handling.
//
//    // Example sending a request using the SaveRepoImageScanScopeCommonRequest method.
//    req, resp := client.SaveRepoImageScanScopeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) SaveRepoImageScanScopeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSaveRepoImageScanScopeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SaveRepoImageScanScopeCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation SaveRepoImageScanScopeCommon for usage and error information.
func (c *SECCENTER20240508) SaveRepoImageScanScopeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SaveRepoImageScanScopeCommonRequest(input)
	return out, req.Send()
}

// SaveRepoImageScanScopeCommonWithContext is the same as SaveRepoImageScanScopeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SaveRepoImageScanScopeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) SaveRepoImageScanScopeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SaveRepoImageScanScopeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSaveRepoImageScanScope = "SaveRepoImageScanScope"

// SaveRepoImageScanScopeRequest generates a "volcengine/request.Request" representing the
// client's request for the SaveRepoImageScanScope operation. The "output" return
// value will be populated with the SaveRepoImageScanScopeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SaveRepoImageScanScopeCommon Request to send the API call to the service.
// the "output" return value is not valid until after SaveRepoImageScanScopeCommon Send returns without error.
//
// See SaveRepoImageScanScope for more information on using the SaveRepoImageScanScope
// API call, and error handling.
//
//    // Example sending a request using the SaveRepoImageScanScopeRequest method.
//    req, resp := client.SaveRepoImageScanScopeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) SaveRepoImageScanScopeRequest(input *SaveRepoImageScanScopeInput) (req *request.Request, output *SaveRepoImageScanScopeOutput) {
	op := &request.Operation{
		Name:       opSaveRepoImageScanScope,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SaveRepoImageScanScopeInput{}
	}

	output = &SaveRepoImageScanScopeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SaveRepoImageScanScope API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation SaveRepoImageScanScope for usage and error information.
func (c *SECCENTER20240508) SaveRepoImageScanScope(input *SaveRepoImageScanScopeInput) (*SaveRepoImageScanScopeOutput, error) {
	req, out := c.SaveRepoImageScanScopeRequest(input)
	return out, req.Send()
}

// SaveRepoImageScanScopeWithContext is the same as SaveRepoImageScanScope with the addition of
// the ability to pass a context and additional request options.
//
// See SaveRepoImageScanScope for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) SaveRepoImageScanScopeWithContext(ctx volcengine.Context, input *SaveRepoImageScanScopeInput, opts ...request.Option) (*SaveRepoImageScanScopeOutput, error) {
	req, out := c.SaveRepoImageScanScopeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForSaveRepoImageScanScopeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DataForSaveRepoImageScanScopeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForSaveRepoImageScanScopeOutput) GoString() string {
	return s.String()
}

type SaveRepoImageScanScopeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ImageSizeLimit is a required field
	ImageSizeLimit *int32 `type:"int32" json:",omitempty" required:"true"`

	// LatestPush is a required field
	LatestPush *int32 `type:"int32" json:",omitempty" required:"true"`

	NamespaceIDs []*string `type:"list" json:",omitempty"`

	ScanItems []*string `type:"list" json:",omitempty"`

	// Timeout is a required field
	Timeout *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s SaveRepoImageScanScopeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SaveRepoImageScanScopeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SaveRepoImageScanScopeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SaveRepoImageScanScopeInput"}
	if s.ImageSizeLimit == nil {
		invalidParams.Add(request.NewErrParamRequired("ImageSizeLimit"))
	}
	if s.LatestPush == nil {
		invalidParams.Add(request.NewErrParamRequired("LatestPush"))
	}
	if s.Timeout == nil {
		invalidParams.Add(request.NewErrParamRequired("Timeout"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetImageSizeLimit sets the ImageSizeLimit field's value.
func (s *SaveRepoImageScanScopeInput) SetImageSizeLimit(v int32) *SaveRepoImageScanScopeInput {
	s.ImageSizeLimit = &v
	return s
}

// SetLatestPush sets the LatestPush field's value.
func (s *SaveRepoImageScanScopeInput) SetLatestPush(v int32) *SaveRepoImageScanScopeInput {
	s.LatestPush = &v
	return s
}

// SetNamespaceIDs sets the NamespaceIDs field's value.
func (s *SaveRepoImageScanScopeInput) SetNamespaceIDs(v []*string) *SaveRepoImageScanScopeInput {
	s.NamespaceIDs = v
	return s
}

// SetScanItems sets the ScanItems field's value.
func (s *SaveRepoImageScanScopeInput) SetScanItems(v []*string) *SaveRepoImageScanScopeInput {
	s.ScanItems = v
	return s
}

// SetTimeout sets the Timeout field's value.
func (s *SaveRepoImageScanScopeInput) SetTimeout(v int32) *SaveRepoImageScanScopeInput {
	s.Timeout = &v
	return s
}

type SaveRepoImageScanScopeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *DataForSaveRepoImageScanScopeOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s SaveRepoImageScanScopeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SaveRepoImageScanScopeOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *SaveRepoImageScanScopeOutput) SetData(v *DataForSaveRepoImageScanScopeOutput) *SaveRepoImageScanScopeOutput {
	s.Data = v
	return s
}
