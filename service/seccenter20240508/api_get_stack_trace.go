// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetStackTraceCommon = "GetStackTrace"

// GetStackTraceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetStackTraceCommon operation. The "output" return
// value will be populated with the GetStackTraceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetStackTraceCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetStackTraceCommon Send returns without error.
//
// See GetStackTraceCommon for more information on using the GetStackTraceCommon
// API call, and error handling.
//
//    // Example sending a request using the GetStackTraceCommonRequest method.
//    req, resp := client.GetStackTraceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetStackTraceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetStackTraceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetStackTraceCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetStackTraceCommon for usage and error information.
func (c *SECCENTER20240508) GetStackTraceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetStackTraceCommonRequest(input)
	return out, req.Send()
}

// GetStackTraceCommonWithContext is the same as GetStackTraceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetStackTraceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetStackTraceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetStackTraceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetStackTrace = "GetStackTrace"

// GetStackTraceRequest generates a "volcengine/request.Request" representing the
// client's request for the GetStackTrace operation. The "output" return
// value will be populated with the GetStackTraceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetStackTraceCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetStackTraceCommon Send returns without error.
//
// See GetStackTrace for more information on using the GetStackTrace
// API call, and error handling.
//
//    // Example sending a request using the GetStackTraceRequest method.
//    req, resp := client.GetStackTraceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetStackTraceRequest(input *GetStackTraceInput) (req *request.Request, output *GetStackTraceOutput) {
	op := &request.Operation{
		Name:       opGetStackTrace,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetStackTraceInput{}
	}

	output = &GetStackTraceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetStackTrace API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetStackTrace for usage and error information.
func (c *SECCENTER20240508) GetStackTrace(input *GetStackTraceInput) (*GetStackTraceOutput, error) {
	req, out := c.GetStackTraceRequest(input)
	return out, req.Send()
}

// GetStackTraceWithContext is the same as GetStackTrace with the addition of
// the ability to pass a context and additional request options.
//
// See GetStackTrace for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetStackTraceWithContext(ctx volcengine.Context, input *GetStackTraceInput, opts ...request.Option) (*GetStackTraceOutput, error) {
	req, out := c.GetStackTraceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetStackTraceInput struct {
	_ struct{} `type:"structure"`

	StackTraceHash *string `type:"string"`
}

// String returns the string representation
func (s GetStackTraceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetStackTraceInput) GoString() string {
	return s.String()
}

// SetStackTraceHash sets the StackTraceHash field's value.
func (s *GetStackTraceInput) SetStackTraceHash(v string) *GetStackTraceInput {
	s.StackTraceHash = &v
	return s
}

type GetStackTraceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	StackTrace *string `type:"string"`
}

// String returns the string representation
func (s GetStackTraceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetStackTraceOutput) GoString() string {
	return s.String()
}

// SetStackTrace sets the StackTrace field's value.
func (s *GetStackTraceOutput) SetStackTrace(v string) *GetStackTraceOutput {
	s.StackTrace = &v
	return s
}
