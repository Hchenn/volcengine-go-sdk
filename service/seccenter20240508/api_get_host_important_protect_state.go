// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetHostImportantProtectStateCommon = "GetHostImportantProtectState"

// GetHostImportantProtectStateCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetHostImportantProtectStateCommon operation. The "output" return
// value will be populated with the GetHostImportantProtectStateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetHostImportantProtectStateCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetHostImportantProtectStateCommon Send returns without error.
//
// See GetHostImportantProtectStateCommon for more information on using the GetHostImportantProtectStateCommon
// API call, and error handling.
//
//    // Example sending a request using the GetHostImportantProtectStateCommonRequest method.
//    req, resp := client.GetHostImportantProtectStateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetHostImportantProtectStateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetHostImportantProtectStateCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetHostImportantProtectStateCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetHostImportantProtectStateCommon for usage and error information.
func (c *SECCENTER20240508) GetHostImportantProtectStateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetHostImportantProtectStateCommonRequest(input)
	return out, req.Send()
}

// GetHostImportantProtectStateCommonWithContext is the same as GetHostImportantProtectStateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetHostImportantProtectStateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetHostImportantProtectStateCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetHostImportantProtectStateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetHostImportantProtectState = "GetHostImportantProtectState"

// GetHostImportantProtectStateRequest generates a "volcengine/request.Request" representing the
// client's request for the GetHostImportantProtectState operation. The "output" return
// value will be populated with the GetHostImportantProtectStateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetHostImportantProtectStateCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetHostImportantProtectStateCommon Send returns without error.
//
// See GetHostImportantProtectState for more information on using the GetHostImportantProtectState
// API call, and error handling.
//
//    // Example sending a request using the GetHostImportantProtectStateRequest method.
//    req, resp := client.GetHostImportantProtectStateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) GetHostImportantProtectStateRequest(input *GetHostImportantProtectStateInput) (req *request.Request, output *GetHostImportantProtectStateOutput) {
	op := &request.Operation{
		Name:       opGetHostImportantProtectState,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetHostImportantProtectStateInput{}
	}

	output = &GetHostImportantProtectStateOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetHostImportantProtectState API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation GetHostImportantProtectState for usage and error information.
func (c *SECCENTER20240508) GetHostImportantProtectState(input *GetHostImportantProtectStateInput) (*GetHostImportantProtectStateOutput, error) {
	req, out := c.GetHostImportantProtectStateRequest(input)
	return out, req.Send()
}

// GetHostImportantProtectStateWithContext is the same as GetHostImportantProtectState with the addition of
// the ability to pass a context and additional request options.
//
// See GetHostImportantProtectState for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) GetHostImportantProtectStateWithContext(ctx volcengine.Context, input *GetHostImportantProtectStateInput, opts ...request.Option) (*GetHostImportantProtectStateOutput, error) {
	req, out := c.GetHostImportantProtectStateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetHostImportantProtectStateInput struct {
	_ struct{} `type:"structure"`

	AgentID *string `type:"string"`

	TopGroupID *string `type:"string"`
}

// String returns the string representation
func (s GetHostImportantProtectStateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetHostImportantProtectStateInput) GoString() string {
	return s.String()
}

// SetAgentID sets the AgentID field's value.
func (s *GetHostImportantProtectStateInput) SetAgentID(v string) *GetHostImportantProtectStateInput {
	s.AgentID = &v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *GetHostImportantProtectStateInput) SetTopGroupID(v string) *GetHostImportantProtectStateInput {
	s.TopGroupID = &v
	return s
}

type GetHostImportantProtectStateOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ImportantProtect *bool `type:"boolean"`
}

// String returns the string representation
func (s GetHostImportantProtectStateOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetHostImportantProtectStateOutput) GoString() string {
	return s.String()
}

// SetImportantProtect sets the ImportantProtect field's value.
func (s *GetHostImportantProtectStateOutput) SetImportantProtect(v bool) *GetHostImportantProtectStateOutput {
	s.ImportantProtect = &v
	return s
}
