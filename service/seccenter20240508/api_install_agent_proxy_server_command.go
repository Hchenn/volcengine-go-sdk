// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opInstallAgentProxyServerCommandCommon = "InstallAgentProxyServerCommand"

// InstallAgentProxyServerCommandCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the InstallAgentProxyServerCommandCommon operation. The "output" return
// value will be populated with the InstallAgentProxyServerCommandCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned InstallAgentProxyServerCommandCommon Request to send the API call to the service.
// the "output" return value is not valid until after InstallAgentProxyServerCommandCommon Send returns without error.
//
// See InstallAgentProxyServerCommandCommon for more information on using the InstallAgentProxyServerCommandCommon
// API call, and error handling.
//
//    // Example sending a request using the InstallAgentProxyServerCommandCommonRequest method.
//    req, resp := client.InstallAgentProxyServerCommandCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) InstallAgentProxyServerCommandCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opInstallAgentProxyServerCommandCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// InstallAgentProxyServerCommandCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation InstallAgentProxyServerCommandCommon for usage and error information.
func (c *SECCENTER20240508) InstallAgentProxyServerCommandCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.InstallAgentProxyServerCommandCommonRequest(input)
	return out, req.Send()
}

// InstallAgentProxyServerCommandCommonWithContext is the same as InstallAgentProxyServerCommandCommon with the addition of
// the ability to pass a context and additional request options.
//
// See InstallAgentProxyServerCommandCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) InstallAgentProxyServerCommandCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.InstallAgentProxyServerCommandCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opInstallAgentProxyServerCommand = "InstallAgentProxyServerCommand"

// InstallAgentProxyServerCommandRequest generates a "volcengine/request.Request" representing the
// client's request for the InstallAgentProxyServerCommand operation. The "output" return
// value will be populated with the InstallAgentProxyServerCommandCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned InstallAgentProxyServerCommandCommon Request to send the API call to the service.
// the "output" return value is not valid until after InstallAgentProxyServerCommandCommon Send returns without error.
//
// See InstallAgentProxyServerCommand for more information on using the InstallAgentProxyServerCommand
// API call, and error handling.
//
//    // Example sending a request using the InstallAgentProxyServerCommandRequest method.
//    req, resp := client.InstallAgentProxyServerCommandRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) InstallAgentProxyServerCommandRequest(input *InstallAgentProxyServerCommandInput) (req *request.Request, output *InstallAgentProxyServerCommandOutput) {
	op := &request.Operation{
		Name:       opInstallAgentProxyServerCommand,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &InstallAgentProxyServerCommandInput{}
	}

	output = &InstallAgentProxyServerCommandOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// InstallAgentProxyServerCommand API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation InstallAgentProxyServerCommand for usage and error information.
func (c *SECCENTER20240508) InstallAgentProxyServerCommand(input *InstallAgentProxyServerCommandInput) (*InstallAgentProxyServerCommandOutput, error) {
	req, out := c.InstallAgentProxyServerCommandRequest(input)
	return out, req.Send()
}

// InstallAgentProxyServerCommandWithContext is the same as InstallAgentProxyServerCommand with the addition of
// the ability to pass a context and additional request options.
//
// See InstallAgentProxyServerCommand for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) InstallAgentProxyServerCommandWithContext(ctx volcengine.Context, input *InstallAgentProxyServerCommandInput, opts ...request.Option) (*InstallAgentProxyServerCommandOutput, error) {
	req, out := c.InstallAgentProxyServerCommandRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type InstallAgentProxyServerCommandInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ProxyName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s InstallAgentProxyServerCommandInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InstallAgentProxyServerCommandInput) GoString() string {
	return s.String()
}

// SetProxyName sets the ProxyName field's value.
func (s *InstallAgentProxyServerCommandInput) SetProxyName(v string) *InstallAgentProxyServerCommandInput {
	s.ProxyName = &v
	return s
}

type InstallAgentProxyServerCommandOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InstallCommand *string `type:"string" json:",omitempty"`

	UninstallCommand *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s InstallAgentProxyServerCommandOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InstallAgentProxyServerCommandOutput) GoString() string {
	return s.String()
}

// SetInstallCommand sets the InstallCommand field's value.
func (s *InstallAgentProxyServerCommandOutput) SetInstallCommand(v string) *InstallAgentProxyServerCommandOutput {
	s.InstallCommand = &v
	return s
}

// SetUninstallCommand sets the UninstallCommand field's value.
func (s *InstallAgentProxyServerCommandOutput) SetUninstallCommand(v string) *InstallAgentProxyServerCommandOutput {
	s.UninstallCommand = &v
	return s
}
