// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter20240508

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteRaspConfigCommon = "DeleteRaspConfig"

// DeleteRaspConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteRaspConfigCommon operation. The "output" return
// value will be populated with the DeleteRaspConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteRaspConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteRaspConfigCommon Send returns without error.
//
// See DeleteRaspConfigCommon for more information on using the DeleteRaspConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteRaspConfigCommonRequest method.
//    req, resp := client.DeleteRaspConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) DeleteRaspConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteRaspConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteRaspConfigCommon API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation DeleteRaspConfigCommon for usage and error information.
func (c *SECCENTER20240508) DeleteRaspConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteRaspConfigCommonRequest(input)
	return out, req.Send()
}

// DeleteRaspConfigCommonWithContext is the same as DeleteRaspConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRaspConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) DeleteRaspConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteRaspConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteRaspConfig = "DeleteRaspConfig"

// DeleteRaspConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteRaspConfig operation. The "output" return
// value will be populated with the DeleteRaspConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteRaspConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteRaspConfigCommon Send returns without error.
//
// See DeleteRaspConfig for more information on using the DeleteRaspConfig
// API call, and error handling.
//
//    // Example sending a request using the DeleteRaspConfigRequest method.
//    req, resp := client.DeleteRaspConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER20240508) DeleteRaspConfigRequest(input *DeleteRaspConfigInput) (req *request.Request, output *DeleteRaspConfigOutput) {
	op := &request.Operation{
		Name:       opDeleteRaspConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteRaspConfigInput{}
	}

	output = &DeleteRaspConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteRaspConfig API operation for SECCENTER20240508.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER20240508's
// API operation DeleteRaspConfig for usage and error information.
func (c *SECCENTER20240508) DeleteRaspConfig(input *DeleteRaspConfigInput) (*DeleteRaspConfigOutput, error) {
	req, out := c.DeleteRaspConfigRequest(input)
	return out, req.Send()
}

// DeleteRaspConfigWithContext is the same as DeleteRaspConfig with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRaspConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER20240508) DeleteRaspConfigWithContext(ctx volcengine.Context, input *DeleteRaspConfigInput, opts ...request.Option) (*DeleteRaspConfigOutput, error) {
	req, out := c.DeleteRaspConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConditionsForDeleteRaspConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AgentID *string `type:"string" json:",omitempty"`

	CloudProviders []*string `type:"list" json:",omitempty"`

	Content *string `type:"string" json:",omitempty"`

	Hostname *string `type:"string" json:",omitempty"`

	IP *string `type:"string" json:",omitempty"`

	IfBlock *bool `type:"boolean" json:",omitempty"`

	IfFilter *bool `type:"boolean" json:",omitempty"`

	IfProtect *bool `type:"boolean" json:",omitempty"`

	LeafGroupIDs []*string `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Runtime []*string `type:"list" json:",omitempty"`

	Tags []*string `type:"list" json:",omitempty"`

	TopGroupID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ConditionsForDeleteRaspConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConditionsForDeleteRaspConfigInput) GoString() string {
	return s.String()
}

// SetAgentID sets the AgentID field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetAgentID(v string) *ConditionsForDeleteRaspConfigInput {
	s.AgentID = &v
	return s
}

// SetCloudProviders sets the CloudProviders field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetCloudProviders(v []*string) *ConditionsForDeleteRaspConfigInput {
	s.CloudProviders = v
	return s
}

// SetContent sets the Content field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetContent(v string) *ConditionsForDeleteRaspConfigInput {
	s.Content = &v
	return s
}

// SetHostname sets the Hostname field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetHostname(v string) *ConditionsForDeleteRaspConfigInput {
	s.Hostname = &v
	return s
}

// SetIP sets the IP field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetIP(v string) *ConditionsForDeleteRaspConfigInput {
	s.IP = &v
	return s
}

// SetIfBlock sets the IfBlock field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetIfBlock(v bool) *ConditionsForDeleteRaspConfigInput {
	s.IfBlock = &v
	return s
}

// SetIfFilter sets the IfFilter field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetIfFilter(v bool) *ConditionsForDeleteRaspConfigInput {
	s.IfFilter = &v
	return s
}

// SetIfProtect sets the IfProtect field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetIfProtect(v bool) *ConditionsForDeleteRaspConfigInput {
	s.IfProtect = &v
	return s
}

// SetLeafGroupIDs sets the LeafGroupIDs field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetLeafGroupIDs(v []*string) *ConditionsForDeleteRaspConfigInput {
	s.LeafGroupIDs = v
	return s
}

// SetName sets the Name field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetName(v string) *ConditionsForDeleteRaspConfigInput {
	s.Name = &v
	return s
}

// SetRuntime sets the Runtime field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetRuntime(v []*string) *ConditionsForDeleteRaspConfigInput {
	s.Runtime = v
	return s
}

// SetTags sets the Tags field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetTags(v []*string) *ConditionsForDeleteRaspConfigInput {
	s.Tags = v
	return s
}

// SetTopGroupID sets the TopGroupID field's value.
func (s *ConditionsForDeleteRaspConfigInput) SetTopGroupID(v string) *ConditionsForDeleteRaspConfigInput {
	s.TopGroupID = &v
	return s
}

type DeleteRaspConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Conditions *ConditionsForDeleteRaspConfigInput `type:"structure" json:",omitempty"`

	IDList []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DeleteRaspConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteRaspConfigInput) GoString() string {
	return s.String()
}

// SetConditions sets the Conditions field's value.
func (s *DeleteRaspConfigInput) SetConditions(v *ConditionsForDeleteRaspConfigInput) *DeleteRaspConfigInput {
	s.Conditions = v
	return s
}

// SetIDList sets the IDList field's value.
func (s *DeleteRaspConfigInput) SetIDList(v []*string) *DeleteRaspConfigInput {
	s.IDList = v
	return s
}

type DeleteRaspConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Success *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s DeleteRaspConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteRaspConfigOutput) GoString() string {
	return s.String()
}

// SetSuccess sets the Success field's value.
func (s *DeleteRaspConfigOutput) SetSuccess(v bool) *DeleteRaspConfigOutput {
	s.Success = &v
	return s
}
