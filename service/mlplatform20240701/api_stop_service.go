// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mlplatform20240701

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStopServiceCommon = "StopService"

// StopServiceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StopServiceCommon operation. The "output" return
// value will be populated with the StopServiceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopServiceCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopServiceCommon Send returns without error.
//
// See StopServiceCommon for more information on using the StopServiceCommon
// API call, and error handling.
//
//    // Example sending a request using the StopServiceCommonRequest method.
//    req, resp := client.StopServiceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MLPLATFORM20240701) StopServiceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopServiceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StopServiceCommon API operation for ML_PLATFORM20240701.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ML_PLATFORM20240701's
// API operation StopServiceCommon for usage and error information.
func (c *MLPLATFORM20240701) StopServiceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopServiceCommonRequest(input)
	return out, req.Send()
}

// StopServiceCommonWithContext is the same as StopServiceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopServiceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MLPLATFORM20240701) StopServiceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopServiceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopService = "StopService"

// StopServiceRequest generates a "volcengine/request.Request" representing the
// client's request for the StopService operation. The "output" return
// value will be populated with the StopServiceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopServiceCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopServiceCommon Send returns without error.
//
// See StopService for more information on using the StopService
// API call, and error handling.
//
//    // Example sending a request using the StopServiceRequest method.
//    req, resp := client.StopServiceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MLPLATFORM20240701) StopServiceRequest(input *StopServiceInput) (req *request.Request, output *StopServiceOutput) {
	op := &request.Operation{
		Name:       opStopService,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopServiceInput{}
	}

	output = &StopServiceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StopService API operation for ML_PLATFORM20240701.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ML_PLATFORM20240701's
// API operation StopService for usage and error information.
func (c *MLPLATFORM20240701) StopService(input *StopServiceInput) (*StopServiceOutput, error) {
	req, out := c.StopServiceRequest(input)
	return out, req.Send()
}

// StopServiceWithContext is the same as StopService with the addition of
// the ability to pass a context and additional request options.
//
// See StopService for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MLPLATFORM20240701) StopServiceWithContext(ctx volcengine.Context, input *StopServiceInput, opts ...request.Option) (*StopServiceOutput, error) {
	req, out := c.StopServiceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StatusForStopServiceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`

	SecondaryState *string `type:"string" json:",omitempty"`

	State *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s StatusForStopServiceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StatusForStopServiceOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *StatusForStopServiceOutput) SetMessage(v string) *StatusForStopServiceOutput {
	s.Message = &v
	return s
}

// SetSecondaryState sets the SecondaryState field's value.
func (s *StatusForStopServiceOutput) SetSecondaryState(v string) *StatusForStopServiceOutput {
	s.SecondaryState = &v
	return s
}

// SetState sets the State field's value.
func (s *StatusForStopServiceOutput) SetState(v string) *StatusForStopServiceOutput {
	s.State = &v
	return s
}

type StopServiceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DryRun *bool `type:"boolean" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s StopServiceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopServiceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StopServiceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StopServiceInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDryRun sets the DryRun field's value.
func (s *StopServiceInput) SetDryRun(v bool) *StopServiceInput {
	s.DryRun = &v
	return s
}

// SetId sets the Id field's value.
func (s *StopServiceInput) SetId(v string) *StopServiceInput {
	s.Id = &v
	return s
}

type StopServiceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`

	Status *StatusForStopServiceOutput `type:"structure" json:",omitempty"`

	VersionId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s StopServiceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopServiceOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *StopServiceOutput) SetId(v string) *StopServiceOutput {
	s.Id = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *StopServiceOutput) SetStatus(v *StatusForStopServiceOutput) *StopServiceOutput {
	s.Status = v
	return s
}

// SetVersionId sets the VersionId field's value.
func (s *StopServiceOutput) SetVersionId(v string) *StopServiceOutput {
	s.VersionId = &v
	return s
}
