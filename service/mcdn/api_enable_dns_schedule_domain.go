// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEnableDnsScheduleDomainCommon = "EnableDnsScheduleDomain"

// EnableDnsScheduleDomainCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableDnsScheduleDomainCommon operation. The "output" return
// value will be populated with the EnableDnsScheduleDomainCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableDnsScheduleDomainCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableDnsScheduleDomainCommon Send returns without error.
//
// See EnableDnsScheduleDomainCommon for more information on using the EnableDnsScheduleDomainCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableDnsScheduleDomainCommonRequest method.
//    req, resp := client.EnableDnsScheduleDomainCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MCDN) EnableDnsScheduleDomainCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableDnsScheduleDomainCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableDnsScheduleDomainCommon API operation for MCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MCDN's
// API operation EnableDnsScheduleDomainCommon for usage and error information.
func (c *MCDN) EnableDnsScheduleDomainCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableDnsScheduleDomainCommonRequest(input)
	return out, req.Send()
}

// EnableDnsScheduleDomainCommonWithContext is the same as EnableDnsScheduleDomainCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableDnsScheduleDomainCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MCDN) EnableDnsScheduleDomainCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableDnsScheduleDomainCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableDnsScheduleDomain = "EnableDnsScheduleDomain"

// EnableDnsScheduleDomainRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableDnsScheduleDomain operation. The "output" return
// value will be populated with the EnableDnsScheduleDomainCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableDnsScheduleDomainCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableDnsScheduleDomainCommon Send returns without error.
//
// See EnableDnsScheduleDomain for more information on using the EnableDnsScheduleDomain
// API call, and error handling.
//
//    // Example sending a request using the EnableDnsScheduleDomainRequest method.
//    req, resp := client.EnableDnsScheduleDomainRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MCDN) EnableDnsScheduleDomainRequest(input *EnableDnsScheduleDomainInput) (req *request.Request, output *EnableDnsScheduleDomainOutput) {
	op := &request.Operation{
		Name:       opEnableDnsScheduleDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableDnsScheduleDomainInput{}
	}

	output = &EnableDnsScheduleDomainOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableDnsScheduleDomain API operation for MCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MCDN's
// API operation EnableDnsScheduleDomain for usage and error information.
func (c *MCDN) EnableDnsScheduleDomain(input *EnableDnsScheduleDomainInput) (*EnableDnsScheduleDomainOutput, error) {
	req, out := c.EnableDnsScheduleDomainRequest(input)
	return out, req.Send()
}

// EnableDnsScheduleDomainWithContext is the same as EnableDnsScheduleDomain with the addition of
// the ability to pass a context and additional request options.
//
// See EnableDnsScheduleDomain for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MCDN) EnableDnsScheduleDomainWithContext(ctx volcengine.Context, input *EnableDnsScheduleDomainInput, opts ...request.Option) (*EnableDnsScheduleDomainOutput, error) {
	req, out := c.EnableDnsScheduleDomainRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnableDnsScheduleDomainInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// DnsScheduleId is a required field
	DnsScheduleId *string `type:"string" json:",omitempty" required:"true"`

	// DomainId is a required field
	DomainId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s EnableDnsScheduleDomainInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableDnsScheduleDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableDnsScheduleDomainInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnableDnsScheduleDomainInput"}
	if s.DnsScheduleId == nil {
		invalidParams.Add(request.NewErrParamRequired("DnsScheduleId"))
	}
	if s.DomainId == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDnsScheduleId sets the DnsScheduleId field's value.
func (s *EnableDnsScheduleDomainInput) SetDnsScheduleId(v string) *EnableDnsScheduleDomainInput {
	s.DnsScheduleId = &v
	return s
}

// SetDomainId sets the DomainId field's value.
func (s *EnableDnsScheduleDomainInput) SetDomainId(v string) *EnableDnsScheduleDomainInput {
	s.DomainId = &v
	return s
}

type EnableDnsScheduleDomainOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s EnableDnsScheduleDomainOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableDnsScheduleDomainOutput) GoString() string {
	return s.String()
}
