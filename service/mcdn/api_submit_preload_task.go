// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSubmitPreloadTaskCommon = "SubmitPreloadTask"

// SubmitPreloadTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SubmitPreloadTaskCommon operation. The "output" return
// value will be populated with the SubmitPreloadTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SubmitPreloadTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after SubmitPreloadTaskCommon Send returns without error.
//
// See SubmitPreloadTaskCommon for more information on using the SubmitPreloadTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the SubmitPreloadTaskCommonRequest method.
//    req, resp := client.SubmitPreloadTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MCDN) SubmitPreloadTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSubmitPreloadTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SubmitPreloadTaskCommon API operation for MCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MCDN's
// API operation SubmitPreloadTaskCommon for usage and error information.
func (c *MCDN) SubmitPreloadTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SubmitPreloadTaskCommonRequest(input)
	return out, req.Send()
}

// SubmitPreloadTaskCommonWithContext is the same as SubmitPreloadTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SubmitPreloadTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MCDN) SubmitPreloadTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SubmitPreloadTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSubmitPreloadTask = "SubmitPreloadTask"

// SubmitPreloadTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the SubmitPreloadTask operation. The "output" return
// value will be populated with the SubmitPreloadTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SubmitPreloadTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after SubmitPreloadTaskCommon Send returns without error.
//
// See SubmitPreloadTask for more information on using the SubmitPreloadTask
// API call, and error handling.
//
//    // Example sending a request using the SubmitPreloadTaskRequest method.
//    req, resp := client.SubmitPreloadTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MCDN) SubmitPreloadTaskRequest(input *SubmitPreloadTaskInput) (req *request.Request, output *SubmitPreloadTaskOutput) {
	op := &request.Operation{
		Name:       opSubmitPreloadTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SubmitPreloadTaskInput{}
	}

	output = &SubmitPreloadTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SubmitPreloadTask API operation for MCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MCDN's
// API operation SubmitPreloadTask for usage and error information.
func (c *MCDN) SubmitPreloadTask(input *SubmitPreloadTaskInput) (*SubmitPreloadTaskOutput, error) {
	req, out := c.SubmitPreloadTaskRequest(input)
	return out, req.Send()
}

// SubmitPreloadTaskWithContext is the same as SubmitPreloadTask with the addition of
// the ability to pass a context and additional request options.
//
// See SubmitPreloadTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MCDN) SubmitPreloadTaskWithContext(ctx volcengine.Context, input *SubmitPreloadTaskInput, opts ...request.Option) (*SubmitPreloadTaskOutput, error) {
	req, out := c.SubmitPreloadTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SubmitPreloadTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Urls is a required field
	Urls *string `type:"string" json:",omitempty" required:"true"`

	Vendor *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SubmitPreloadTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SubmitPreloadTaskInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SubmitPreloadTaskInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SubmitPreloadTaskInput"}
	if s.Urls == nil {
		invalidParams.Add(request.NewErrParamRequired("Urls"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUrls sets the Urls field's value.
func (s *SubmitPreloadTaskInput) SetUrls(v string) *SubmitPreloadTaskInput {
	s.Urls = &v
	return s
}

// SetVendor sets the Vendor field's value.
func (s *SubmitPreloadTaskInput) SetVendor(v string) *SubmitPreloadTaskInput {
	s.Vendor = &v
	return s
}

type SubmitPreloadTaskOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TaskId *string `type:"string" json:",omitempty"`

	TaskIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s SubmitPreloadTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SubmitPreloadTaskOutput) GoString() string {
	return s.String()
}

// SetTaskId sets the TaskId field's value.
func (s *SubmitPreloadTaskOutput) SetTaskId(v string) *SubmitPreloadTaskOutput {
	s.TaskId = &v
	return s
}

// SetTaskIds sets the TaskIds field's value.
func (s *SubmitPreloadTaskOutput) SetTaskIds(v []*string) *SubmitPreloadTaskOutput {
	s.TaskIds = v
	return s
}
