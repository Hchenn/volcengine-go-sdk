// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListViewsCommon = "ListViews"

// ListViewsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListViewsCommon operation. The "output" return
// value will be populated with the ListViewsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListViewsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListViewsCommon Send returns without error.
//
// See ListViewsCommon for more information on using the ListViewsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListViewsCommonRequest method.
//    req, resp := client.ListViewsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MCDN) ListViewsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListViewsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListViewsCommon API operation for MCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MCDN's
// API operation ListViewsCommon for usage and error information.
func (c *MCDN) ListViewsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListViewsCommonRequest(input)
	return out, req.Send()
}

// ListViewsCommonWithContext is the same as ListViewsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListViewsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MCDN) ListViewsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListViewsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListViews = "ListViews"

// ListViewsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListViews operation. The "output" return
// value will be populated with the ListViewsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListViewsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListViewsCommon Send returns without error.
//
// See ListViews for more information on using the ListViews
// API call, and error handling.
//
//    // Example sending a request using the ListViewsRequest method.
//    req, resp := client.ListViewsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MCDN) ListViewsRequest(input *ListViewsInput) (req *request.Request, output *ListViewsOutput) {
	op := &request.Operation{
		Name:       opListViews,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListViewsInput{}
	}

	output = &ListViewsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListViews API operation for MCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MCDN's
// API operation ListViews for usage and error information.
func (c *MCDN) ListViews(input *ListViewsInput) (*ListViewsOutput, error) {
	req, out := c.ListViewsRequest(input)
	return out, req.Send()
}

// ListViewsWithContext is the same as ListViews with the addition of
// the ability to pass a context and additional request options.
//
// See ListViews for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MCDN) ListViewsWithContext(ctx volcengine.Context, input *ListViewsInput, opts ...request.Option) (*ListViewsOutput, error) {
	req, out := c.ListViewsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CountryForListViewsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Code *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Isps []*IspForListViewsOutput `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Provinces []*ProvinceForListViewsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CountryForListViewsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CountryForListViewsOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *CountryForListViewsOutput) SetCode(v string) *CountryForListViewsOutput {
	s.Code = &v
	return s
}

// SetId sets the Id field's value.
func (s *CountryForListViewsOutput) SetId(v string) *CountryForListViewsOutput {
	s.Id = &v
	return s
}

// SetIsps sets the Isps field's value.
func (s *CountryForListViewsOutput) SetIsps(v []*IspForListViewsOutput) *CountryForListViewsOutput {
	s.Isps = v
	return s
}

// SetName sets the Name field's value.
func (s *CountryForListViewsOutput) SetName(v string) *CountryForListViewsOutput {
	s.Name = &v
	return s
}

// SetProvinces sets the Provinces field's value.
func (s *CountryForListViewsOutput) SetProvinces(v []*ProvinceForListViewsOutput) *CountryForListViewsOutput {
	s.Provinces = v
	return s
}

type IspForListViewsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s IspForListViewsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IspForListViewsOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *IspForListViewsOutput) SetId(v string) *IspForListViewsOutput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *IspForListViewsOutput) SetName(v string) *IspForListViewsOutput {
	s.Name = &v
	return s
}

type ListViewsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ListViewsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListViewsInput) GoString() string {
	return s.String()
}

type ListViewsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Countries []*CountryForListViewsOutput `type:"list" json:",omitempty"`

	Version *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListViewsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListViewsOutput) GoString() string {
	return s.String()
}

// SetCountries sets the Countries field's value.
func (s *ListViewsOutput) SetCountries(v []*CountryForListViewsOutput) *ListViewsOutput {
	s.Countries = v
	return s
}

// SetVersion sets the Version field's value.
func (s *ListViewsOutput) SetVersion(v string) *ListViewsOutput {
	s.Version = &v
	return s
}

type ProvinceForListViewsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Code *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ProvinceForListViewsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProvinceForListViewsOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *ProvinceForListViewsOutput) SetCode(v string) *ProvinceForListViewsOutput {
	s.Code = &v
	return s
}

// SetId sets the Id field's value.
func (s *ProvinceForListViewsOutput) SetId(v string) *ProvinceForListViewsOutput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *ProvinceForListViewsOutput) SetName(v string) *ProvinceForListViewsOutput {
	s.Name = &v
	return s
}
