// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateDnsScheduleStaticWeightCommon = "UpdateDnsScheduleStaticWeight"

// UpdateDnsScheduleStaticWeightCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateDnsScheduleStaticWeightCommon operation. The "output" return
// value will be populated with the UpdateDnsScheduleStaticWeightCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateDnsScheduleStaticWeightCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateDnsScheduleStaticWeightCommon Send returns without error.
//
// See UpdateDnsScheduleStaticWeightCommon for more information on using the UpdateDnsScheduleStaticWeightCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateDnsScheduleStaticWeightCommonRequest method.
//    req, resp := client.UpdateDnsScheduleStaticWeightCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MCDN) UpdateDnsScheduleStaticWeightCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateDnsScheduleStaticWeightCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateDnsScheduleStaticWeightCommon API operation for MCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MCDN's
// API operation UpdateDnsScheduleStaticWeightCommon for usage and error information.
func (c *MCDN) UpdateDnsScheduleStaticWeightCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateDnsScheduleStaticWeightCommonRequest(input)
	return out, req.Send()
}

// UpdateDnsScheduleStaticWeightCommonWithContext is the same as UpdateDnsScheduleStaticWeightCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateDnsScheduleStaticWeightCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MCDN) UpdateDnsScheduleStaticWeightCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateDnsScheduleStaticWeightCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateDnsScheduleStaticWeight = "UpdateDnsScheduleStaticWeight"

// UpdateDnsScheduleStaticWeightRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateDnsScheduleStaticWeight operation. The "output" return
// value will be populated with the UpdateDnsScheduleStaticWeightCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateDnsScheduleStaticWeightCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateDnsScheduleStaticWeightCommon Send returns without error.
//
// See UpdateDnsScheduleStaticWeight for more information on using the UpdateDnsScheduleStaticWeight
// API call, and error handling.
//
//    // Example sending a request using the UpdateDnsScheduleStaticWeightRequest method.
//    req, resp := client.UpdateDnsScheduleStaticWeightRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MCDN) UpdateDnsScheduleStaticWeightRequest(input *UpdateDnsScheduleStaticWeightInput) (req *request.Request, output *UpdateDnsScheduleStaticWeightOutput) {
	op := &request.Operation{
		Name:       opUpdateDnsScheduleStaticWeight,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateDnsScheduleStaticWeightInput{}
	}

	output = &UpdateDnsScheduleStaticWeightOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateDnsScheduleStaticWeight API operation for MCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MCDN's
// API operation UpdateDnsScheduleStaticWeight for usage and error information.
func (c *MCDN) UpdateDnsScheduleStaticWeight(input *UpdateDnsScheduleStaticWeightInput) (*UpdateDnsScheduleStaticWeightOutput, error) {
	req, out := c.UpdateDnsScheduleStaticWeightRequest(input)
	return out, req.Send()
}

// UpdateDnsScheduleStaticWeightWithContext is the same as UpdateDnsScheduleStaticWeight with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateDnsScheduleStaticWeight for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MCDN) UpdateDnsScheduleStaticWeightWithContext(ctx volcengine.Context, input *UpdateDnsScheduleStaticWeightInput, opts ...request.Option) (*UpdateDnsScheduleStaticWeightOutput, error) {
	req, out := c.UpdateDnsScheduleStaticWeightRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateDnsScheduleStaticWeightInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// DnsScheduleId is a required field
	DnsScheduleId *string `type:"string" json:",omitempty" required:"true"`

	// WeightId is a required field
	WeightId *string `type:"string" json:",omitempty" required:"true"`

	WeightItems []*WeightItemForUpdateDnsScheduleStaticWeightInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateDnsScheduleStaticWeightInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDnsScheduleStaticWeightInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateDnsScheduleStaticWeightInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateDnsScheduleStaticWeightInput"}
	if s.DnsScheduleId == nil {
		invalidParams.Add(request.NewErrParamRequired("DnsScheduleId"))
	}
	if s.WeightId == nil {
		invalidParams.Add(request.NewErrParamRequired("WeightId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDnsScheduleId sets the DnsScheduleId field's value.
func (s *UpdateDnsScheduleStaticWeightInput) SetDnsScheduleId(v string) *UpdateDnsScheduleStaticWeightInput {
	s.DnsScheduleId = &v
	return s
}

// SetWeightId sets the WeightId field's value.
func (s *UpdateDnsScheduleStaticWeightInput) SetWeightId(v string) *UpdateDnsScheduleStaticWeightInput {
	s.WeightId = &v
	return s
}

// SetWeightItems sets the WeightItems field's value.
func (s *UpdateDnsScheduleStaticWeightInput) SetWeightItems(v []*WeightItemForUpdateDnsScheduleStaticWeightInput) *UpdateDnsScheduleStaticWeightInput {
	s.WeightItems = v
	return s
}

type UpdateDnsScheduleStaticWeightOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateDnsScheduleStaticWeightOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateDnsScheduleStaticWeightOutput) GoString() string {
	return s.String()
}

type WeightItemForUpdateDnsScheduleStaticWeightInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DomainId *string `type:"string" json:",omitempty"`

	Value *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s WeightItemForUpdateDnsScheduleStaticWeightInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s WeightItemForUpdateDnsScheduleStaticWeightInput) GoString() string {
	return s.String()
}

// SetDomainId sets the DomainId field's value.
func (s *WeightItemForUpdateDnsScheduleStaticWeightInput) SetDomainId(v string) *WeightItemForUpdateDnsScheduleStaticWeightInput {
	s.DomainId = &v
	return s
}

// SetValue sets the Value field's value.
func (s *WeightItemForUpdateDnsScheduleStaticWeightInput) SetValue(v int32) *WeightItemForUpdateDnsScheduleStaticWeightInput {
	s.Value = &v
	return s
}
