// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mcdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDisableDnsScheduleDomainCommon = "DisableDnsScheduleDomain"

// DisableDnsScheduleDomainCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DisableDnsScheduleDomainCommon operation. The "output" return
// value will be populated with the DisableDnsScheduleDomainCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisableDnsScheduleDomainCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisableDnsScheduleDomainCommon Send returns without error.
//
// See DisableDnsScheduleDomainCommon for more information on using the DisableDnsScheduleDomainCommon
// API call, and error handling.
//
//    // Example sending a request using the DisableDnsScheduleDomainCommonRequest method.
//    req, resp := client.DisableDnsScheduleDomainCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MCDN) DisableDnsScheduleDomainCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDisableDnsScheduleDomainCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DisableDnsScheduleDomainCommon API operation for MCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MCDN's
// API operation DisableDnsScheduleDomainCommon for usage and error information.
func (c *MCDN) DisableDnsScheduleDomainCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DisableDnsScheduleDomainCommonRequest(input)
	return out, req.Send()
}

// DisableDnsScheduleDomainCommonWithContext is the same as DisableDnsScheduleDomainCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DisableDnsScheduleDomainCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MCDN) DisableDnsScheduleDomainCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DisableDnsScheduleDomainCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDisableDnsScheduleDomain = "DisableDnsScheduleDomain"

// DisableDnsScheduleDomainRequest generates a "volcengine/request.Request" representing the
// client's request for the DisableDnsScheduleDomain operation. The "output" return
// value will be populated with the DisableDnsScheduleDomainCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisableDnsScheduleDomainCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisableDnsScheduleDomainCommon Send returns without error.
//
// See DisableDnsScheduleDomain for more information on using the DisableDnsScheduleDomain
// API call, and error handling.
//
//    // Example sending a request using the DisableDnsScheduleDomainRequest method.
//    req, resp := client.DisableDnsScheduleDomainRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *MCDN) DisableDnsScheduleDomainRequest(input *DisableDnsScheduleDomainInput) (req *request.Request, output *DisableDnsScheduleDomainOutput) {
	op := &request.Operation{
		Name:       opDisableDnsScheduleDomain,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DisableDnsScheduleDomainInput{}
	}

	output = &DisableDnsScheduleDomainOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DisableDnsScheduleDomain API operation for MCDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for MCDN's
// API operation DisableDnsScheduleDomain for usage and error information.
func (c *MCDN) DisableDnsScheduleDomain(input *DisableDnsScheduleDomainInput) (*DisableDnsScheduleDomainOutput, error) {
	req, out := c.DisableDnsScheduleDomainRequest(input)
	return out, req.Send()
}

// DisableDnsScheduleDomainWithContext is the same as DisableDnsScheduleDomain with the addition of
// the ability to pass a context and additional request options.
//
// See DisableDnsScheduleDomain for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MCDN) DisableDnsScheduleDomainWithContext(ctx volcengine.Context, input *DisableDnsScheduleDomainInput, opts ...request.Option) (*DisableDnsScheduleDomainOutput, error) {
	req, out := c.DisableDnsScheduleDomainRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DisableDnsScheduleDomainInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// DnsScheduleId is a required field
	DnsScheduleId *string `type:"string" json:",omitempty" required:"true"`

	// DomainId is a required field
	DomainId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DisableDnsScheduleDomainInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableDnsScheduleDomainInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DisableDnsScheduleDomainInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DisableDnsScheduleDomainInput"}
	if s.DnsScheduleId == nil {
		invalidParams.Add(request.NewErrParamRequired("DnsScheduleId"))
	}
	if s.DomainId == nil {
		invalidParams.Add(request.NewErrParamRequired("DomainId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDnsScheduleId sets the DnsScheduleId field's value.
func (s *DisableDnsScheduleDomainInput) SetDnsScheduleId(v string) *DisableDnsScheduleDomainInput {
	s.DnsScheduleId = &v
	return s
}

// SetDomainId sets the DomainId field's value.
func (s *DisableDnsScheduleDomainInput) SetDomainId(v string) *DisableDnsScheduleDomainInput {
	s.DomainId = &v
	return s
}

type DisableDnsScheduleDomainOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DisableDnsScheduleDomainOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableDnsScheduleDomainOutput) GoString() string {
	return s.String()
}
