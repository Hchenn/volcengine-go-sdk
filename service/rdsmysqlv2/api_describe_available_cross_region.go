// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeAvailableCrossRegionCommon = "DescribeAvailableCrossRegion"

// DescribeAvailableCrossRegionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeAvailableCrossRegionCommon operation. The "output" return
// value will be populated with the DescribeAvailableCrossRegionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAvailableCrossRegionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAvailableCrossRegionCommon Send returns without error.
//
// See DescribeAvailableCrossRegionCommon for more information on using the DescribeAvailableCrossRegionCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeAvailableCrossRegionCommonRequest method.
//    req, resp := client.DescribeAvailableCrossRegionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeAvailableCrossRegionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeAvailableCrossRegionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeAvailableCrossRegionCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeAvailableCrossRegionCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeAvailableCrossRegionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeAvailableCrossRegionCommonRequest(input)
	return out, req.Send()
}

// DescribeAvailableCrossRegionCommonWithContext is the same as DescribeAvailableCrossRegionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAvailableCrossRegionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeAvailableCrossRegionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeAvailableCrossRegionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAvailableCrossRegion = "DescribeAvailableCrossRegion"

// DescribeAvailableCrossRegionRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeAvailableCrossRegion operation. The "output" return
// value will be populated with the DescribeAvailableCrossRegionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAvailableCrossRegionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAvailableCrossRegionCommon Send returns without error.
//
// See DescribeAvailableCrossRegion for more information on using the DescribeAvailableCrossRegion
// API call, and error handling.
//
//    // Example sending a request using the DescribeAvailableCrossRegionRequest method.
//    req, resp := client.DescribeAvailableCrossRegionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeAvailableCrossRegionRequest(input *DescribeAvailableCrossRegionInput) (req *request.Request, output *DescribeAvailableCrossRegionOutput) {
	op := &request.Operation{
		Name:       opDescribeAvailableCrossRegion,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeAvailableCrossRegionInput{}
	}

	output = &DescribeAvailableCrossRegionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeAvailableCrossRegion API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeAvailableCrossRegion for usage and error information.
func (c *RDSMYSQLV2) DescribeAvailableCrossRegion(input *DescribeAvailableCrossRegionInput) (*DescribeAvailableCrossRegionOutput, error) {
	req, out := c.DescribeAvailableCrossRegionRequest(input)
	return out, req.Send()
}

// DescribeAvailableCrossRegionWithContext is the same as DescribeAvailableCrossRegion with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAvailableCrossRegion for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeAvailableCrossRegionWithContext(ctx volcengine.Context, input *DescribeAvailableCrossRegionInput, opts ...request.Option) (*DescribeAvailableCrossRegionOutput, error) {
	req, out := c.DescribeAvailableCrossRegionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeAvailableCrossRegionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	// RegionId is a required field
	RegionId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeAvailableCrossRegionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAvailableCrossRegionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeAvailableCrossRegionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeAvailableCrossRegionInput"}
	if s.RegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("RegionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeAvailableCrossRegionInput) SetInstanceId(v string) *DescribeAvailableCrossRegionInput {
	s.InstanceId = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *DescribeAvailableCrossRegionInput) SetRegionId(v string) *DescribeAvailableCrossRegionInput {
	s.RegionId = &v
	return s
}

type DescribeAvailableCrossRegionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Regions []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeAvailableCrossRegionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAvailableCrossRegionOutput) GoString() string {
	return s.String()
}

// SetRegions sets the Regions field's value.
func (s *DescribeAvailableCrossRegionOutput) SetRegions(v []*string) *DescribeAvailableCrossRegionOutput {
	s.Regions = v
	return s
}
