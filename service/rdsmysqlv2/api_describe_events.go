// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeEventsCommon = "DescribeEvents"

// DescribeEventsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeEventsCommon operation. The "output" return
// value will be populated with the DescribeEventsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeEventsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeEventsCommon Send returns without error.
//
// See DescribeEventsCommon for more information on using the DescribeEventsCommon
// API call, and error handling.
//
//	// Example sending a request using the DescribeEventsCommonRequest method.
//	req, resp := client.DescribeEventsCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *RDSMYSQLV2) DescribeEventsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeEventsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeEventsCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeEventsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeEventsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeEventsCommonRequest(input)
	return out, req.Send()
}

// DescribeEventsCommonWithContext is the same as DescribeEventsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEventsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeEventsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeEventsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEvents = "DescribeEvents"

// DescribeEventsRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeEvents operation. The "output" return
// value will be populated with the DescribeEventsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeEventsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeEventsCommon Send returns without error.
//
// See DescribeEvents for more information on using the DescribeEvents
// API call, and error handling.
//
//	// Example sending a request using the DescribeEventsRequest method.
//	req, resp := client.DescribeEventsRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *RDSMYSQLV2) DescribeEventsRequest(input *DescribeEventsInput) (req *request.Request, output *DescribeEventsOutput) {
	op := &request.Operation{
		Name:       opDescribeEvents,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeEventsInput{}
	}

	output = &DescribeEventsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeEvents API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeEvents for usage and error information.
func (c *RDSMYSQLV2) DescribeEvents(input *DescribeEventsInput) (*DescribeEventsOutput, error) {
	req, out := c.DescribeEventsRequest(input)
	return out, req.Send()
}

// DescribeEventsWithContext is the same as DescribeEvents with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEvents for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeEventsWithContext(ctx volcengine.Context, input *DescribeEventsInput, opts ...request.Option) (*DescribeEventsOutput, error) {
	req, out := c.DescribeEventsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForDescribeEventsOutput struct {
	_ struct{} `type:"structure"`

	APIVersion *string `type:"string"`

	CostTimeMS *int64 `type:"int64"`

	EventAction *string `type:"string"`

	EventCategory *string `type:"string"`

	EventDesc *string `type:"string"`

	EventId *string `type:"string"`

	EventParams *string `type:"string"`

	EventReason *string `type:"string"`

	EventResult *string `type:"string"`

	EventSource *string `type:"string"`

	EventType *string `type:"string"`

	Extend *string `type:"string"`

	FinishTime *string `type:"string"`

	InstanceID *string `type:"string"`

	InstanceName *string `type:"string"`

	ModifyTime *string `type:"string"`

	OperationTime *string `type:"string"`

	OwnerHostIP *string `type:"string"`

	OwnerIP *string `type:"string"`

	OwnerName *string `type:"string"`

	ResourceName *string `type:"string"`

	ResourceType *string `type:"string"`
}

// String returns the string representation
func (s DataForDescribeEventsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForDescribeEventsOutput) GoString() string {
	return s.String()
}

// SetAPIVersion sets the APIVersion field's value.
func (s *DataForDescribeEventsOutput) SetAPIVersion(v string) *DataForDescribeEventsOutput {
	s.APIVersion = &v
	return s
}

// SetCostTimeMS sets the CostTimeMS field's value.
func (s *DataForDescribeEventsOutput) SetCostTimeMS(v int64) *DataForDescribeEventsOutput {
	s.CostTimeMS = &v
	return s
}

// SetEventAction sets the EventAction field's value.
func (s *DataForDescribeEventsOutput) SetEventAction(v string) *DataForDescribeEventsOutput {
	s.EventAction = &v
	return s
}

// SetEventCategory sets the EventCategory field's value.
func (s *DataForDescribeEventsOutput) SetEventCategory(v string) *DataForDescribeEventsOutput {
	s.EventCategory = &v
	return s
}

// SetEventDesc sets the EventDesc field's value.
func (s *DataForDescribeEventsOutput) SetEventDesc(v string) *DataForDescribeEventsOutput {
	s.EventDesc = &v
	return s
}

// SetEventId sets the EventId field's value.
func (s *DataForDescribeEventsOutput) SetEventId(v string) *DataForDescribeEventsOutput {
	s.EventId = &v
	return s
}

// SetEventParams sets the EventParams field's value.
func (s *DataForDescribeEventsOutput) SetEventParams(v string) *DataForDescribeEventsOutput {
	s.EventParams = &v
	return s
}

// SetEventReason sets the EventReason field's value.
func (s *DataForDescribeEventsOutput) SetEventReason(v string) *DataForDescribeEventsOutput {
	s.EventReason = &v
	return s
}

// SetEventResult sets the EventResult field's value.
func (s *DataForDescribeEventsOutput) SetEventResult(v string) *DataForDescribeEventsOutput {
	s.EventResult = &v
	return s
}

// SetEventSource sets the EventSource field's value.
func (s *DataForDescribeEventsOutput) SetEventSource(v string) *DataForDescribeEventsOutput {
	s.EventSource = &v
	return s
}

// SetEventType sets the EventType field's value.
func (s *DataForDescribeEventsOutput) SetEventType(v string) *DataForDescribeEventsOutput {
	s.EventType = &v
	return s
}

// SetExtend sets the Extend field's value.
func (s *DataForDescribeEventsOutput) SetExtend(v string) *DataForDescribeEventsOutput {
	s.Extend = &v
	return s
}

// SetFinishTime sets the FinishTime field's value.
func (s *DataForDescribeEventsOutput) SetFinishTime(v string) *DataForDescribeEventsOutput {
	s.FinishTime = &v
	return s
}

// SetInstanceID sets the InstanceID field's value.
func (s *DataForDescribeEventsOutput) SetInstanceID(v string) *DataForDescribeEventsOutput {
	s.InstanceID = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *DataForDescribeEventsOutput) SetInstanceName(v string) *DataForDescribeEventsOutput {
	s.InstanceName = &v
	return s
}

// SetModifyTime sets the ModifyTime field's value.
func (s *DataForDescribeEventsOutput) SetModifyTime(v string) *DataForDescribeEventsOutput {
	s.ModifyTime = &v
	return s
}

// SetOperationTime sets the OperationTime field's value.
func (s *DataForDescribeEventsOutput) SetOperationTime(v string) *DataForDescribeEventsOutput {
	s.OperationTime = &v
	return s
}

// SetOwnerHostIP sets the OwnerHostIP field's value.
func (s *DataForDescribeEventsOutput) SetOwnerHostIP(v string) *DataForDescribeEventsOutput {
	s.OwnerHostIP = &v
	return s
}

// SetOwnerIP sets the OwnerIP field's value.
func (s *DataForDescribeEventsOutput) SetOwnerIP(v string) *DataForDescribeEventsOutput {
	s.OwnerIP = &v
	return s
}

// SetOwnerName sets the OwnerName field's value.
func (s *DataForDescribeEventsOutput) SetOwnerName(v string) *DataForDescribeEventsOutput {
	s.OwnerName = &v
	return s
}

// SetResourceName sets the ResourceName field's value.
func (s *DataForDescribeEventsOutput) SetResourceName(v string) *DataForDescribeEventsOutput {
	s.ResourceName = &v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *DataForDescribeEventsOutput) SetResourceType(v string) *DataForDescribeEventsOutput {
	s.ResourceType = &v
	return s
}

type DescribeEventsInput struct {
	_ struct{} `type:"structure"`

	EndTime *string `type:"string"`

	EventAction *string `type:"string"`

	EventResult *string `type:"string" enum:"EnumOfEventResultForDescribeEventsInput"`

	EventSource *string `type:"string" enum:"EnumOfEventSourceForDescribeEventsInput"`

	EventType *string `type:"string" enum:"EnumOfEventTypeForDescribeEventsInput"`

	FinishEndTime *string `type:"string"`

	FinishStartTime *string `type:"string"`

	InstanceId *string `type:"string"`

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`

	ProjectName *string `type:"string"`

	StartTime *string `type:"string"`
}

// String returns the string representation
func (s DescribeEventsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventsInput) GoString() string {
	return s.String()
}

// SetEndTime sets the EndTime field's value.
func (s *DescribeEventsInput) SetEndTime(v string) *DescribeEventsInput {
	s.EndTime = &v
	return s
}

// SetEventAction sets the EventAction field's value.
func (s *DescribeEventsInput) SetEventAction(v string) *DescribeEventsInput {
	s.EventAction = &v
	return s
}

// SetEventResult sets the EventResult field's value.
func (s *DescribeEventsInput) SetEventResult(v string) *DescribeEventsInput {
	s.EventResult = &v
	return s
}

// SetEventSource sets the EventSource field's value.
func (s *DescribeEventsInput) SetEventSource(v string) *DescribeEventsInput {
	s.EventSource = &v
	return s
}

// SetEventType sets the EventType field's value.
func (s *DescribeEventsInput) SetEventType(v string) *DescribeEventsInput {
	s.EventType = &v
	return s
}

// SetFinishEndTime sets the FinishEndTime field's value.
func (s *DescribeEventsInput) SetFinishEndTime(v string) *DescribeEventsInput {
	s.FinishEndTime = &v
	return s
}

// SetFinishStartTime sets the FinishStartTime field's value.
func (s *DescribeEventsInput) SetFinishStartTime(v string) *DescribeEventsInput {
	s.FinishStartTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeEventsInput) SetInstanceId(v string) *DescribeEventsInput {
	s.InstanceId = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *DescribeEventsInput) SetLimit(v int32) *DescribeEventsInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *DescribeEventsInput) SetOffset(v int32) *DescribeEventsInput {
	s.Offset = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeEventsInput) SetProjectName(v string) *DescribeEventsInput {
	s.ProjectName = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DescribeEventsInput) SetStartTime(v string) *DescribeEventsInput {
	s.StartTime = &v
	return s
}

type DescribeEventsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Datas []*DataForDescribeEventsOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeEventsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventsOutput) GoString() string {
	return s.String()
}

// SetDatas sets the Datas field's value.
func (s *DescribeEventsOutput) SetDatas(v []*DataForDescribeEventsOutput) *DescribeEventsOutput {
	s.Datas = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeEventsOutput) SetTotal(v int32) *DescribeEventsOutput {
	s.Total = &v
	return s
}

const (
	// EnumOfEventResultForDescribeEventsInputFailed is a EnumOfEventResultForDescribeEventsInput enum value
	EnumOfEventResultForDescribeEventsInputFailed = "Failed"

	// EnumOfEventResultForDescribeEventsInputRunning is a EnumOfEventResultForDescribeEventsInput enum value
	EnumOfEventResultForDescribeEventsInputRunning = "Running"

	// EnumOfEventResultForDescribeEventsInputSuccess is a EnumOfEventResultForDescribeEventsInput enum value
	EnumOfEventResultForDescribeEventsInputSuccess = "Success"

	// EnumOfEventResultForDescribeEventsInputTimeout is a EnumOfEventResultForDescribeEventsInput enum value
	EnumOfEventResultForDescribeEventsInputTimeout = "Timeout"
)

const (
	// EnumOfEventSourceForDescribeEventsInputSystem is a EnumOfEventSourceForDescribeEventsInput enum value
	EnumOfEventSourceForDescribeEventsInputSystem = "System"

	// EnumOfEventSourceForDescribeEventsInputSystemUser is a EnumOfEventSourceForDescribeEventsInput enum value
	EnumOfEventSourceForDescribeEventsInputSystemUser = "SystemUser"

	// EnumOfEventSourceForDescribeEventsInputUser is a EnumOfEventSourceForDescribeEventsInput enum value
	EnumOfEventSourceForDescribeEventsInputUser = "User"

	// EnumOfEventSourceForDescribeEventsInputUserMaintain is a EnumOfEventSourceForDescribeEventsInput enum value
	EnumOfEventSourceForDescribeEventsInputUserMaintain = "UserMaintain"
)

const (
	// EnumOfEventTypeForDescribeEventsInputAssumeRole is a EnumOfEventTypeForDescribeEventsInput enum value
	EnumOfEventTypeForDescribeEventsInputAssumeRole = "AssumeRole"

	// EnumOfEventTypeForDescribeEventsInputOpenApi is a EnumOfEventTypeForDescribeEventsInput enum value
	EnumOfEventTypeForDescribeEventsInputOpenApi = "OpenAPI"

	// EnumOfEventTypeForDescribeEventsInputOther is a EnumOfEventTypeForDescribeEventsInput enum value
	EnumOfEventTypeForDescribeEventsInputOther = "Other"

	// EnumOfEventTypeForDescribeEventsInputWeb is a EnumOfEventTypeForDescribeEventsInput enum value
	EnumOfEventTypeForDescribeEventsInputWeb = "Web"
)
