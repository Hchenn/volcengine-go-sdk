// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyDatabasePrivilegeCommon = "ModifyDatabasePrivilege"

// ModifyDatabasePrivilegeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDatabasePrivilegeCommon operation. The "output" return
// value will be populated with the ModifyDatabasePrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDatabasePrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDatabasePrivilegeCommon Send returns without error.
//
// See ModifyDatabasePrivilegeCommon for more information on using the ModifyDatabasePrivilegeCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDatabasePrivilegeCommonRequest method.
//    req, resp := client.ModifyDatabasePrivilegeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDatabasePrivilegeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDatabasePrivilegeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDatabasePrivilegeCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation ModifyDatabasePrivilegeCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyDatabasePrivilegeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDatabasePrivilegeCommonRequest(input)
	return out, req.Send()
}

// ModifyDatabasePrivilegeCommonWithContext is the same as ModifyDatabasePrivilegeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDatabasePrivilegeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDatabasePrivilegeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDatabasePrivilegeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDatabasePrivilege = "ModifyDatabasePrivilege"

// ModifyDatabasePrivilegeRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDatabasePrivilege operation. The "output" return
// value will be populated with the ModifyDatabasePrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDatabasePrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDatabasePrivilegeCommon Send returns without error.
//
// See ModifyDatabasePrivilege for more information on using the ModifyDatabasePrivilege
// API call, and error handling.
//
//    // Example sending a request using the ModifyDatabasePrivilegeRequest method.
//    req, resp := client.ModifyDatabasePrivilegeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDatabasePrivilegeRequest(input *ModifyDatabasePrivilegeInput) (req *request.Request, output *ModifyDatabasePrivilegeOutput) {
	op := &request.Operation{
		Name:       opModifyDatabasePrivilege,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDatabasePrivilegeInput{}
	}

	output = &ModifyDatabasePrivilegeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDatabasePrivilege API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation ModifyDatabasePrivilege for usage and error information.
func (c *RDSMYSQLV2) ModifyDatabasePrivilege(input *ModifyDatabasePrivilegeInput) (*ModifyDatabasePrivilegeOutput, error) {
	req, out := c.ModifyDatabasePrivilegeRequest(input)
	return out, req.Send()
}

// ModifyDatabasePrivilegeWithContext is the same as ModifyDatabasePrivilege with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDatabasePrivilege for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDatabasePrivilegeWithContext(ctx volcengine.Context, input *ModifyDatabasePrivilegeInput, opts ...request.Option) (*ModifyDatabasePrivilegeOutput, error) {
	req, out := c.ModifyDatabasePrivilegeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyDatabasePrivilegeInput struct {
	_ struct{} `type:"structure"`

	// DBName is a required field
	DBName *string `min:"2" max:"64" type:"string" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	ModifyDatabasePrivilegesInfo []*ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput `type:"list"`
}

// String returns the string representation
func (s ModifyDatabasePrivilegeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDatabasePrivilegeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDatabasePrivilegeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDatabasePrivilegeInput"}
	if s.DBName == nil {
		invalidParams.Add(request.NewErrParamRequired("DBName"))
	}
	if s.DBName != nil && len(*s.DBName) < 2 {
		invalidParams.Add(request.NewErrParamMinLen("DBName", 2))
	}
	if s.DBName != nil && len(*s.DBName) > 64 {
		invalidParams.Add(request.NewErrParamMaxLen("DBName", 64, *s.DBName))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDBName sets the DBName field's value.
func (s *ModifyDatabasePrivilegeInput) SetDBName(v string) *ModifyDatabasePrivilegeInput {
	s.DBName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDatabasePrivilegeInput) SetInstanceId(v string) *ModifyDatabasePrivilegeInput {
	s.InstanceId = &v
	return s
}

// SetModifyDatabasePrivilegesInfo sets the ModifyDatabasePrivilegesInfo field's value.
func (s *ModifyDatabasePrivilegeInput) SetModifyDatabasePrivilegesInfo(v []*ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) *ModifyDatabasePrivilegeInput {
	s.ModifyDatabasePrivilegesInfo = v
	return s
}

type ModifyDatabasePrivilegeOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyDatabasePrivilegeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDatabasePrivilegeOutput) GoString() string {
	return s.String()
}

type ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	ActionType *string `type:"string" enum:"EnumOfActionTypeForModifyDatabasePrivilegeInput"`

	Privilege *string `type:"string" enum:"EnumOfPrivilegeForModifyDatabasePrivilegeInput"`

	PrivilegeCustom *string `type:"string"`
}

// String returns the string representation
func (s ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) SetAccountName(v string) *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput {
	s.AccountName = &v
	return s
}

// SetActionType sets the ActionType field's value.
func (s *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) SetActionType(v string) *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput {
	s.ActionType = &v
	return s
}

// SetPrivilege sets the Privilege field's value.
func (s *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) SetPrivilege(v string) *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput {
	s.Privilege = &v
	return s
}

// SetPrivilegeCustom sets the PrivilegeCustom field's value.
func (s *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) SetPrivilegeCustom(v string) *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput {
	s.PrivilegeCustom = &v
	return s
}

const (
	// EnumOfActionTypeForModifyDatabasePrivilegeInputGrant is a EnumOfActionTypeForModifyDatabasePrivilegeInput enum value
	EnumOfActionTypeForModifyDatabasePrivilegeInputGrant = "Grant"

	// EnumOfActionTypeForModifyDatabasePrivilegeInputRevoke is a EnumOfActionTypeForModifyDatabasePrivilegeInput enum value
	EnumOfActionTypeForModifyDatabasePrivilegeInputRevoke = "Revoke"
)

const (
	// EnumOfPrivilegeForModifyDatabasePrivilegeInputCustom is a EnumOfPrivilegeForModifyDatabasePrivilegeInput enum value
	EnumOfPrivilegeForModifyDatabasePrivilegeInputCustom = "Custom"

	// EnumOfPrivilegeForModifyDatabasePrivilegeInputDdlonly is a EnumOfPrivilegeForModifyDatabasePrivilegeInput enum value
	EnumOfPrivilegeForModifyDatabasePrivilegeInputDdlonly = "DDLOnly"

	// EnumOfPrivilegeForModifyDatabasePrivilegeInputDmlonly is a EnumOfPrivilegeForModifyDatabasePrivilegeInput enum value
	EnumOfPrivilegeForModifyDatabasePrivilegeInputDmlonly = "DMLOnly"

	// EnumOfPrivilegeForModifyDatabasePrivilegeInputNone is a EnumOfPrivilegeForModifyDatabasePrivilegeInput enum value
	EnumOfPrivilegeForModifyDatabasePrivilegeInputNone = "None"

	// EnumOfPrivilegeForModifyDatabasePrivilegeInputReadOnly is a EnumOfPrivilegeForModifyDatabasePrivilegeInput enum value
	EnumOfPrivilegeForModifyDatabasePrivilegeInputReadOnly = "ReadOnly"

	// EnumOfPrivilegeForModifyDatabasePrivilegeInputReadWrite is a EnumOfPrivilegeForModifyDatabasePrivilegeInput enum value
	EnumOfPrivilegeForModifyDatabasePrivilegeInputReadWrite = "ReadWrite"
)
