// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeBackupPolicyCommon = "DescribeBackupPolicy"

// DescribeBackupPolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeBackupPolicyCommon operation. The "output" return
// value will be populated with the DescribeBackupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupPolicyCommon Send returns without error.
//
// See DescribeBackupPolicyCommon for more information on using the DescribeBackupPolicyCommon
// API call, and error handling.
//
//	// Example sending a request using the DescribeBackupPolicyCommonRequest method.
//	req, resp := client.DescribeBackupPolicyCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *RDSMYSQLV2) DescribeBackupPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeBackupPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackupPolicyCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeBackupPolicyCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeBackupPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupPolicyCommonRequest(input)
	return out, req.Send()
}

// DescribeBackupPolicyCommonWithContext is the same as DescribeBackupPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackupPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeBackupPolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBackupPolicy = "DescribeBackupPolicy"

// DescribeBackupPolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeBackupPolicy operation. The "output" return
// value will be populated with the DescribeBackupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupPolicyCommon Send returns without error.
//
// See DescribeBackupPolicy for more information on using the DescribeBackupPolicy
// API call, and error handling.
//
//	// Example sending a request using the DescribeBackupPolicyRequest method.
//	req, resp := client.DescribeBackupPolicyRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *RDSMYSQLV2) DescribeBackupPolicyRequest(input *DescribeBackupPolicyInput) (req *request.Request, output *DescribeBackupPolicyOutput) {
	op := &request.Operation{
		Name:       opDescribeBackupPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeBackupPolicyInput{}
	}

	output = &DescribeBackupPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackupPolicy API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeBackupPolicy for usage and error information.
func (c *RDSMYSQLV2) DescribeBackupPolicy(input *DescribeBackupPolicyInput) (*DescribeBackupPolicyOutput, error) {
	req, out := c.DescribeBackupPolicyRequest(input)
	return out, req.Send()
}

// DescribeBackupPolicyWithContext is the same as DescribeBackupPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackupPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeBackupPolicyWithContext(ctx volcengine.Context, input *DescribeBackupPolicyInput, opts ...request.Option) (*DescribeBackupPolicyOutput, error) {
	req, out := c.DescribeBackupPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeBackupPolicyInput struct {
	_ struct{} `type:"structure"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeBackupPolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeBackupPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeBackupPolicyInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeBackupPolicyInput) SetInstanceId(v string) *DescribeBackupPolicyInput {
	s.InstanceId = &v
	return s
}

type DescribeBackupPolicyOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	BinlogFileCountsEnable *bool `type:"boolean"`

	BinlogLimitCount *int32 `type:"int32"`

	BinlogLocalRetentionHour *int32 `type:"int32"`

	BinlogSpaceLimitEnable *bool `type:"boolean"`

	BinlogStoragePercentage *int32 `type:"int32"`

	DataBackupRetentionDay *int32 `type:"int32"`

	DataFullBackupPeriods []*string `type:"list"`

	DataFullBackupTime *string `type:"string"`

	InstanceId *string `type:"string"`

	LogBackupRetentionDay *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeBackupPolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupPolicyOutput) GoString() string {
	return s.String()
}

// SetBinlogFileCountsEnable sets the BinlogFileCountsEnable field's value.
func (s *DescribeBackupPolicyOutput) SetBinlogFileCountsEnable(v bool) *DescribeBackupPolicyOutput {
	s.BinlogFileCountsEnable = &v
	return s
}

// SetBinlogLimitCount sets the BinlogLimitCount field's value.
func (s *DescribeBackupPolicyOutput) SetBinlogLimitCount(v int32) *DescribeBackupPolicyOutput {
	s.BinlogLimitCount = &v
	return s
}

// SetBinlogLocalRetentionHour sets the BinlogLocalRetentionHour field's value.
func (s *DescribeBackupPolicyOutput) SetBinlogLocalRetentionHour(v int32) *DescribeBackupPolicyOutput {
	s.BinlogLocalRetentionHour = &v
	return s
}

// SetBinlogSpaceLimitEnable sets the BinlogSpaceLimitEnable field's value.
func (s *DescribeBackupPolicyOutput) SetBinlogSpaceLimitEnable(v bool) *DescribeBackupPolicyOutput {
	s.BinlogSpaceLimitEnable = &v
	return s
}

// SetBinlogStoragePercentage sets the BinlogStoragePercentage field's value.
func (s *DescribeBackupPolicyOutput) SetBinlogStoragePercentage(v int32) *DescribeBackupPolicyOutput {
	s.BinlogStoragePercentage = &v
	return s
}

// SetDataBackupRetentionDay sets the DataBackupRetentionDay field's value.
func (s *DescribeBackupPolicyOutput) SetDataBackupRetentionDay(v int32) *DescribeBackupPolicyOutput {
	s.DataBackupRetentionDay = &v
	return s
}

// SetDataFullBackupPeriods sets the DataFullBackupPeriods field's value.
func (s *DescribeBackupPolicyOutput) SetDataFullBackupPeriods(v []*string) *DescribeBackupPolicyOutput {
	s.DataFullBackupPeriods = v
	return s
}

// SetDataFullBackupTime sets the DataFullBackupTime field's value.
func (s *DescribeBackupPolicyOutput) SetDataFullBackupTime(v string) *DescribeBackupPolicyOutput {
	s.DataFullBackupTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeBackupPolicyOutput) SetInstanceId(v string) *DescribeBackupPolicyOutput {
	s.InstanceId = &v
	return s
}

// SetLogBackupRetentionDay sets the LogBackupRetentionDay field's value.
func (s *DescribeBackupPolicyOutput) SetLogBackupRetentionDay(v int32) *DescribeBackupPolicyOutput {
	s.LogBackupRetentionDay = &v
	return s
}
