// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRestoreToCrossRegionInstanceCommon = "RestoreToCrossRegionInstance"

// RestoreToCrossRegionInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RestoreToCrossRegionInstanceCommon operation. The "output" return
// value will be populated with the RestoreToCrossRegionInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestoreToCrossRegionInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestoreToCrossRegionInstanceCommon Send returns without error.
//
// See RestoreToCrossRegionInstanceCommon for more information on using the RestoreToCrossRegionInstanceCommon
// API call, and error handling.
//
//	// Example sending a request using the RestoreToCrossRegionInstanceCommonRequest method.
//	req, resp := client.RestoreToCrossRegionInstanceCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *RDSMYSQLV2) RestoreToCrossRegionInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRestoreToCrossRegionInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RestoreToCrossRegionInstanceCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation RestoreToCrossRegionInstanceCommon for usage and error information.
func (c *RDSMYSQLV2) RestoreToCrossRegionInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RestoreToCrossRegionInstanceCommonRequest(input)
	return out, req.Send()
}

// RestoreToCrossRegionInstanceCommonWithContext is the same as RestoreToCrossRegionInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RestoreToCrossRegionInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) RestoreToCrossRegionInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RestoreToCrossRegionInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestoreToCrossRegionInstance = "RestoreToCrossRegionInstance"

// RestoreToCrossRegionInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the RestoreToCrossRegionInstance operation. The "output" return
// value will be populated with the RestoreToCrossRegionInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestoreToCrossRegionInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestoreToCrossRegionInstanceCommon Send returns without error.
//
// See RestoreToCrossRegionInstance for more information on using the RestoreToCrossRegionInstance
// API call, and error handling.
//
//	// Example sending a request using the RestoreToCrossRegionInstanceRequest method.
//	req, resp := client.RestoreToCrossRegionInstanceRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *RDSMYSQLV2) RestoreToCrossRegionInstanceRequest(input *RestoreToCrossRegionInstanceInput) (req *request.Request, output *RestoreToCrossRegionInstanceOutput) {
	op := &request.Operation{
		Name:       opRestoreToCrossRegionInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RestoreToCrossRegionInstanceInput{}
	}

	output = &RestoreToCrossRegionInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RestoreToCrossRegionInstance API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation RestoreToCrossRegionInstance for usage and error information.
func (c *RDSMYSQLV2) RestoreToCrossRegionInstance(input *RestoreToCrossRegionInstanceInput) (*RestoreToCrossRegionInstanceOutput, error) {
	req, out := c.RestoreToCrossRegionInstanceRequest(input)
	return out, req.Send()
}

// RestoreToCrossRegionInstanceWithContext is the same as RestoreToCrossRegionInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RestoreToCrossRegionInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) RestoreToCrossRegionInstanceWithContext(ctx volcengine.Context, input *RestoreToCrossRegionInstanceInput, opts ...request.Option) (*RestoreToCrossRegionInstanceOutput, error) {
	req, out := c.RestoreToCrossRegionInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ChargeInfoForRestoreToCrossRegionInstanceInput struct {
	_ struct{} `type:"structure"`

	AutoRenew *bool `type:"boolean"`

	ChargeType *string `type:"string" enum:"EnumOfChargeTypeForRestoreToCrossRegionInstanceInput"`

	Number *int32 `type:"int32"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string" enum:"EnumOfPeriodUnitForRestoreToCrossRegionInstanceInput"`
}

// String returns the string representation
func (s ChargeInfoForRestoreToCrossRegionInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ChargeInfoForRestoreToCrossRegionInstanceInput) GoString() string {
	return s.String()
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *ChargeInfoForRestoreToCrossRegionInstanceInput) SetAutoRenew(v bool) *ChargeInfoForRestoreToCrossRegionInstanceInput {
	s.AutoRenew = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *ChargeInfoForRestoreToCrossRegionInstanceInput) SetChargeType(v string) *ChargeInfoForRestoreToCrossRegionInstanceInput {
	s.ChargeType = &v
	return s
}

// SetNumber sets the Number field's value.
func (s *ChargeInfoForRestoreToCrossRegionInstanceInput) SetNumber(v int32) *ChargeInfoForRestoreToCrossRegionInstanceInput {
	s.Number = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *ChargeInfoForRestoreToCrossRegionInstanceInput) SetPeriod(v int32) *ChargeInfoForRestoreToCrossRegionInstanceInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *ChargeInfoForRestoreToCrossRegionInstanceInput) SetPeriodUnit(v string) *ChargeInfoForRestoreToCrossRegionInstanceInput {
	s.PeriodUnit = &v
	return s
}

type InstanceTagForRestoreToCrossRegionInstanceInput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s InstanceTagForRestoreToCrossRegionInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceTagForRestoreToCrossRegionInstanceInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *InstanceTagForRestoreToCrossRegionInstanceInput) SetKey(v string) *InstanceTagForRestoreToCrossRegionInstanceInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *InstanceTagForRestoreToCrossRegionInstanceInput) SetValue(v string) *InstanceTagForRestoreToCrossRegionInstanceInput {
	s.Value = &v
	return s
}

type NodeInfoForRestoreToCrossRegionInstanceInput struct {
	_ struct{} `type:"structure"`

	NodeId *string `type:"string"`

	NodeOperateType *string `type:"string" enum:"EnumOfNodeOperateTypeForRestoreToCrossRegionInstanceInput"`

	NodePool *string `type:"string"`

	NodeSpec *string `type:"string"`

	NodeType *string `type:"string" enum:"EnumOfNodeTypeForRestoreToCrossRegionInstanceInput"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s NodeInfoForRestoreToCrossRegionInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeInfoForRestoreToCrossRegionInstanceInput) GoString() string {
	return s.String()
}

// SetNodeId sets the NodeId field's value.
func (s *NodeInfoForRestoreToCrossRegionInstanceInput) SetNodeId(v string) *NodeInfoForRestoreToCrossRegionInstanceInput {
	s.NodeId = &v
	return s
}

// SetNodeOperateType sets the NodeOperateType field's value.
func (s *NodeInfoForRestoreToCrossRegionInstanceInput) SetNodeOperateType(v string) *NodeInfoForRestoreToCrossRegionInstanceInput {
	s.NodeOperateType = &v
	return s
}

// SetNodePool sets the NodePool field's value.
func (s *NodeInfoForRestoreToCrossRegionInstanceInput) SetNodePool(v string) *NodeInfoForRestoreToCrossRegionInstanceInput {
	s.NodePool = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *NodeInfoForRestoreToCrossRegionInstanceInput) SetNodeSpec(v string) *NodeInfoForRestoreToCrossRegionInstanceInput {
	s.NodeSpec = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *NodeInfoForRestoreToCrossRegionInstanceInput) SetNodeType(v string) *NodeInfoForRestoreToCrossRegionInstanceInput {
	s.NodeType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *NodeInfoForRestoreToCrossRegionInstanceInput) SetZoneId(v string) *NodeInfoForRestoreToCrossRegionInstanceInput {
	s.ZoneId = &v
	return s
}

type RestoreToCrossRegionInstanceInput struct {
	_ struct{} `type:"structure"`

	AllowListIds []*string `type:"list"`

	BackupId *string `type:"string"`

	ChargeInfo *ChargeInfoForRestoreToCrossRegionInstanceInput `type:"structure"`

	DBParamGroupId *string `type:"string"`

	DstRegionId *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceTags []*InstanceTagForRestoreToCrossRegionInstanceInput `type:"list"`

	NodeInfo []*NodeInfoForRestoreToCrossRegionInstanceInput `type:"list"`

	ProjectName *string `type:"string"`

	RestoreTime *string `type:"string"`

	SrcRegionId *string `type:"string"`

	SrcRegionInstanceId *string `type:"string"`

	StorageSpace *int32 `type:"int32"`

	StorageType *string `type:"string" enum:"EnumOfStorageTypeForRestoreToCrossRegionInstanceInput"`

	SubnetId *string `type:"string"`

	VpcId *string `type:"string"`
}

// String returns the string representation
func (s RestoreToCrossRegionInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreToCrossRegionInstanceInput) GoString() string {
	return s.String()
}

// SetAllowListIds sets the AllowListIds field's value.
func (s *RestoreToCrossRegionInstanceInput) SetAllowListIds(v []*string) *RestoreToCrossRegionInstanceInput {
	s.AllowListIds = v
	return s
}

// SetBackupId sets the BackupId field's value.
func (s *RestoreToCrossRegionInstanceInput) SetBackupId(v string) *RestoreToCrossRegionInstanceInput {
	s.BackupId = &v
	return s
}

// SetChargeInfo sets the ChargeInfo field's value.
func (s *RestoreToCrossRegionInstanceInput) SetChargeInfo(v *ChargeInfoForRestoreToCrossRegionInstanceInput) *RestoreToCrossRegionInstanceInput {
	s.ChargeInfo = v
	return s
}

// SetDBParamGroupId sets the DBParamGroupId field's value.
func (s *RestoreToCrossRegionInstanceInput) SetDBParamGroupId(v string) *RestoreToCrossRegionInstanceInput {
	s.DBParamGroupId = &v
	return s
}

// SetDstRegionId sets the DstRegionId field's value.
func (s *RestoreToCrossRegionInstanceInput) SetDstRegionId(v string) *RestoreToCrossRegionInstanceInput {
	s.DstRegionId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *RestoreToCrossRegionInstanceInput) SetInstanceName(v string) *RestoreToCrossRegionInstanceInput {
	s.InstanceName = &v
	return s
}

// SetInstanceTags sets the InstanceTags field's value.
func (s *RestoreToCrossRegionInstanceInput) SetInstanceTags(v []*InstanceTagForRestoreToCrossRegionInstanceInput) *RestoreToCrossRegionInstanceInput {
	s.InstanceTags = v
	return s
}

// SetNodeInfo sets the NodeInfo field's value.
func (s *RestoreToCrossRegionInstanceInput) SetNodeInfo(v []*NodeInfoForRestoreToCrossRegionInstanceInput) *RestoreToCrossRegionInstanceInput {
	s.NodeInfo = v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *RestoreToCrossRegionInstanceInput) SetProjectName(v string) *RestoreToCrossRegionInstanceInput {
	s.ProjectName = &v
	return s
}

// SetRestoreTime sets the RestoreTime field's value.
func (s *RestoreToCrossRegionInstanceInput) SetRestoreTime(v string) *RestoreToCrossRegionInstanceInput {
	s.RestoreTime = &v
	return s
}

// SetSrcRegionId sets the SrcRegionId field's value.
func (s *RestoreToCrossRegionInstanceInput) SetSrcRegionId(v string) *RestoreToCrossRegionInstanceInput {
	s.SrcRegionId = &v
	return s
}

// SetSrcRegionInstanceId sets the SrcRegionInstanceId field's value.
func (s *RestoreToCrossRegionInstanceInput) SetSrcRegionInstanceId(v string) *RestoreToCrossRegionInstanceInput {
	s.SrcRegionInstanceId = &v
	return s
}

// SetStorageSpace sets the StorageSpace field's value.
func (s *RestoreToCrossRegionInstanceInput) SetStorageSpace(v int32) *RestoreToCrossRegionInstanceInput {
	s.StorageSpace = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *RestoreToCrossRegionInstanceInput) SetStorageType(v string) *RestoreToCrossRegionInstanceInput {
	s.StorageType = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *RestoreToCrossRegionInstanceInput) SetSubnetId(v string) *RestoreToCrossRegionInstanceInput {
	s.SubnetId = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *RestoreToCrossRegionInstanceInput) SetVpcId(v string) *RestoreToCrossRegionInstanceInput {
	s.VpcId = &v
	return s
}

type RestoreToCrossRegionInstanceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string"`

	OrderId *string `type:"string"`
}

// String returns the string representation
func (s RestoreToCrossRegionInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreToCrossRegionInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *RestoreToCrossRegionInstanceOutput) SetInstanceId(v string) *RestoreToCrossRegionInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetOrderId sets the OrderId field's value.
func (s *RestoreToCrossRegionInstanceOutput) SetOrderId(v string) *RestoreToCrossRegionInstanceOutput {
	s.OrderId = &v
	return s
}

const (
	// EnumOfChargeTypeForRestoreToCrossRegionInstanceInputNotEnabled is a EnumOfChargeTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfChargeTypeForRestoreToCrossRegionInstanceInputNotEnabled = "NotEnabled"

	// EnumOfChargeTypeForRestoreToCrossRegionInstanceInputPostPaid is a EnumOfChargeTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfChargeTypeForRestoreToCrossRegionInstanceInputPostPaid = "PostPaid"

	// EnumOfChargeTypeForRestoreToCrossRegionInstanceInputPrePaid is a EnumOfChargeTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfChargeTypeForRestoreToCrossRegionInstanceInputPrePaid = "PrePaid"
)

const (
	// EnumOfNodeOperateTypeForRestoreToCrossRegionInstanceInputCreate is a EnumOfNodeOperateTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfNodeOperateTypeForRestoreToCrossRegionInstanceInputCreate = "Create"

	// EnumOfNodeOperateTypeForRestoreToCrossRegionInstanceInputDelete is a EnumOfNodeOperateTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfNodeOperateTypeForRestoreToCrossRegionInstanceInputDelete = "Delete"

	// EnumOfNodeOperateTypeForRestoreToCrossRegionInstanceInputModify is a EnumOfNodeOperateTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfNodeOperateTypeForRestoreToCrossRegionInstanceInputModify = "Modify"
)

const (
	// EnumOfNodeTypeForRestoreToCrossRegionInstanceInputPrimary is a EnumOfNodeTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfNodeTypeForRestoreToCrossRegionInstanceInputPrimary = "Primary"

	// EnumOfNodeTypeForRestoreToCrossRegionInstanceInputReadOnly is a EnumOfNodeTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfNodeTypeForRestoreToCrossRegionInstanceInputReadOnly = "ReadOnly"

	// EnumOfNodeTypeForRestoreToCrossRegionInstanceInputSecondary is a EnumOfNodeTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfNodeTypeForRestoreToCrossRegionInstanceInputSecondary = "Secondary"
)

const (
	// EnumOfPeriodUnitForRestoreToCrossRegionInstanceInputMonth is a EnumOfPeriodUnitForRestoreToCrossRegionInstanceInput enum value
	EnumOfPeriodUnitForRestoreToCrossRegionInstanceInputMonth = "Month"

	// EnumOfPeriodUnitForRestoreToCrossRegionInstanceInputYear is a EnumOfPeriodUnitForRestoreToCrossRegionInstanceInput enum value
	EnumOfPeriodUnitForRestoreToCrossRegionInstanceInputYear = "Year"
)

const (
	// EnumOfStorageTypeForRestoreToCrossRegionInstanceInputCloudStorage is a EnumOfStorageTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfStorageTypeForRestoreToCrossRegionInstanceInputCloudStorage = "CloudStorage"

	// EnumOfStorageTypeForRestoreToCrossRegionInstanceInputEssdpl1 is a EnumOfStorageTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfStorageTypeForRestoreToCrossRegionInstanceInputEssdpl1 = "ESSDPL1"

	// EnumOfStorageTypeForRestoreToCrossRegionInstanceInputEssdpl2 is a EnumOfStorageTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfStorageTypeForRestoreToCrossRegionInstanceInputEssdpl2 = "ESSDPL2"

	// EnumOfStorageTypeForRestoreToCrossRegionInstanceInputLocalSsd is a EnumOfStorageTypeForRestoreToCrossRegionInstanceInput enum value
	EnumOfStorageTypeForRestoreToCrossRegionInstanceInputLocalSsd = "LocalSSD"
)
