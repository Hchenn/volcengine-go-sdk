// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeProxySQLConcurrencyControlConfigCommon = "DescribeProxySQLConcurrencyControlConfig"

// DescribeProxySQLConcurrencyControlConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeProxySQLConcurrencyControlConfigCommon operation. The "output" return
// value will be populated with the DescribeProxySQLConcurrencyControlConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeProxySQLConcurrencyControlConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeProxySQLConcurrencyControlConfigCommon Send returns without error.
//
// See DescribeProxySQLConcurrencyControlConfigCommon for more information on using the DescribeProxySQLConcurrencyControlConfigCommon
// API call, and error handling.
//
//	// Example sending a request using the DescribeProxySQLConcurrencyControlConfigCommonRequest method.
//	req, resp := client.DescribeProxySQLConcurrencyControlConfigCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *RDSMYSQLV2) DescribeProxySQLConcurrencyControlConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeProxySQLConcurrencyControlConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeProxySQLConcurrencyControlConfigCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeProxySQLConcurrencyControlConfigCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeProxySQLConcurrencyControlConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeProxySQLConcurrencyControlConfigCommonRequest(input)
	return out, req.Send()
}

// DescribeProxySQLConcurrencyControlConfigCommonWithContext is the same as DescribeProxySQLConcurrencyControlConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeProxySQLConcurrencyControlConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeProxySQLConcurrencyControlConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeProxySQLConcurrencyControlConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeProxySQLConcurrencyControlConfig = "DescribeProxySQLConcurrencyControlConfig"

// DescribeProxySQLConcurrencyControlConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeProxySQLConcurrencyControlConfig operation. The "output" return
// value will be populated with the DescribeProxySQLConcurrencyControlConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeProxySQLConcurrencyControlConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeProxySQLConcurrencyControlConfigCommon Send returns without error.
//
// See DescribeProxySQLConcurrencyControlConfig for more information on using the DescribeProxySQLConcurrencyControlConfig
// API call, and error handling.
//
//	// Example sending a request using the DescribeProxySQLConcurrencyControlConfigRequest method.
//	req, resp := client.DescribeProxySQLConcurrencyControlConfigRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *RDSMYSQLV2) DescribeProxySQLConcurrencyControlConfigRequest(input *DescribeProxySQLConcurrencyControlConfigInput) (req *request.Request, output *DescribeProxySQLConcurrencyControlConfigOutput) {
	op := &request.Operation{
		Name:       opDescribeProxySQLConcurrencyControlConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeProxySQLConcurrencyControlConfigInput{}
	}

	output = &DescribeProxySQLConcurrencyControlConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeProxySQLConcurrencyControlConfig API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeProxySQLConcurrencyControlConfig for usage and error information.
func (c *RDSMYSQLV2) DescribeProxySQLConcurrencyControlConfig(input *DescribeProxySQLConcurrencyControlConfigInput) (*DescribeProxySQLConcurrencyControlConfigOutput, error) {
	req, out := c.DescribeProxySQLConcurrencyControlConfigRequest(input)
	return out, req.Send()
}

// DescribeProxySQLConcurrencyControlConfigWithContext is the same as DescribeProxySQLConcurrencyControlConfig with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeProxySQLConcurrencyControlConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeProxySQLConcurrencyControlConfigWithContext(ctx volcengine.Context, input *DescribeProxySQLConcurrencyControlConfigInput, opts ...request.Option) (*DescribeProxySQLConcurrencyControlConfigOutput, error) {
	req, out := c.DescribeProxySQLConcurrencyControlConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeProxySQLConcurrencyControlConfigInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeProxySQLConcurrencyControlConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeProxySQLConcurrencyControlConfigInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeProxySQLConcurrencyControlConfigInput) SetInstanceId(v string) *DescribeProxySQLConcurrencyControlConfigInput {
	s.InstanceId = &v
	return s
}

type DescribeProxySQLConcurrencyControlConfigOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string"`

	SQLConcurrencyControlStatus *bool `type:"boolean"`
}

// String returns the string representation
func (s DescribeProxySQLConcurrencyControlConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeProxySQLConcurrencyControlConfigOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeProxySQLConcurrencyControlConfigOutput) SetInstanceId(v string) *DescribeProxySQLConcurrencyControlConfigOutput {
	s.InstanceId = &v
	return s
}

// SetSQLConcurrencyControlStatus sets the SQLConcurrencyControlStatus field's value.
func (s *DescribeProxySQLConcurrencyControlConfigOutput) SetSQLConcurrencyControlStatus(v bool) *DescribeProxySQLConcurrencyControlConfigOutput {
	s.SQLConcurrencyControlStatus = &v
	return s
}
