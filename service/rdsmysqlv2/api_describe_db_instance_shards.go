// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDBInstanceShardsCommon = "DescribeDBInstanceShards"

// DescribeDBInstanceShardsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceShardsCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceShardsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceShardsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceShardsCommon Send returns without error.
//
// See DescribeDBInstanceShardsCommon for more information on using the DescribeDBInstanceShardsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceShardsCommonRequest method.
//    req, resp := client.DescribeDBInstanceShardsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceShardsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceShardsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceShardsCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceShardsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceShardsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceShardsCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceShardsCommonWithContext is the same as DescribeDBInstanceShardsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceShardsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceShardsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceShardsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceShards = "DescribeDBInstanceShards"

// DescribeDBInstanceShardsRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstanceShards operation. The "output" return
// value will be populated with the DescribeDBInstanceShardsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceShardsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceShardsCommon Send returns without error.
//
// See DescribeDBInstanceShards for more information on using the DescribeDBInstanceShards
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceShardsRequest method.
//    req, resp := client.DescribeDBInstanceShardsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceShardsRequest(input *DescribeDBInstanceShardsInput) (req *request.Request, output *DescribeDBInstanceShardsOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceShards,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceShardsInput{}
	}

	output = &DescribeDBInstanceShardsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceShards API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceShards for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceShards(input *DescribeDBInstanceShardsInput) (*DescribeDBInstanceShardsOutput, error) {
	req, out := c.DescribeDBInstanceShardsRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceShardsWithContext is the same as DescribeDBInstanceShards with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceShards for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceShardsWithContext(ctx volcengine.Context, input *DescribeDBInstanceShardsInput, opts ...request.Option) (*DescribeDBInstanceShardsOutput, error) {
	req, out := c.DescribeDBInstanceShardsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DBRangeForDescribeDBInstanceShardsOutput struct {
	_ struct{} `type:"structure"`

	DBName *string `type:"string"`

	Range *string `type:"string"`

	SuffixName *string `type:"string"`
}

// String returns the string representation
func (s DBRangeForDescribeDBInstanceShardsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DBRangeForDescribeDBInstanceShardsOutput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *DBRangeForDescribeDBInstanceShardsOutput) SetDBName(v string) *DBRangeForDescribeDBInstanceShardsOutput {
	s.DBName = &v
	return s
}

// SetRange sets the Range field's value.
func (s *DBRangeForDescribeDBInstanceShardsOutput) SetRange(v string) *DBRangeForDescribeDBInstanceShardsOutput {
	s.Range = &v
	return s
}

// SetSuffixName sets the SuffixName field's value.
func (s *DBRangeForDescribeDBInstanceShardsOutput) SetSuffixName(v string) *DBRangeForDescribeDBInstanceShardsOutput {
	s.SuffixName = &v
	return s
}

type DescribeDBInstanceShardsInput struct {
	_ struct{} `type:"structure"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	ShardId *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBInstanceShardsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceShardsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDBInstanceShardsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDBInstanceShardsInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceShardsInput) SetInstanceId(v string) *DescribeDBInstanceShardsInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDBInstanceShardsInput) SetPageNumber(v int32) *DescribeDBInstanceShardsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDBInstanceShardsInput) SetPageSize(v int32) *DescribeDBInstanceShardsInput {
	s.PageSize = &v
	return s
}

// SetShardId sets the ShardId field's value.
func (s *DescribeDBInstanceShardsInput) SetShardId(v string) *DescribeDBInstanceShardsInput {
	s.ShardId = &v
	return s
}

type DescribeDBInstanceShardsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ShardDetailInfo []*ShardDetailInfoForDescribeDBInstanceShardsOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeDBInstanceShardsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceShardsOutput) GoString() string {
	return s.String()
}

// SetShardDetailInfo sets the ShardDetailInfo field's value.
func (s *DescribeDBInstanceShardsOutput) SetShardDetailInfo(v []*ShardDetailInfoForDescribeDBInstanceShardsOutput) *DescribeDBInstanceShardsOutput {
	s.ShardDetailInfo = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeDBInstanceShardsOutput) SetTotal(v int32) *DescribeDBInstanceShardsOutput {
	s.Total = &v
	return s
}

type NodeDetailInfoForDescribeDBInstanceShardsOutput struct {
	_ struct{} `type:"structure"`

	CreateTime *string `type:"string"`

	InstanceId *string `type:"string"`

	Memory *int32 `type:"int32"`

	NodeId *string `type:"string"`

	NodeSpec *string `type:"string"`

	NodeStatus *string `type:"string" enum:"EnumOfNodeStatusForDescribeDBInstanceShardsOutput"`

	NodeType *string `type:"string" enum:"EnumOfNodeTypeForDescribeDBInstanceShardsOutput"`

	RegionId *string `type:"string"`

	ShardId *string `type:"string"`

	UpdateTime *string `type:"string"`

	VCPU *int32 `type:"int32"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s NodeDetailInfoForDescribeDBInstanceShardsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeDetailInfoForDescribeDBInstanceShardsOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *NodeDetailInfoForDescribeDBInstanceShardsOutput) SetCreateTime(v string) *NodeDetailInfoForDescribeDBInstanceShardsOutput {
	s.CreateTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *NodeDetailInfoForDescribeDBInstanceShardsOutput) SetInstanceId(v string) *NodeDetailInfoForDescribeDBInstanceShardsOutput {
	s.InstanceId = &v
	return s
}

// SetMemory sets the Memory field's value.
func (s *NodeDetailInfoForDescribeDBInstanceShardsOutput) SetMemory(v int32) *NodeDetailInfoForDescribeDBInstanceShardsOutput {
	s.Memory = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *NodeDetailInfoForDescribeDBInstanceShardsOutput) SetNodeId(v string) *NodeDetailInfoForDescribeDBInstanceShardsOutput {
	s.NodeId = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *NodeDetailInfoForDescribeDBInstanceShardsOutput) SetNodeSpec(v string) *NodeDetailInfoForDescribeDBInstanceShardsOutput {
	s.NodeSpec = &v
	return s
}

// SetNodeStatus sets the NodeStatus field's value.
func (s *NodeDetailInfoForDescribeDBInstanceShardsOutput) SetNodeStatus(v string) *NodeDetailInfoForDescribeDBInstanceShardsOutput {
	s.NodeStatus = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *NodeDetailInfoForDescribeDBInstanceShardsOutput) SetNodeType(v string) *NodeDetailInfoForDescribeDBInstanceShardsOutput {
	s.NodeType = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *NodeDetailInfoForDescribeDBInstanceShardsOutput) SetRegionId(v string) *NodeDetailInfoForDescribeDBInstanceShardsOutput {
	s.RegionId = &v
	return s
}

// SetShardId sets the ShardId field's value.
func (s *NodeDetailInfoForDescribeDBInstanceShardsOutput) SetShardId(v string) *NodeDetailInfoForDescribeDBInstanceShardsOutput {
	s.ShardId = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *NodeDetailInfoForDescribeDBInstanceShardsOutput) SetUpdateTime(v string) *NodeDetailInfoForDescribeDBInstanceShardsOutput {
	s.UpdateTime = &v
	return s
}

// SetVCPU sets the VCPU field's value.
func (s *NodeDetailInfoForDescribeDBInstanceShardsOutput) SetVCPU(v int32) *NodeDetailInfoForDescribeDBInstanceShardsOutput {
	s.VCPU = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *NodeDetailInfoForDescribeDBInstanceShardsOutput) SetZoneId(v string) *NodeDetailInfoForDescribeDBInstanceShardsOutput {
	s.ZoneId = &v
	return s
}

type ShardDetailInfoForDescribeDBInstanceShardsOutput struct {
	_ struct{} `type:"structure"`

	DBRange []*DBRangeForDescribeDBInstanceShardsOutput `type:"list"`

	NodeDetailInfo []*NodeDetailInfoForDescribeDBInstanceShardsOutput `type:"list"`

	ShardId *string `type:"string"`

	ShardStatus *string `type:"string"`
}

// String returns the string representation
func (s ShardDetailInfoForDescribeDBInstanceShardsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ShardDetailInfoForDescribeDBInstanceShardsOutput) GoString() string {
	return s.String()
}

// SetDBRange sets the DBRange field's value.
func (s *ShardDetailInfoForDescribeDBInstanceShardsOutput) SetDBRange(v []*DBRangeForDescribeDBInstanceShardsOutput) *ShardDetailInfoForDescribeDBInstanceShardsOutput {
	s.DBRange = v
	return s
}

// SetNodeDetailInfo sets the NodeDetailInfo field's value.
func (s *ShardDetailInfoForDescribeDBInstanceShardsOutput) SetNodeDetailInfo(v []*NodeDetailInfoForDescribeDBInstanceShardsOutput) *ShardDetailInfoForDescribeDBInstanceShardsOutput {
	s.NodeDetailInfo = v
	return s
}

// SetShardId sets the ShardId field's value.
func (s *ShardDetailInfoForDescribeDBInstanceShardsOutput) SetShardId(v string) *ShardDetailInfoForDescribeDBInstanceShardsOutput {
	s.ShardId = &v
	return s
}

// SetShardStatus sets the ShardStatus field's value.
func (s *ShardDetailInfoForDescribeDBInstanceShardsOutput) SetShardStatus(v string) *ShardDetailInfoForDescribeDBInstanceShardsOutput {
	s.ShardStatus = &v
	return s
}

const (
	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputCreateFailed is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputCreateFailed = "CreateFailed"

	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputCreating is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputCreating = "Creating"

	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputDeleting is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputDeleting = "Deleting"

	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputDestroyed is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputDestroyed = "Destroyed"

	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputDestroying is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputDestroying = "Destroying"

	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputError is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputError = "Error"

	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputRecycled is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputRecycled = "Recycled"

	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputReleased is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputReleased = "Released"

	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputRestarting is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputRestarting = "Restarting"

	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputRestoring is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputRestoring = "Restoring"

	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputRunning is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputRunning = "Running"

	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputUpdating is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputUpdating = "Updating"

	// EnumOfNodeStatusForDescribeDBInstanceShardsOutputUpgrading is a EnumOfNodeStatusForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeStatusForDescribeDBInstanceShardsOutputUpgrading = "Upgrading"
)

const (
	// EnumOfNodeTypeForDescribeDBInstanceShardsOutputPrimary is a EnumOfNodeTypeForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeTypeForDescribeDBInstanceShardsOutputPrimary = "Primary"

	// EnumOfNodeTypeForDescribeDBInstanceShardsOutputReadOnly is a EnumOfNodeTypeForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeTypeForDescribeDBInstanceShardsOutputReadOnly = "ReadOnly"

	// EnumOfNodeTypeForDescribeDBInstanceShardsOutputSecondary is a EnumOfNodeTypeForDescribeDBInstanceShardsOutput enum value
	EnumOfNodeTypeForDescribeDBInstanceShardsOutputSecondary = "Secondary"
)
