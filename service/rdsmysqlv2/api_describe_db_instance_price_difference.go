// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeDBInstancePriceDifferenceCommon = "DescribeDBInstancePriceDifference"

// DescribeDBInstancePriceDifferenceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstancePriceDifferenceCommon operation. The "output" return
// value will be populated with the DescribeDBInstancePriceDifferenceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstancePriceDifferenceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstancePriceDifferenceCommon Send returns without error.
//
// See DescribeDBInstancePriceDifferenceCommon for more information on using the DescribeDBInstancePriceDifferenceCommon
// API call, and error handling.
//
//	// Example sending a request using the DescribeDBInstancePriceDifferenceCommonRequest method.
//	req, resp := client.DescribeDBInstancePriceDifferenceCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *RDSMYSQLV2) DescribeDBInstancePriceDifferenceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstancePriceDifferenceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstancePriceDifferenceCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstancePriceDifferenceCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstancePriceDifferenceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstancePriceDifferenceCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstancePriceDifferenceCommonWithContext is the same as DescribeDBInstancePriceDifferenceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstancePriceDifferenceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstancePriceDifferenceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstancePriceDifferenceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstancePriceDifference = "DescribeDBInstancePriceDifference"

// DescribeDBInstancePriceDifferenceRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeDBInstancePriceDifference operation. The "output" return
// value will be populated with the DescribeDBInstancePriceDifferenceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstancePriceDifferenceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstancePriceDifferenceCommon Send returns without error.
//
// See DescribeDBInstancePriceDifference for more information on using the DescribeDBInstancePriceDifference
// API call, and error handling.
//
//	// Example sending a request using the DescribeDBInstancePriceDifferenceRequest method.
//	req, resp := client.DescribeDBInstancePriceDifferenceRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *RDSMYSQLV2) DescribeDBInstancePriceDifferenceRequest(input *DescribeDBInstancePriceDifferenceInput) (req *request.Request, output *DescribeDBInstancePriceDifferenceOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstancePriceDifference,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstancePriceDifferenceInput{}
	}

	output = &DescribeDBInstancePriceDifferenceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstancePriceDifference API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstancePriceDifference for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstancePriceDifference(input *DescribeDBInstancePriceDifferenceInput) (*DescribeDBInstancePriceDifferenceOutput, error) {
	req, out := c.DescribeDBInstancePriceDifferenceRequest(input)
	return out, req.Send()
}

// DescribeDBInstancePriceDifferenceWithContext is the same as DescribeDBInstancePriceDifference with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstancePriceDifference for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstancePriceDifferenceWithContext(ctx volcengine.Context, input *DescribeDBInstancePriceDifferenceInput, opts ...request.Option) (*DescribeDBInstancePriceDifferenceOutput, error) {
	req, out := c.DescribeDBInstancePriceDifferenceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput struct {
	_ struct{} `type:"structure"`

	ChargeItemKey *string `type:"string"`

	ChargeItemType *string `type:"string"`

	ChargeItemValue *int64 `type:"int64"`

	DiscountPrice *float64 `type:"double"`

	OriginalPrice *float64 `type:"double"`

	PayablePrice *float64 `type:"double"`

	UnitPrice *float64 `type:"double"`
}

// String returns the string representation
func (s ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput) GoString() string {
	return s.String()
}

// SetChargeItemKey sets the ChargeItemKey field's value.
func (s *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput) SetChargeItemKey(v string) *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.ChargeItemKey = &v
	return s
}

// SetChargeItemType sets the ChargeItemType field's value.
func (s *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput) SetChargeItemType(v string) *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.ChargeItemType = &v
	return s
}

// SetChargeItemValue sets the ChargeItemValue field's value.
func (s *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput) SetChargeItemValue(v int64) *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.ChargeItemValue = &v
	return s
}

// SetDiscountPrice sets the DiscountPrice field's value.
func (s *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput) SetDiscountPrice(v float64) *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.DiscountPrice = &v
	return s
}

// SetOriginalPrice sets the OriginalPrice field's value.
func (s *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput) SetOriginalPrice(v float64) *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.OriginalPrice = &v
	return s
}

// SetPayablePrice sets the PayablePrice field's value.
func (s *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput) SetPayablePrice(v float64) *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.PayablePrice = &v
	return s
}

// SetUnitPrice sets the UnitPrice field's value.
func (s *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput) SetUnitPrice(v float64) *ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.UnitPrice = &v
	return s
}

type ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput struct {
	_ struct{} `type:"structure"`

	ConfigurationCode *string `type:"string"`

	CouponAmount *float64 `type:"double"`

	DiscountPrice *float64 `type:"double"`

	InstanceID *string `type:"string"`

	OriginalPrice *float64 `type:"double"`

	PayablePrice *float64 `type:"double"`

	Quantity *int64 `type:"int64"`

	RefundAmount *float64 `type:"double"`
}

// String returns the string representation
func (s ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput) GoString() string {
	return s.String()
}

// SetConfigurationCode sets the ConfigurationCode field's value.
func (s *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput) SetConfigurationCode(v string) *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.ConfigurationCode = &v
	return s
}

// SetCouponAmount sets the CouponAmount field's value.
func (s *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput) SetCouponAmount(v float64) *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.CouponAmount = &v
	return s
}

// SetDiscountPrice sets the DiscountPrice field's value.
func (s *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput) SetDiscountPrice(v float64) *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.DiscountPrice = &v
	return s
}

// SetInstanceID sets the InstanceID field's value.
func (s *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput) SetInstanceID(v string) *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.InstanceID = &v
	return s
}

// SetOriginalPrice sets the OriginalPrice field's value.
func (s *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput) SetOriginalPrice(v float64) *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.OriginalPrice = &v
	return s
}

// SetPayablePrice sets the PayablePrice field's value.
func (s *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput) SetPayablePrice(v float64) *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.PayablePrice = &v
	return s
}

// SetQuantity sets the Quantity field's value.
func (s *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput) SetQuantity(v int64) *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.Quantity = &v
	return s
}

// SetRefundAmount sets the RefundAmount field's value.
func (s *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput) SetRefundAmount(v float64) *ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput {
	s.RefundAmount = &v
	return s
}

type DescribeDBInstancePriceDifferenceInput struct {
	_ struct{} `type:"structure"`

	ChargeType *string `type:"string" enum:"EnumOfChargeTypeForDescribeDBInstancePriceDifferenceInput"`

	InstanceIds []*string `type:"list"`

	ModifyType *string `type:"string" enum:"EnumOfModifyTypeForDescribeDBInstancePriceDifferenceInput"`

	NodeInfo []*NodeInfoForDescribeDBInstancePriceDifferenceInput `type:"list"`

	Number *int32 `type:"int32"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string" enum:"EnumOfPeriodUnitForDescribeDBInstancePriceDifferenceInput"`

	RollbackTime *string `type:"string"`

	ShardNumber *int32 `type:"int32"`

	StorageSpace *int32 `type:"int32"`

	StorageType *string `type:"string" enum:"EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInput"`

	UserAction *string `type:"string" enum:"EnumOfUserActionForDescribeDBInstancePriceDifferenceInput"`
}

// String returns the string representation
func (s DescribeDBInstancePriceDifferenceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstancePriceDifferenceInput) GoString() string {
	return s.String()
}

// SetChargeType sets the ChargeType field's value.
func (s *DescribeDBInstancePriceDifferenceInput) SetChargeType(v string) *DescribeDBInstancePriceDifferenceInput {
	s.ChargeType = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *DescribeDBInstancePriceDifferenceInput) SetInstanceIds(v []*string) *DescribeDBInstancePriceDifferenceInput {
	s.InstanceIds = v
	return s
}

// SetModifyType sets the ModifyType field's value.
func (s *DescribeDBInstancePriceDifferenceInput) SetModifyType(v string) *DescribeDBInstancePriceDifferenceInput {
	s.ModifyType = &v
	return s
}

// SetNodeInfo sets the NodeInfo field's value.
func (s *DescribeDBInstancePriceDifferenceInput) SetNodeInfo(v []*NodeInfoForDescribeDBInstancePriceDifferenceInput) *DescribeDBInstancePriceDifferenceInput {
	s.NodeInfo = v
	return s
}

// SetNumber sets the Number field's value.
func (s *DescribeDBInstancePriceDifferenceInput) SetNumber(v int32) *DescribeDBInstancePriceDifferenceInput {
	s.Number = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *DescribeDBInstancePriceDifferenceInput) SetPeriod(v int32) *DescribeDBInstancePriceDifferenceInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *DescribeDBInstancePriceDifferenceInput) SetPeriodUnit(v string) *DescribeDBInstancePriceDifferenceInput {
	s.PeriodUnit = &v
	return s
}

// SetRollbackTime sets the RollbackTime field's value.
func (s *DescribeDBInstancePriceDifferenceInput) SetRollbackTime(v string) *DescribeDBInstancePriceDifferenceInput {
	s.RollbackTime = &v
	return s
}

// SetShardNumber sets the ShardNumber field's value.
func (s *DescribeDBInstancePriceDifferenceInput) SetShardNumber(v int32) *DescribeDBInstancePriceDifferenceInput {
	s.ShardNumber = &v
	return s
}

// SetStorageSpace sets the StorageSpace field's value.
func (s *DescribeDBInstancePriceDifferenceInput) SetStorageSpace(v int32) *DescribeDBInstancePriceDifferenceInput {
	s.StorageSpace = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *DescribeDBInstancePriceDifferenceInput) SetStorageType(v string) *DescribeDBInstancePriceDifferenceInput {
	s.StorageType = &v
	return s
}

// SetUserAction sets the UserAction field's value.
func (s *DescribeDBInstancePriceDifferenceInput) SetUserAction(v string) *DescribeDBInstancePriceDifferenceInput {
	s.UserAction = &v
	return s
}

type DescribeDBInstancePriceDifferenceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	BillingMethod *string `type:"string"`

	ChargeItemPrices []*ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput `type:"list"`

	ConfigItemPrices []*ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput `type:"list"`

	CouponAmount *float64 `type:"double"`

	Currency *string `type:"string"`

	DiscountPrice *float64 `type:"double"`

	OriginalPrice *float64 `type:"double"`

	PayablePrice *float64 `type:"double"`

	RefundAmount *float64 `type:"double"`
}

// String returns the string representation
func (s DescribeDBInstancePriceDifferenceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstancePriceDifferenceOutput) GoString() string {
	return s.String()
}

// SetBillingMethod sets the BillingMethod field's value.
func (s *DescribeDBInstancePriceDifferenceOutput) SetBillingMethod(v string) *DescribeDBInstancePriceDifferenceOutput {
	s.BillingMethod = &v
	return s
}

// SetChargeItemPrices sets the ChargeItemPrices field's value.
func (s *DescribeDBInstancePriceDifferenceOutput) SetChargeItemPrices(v []*ChargeItemPriceForDescribeDBInstancePriceDifferenceOutput) *DescribeDBInstancePriceDifferenceOutput {
	s.ChargeItemPrices = v
	return s
}

// SetConfigItemPrices sets the ConfigItemPrices field's value.
func (s *DescribeDBInstancePriceDifferenceOutput) SetConfigItemPrices(v []*ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput) *DescribeDBInstancePriceDifferenceOutput {
	s.ConfigItemPrices = v
	return s
}

// SetCouponAmount sets the CouponAmount field's value.
func (s *DescribeDBInstancePriceDifferenceOutput) SetCouponAmount(v float64) *DescribeDBInstancePriceDifferenceOutput {
	s.CouponAmount = &v
	return s
}

// SetCurrency sets the Currency field's value.
func (s *DescribeDBInstancePriceDifferenceOutput) SetCurrency(v string) *DescribeDBInstancePriceDifferenceOutput {
	s.Currency = &v
	return s
}

// SetDiscountPrice sets the DiscountPrice field's value.
func (s *DescribeDBInstancePriceDifferenceOutput) SetDiscountPrice(v float64) *DescribeDBInstancePriceDifferenceOutput {
	s.DiscountPrice = &v
	return s
}

// SetOriginalPrice sets the OriginalPrice field's value.
func (s *DescribeDBInstancePriceDifferenceOutput) SetOriginalPrice(v float64) *DescribeDBInstancePriceDifferenceOutput {
	s.OriginalPrice = &v
	return s
}

// SetPayablePrice sets the PayablePrice field's value.
func (s *DescribeDBInstancePriceDifferenceOutput) SetPayablePrice(v float64) *DescribeDBInstancePriceDifferenceOutput {
	s.PayablePrice = &v
	return s
}

// SetRefundAmount sets the RefundAmount field's value.
func (s *DescribeDBInstancePriceDifferenceOutput) SetRefundAmount(v float64) *DescribeDBInstancePriceDifferenceOutput {
	s.RefundAmount = &v
	return s
}

type NodeInfoForDescribeDBInstancePriceDifferenceInput struct {
	_ struct{} `type:"structure"`

	NodeId *string `type:"string"`

	NodeOperateType *string `type:"string" enum:"EnumOfNodeOperateTypeForDescribeDBInstancePriceDifferenceInput"`

	NodePool *string `type:"string"`

	NodeSpec *string `type:"string"`

	NodeType *string `type:"string" enum:"EnumOfNodeTypeForDescribeDBInstancePriceDifferenceInput"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s NodeInfoForDescribeDBInstancePriceDifferenceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeInfoForDescribeDBInstancePriceDifferenceInput) GoString() string {
	return s.String()
}

// SetNodeId sets the NodeId field's value.
func (s *NodeInfoForDescribeDBInstancePriceDifferenceInput) SetNodeId(v string) *NodeInfoForDescribeDBInstancePriceDifferenceInput {
	s.NodeId = &v
	return s
}

// SetNodeOperateType sets the NodeOperateType field's value.
func (s *NodeInfoForDescribeDBInstancePriceDifferenceInput) SetNodeOperateType(v string) *NodeInfoForDescribeDBInstancePriceDifferenceInput {
	s.NodeOperateType = &v
	return s
}

// SetNodePool sets the NodePool field's value.
func (s *NodeInfoForDescribeDBInstancePriceDifferenceInput) SetNodePool(v string) *NodeInfoForDescribeDBInstancePriceDifferenceInput {
	s.NodePool = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *NodeInfoForDescribeDBInstancePriceDifferenceInput) SetNodeSpec(v string) *NodeInfoForDescribeDBInstancePriceDifferenceInput {
	s.NodeSpec = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *NodeInfoForDescribeDBInstancePriceDifferenceInput) SetNodeType(v string) *NodeInfoForDescribeDBInstancePriceDifferenceInput {
	s.NodeType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *NodeInfoForDescribeDBInstancePriceDifferenceInput) SetZoneId(v string) *NodeInfoForDescribeDBInstancePriceDifferenceInput {
	s.ZoneId = &v
	return s
}

const (
	// EnumOfChargeTypeForDescribeDBInstancePriceDifferenceInputNotEnabled is a EnumOfChargeTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfChargeTypeForDescribeDBInstancePriceDifferenceInputNotEnabled = "NotEnabled"

	// EnumOfChargeTypeForDescribeDBInstancePriceDifferenceInputPostPaid is a EnumOfChargeTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfChargeTypeForDescribeDBInstancePriceDifferenceInputPostPaid = "PostPaid"

	// EnumOfChargeTypeForDescribeDBInstancePriceDifferenceInputPrePaid is a EnumOfChargeTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfChargeTypeForDescribeDBInstancePriceDifferenceInputPrePaid = "PrePaid"
)

const (
	// EnumOfModifyTypeForDescribeDBInstancePriceDifferenceInputTemporary is a EnumOfModifyTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfModifyTypeForDescribeDBInstancePriceDifferenceInputTemporary = "Temporary"

	// EnumOfModifyTypeForDescribeDBInstancePriceDifferenceInputUsually is a EnumOfModifyTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfModifyTypeForDescribeDBInstancePriceDifferenceInputUsually = "Usually"
)

const (
	// EnumOfNodeOperateTypeForDescribeDBInstancePriceDifferenceInputCreate is a EnumOfNodeOperateTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfNodeOperateTypeForDescribeDBInstancePriceDifferenceInputCreate = "Create"

	// EnumOfNodeOperateTypeForDescribeDBInstancePriceDifferenceInputDelete is a EnumOfNodeOperateTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfNodeOperateTypeForDescribeDBInstancePriceDifferenceInputDelete = "Delete"

	// EnumOfNodeOperateTypeForDescribeDBInstancePriceDifferenceInputModify is a EnumOfNodeOperateTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfNodeOperateTypeForDescribeDBInstancePriceDifferenceInputModify = "Modify"
)

const (
	// EnumOfNodeTypeForDescribeDBInstancePriceDifferenceInputPrimary is a EnumOfNodeTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfNodeTypeForDescribeDBInstancePriceDifferenceInputPrimary = "Primary"

	// EnumOfNodeTypeForDescribeDBInstancePriceDifferenceInputReadOnly is a EnumOfNodeTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfNodeTypeForDescribeDBInstancePriceDifferenceInputReadOnly = "ReadOnly"

	// EnumOfNodeTypeForDescribeDBInstancePriceDifferenceInputSecondary is a EnumOfNodeTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfNodeTypeForDescribeDBInstancePriceDifferenceInputSecondary = "Secondary"
)

const (
	// EnumOfPeriodUnitForDescribeDBInstancePriceDifferenceInputMonth is a EnumOfPeriodUnitForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfPeriodUnitForDescribeDBInstancePriceDifferenceInputMonth = "Month"

	// EnumOfPeriodUnitForDescribeDBInstancePriceDifferenceInputYear is a EnumOfPeriodUnitForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfPeriodUnitForDescribeDBInstancePriceDifferenceInputYear = "Year"
)

const (
	// EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInputCloudStorage is a EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInputCloudStorage = "CloudStorage"

	// EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInputEssdpl1 is a EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInputEssdpl1 = "ESSDPL1"

	// EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInputEssdpl2 is a EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInputEssdpl2 = "ESSDPL2"

	// EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInputLocalSsd is a EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfStorageTypeForDescribeDBInstancePriceDifferenceInputLocalSsd = "LocalSSD"
)

const (
	// EnumOfUserActionForDescribeDBInstancePriceDifferenceInputBatchModifyDbinstanceSpec is a EnumOfUserActionForDescribeDBInstancePriceDifferenceInput enum value
	EnumOfUserActionForDescribeDBInstancePriceDifferenceInputBatchModifyDbinstanceSpec = "BatchModifyDBInstanceSpec"
)
