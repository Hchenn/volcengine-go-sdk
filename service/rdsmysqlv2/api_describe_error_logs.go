// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeErrorLogsCommon = "DescribeErrorLogs"

// DescribeErrorLogsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeErrorLogsCommon operation. The "output" return
// value will be populated with the DescribeErrorLogsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeErrorLogsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeErrorLogsCommon Send returns without error.
//
// See DescribeErrorLogsCommon for more information on using the DescribeErrorLogsCommon
// API call, and error handling.
//
//	// Example sending a request using the DescribeErrorLogsCommonRequest method.
//	req, resp := client.DescribeErrorLogsCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *RDSMYSQLV2) DescribeErrorLogsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeErrorLogsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeErrorLogsCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeErrorLogsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeErrorLogsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeErrorLogsCommonRequest(input)
	return out, req.Send()
}

// DescribeErrorLogsCommonWithContext is the same as DescribeErrorLogsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeErrorLogsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeErrorLogsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeErrorLogsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeErrorLogs = "DescribeErrorLogs"

// DescribeErrorLogsRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeErrorLogs operation. The "output" return
// value will be populated with the DescribeErrorLogsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeErrorLogsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeErrorLogsCommon Send returns without error.
//
// See DescribeErrorLogs for more information on using the DescribeErrorLogs
// API call, and error handling.
//
//	// Example sending a request using the DescribeErrorLogsRequest method.
//	req, resp := client.DescribeErrorLogsRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *RDSMYSQLV2) DescribeErrorLogsRequest(input *DescribeErrorLogsInput) (req *request.Request, output *DescribeErrorLogsOutput) {
	op := &request.Operation{
		Name:       opDescribeErrorLogs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeErrorLogsInput{}
	}

	output = &DescribeErrorLogsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeErrorLogs API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation DescribeErrorLogs for usage and error information.
func (c *RDSMYSQLV2) DescribeErrorLogs(input *DescribeErrorLogsInput) (*DescribeErrorLogsOutput, error) {
	req, out := c.DescribeErrorLogsRequest(input)
	return out, req.Send()
}

// DescribeErrorLogsWithContext is the same as DescribeErrorLogs with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeErrorLogs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeErrorLogsWithContext(ctx volcengine.Context, input *DescribeErrorLogsInput, opts ...request.Option) (*DescribeErrorLogsOutput, error) {
	req, out := c.DescribeErrorLogsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeErrorLogsInput struct {
	_ struct{} `type:"structure"`

	ErrorLevel *string `type:"string" enum:"EnumOfErrorLevelForDescribeErrorLogsInput"`

	ErrorLogEndTime *string `type:"string"`

	ErrorLogStartTime *string `type:"string"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	NodeId *string `type:"string"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeErrorLogsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeErrorLogsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeErrorLogsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeErrorLogsInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetErrorLevel sets the ErrorLevel field's value.
func (s *DescribeErrorLogsInput) SetErrorLevel(v string) *DescribeErrorLogsInput {
	s.ErrorLevel = &v
	return s
}

// SetErrorLogEndTime sets the ErrorLogEndTime field's value.
func (s *DescribeErrorLogsInput) SetErrorLogEndTime(v string) *DescribeErrorLogsInput {
	s.ErrorLogEndTime = &v
	return s
}

// SetErrorLogStartTime sets the ErrorLogStartTime field's value.
func (s *DescribeErrorLogsInput) SetErrorLogStartTime(v string) *DescribeErrorLogsInput {
	s.ErrorLogStartTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeErrorLogsInput) SetInstanceId(v string) *DescribeErrorLogsInput {
	s.InstanceId = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *DescribeErrorLogsInput) SetNodeId(v string) *DescribeErrorLogsInput {
	s.NodeId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeErrorLogsInput) SetPageNumber(v int32) *DescribeErrorLogsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeErrorLogsInput) SetPageSize(v int32) *DescribeErrorLogsInput {
	s.PageSize = &v
	return s
}

type DescribeErrorLogsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ErrorLog []*ErrorLogForDescribeErrorLogsOutput `type:"list"`

	InstanceId *string `type:"string"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeErrorLogsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeErrorLogsOutput) GoString() string {
	return s.String()
}

// SetErrorLog sets the ErrorLog field's value.
func (s *DescribeErrorLogsOutput) SetErrorLog(v []*ErrorLogForDescribeErrorLogsOutput) *DescribeErrorLogsOutput {
	s.ErrorLog = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeErrorLogsOutput) SetInstanceId(v string) *DescribeErrorLogsOutput {
	s.InstanceId = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeErrorLogsOutput) SetTotal(v int32) *DescribeErrorLogsOutput {
	s.Total = &v
	return s
}

type ErrorLogForDescribeErrorLogsOutput struct {
	_ struct{} `type:"structure"`

	CreateTime *string `type:"string"`

	LogInfo *string `type:"string"`

	LogLevel *string `type:"string"`

	NodeId *string `type:"string"`
}

// String returns the string representation
func (s ErrorLogForDescribeErrorLogsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ErrorLogForDescribeErrorLogsOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *ErrorLogForDescribeErrorLogsOutput) SetCreateTime(v string) *ErrorLogForDescribeErrorLogsOutput {
	s.CreateTime = &v
	return s
}

// SetLogInfo sets the LogInfo field's value.
func (s *ErrorLogForDescribeErrorLogsOutput) SetLogInfo(v string) *ErrorLogForDescribeErrorLogsOutput {
	s.LogInfo = &v
	return s
}

// SetLogLevel sets the LogLevel field's value.
func (s *ErrorLogForDescribeErrorLogsOutput) SetLogLevel(v string) *ErrorLogForDescribeErrorLogsOutput {
	s.LogLevel = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *ErrorLogForDescribeErrorLogsOutput) SetNodeId(v string) *ErrorLogForDescribeErrorLogsOutput {
	s.NodeId = &v
	return s
}

const (
	// EnumOfErrorLevelForDescribeErrorLogsInputAll is a EnumOfErrorLevelForDescribeErrorLogsInput enum value
	EnumOfErrorLevelForDescribeErrorLogsInputAll = "All"

	// EnumOfErrorLevelForDescribeErrorLogsInputError is a EnumOfErrorLevelForDescribeErrorLogsInput enum value
	EnumOfErrorLevelForDescribeErrorLogsInputError = "Error"

	// EnumOfErrorLevelForDescribeErrorLogsInputNote is a EnumOfErrorLevelForDescribeErrorLogsInput enum value
	EnumOfErrorLevelForDescribeErrorLogsInputNote = "Note"

	// EnumOfErrorLevelForDescribeErrorLogsInputWarning is a EnumOfErrorLevelForDescribeErrorLogsInput enum value
	EnumOfErrorLevelForDescribeErrorLogsInputWarning = "Warning"
)
