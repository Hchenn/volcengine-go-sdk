// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package seccenter

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opMultiCloudAccessSyncCommon = "MultiCloudAccessSync"

// MultiCloudAccessSyncCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the MultiCloudAccessSyncCommon operation. The "output" return
// value will be populated with the MultiCloudAccessSyncCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned MultiCloudAccessSyncCommon Request to send the API call to the service.
// the "output" return value is not valid until after MultiCloudAccessSyncCommon Send returns without error.
//
// See MultiCloudAccessSyncCommon for more information on using the MultiCloudAccessSyncCommon
// API call, and error handling.
//
//    // Example sending a request using the MultiCloudAccessSyncCommonRequest method.
//    req, resp := client.MultiCloudAccessSyncCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER) MultiCloudAccessSyncCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opMultiCloudAccessSyncCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// MultiCloudAccessSyncCommon API operation for SECCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER's
// API operation MultiCloudAccessSyncCommon for usage and error information.
func (c *SECCENTER) MultiCloudAccessSyncCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.MultiCloudAccessSyncCommonRequest(input)
	return out, req.Send()
}

// MultiCloudAccessSyncCommonWithContext is the same as MultiCloudAccessSyncCommon with the addition of
// the ability to pass a context and additional request options.
//
// See MultiCloudAccessSyncCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER) MultiCloudAccessSyncCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.MultiCloudAccessSyncCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opMultiCloudAccessSync = "MultiCloudAccessSync"

// MultiCloudAccessSyncRequest generates a "volcengine/request.Request" representing the
// client's request for the MultiCloudAccessSync operation. The "output" return
// value will be populated with the MultiCloudAccessSyncCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned MultiCloudAccessSyncCommon Request to send the API call to the service.
// the "output" return value is not valid until after MultiCloudAccessSyncCommon Send returns without error.
//
// See MultiCloudAccessSync for more information on using the MultiCloudAccessSync
// API call, and error handling.
//
//    // Example sending a request using the MultiCloudAccessSyncRequest method.
//    req, resp := client.MultiCloudAccessSyncRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SECCENTER) MultiCloudAccessSyncRequest(input *MultiCloudAccessSyncInput) (req *request.Request, output *MultiCloudAccessSyncOutput) {
	op := &request.Operation{
		Name:       opMultiCloudAccessSync,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &MultiCloudAccessSyncInput{}
	}

	output = &MultiCloudAccessSyncOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// MultiCloudAccessSync API operation for SECCENTER.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SECCENTER's
// API operation MultiCloudAccessSync for usage and error information.
func (c *SECCENTER) MultiCloudAccessSync(input *MultiCloudAccessSyncInput) (*MultiCloudAccessSyncOutput, error) {
	req, out := c.MultiCloudAccessSyncRequest(input)
	return out, req.Send()
}

// MultiCloudAccessSyncWithContext is the same as MultiCloudAccessSync with the addition of
// the ability to pass a context and additional request options.
//
// See MultiCloudAccessSync for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SECCENTER) MultiCloudAccessSyncWithContext(ctx volcengine.Context, input *MultiCloudAccessSyncInput, opts ...request.Option) (*MultiCloudAccessSyncOutput, error) {
	req, out := c.MultiCloudAccessSyncRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type MultiCloudAccessSyncInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s MultiCloudAccessSyncInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MultiCloudAccessSyncInput) GoString() string {
	return s.String()
}

type MultiCloudAccessSyncOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Data *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s MultiCloudAccessSyncOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s MultiCloudAccessSyncOutput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *MultiCloudAccessSyncOutput) SetData(v string) *MultiCloudAccessSyncOutput {
	s.Data = &v
	return s
}
