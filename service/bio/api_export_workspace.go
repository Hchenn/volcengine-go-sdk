// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bio

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opExportWorkspaceCommon = "ExportWorkspace"

// ExportWorkspaceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ExportWorkspaceCommon operation. The "output" return
// value will be populated with the ExportWorkspaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExportWorkspaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExportWorkspaceCommon Send returns without error.
//
// See ExportWorkspaceCommon for more information on using the ExportWorkspaceCommon
// API call, and error handling.
//
//    // Example sending a request using the ExportWorkspaceCommonRequest method.
//    req, resp := client.ExportWorkspaceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) ExportWorkspaceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opExportWorkspaceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ExportWorkspaceCommon API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation ExportWorkspaceCommon for usage and error information.
func (c *BIO) ExportWorkspaceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ExportWorkspaceCommonRequest(input)
	return out, req.Send()
}

// ExportWorkspaceCommonWithContext is the same as ExportWorkspaceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ExportWorkspaceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) ExportWorkspaceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ExportWorkspaceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opExportWorkspace = "ExportWorkspace"

// ExportWorkspaceRequest generates a "volcengine/request.Request" representing the
// client's request for the ExportWorkspace operation. The "output" return
// value will be populated with the ExportWorkspaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExportWorkspaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExportWorkspaceCommon Send returns without error.
//
// See ExportWorkspace for more information on using the ExportWorkspace
// API call, and error handling.
//
//    // Example sending a request using the ExportWorkspaceRequest method.
//    req, resp := client.ExportWorkspaceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) ExportWorkspaceRequest(input *ExportWorkspaceInput) (req *request.Request, output *ExportWorkspaceOutput) {
	op := &request.Operation{
		Name:       opExportWorkspace,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ExportWorkspaceInput{}
	}

	output = &ExportWorkspaceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ExportWorkspace API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation ExportWorkspace for usage and error information.
func (c *BIO) ExportWorkspace(input *ExportWorkspaceInput) (*ExportWorkspaceOutput, error) {
	req, out := c.ExportWorkspaceRequest(input)
	return out, req.Send()
}

// ExportWorkspaceWithContext is the same as ExportWorkspace with the addition of
// the ability to pass a context and additional request options.
//
// See ExportWorkspace for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) ExportWorkspaceWithContext(ctx volcengine.Context, input *ExportWorkspaceInput, opts ...request.Option) (*ExportWorkspaceOutput, error) {
	req, out := c.ExportWorkspaceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ExportWorkspaceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// WorkspaceID is a required field
	WorkspaceID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ExportWorkspaceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ExportWorkspaceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ExportWorkspaceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ExportWorkspaceInput"}
	if s.WorkspaceID == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetWorkspaceID sets the WorkspaceID field's value.
func (s *ExportWorkspaceInput) SetWorkspaceID(v string) *ExportWorkspaceInput {
	s.WorkspaceID = &v
	return s
}

type ExportWorkspaceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ExportWorkspaceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ExportWorkspaceOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *ExportWorkspaceOutput) SetID(v string) *ExportWorkspaceOutput {
	s.ID = &v
	return s
}
