// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bio

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteNotebookServerSettingsCommon = "DeleteNotebookServerSettings"

// DeleteNotebookServerSettingsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteNotebookServerSettingsCommon operation. The "output" return
// value will be populated with the DeleteNotebookServerSettingsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNotebookServerSettingsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNotebookServerSettingsCommon Send returns without error.
//
// See DeleteNotebookServerSettingsCommon for more information on using the DeleteNotebookServerSettingsCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteNotebookServerSettingsCommonRequest method.
//    req, resp := client.DeleteNotebookServerSettingsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) DeleteNotebookServerSettingsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteNotebookServerSettingsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteNotebookServerSettingsCommon API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation DeleteNotebookServerSettingsCommon for usage and error information.
func (c *BIO) DeleteNotebookServerSettingsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteNotebookServerSettingsCommonRequest(input)
	return out, req.Send()
}

// DeleteNotebookServerSettingsCommonWithContext is the same as DeleteNotebookServerSettingsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNotebookServerSettingsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) DeleteNotebookServerSettingsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteNotebookServerSettingsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNotebookServerSettings = "DeleteNotebookServerSettings"

// DeleteNotebookServerSettingsRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteNotebookServerSettings operation. The "output" return
// value will be populated with the DeleteNotebookServerSettingsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNotebookServerSettingsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNotebookServerSettingsCommon Send returns without error.
//
// See DeleteNotebookServerSettings for more information on using the DeleteNotebookServerSettings
// API call, and error handling.
//
//    // Example sending a request using the DeleteNotebookServerSettingsRequest method.
//    req, resp := client.DeleteNotebookServerSettingsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) DeleteNotebookServerSettingsRequest(input *DeleteNotebookServerSettingsInput) (req *request.Request, output *DeleteNotebookServerSettingsOutput) {
	op := &request.Operation{
		Name:       opDeleteNotebookServerSettings,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteNotebookServerSettingsInput{}
	}

	output = &DeleteNotebookServerSettingsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteNotebookServerSettings API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation DeleteNotebookServerSettings for usage and error information.
func (c *BIO) DeleteNotebookServerSettings(input *DeleteNotebookServerSettingsInput) (*DeleteNotebookServerSettingsOutput, error) {
	req, out := c.DeleteNotebookServerSettingsRequest(input)
	return out, req.Send()
}

// DeleteNotebookServerSettingsWithContext is the same as DeleteNotebookServerSettings with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNotebookServerSettings for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) DeleteNotebookServerSettingsWithContext(ctx volcengine.Context, input *DeleteNotebookServerSettingsInput, opts ...request.Option) (*DeleteNotebookServerSettingsOutput, error) {
	req, out := c.DeleteNotebookServerSettingsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteNotebookServerSettingsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// WorkspaceID is a required field
	WorkspaceID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteNotebookServerSettingsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNotebookServerSettingsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteNotebookServerSettingsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteNotebookServerSettingsInput"}
	if s.WorkspaceID == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetWorkspaceID sets the WorkspaceID field's value.
func (s *DeleteNotebookServerSettingsInput) SetWorkspaceID(v string) *DeleteNotebookServerSettingsInput {
	s.WorkspaceID = &v
	return s
}

type DeleteNotebookServerSettingsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteNotebookServerSettingsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNotebookServerSettingsOutput) GoString() string {
	return s.String()
}
