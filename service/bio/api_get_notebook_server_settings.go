// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bio

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetNotebookServerSettingsCommon = "GetNotebookServerSettings"

// GetNotebookServerSettingsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetNotebookServerSettingsCommon operation. The "output" return
// value will be populated with the GetNotebookServerSettingsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetNotebookServerSettingsCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetNotebookServerSettingsCommon Send returns without error.
//
// See GetNotebookServerSettingsCommon for more information on using the GetNotebookServerSettingsCommon
// API call, and error handling.
//
//    // Example sending a request using the GetNotebookServerSettingsCommonRequest method.
//    req, resp := client.GetNotebookServerSettingsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) GetNotebookServerSettingsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetNotebookServerSettingsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetNotebookServerSettingsCommon API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation GetNotebookServerSettingsCommon for usage and error information.
func (c *BIO) GetNotebookServerSettingsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetNotebookServerSettingsCommonRequest(input)
	return out, req.Send()
}

// GetNotebookServerSettingsCommonWithContext is the same as GetNotebookServerSettingsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetNotebookServerSettingsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) GetNotebookServerSettingsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetNotebookServerSettingsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetNotebookServerSettings = "GetNotebookServerSettings"

// GetNotebookServerSettingsRequest generates a "volcengine/request.Request" representing the
// client's request for the GetNotebookServerSettings operation. The "output" return
// value will be populated with the GetNotebookServerSettingsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetNotebookServerSettingsCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetNotebookServerSettingsCommon Send returns without error.
//
// See GetNotebookServerSettings for more information on using the GetNotebookServerSettings
// API call, and error handling.
//
//    // Example sending a request using the GetNotebookServerSettingsRequest method.
//    req, resp := client.GetNotebookServerSettingsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) GetNotebookServerSettingsRequest(input *GetNotebookServerSettingsInput) (req *request.Request, output *GetNotebookServerSettingsOutput) {
	op := &request.Operation{
		Name:       opGetNotebookServerSettings,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetNotebookServerSettingsInput{}
	}

	output = &GetNotebookServerSettingsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetNotebookServerSettings API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation GetNotebookServerSettings for usage and error information.
func (c *BIO) GetNotebookServerSettings(input *GetNotebookServerSettingsInput) (*GetNotebookServerSettingsOutput, error) {
	req, out := c.GetNotebookServerSettingsRequest(input)
	return out, req.Send()
}

// GetNotebookServerSettingsWithContext is the same as GetNotebookServerSettings with the addition of
// the ability to pass a context and additional request options.
//
// See GetNotebookServerSettings for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) GetNotebookServerSettingsWithContext(ctx volcengine.Context, input *GetNotebookServerSettingsInput, opts ...request.Option) (*GetNotebookServerSettingsOutput, error) {
	req, out := c.GetNotebookServerSettingsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetNotebookServerSettingsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// WorkspaceID is a required field
	WorkspaceID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetNotebookServerSettingsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetNotebookServerSettingsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetNotebookServerSettingsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetNotebookServerSettingsInput"}
	if s.WorkspaceID == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetWorkspaceID sets the WorkspaceID field's value.
func (s *GetNotebookServerSettingsInput) SetWorkspaceID(v string) *GetNotebookServerSettingsInput {
	s.WorkspaceID = &v
	return s
}

type GetNotebookServerSettingsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ImageID *string `type:"string" json:",omitempty"`

	MountTOSEnabled *bool `type:"boolean" json:",omitempty"`

	ResourceSize *string `type:"string" json:",omitempty"`

	StorageCapacity *int32 `type:"int32" json:",omitempty"`

	TempImageName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetNotebookServerSettingsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetNotebookServerSettingsOutput) GoString() string {
	return s.String()
}

// SetImageID sets the ImageID field's value.
func (s *GetNotebookServerSettingsOutput) SetImageID(v string) *GetNotebookServerSettingsOutput {
	s.ImageID = &v
	return s
}

// SetMountTOSEnabled sets the MountTOSEnabled field's value.
func (s *GetNotebookServerSettingsOutput) SetMountTOSEnabled(v bool) *GetNotebookServerSettingsOutput {
	s.MountTOSEnabled = &v
	return s
}

// SetResourceSize sets the ResourceSize field's value.
func (s *GetNotebookServerSettingsOutput) SetResourceSize(v string) *GetNotebookServerSettingsOutput {
	s.ResourceSize = &v
	return s
}

// SetStorageCapacity sets the StorageCapacity field's value.
func (s *GetNotebookServerSettingsOutput) SetStorageCapacity(v int32) *GetNotebookServerSettingsOutput {
	s.StorageCapacity = &v
	return s
}

// SetTempImageName sets the TempImageName field's value.
func (s *GetNotebookServerSettingsOutput) SetTempImageName(v string) *GetNotebookServerSettingsOutput {
	s.TempImageName = &v
	return s
}
