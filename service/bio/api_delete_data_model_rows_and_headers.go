// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bio

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteDataModelRowsAndHeadersCommon = "DeleteDataModelRowsAndHeaders"

// DeleteDataModelRowsAndHeadersCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteDataModelRowsAndHeadersCommon operation. The "output" return
// value will be populated with the DeleteDataModelRowsAndHeadersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDataModelRowsAndHeadersCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDataModelRowsAndHeadersCommon Send returns without error.
//
// See DeleteDataModelRowsAndHeadersCommon for more information on using the DeleteDataModelRowsAndHeadersCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDataModelRowsAndHeadersCommonRequest method.
//    req, resp := client.DeleteDataModelRowsAndHeadersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) DeleteDataModelRowsAndHeadersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDataModelRowsAndHeadersCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDataModelRowsAndHeadersCommon API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation DeleteDataModelRowsAndHeadersCommon for usage and error information.
func (c *BIO) DeleteDataModelRowsAndHeadersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDataModelRowsAndHeadersCommonRequest(input)
	return out, req.Send()
}

// DeleteDataModelRowsAndHeadersCommonWithContext is the same as DeleteDataModelRowsAndHeadersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDataModelRowsAndHeadersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) DeleteDataModelRowsAndHeadersCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDataModelRowsAndHeadersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDataModelRowsAndHeaders = "DeleteDataModelRowsAndHeaders"

// DeleteDataModelRowsAndHeadersRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteDataModelRowsAndHeaders operation. The "output" return
// value will be populated with the DeleteDataModelRowsAndHeadersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDataModelRowsAndHeadersCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDataModelRowsAndHeadersCommon Send returns without error.
//
// See DeleteDataModelRowsAndHeaders for more information on using the DeleteDataModelRowsAndHeaders
// API call, and error handling.
//
//    // Example sending a request using the DeleteDataModelRowsAndHeadersRequest method.
//    req, resp := client.DeleteDataModelRowsAndHeadersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) DeleteDataModelRowsAndHeadersRequest(input *DeleteDataModelRowsAndHeadersInput) (req *request.Request, output *DeleteDataModelRowsAndHeadersOutput) {
	op := &request.Operation{
		Name:       opDeleteDataModelRowsAndHeaders,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDataModelRowsAndHeadersInput{}
	}

	output = &DeleteDataModelRowsAndHeadersOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDataModelRowsAndHeaders API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation DeleteDataModelRowsAndHeaders for usage and error information.
func (c *BIO) DeleteDataModelRowsAndHeaders(input *DeleteDataModelRowsAndHeadersInput) (*DeleteDataModelRowsAndHeadersOutput, error) {
	req, out := c.DeleteDataModelRowsAndHeadersRequest(input)
	return out, req.Send()
}

// DeleteDataModelRowsAndHeadersWithContext is the same as DeleteDataModelRowsAndHeaders with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDataModelRowsAndHeaders for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) DeleteDataModelRowsAndHeadersWithContext(ctx volcengine.Context, input *DeleteDataModelRowsAndHeadersInput, opts ...request.Option) (*DeleteDataModelRowsAndHeadersOutput, error) {
	req, out := c.DeleteDataModelRowsAndHeadersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteDataModelRowsAndHeadersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Headers []*string `type:"list" json:",omitempty"`

	// ID is a required field
	ID *string `type:"string" json:",omitempty" required:"true"`

	RowIDs []*string `type:"list" json:",omitempty"`

	// WorkspaceID is a required field
	WorkspaceID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteDataModelRowsAndHeadersInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDataModelRowsAndHeadersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteDataModelRowsAndHeadersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteDataModelRowsAndHeadersInput"}
	if s.ID == nil {
		invalidParams.Add(request.NewErrParamRequired("ID"))
	}
	if s.WorkspaceID == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetHeaders sets the Headers field's value.
func (s *DeleteDataModelRowsAndHeadersInput) SetHeaders(v []*string) *DeleteDataModelRowsAndHeadersInput {
	s.Headers = v
	return s
}

// SetID sets the ID field's value.
func (s *DeleteDataModelRowsAndHeadersInput) SetID(v string) *DeleteDataModelRowsAndHeadersInput {
	s.ID = &v
	return s
}

// SetRowIDs sets the RowIDs field's value.
func (s *DeleteDataModelRowsAndHeadersInput) SetRowIDs(v []*string) *DeleteDataModelRowsAndHeadersInput {
	s.RowIDs = v
	return s
}

// SetWorkspaceID sets the WorkspaceID field's value.
func (s *DeleteDataModelRowsAndHeadersInput) SetWorkspaceID(v string) *DeleteDataModelRowsAndHeadersInput {
	s.WorkspaceID = &v
	return s
}

type DeleteDataModelRowsAndHeadersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteDataModelRowsAndHeadersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDataModelRowsAndHeadersOutput) GoString() string {
	return s.String()
}
