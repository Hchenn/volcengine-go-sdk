// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bio

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBindClusterToWorkspaceCommon = "BindClusterToWorkspace"

// BindClusterToWorkspaceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BindClusterToWorkspaceCommon operation. The "output" return
// value will be populated with the BindClusterToWorkspaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BindClusterToWorkspaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after BindClusterToWorkspaceCommon Send returns without error.
//
// See BindClusterToWorkspaceCommon for more information on using the BindClusterToWorkspaceCommon
// API call, and error handling.
//
//    // Example sending a request using the BindClusterToWorkspaceCommonRequest method.
//    req, resp := client.BindClusterToWorkspaceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) BindClusterToWorkspaceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBindClusterToWorkspaceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BindClusterToWorkspaceCommon API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation BindClusterToWorkspaceCommon for usage and error information.
func (c *BIO) BindClusterToWorkspaceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BindClusterToWorkspaceCommonRequest(input)
	return out, req.Send()
}

// BindClusterToWorkspaceCommonWithContext is the same as BindClusterToWorkspaceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BindClusterToWorkspaceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) BindClusterToWorkspaceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BindClusterToWorkspaceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBindClusterToWorkspace = "BindClusterToWorkspace"

// BindClusterToWorkspaceRequest generates a "volcengine/request.Request" representing the
// client's request for the BindClusterToWorkspace operation. The "output" return
// value will be populated with the BindClusterToWorkspaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BindClusterToWorkspaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after BindClusterToWorkspaceCommon Send returns without error.
//
// See BindClusterToWorkspace for more information on using the BindClusterToWorkspace
// API call, and error handling.
//
//    // Example sending a request using the BindClusterToWorkspaceRequest method.
//    req, resp := client.BindClusterToWorkspaceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) BindClusterToWorkspaceRequest(input *BindClusterToWorkspaceInput) (req *request.Request, output *BindClusterToWorkspaceOutput) {
	op := &request.Operation{
		Name:       opBindClusterToWorkspace,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BindClusterToWorkspaceInput{}
	}

	output = &BindClusterToWorkspaceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BindClusterToWorkspace API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation BindClusterToWorkspace for usage and error information.
func (c *BIO) BindClusterToWorkspace(input *BindClusterToWorkspaceInput) (*BindClusterToWorkspaceOutput, error) {
	req, out := c.BindClusterToWorkspaceRequest(input)
	return out, req.Send()
}

// BindClusterToWorkspaceWithContext is the same as BindClusterToWorkspace with the addition of
// the ability to pass a context and additional request options.
//
// See BindClusterToWorkspace for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) BindClusterToWorkspaceWithContext(ctx volcengine.Context, input *BindClusterToWorkspaceInput, opts ...request.Option) (*BindClusterToWorkspaceOutput, error) {
	req, out := c.BindClusterToWorkspaceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BindClusterToWorkspaceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ClusterID is a required field
	ClusterID *string `type:"string" json:",omitempty" required:"true"`

	// ID is a required field
	ID *string `type:"string" json:",omitempty" required:"true"`

	// Type is a required field
	Type *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfTypeForBindClusterToWorkspaceInput"`
}

// String returns the string representation
func (s BindClusterToWorkspaceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindClusterToWorkspaceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *BindClusterToWorkspaceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "BindClusterToWorkspaceInput"}
	if s.ClusterID == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterID"))
	}
	if s.ID == nil {
		invalidParams.Add(request.NewErrParamRequired("ID"))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClusterID sets the ClusterID field's value.
func (s *BindClusterToWorkspaceInput) SetClusterID(v string) *BindClusterToWorkspaceInput {
	s.ClusterID = &v
	return s
}

// SetID sets the ID field's value.
func (s *BindClusterToWorkspaceInput) SetID(v string) *BindClusterToWorkspaceInput {
	s.ID = &v
	return s
}

// SetType sets the Type field's value.
func (s *BindClusterToWorkspaceInput) SetType(v string) *BindClusterToWorkspaceInput {
	s.Type = &v
	return s
}

type BindClusterToWorkspaceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s BindClusterToWorkspaceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BindClusterToWorkspaceOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfTypeForBindClusterToWorkspaceInputWorkflow is a EnumOfTypeForBindClusterToWorkspaceInput enum value
	EnumOfTypeForBindClusterToWorkspaceInputWorkflow = "workflow"

	// EnumOfTypeForBindClusterToWorkspaceInputNotebook is a EnumOfTypeForBindClusterToWorkspaceInput enum value
	EnumOfTypeForBindClusterToWorkspaceInputNotebook = "notebook"

	// EnumOfTypeForBindClusterToWorkspaceInputWebapp is a EnumOfTypeForBindClusterToWorkspaceInput enum value
	EnumOfTypeForBindClusterToWorkspaceInputWebapp = "webapp"
)
