// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bio

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCommitIESImageCommon = "CommitIESImage"

// CommitIESImageCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CommitIESImageCommon operation. The "output" return
// value will be populated with the CommitIESImageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CommitIESImageCommon Request to send the API call to the service.
// the "output" return value is not valid until after CommitIESImageCommon Send returns without error.
//
// See CommitIESImageCommon for more information on using the CommitIESImageCommon
// API call, and error handling.
//
//    // Example sending a request using the CommitIESImageCommonRequest method.
//    req, resp := client.CommitIESImageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) CommitIESImageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCommitIESImageCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CommitIESImageCommon API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation CommitIESImageCommon for usage and error information.
func (c *BIO) CommitIESImageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CommitIESImageCommonRequest(input)
	return out, req.Send()
}

// CommitIESImageCommonWithContext is the same as CommitIESImageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CommitIESImageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) CommitIESImageCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CommitIESImageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCommitIESImage = "CommitIESImage"

// CommitIESImageRequest generates a "volcengine/request.Request" representing the
// client's request for the CommitIESImage operation. The "output" return
// value will be populated with the CommitIESImageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CommitIESImageCommon Request to send the API call to the service.
// the "output" return value is not valid until after CommitIESImageCommon Send returns without error.
//
// See CommitIESImage for more information on using the CommitIESImage
// API call, and error handling.
//
//    // Example sending a request using the CommitIESImageRequest method.
//    req, resp := client.CommitIESImageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) CommitIESImageRequest(input *CommitIESImageInput) (req *request.Request, output *CommitIESImageOutput) {
	op := &request.Operation{
		Name:       opCommitIESImage,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CommitIESImageInput{}
	}

	output = &CommitIESImageOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CommitIESImage API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation CommitIESImage for usage and error information.
func (c *BIO) CommitIESImage(input *CommitIESImageInput) (*CommitIESImageOutput, error) {
	req, out := c.CommitIESImageRequest(input)
	return out, req.Send()
}

// CommitIESImageWithContext is the same as CommitIESImage with the addition of
// the ability to pass a context and additional request options.
//
// See CommitIESImage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) CommitIESImageWithContext(ctx volcengine.Context, input *CommitIESImageInput, opts ...request.Option) (*CommitIESImageOutput, error) {
	req, out := c.CommitIESImageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CommitIESImageInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Description is a required field
	Description *string `type:"string" json:",omitempty" required:"true"`

	// Image is a required field
	Image *string `type:"string" json:",omitempty" required:"true"`

	// ImageReplace is a required field
	ImageReplace *bool `type:"boolean" json:",omitempty" required:"true"`

	// WebappInstanceID is a required field
	WebappInstanceID *string `type:"string" json:",omitempty" required:"true"`

	// WorkspaceID is a required field
	WorkspaceID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CommitIESImageInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CommitIESImageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CommitIESImageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CommitIESImageInput"}
	if s.Description == nil {
		invalidParams.Add(request.NewErrParamRequired("Description"))
	}
	if s.Image == nil {
		invalidParams.Add(request.NewErrParamRequired("Image"))
	}
	if s.ImageReplace == nil {
		invalidParams.Add(request.NewErrParamRequired("ImageReplace"))
	}
	if s.WebappInstanceID == nil {
		invalidParams.Add(request.NewErrParamRequired("WebappInstanceID"))
	}
	if s.WorkspaceID == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CommitIESImageInput) SetDescription(v string) *CommitIESImageInput {
	s.Description = &v
	return s
}

// SetImage sets the Image field's value.
func (s *CommitIESImageInput) SetImage(v string) *CommitIESImageInput {
	s.Image = &v
	return s
}

// SetImageReplace sets the ImageReplace field's value.
func (s *CommitIESImageInput) SetImageReplace(v bool) *CommitIESImageInput {
	s.ImageReplace = &v
	return s
}

// SetWebappInstanceID sets the WebappInstanceID field's value.
func (s *CommitIESImageInput) SetWebappInstanceID(v string) *CommitIESImageInput {
	s.WebappInstanceID = &v
	return s
}

// SetWorkspaceID sets the WorkspaceID field's value.
func (s *CommitIESImageInput) SetWorkspaceID(v string) *CommitIESImageInput {
	s.WorkspaceID = &v
	return s
}

type CommitIESImageOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CommitIESImageOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CommitIESImageOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *CommitIESImageOutput) SetID(v string) *CommitIESImageOutput {
	s.ID = &v
	return s
}
