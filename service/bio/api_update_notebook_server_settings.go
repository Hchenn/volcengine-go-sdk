// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bio

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateNotebookServerSettingsCommon = "UpdateNotebookServerSettings"

// UpdateNotebookServerSettingsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateNotebookServerSettingsCommon operation. The "output" return
// value will be populated with the UpdateNotebookServerSettingsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateNotebookServerSettingsCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateNotebookServerSettingsCommon Send returns without error.
//
// See UpdateNotebookServerSettingsCommon for more information on using the UpdateNotebookServerSettingsCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateNotebookServerSettingsCommonRequest method.
//    req, resp := client.UpdateNotebookServerSettingsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) UpdateNotebookServerSettingsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateNotebookServerSettingsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateNotebookServerSettingsCommon API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation UpdateNotebookServerSettingsCommon for usage and error information.
func (c *BIO) UpdateNotebookServerSettingsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateNotebookServerSettingsCommonRequest(input)
	return out, req.Send()
}

// UpdateNotebookServerSettingsCommonWithContext is the same as UpdateNotebookServerSettingsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateNotebookServerSettingsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) UpdateNotebookServerSettingsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateNotebookServerSettingsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateNotebookServerSettings = "UpdateNotebookServerSettings"

// UpdateNotebookServerSettingsRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateNotebookServerSettings operation. The "output" return
// value will be populated with the UpdateNotebookServerSettingsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateNotebookServerSettingsCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateNotebookServerSettingsCommon Send returns without error.
//
// See UpdateNotebookServerSettings for more information on using the UpdateNotebookServerSettings
// API call, and error handling.
//
//    // Example sending a request using the UpdateNotebookServerSettingsRequest method.
//    req, resp := client.UpdateNotebookServerSettingsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) UpdateNotebookServerSettingsRequest(input *UpdateNotebookServerSettingsInput) (req *request.Request, output *UpdateNotebookServerSettingsOutput) {
	op := &request.Operation{
		Name:       opUpdateNotebookServerSettings,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateNotebookServerSettingsInput{}
	}

	output = &UpdateNotebookServerSettingsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateNotebookServerSettings API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation UpdateNotebookServerSettings for usage and error information.
func (c *BIO) UpdateNotebookServerSettings(input *UpdateNotebookServerSettingsInput) (*UpdateNotebookServerSettingsOutput, error) {
	req, out := c.UpdateNotebookServerSettingsRequest(input)
	return out, req.Send()
}

// UpdateNotebookServerSettingsWithContext is the same as UpdateNotebookServerSettings with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateNotebookServerSettings for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) UpdateNotebookServerSettingsWithContext(ctx volcengine.Context, input *UpdateNotebookServerSettingsInput, opts ...request.Option) (*UpdateNotebookServerSettingsOutput, error) {
	req, out := c.UpdateNotebookServerSettingsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateNotebookServerSettingsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ImageID *string `type:"string" json:",omitempty"`

	MountTOSEnabled *bool `type:"boolean" json:",omitempty"`

	ResourceSize *string `type:"string" json:",omitempty" enum:"EnumOfResourceSizeForUpdateNotebookServerSettingsInput"`

	StorageCapacity *int32 `type:"int32" json:",omitempty"`

	TempImageName *string `type:"string" json:",omitempty"`

	// WorkspaceID is a required field
	WorkspaceID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateNotebookServerSettingsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateNotebookServerSettingsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateNotebookServerSettingsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateNotebookServerSettingsInput"}
	if s.WorkspaceID == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetImageID sets the ImageID field's value.
func (s *UpdateNotebookServerSettingsInput) SetImageID(v string) *UpdateNotebookServerSettingsInput {
	s.ImageID = &v
	return s
}

// SetMountTOSEnabled sets the MountTOSEnabled field's value.
func (s *UpdateNotebookServerSettingsInput) SetMountTOSEnabled(v bool) *UpdateNotebookServerSettingsInput {
	s.MountTOSEnabled = &v
	return s
}

// SetResourceSize sets the ResourceSize field's value.
func (s *UpdateNotebookServerSettingsInput) SetResourceSize(v string) *UpdateNotebookServerSettingsInput {
	s.ResourceSize = &v
	return s
}

// SetStorageCapacity sets the StorageCapacity field's value.
func (s *UpdateNotebookServerSettingsInput) SetStorageCapacity(v int32) *UpdateNotebookServerSettingsInput {
	s.StorageCapacity = &v
	return s
}

// SetTempImageName sets the TempImageName field's value.
func (s *UpdateNotebookServerSettingsInput) SetTempImageName(v string) *UpdateNotebookServerSettingsInput {
	s.TempImageName = &v
	return s
}

// SetWorkspaceID sets the WorkspaceID field's value.
func (s *UpdateNotebookServerSettingsInput) SetWorkspaceID(v string) *UpdateNotebookServerSettingsInput {
	s.WorkspaceID = &v
	return s
}

type UpdateNotebookServerSettingsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateNotebookServerSettingsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateNotebookServerSettingsOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfResourceSizeForUpdateNotebookServerSettingsInputSmall is a EnumOfResourceSizeForUpdateNotebookServerSettingsInput enum value
	EnumOfResourceSizeForUpdateNotebookServerSettingsInputSmall = "small"

	// EnumOfResourceSizeForUpdateNotebookServerSettingsInputMiddle is a EnumOfResourceSizeForUpdateNotebookServerSettingsInput enum value
	EnumOfResourceSizeForUpdateNotebookServerSettingsInputMiddle = "middle"

	// EnumOfResourceSizeForUpdateNotebookServerSettingsInputLarge is a EnumOfResourceSizeForUpdateNotebookServerSettingsInput enum value
	EnumOfResourceSizeForUpdateNotebookServerSettingsInputLarge = "large"
)
