// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bio

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListDataModelsCommon = "ListDataModels"

// ListDataModelsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListDataModelsCommon operation. The "output" return
// value will be populated with the ListDataModelsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDataModelsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDataModelsCommon Send returns without error.
//
// See ListDataModelsCommon for more information on using the ListDataModelsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListDataModelsCommonRequest method.
//    req, resp := client.ListDataModelsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) ListDataModelsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListDataModelsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDataModelsCommon API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation ListDataModelsCommon for usage and error information.
func (c *BIO) ListDataModelsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListDataModelsCommonRequest(input)
	return out, req.Send()
}

// ListDataModelsCommonWithContext is the same as ListDataModelsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListDataModelsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) ListDataModelsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListDataModelsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDataModels = "ListDataModels"

// ListDataModelsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListDataModels operation. The "output" return
// value will be populated with the ListDataModelsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDataModelsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDataModelsCommon Send returns without error.
//
// See ListDataModels for more information on using the ListDataModels
// API call, and error handling.
//
//    // Example sending a request using the ListDataModelsRequest method.
//    req, resp := client.ListDataModelsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) ListDataModelsRequest(input *ListDataModelsInput) (req *request.Request, output *ListDataModelsOutput) {
	op := &request.Operation{
		Name:       opListDataModels,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListDataModelsInput{}
	}

	output = &ListDataModelsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDataModels API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation ListDataModels for usage and error information.
func (c *BIO) ListDataModels(input *ListDataModelsInput) (*ListDataModelsOutput, error) {
	req, out := c.ListDataModelsRequest(input)
	return out, req.Send()
}

// ListDataModelsWithContext is the same as ListDataModels with the addition of
// the ability to pass a context and additional request options.
//
// See ListDataModels for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) ListDataModelsWithContext(ctx volcengine.Context, input *ListDataModelsInput, opts ...request.Option) (*ListDataModelsOutput, error) {
	req, out := c.ListDataModelsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListDataModelsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ID *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	RowCount *int32 `type:"int32" json:",omitempty"`

	Type *string `type:"string" json:",omitempty" enum:"EnumOfTypeForListDataModelsOutput"`
}

// String returns the string representation
func (s ItemForListDataModelsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListDataModelsOutput) GoString() string {
	return s.String()
}

// SetID sets the ID field's value.
func (s *ItemForListDataModelsOutput) SetID(v string) *ItemForListDataModelsOutput {
	s.ID = &v
	return s
}

// SetName sets the Name field's value.
func (s *ItemForListDataModelsOutput) SetName(v string) *ItemForListDataModelsOutput {
	s.Name = &v
	return s
}

// SetRowCount sets the RowCount field's value.
func (s *ItemForListDataModelsOutput) SetRowCount(v int32) *ItemForListDataModelsOutput {
	s.RowCount = &v
	return s
}

// SetType sets the Type field's value.
func (s *ItemForListDataModelsOutput) SetType(v string) *ItemForListDataModelsOutput {
	s.Type = &v
	return s
}

type ListDataModelsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// WorkspaceID is a required field
	WorkspaceID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListDataModelsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDataModelsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListDataModelsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListDataModelsInput"}
	if s.WorkspaceID == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetWorkspaceID sets the WorkspaceID field's value.
func (s *ListDataModelsInput) SetWorkspaceID(v string) *ListDataModelsInput {
	s.WorkspaceID = &v
	return s
}

type ListDataModelsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListDataModelsOutput `type:"list" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListDataModelsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDataModelsOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListDataModelsOutput) SetItems(v []*ItemForListDataModelsOutput) *ListDataModelsOutput {
	s.Items = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListDataModelsOutput) SetTotalCount(v int32) *ListDataModelsOutput {
	s.TotalCount = &v
	return s
}

const (
	// EnumOfTypeForListDataModelsOutputNormal is a EnumOfTypeForListDataModelsOutput enum value
	EnumOfTypeForListDataModelsOutputNormal = "normal"

	// EnumOfTypeForListDataModelsOutputSet is a EnumOfTypeForListDataModelsOutput enum value
	EnumOfTypeForListDataModelsOutputSet = "set"

	// EnumOfTypeForListDataModelsOutputWorkspace is a EnumOfTypeForListDataModelsOutput enum value
	EnumOfTypeForListDataModelsOutputWorkspace = "workspace"
)
