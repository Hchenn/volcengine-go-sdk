// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package bio

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListWorkspaceLabelsCommon = "ListWorkspaceLabels"

// ListWorkspaceLabelsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListWorkspaceLabelsCommon operation. The "output" return
// value will be populated with the ListWorkspaceLabelsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListWorkspaceLabelsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListWorkspaceLabelsCommon Send returns without error.
//
// See ListWorkspaceLabelsCommon for more information on using the ListWorkspaceLabelsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListWorkspaceLabelsCommonRequest method.
//    req, resp := client.ListWorkspaceLabelsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) ListWorkspaceLabelsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListWorkspaceLabelsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListWorkspaceLabelsCommon API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation ListWorkspaceLabelsCommon for usage and error information.
func (c *BIO) ListWorkspaceLabelsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListWorkspaceLabelsCommonRequest(input)
	return out, req.Send()
}

// ListWorkspaceLabelsCommonWithContext is the same as ListWorkspaceLabelsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListWorkspaceLabelsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) ListWorkspaceLabelsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListWorkspaceLabelsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListWorkspaceLabels = "ListWorkspaceLabels"

// ListWorkspaceLabelsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListWorkspaceLabels operation. The "output" return
// value will be populated with the ListWorkspaceLabelsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListWorkspaceLabelsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListWorkspaceLabelsCommon Send returns without error.
//
// See ListWorkspaceLabels for more information on using the ListWorkspaceLabels
// API call, and error handling.
//
//    // Example sending a request using the ListWorkspaceLabelsRequest method.
//    req, resp := client.ListWorkspaceLabelsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *BIO) ListWorkspaceLabelsRequest(input *ListWorkspaceLabelsInput) (req *request.Request, output *ListWorkspaceLabelsOutput) {
	op := &request.Operation{
		Name:       opListWorkspaceLabels,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListWorkspaceLabelsInput{}
	}

	output = &ListWorkspaceLabelsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListWorkspaceLabels API operation for BIO.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for BIO's
// API operation ListWorkspaceLabels for usage and error information.
func (c *BIO) ListWorkspaceLabels(input *ListWorkspaceLabelsInput) (*ListWorkspaceLabelsOutput, error) {
	req, out := c.ListWorkspaceLabelsRequest(input)
	return out, req.Send()
}

// ListWorkspaceLabelsWithContext is the same as ListWorkspaceLabels with the addition of
// the ability to pass a context and additional request options.
//
// See ListWorkspaceLabels for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *BIO) ListWorkspaceLabelsWithContext(ctx volcengine.Context, input *ListWorkspaceLabelsInput, opts ...request.Option) (*ListWorkspaceLabelsOutput, error) {
	req, out := c.ListWorkspaceLabelsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FilterForListWorkspaceLabelsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Exact *bool `type:"boolean" json:",omitempty"`

	IsPublic *bool `type:"boolean" json:",omitempty"`

	Keywords []*string `type:"list" json:",omitempty"`

	MatchPreset *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s FilterForListWorkspaceLabelsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForListWorkspaceLabelsInput) GoString() string {
	return s.String()
}

// SetExact sets the Exact field's value.
func (s *FilterForListWorkspaceLabelsInput) SetExact(v bool) *FilterForListWorkspaceLabelsInput {
	s.Exact = &v
	return s
}

// SetIsPublic sets the IsPublic field's value.
func (s *FilterForListWorkspaceLabelsInput) SetIsPublic(v bool) *FilterForListWorkspaceLabelsInput {
	s.IsPublic = &v
	return s
}

// SetKeywords sets the Keywords field's value.
func (s *FilterForListWorkspaceLabelsInput) SetKeywords(v []*string) *FilterForListWorkspaceLabelsInput {
	s.Keywords = v
	return s
}

// SetMatchPreset sets the MatchPreset field's value.
func (s *FilterForListWorkspaceLabelsInput) SetMatchPreset(v bool) *FilterForListWorkspaceLabelsInput {
	s.MatchPreset = &v
	return s
}

type ItemForListWorkspaceLabelsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Count *int32 `type:"int32" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListWorkspaceLabelsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListWorkspaceLabelsOutput) GoString() string {
	return s.String()
}

// SetCount sets the Count field's value.
func (s *ItemForListWorkspaceLabelsOutput) SetCount(v int32) *ItemForListWorkspaceLabelsOutput {
	s.Count = &v
	return s
}

// SetName sets the Name field's value.
func (s *ItemForListWorkspaceLabelsOutput) SetName(v string) *ItemForListWorkspaceLabelsOutput {
	s.Name = &v
	return s
}

type ListWorkspaceLabelsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filter *FilterForListWorkspaceLabelsInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ListWorkspaceLabelsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListWorkspaceLabelsInput) GoString() string {
	return s.String()
}

// SetFilter sets the Filter field's value.
func (s *ListWorkspaceLabelsInput) SetFilter(v *FilterForListWorkspaceLabelsInput) *ListWorkspaceLabelsInput {
	s.Filter = v
	return s
}

type ListWorkspaceLabelsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListWorkspaceLabelsOutput `type:"list" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListWorkspaceLabelsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListWorkspaceLabelsOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListWorkspaceLabelsOutput) SetItems(v []*ItemForListWorkspaceLabelsOutput) *ListWorkspaceLabelsOutput {
	s.Items = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListWorkspaceLabelsOutput) SetTotalCount(v int32) *ListWorkspaceLabelsOutput {
	s.TotalCount = &v
	return s
}
