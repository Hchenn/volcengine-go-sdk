// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package coze20250601

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateUserCommon = "CreateUser"

// CreateUserCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateUserCommon operation. The "output" return
// value will be populated with the CreateUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateUserCommon Send returns without error.
//
// See CreateUserCommon for more information on using the CreateUserCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateUserCommonRequest method.
//    req, resp := client.CreateUserCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *COZE20250601) CreateUserCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateUserCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateUserCommon API operation for COZE20250601.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for COZE20250601's
// API operation CreateUserCommon for usage and error information.
func (c *COZE20250601) CreateUserCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateUserCommonRequest(input)
	return out, req.Send()
}

// CreateUserCommonWithContext is the same as CreateUserCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateUserCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *COZE20250601) CreateUserCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateUserCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateUser = "CreateUser"

// CreateUserRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateUser operation. The "output" return
// value will be populated with the CreateUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateUserCommon Send returns without error.
//
// See CreateUser for more information on using the CreateUser
// API call, and error handling.
//
//    // Example sending a request using the CreateUserRequest method.
//    req, resp := client.CreateUserRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *COZE20250601) CreateUserRequest(input *CreateUserInput) (req *request.Request, output *CreateUserOutput) {
	op := &request.Operation{
		Name:       opCreateUser,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateUserInput{}
	}

	output = &CreateUserOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateUser API operation for COZE20250601.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for COZE20250601's
// API operation CreateUser for usage and error information.
func (c *COZE20250601) CreateUser(input *CreateUserInput) (*CreateUserOutput, error) {
	req, out := c.CreateUserRequest(input)
	return out, req.Send()
}

// CreateUserWithContext is the same as CreateUser with the addition of
// the ability to pass a context and additional request options.
//
// See CreateUser for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *COZE20250601) CreateUserWithContext(ctx volcengine.Context, input *CreateUserInput, opts ...request.Option) (*CreateUserOutput, error) {
	req, out := c.CreateUserRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateUserInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	SecureEmail *string `type:"string" json:",omitempty"`

	SecurePhone *string `type:"string" json:",omitempty"`

	// UserName is a required field
	UserName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateUserInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateUserInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateUserInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateUserInput"}
	if s.UserName == nil {
		invalidParams.Add(request.NewErrParamRequired("UserName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSecureEmail sets the SecureEmail field's value.
func (s *CreateUserInput) SetSecureEmail(v string) *CreateUserInput {
	s.SecureEmail = &v
	return s
}

// SetSecurePhone sets the SecurePhone field's value.
func (s *CreateUserInput) SetSecurePhone(v string) *CreateUserInput {
	s.SecurePhone = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *CreateUserInput) SetUserName(v string) *CreateUserInput {
	s.UserName = &v
	return s
}

type CreateUserOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	UserID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateUserOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateUserOutput) GoString() string {
	return s.String()
}

// SetUserID sets the UserID field's value.
func (s *CreateUserOutput) SetUserID(v string) *CreateUserOutput {
	s.UserID = &v
	return s
}
