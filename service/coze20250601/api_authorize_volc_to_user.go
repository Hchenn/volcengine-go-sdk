// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package coze20250601

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAuthorizeVolcToUserCommon = "AuthorizeVolcToUser"

// AuthorizeVolcToUserCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AuthorizeVolcToUserCommon operation. The "output" return
// value will be populated with the AuthorizeVolcToUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AuthorizeVolcToUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after AuthorizeVolcToUserCommon Send returns without error.
//
// See AuthorizeVolcToUserCommon for more information on using the AuthorizeVolcToUserCommon
// API call, and error handling.
//
//    // Example sending a request using the AuthorizeVolcToUserCommonRequest method.
//    req, resp := client.AuthorizeVolcToUserCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *COZE20250601) AuthorizeVolcToUserCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAuthorizeVolcToUserCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AuthorizeVolcToUserCommon API operation for COZE20250601.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for COZE20250601's
// API operation AuthorizeVolcToUserCommon for usage and error information.
func (c *COZE20250601) AuthorizeVolcToUserCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AuthorizeVolcToUserCommonRequest(input)
	return out, req.Send()
}

// AuthorizeVolcToUserCommonWithContext is the same as AuthorizeVolcToUserCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AuthorizeVolcToUserCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *COZE20250601) AuthorizeVolcToUserCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AuthorizeVolcToUserCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAuthorizeVolcToUser = "AuthorizeVolcToUser"

// AuthorizeVolcToUserRequest generates a "volcengine/request.Request" representing the
// client's request for the AuthorizeVolcToUser operation. The "output" return
// value will be populated with the AuthorizeVolcToUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AuthorizeVolcToUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after AuthorizeVolcToUserCommon Send returns without error.
//
// See AuthorizeVolcToUser for more information on using the AuthorizeVolcToUser
// API call, and error handling.
//
//    // Example sending a request using the AuthorizeVolcToUserRequest method.
//    req, resp := client.AuthorizeVolcToUserRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *COZE20250601) AuthorizeVolcToUserRequest(input *AuthorizeVolcToUserInput) (req *request.Request, output *AuthorizeVolcToUserOutput) {
	op := &request.Operation{
		Name:       opAuthorizeVolcToUser,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AuthorizeVolcToUserInput{}
	}

	output = &AuthorizeVolcToUserOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AuthorizeVolcToUser API operation for COZE20250601.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for COZE20250601's
// API operation AuthorizeVolcToUser for usage and error information.
func (c *COZE20250601) AuthorizeVolcToUser(input *AuthorizeVolcToUserInput) (*AuthorizeVolcToUserOutput, error) {
	req, out := c.AuthorizeVolcToUserRequest(input)
	return out, req.Send()
}

// AuthorizeVolcToUserWithContext is the same as AuthorizeVolcToUser with the addition of
// the ability to pass a context and additional request options.
//
// See AuthorizeVolcToUser for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *COZE20250601) AuthorizeVolcToUserWithContext(ctx volcengine.Context, input *AuthorizeVolcToUserInput, opts ...request.Option) (*AuthorizeVolcToUserOutput, error) {
	req, out := c.AuthorizeVolcToUserRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AuthorizeVolcToUserInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// UserId is a required field
	UserId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s AuthorizeVolcToUserInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AuthorizeVolcToUserInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AuthorizeVolcToUserInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AuthorizeVolcToUserInput"}
	if s.UserId == nil {
		invalidParams.Add(request.NewErrParamRequired("UserId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUserId sets the UserId field's value.
func (s *AuthorizeVolcToUserInput) SetUserId(v string) *AuthorizeVolcToUserInput {
	s.UserId = &v
	return s
}

type AuthorizeVolcToUserOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AuthorizeVolcToUserOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AuthorizeVolcToUserOutput) GoString() string {
	return s.String()
}
