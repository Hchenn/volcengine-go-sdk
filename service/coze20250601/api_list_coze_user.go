// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package coze20250601

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListCozeUserCommon = "ListCozeUser"

// ListCozeUserCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListCozeUserCommon operation. The "output" return
// value will be populated with the ListCozeUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListCozeUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListCozeUserCommon Send returns without error.
//
// See ListCozeUserCommon for more information on using the ListCozeUserCommon
// API call, and error handling.
//
//    // Example sending a request using the ListCozeUserCommonRequest method.
//    req, resp := client.ListCozeUserCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *COZE20250601) ListCozeUserCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListCozeUserCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListCozeUserCommon API operation for COZE20250601.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for COZE20250601's
// API operation ListCozeUserCommon for usage and error information.
func (c *COZE20250601) ListCozeUserCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListCozeUserCommonRequest(input)
	return out, req.Send()
}

// ListCozeUserCommonWithContext is the same as ListCozeUserCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListCozeUserCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *COZE20250601) ListCozeUserCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListCozeUserCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListCozeUser = "ListCozeUser"

// ListCozeUserRequest generates a "volcengine/request.Request" representing the
// client's request for the ListCozeUser operation. The "output" return
// value will be populated with the ListCozeUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListCozeUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListCozeUserCommon Send returns without error.
//
// See ListCozeUser for more information on using the ListCozeUser
// API call, and error handling.
//
//    // Example sending a request using the ListCozeUserRequest method.
//    req, resp := client.ListCozeUserRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *COZE20250601) ListCozeUserRequest(input *ListCozeUserInput) (req *request.Request, output *ListCozeUserOutput) {
	op := &request.Operation{
		Name:       opListCozeUser,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListCozeUserInput{}
	}

	output = &ListCozeUserOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListCozeUser API operation for COZE20250601.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for COZE20250601's
// API operation ListCozeUser for usage and error information.
func (c *COZE20250601) ListCozeUser(input *ListCozeUserInput) (*ListCozeUserOutput, error) {
	req, out := c.ListCozeUserRequest(input)
	return out, req.Send()
}

// ListCozeUserWithContext is the same as ListCozeUser with the addition of
// the ability to pass a context and additional request options.
//
// See ListCozeUser for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *COZE20250601) ListCozeUserWithContext(ctx volcengine.Context, input *ListCozeUserInput, opts ...request.Option) (*ListCozeUserOutput, error) {
	req, out := c.ListCozeUserRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListCozeUserInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	PageNumber *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	QueryString *string `type:"string" json:",omitempty"`

	UserName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListCozeUserInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListCozeUserInput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListCozeUserInput) SetPageNumber(v int64) *ListCozeUserInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListCozeUserInput) SetPageSize(v int64) *ListCozeUserInput {
	s.PageSize = &v
	return s
}

// SetQueryString sets the QueryString field's value.
func (s *ListCozeUserInput) SetQueryString(v string) *ListCozeUserInput {
	s.QueryString = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *ListCozeUserInput) SetUserName(v string) *ListCozeUserInput {
	s.UserName = &v
	return s
}

type ListCozeUserOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	PageNumber *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	Total *int64 `type:"int64" json:",omitempty"`

	Users []*UserForListCozeUserOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListCozeUserOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListCozeUserOutput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListCozeUserOutput) SetPageNumber(v int64) *ListCozeUserOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListCozeUserOutput) SetPageSize(v int64) *ListCozeUserOutput {
	s.PageSize = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListCozeUserOutput) SetTotal(v int64) *ListCozeUserOutput {
	s.Total = &v
	return s
}

// SetUsers sets the Users field's value.
func (s *ListCozeUserOutput) SetUsers(v []*UserForListCozeUserOutput) *ListCozeUserOutput {
	s.Users = v
	return s
}

type UserForListCozeUserOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CozeUserId *string `type:"string" json:",omitempty"`

	CozeUserInEnterprise *string `type:"string" json:",omitempty"`

	CozeUserName *string `type:"string" json:",omitempty"`

	CreatedTime *string `type:"string" json:",omitempty"`

	UpdatedTime *string `type:"string" json:",omitempty"`

	UserId *string `type:"string" json:",omitempty"`

	UserName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UserForListCozeUserOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UserForListCozeUserOutput) GoString() string {
	return s.String()
}

// SetCozeUserId sets the CozeUserId field's value.
func (s *UserForListCozeUserOutput) SetCozeUserId(v string) *UserForListCozeUserOutput {
	s.CozeUserId = &v
	return s
}

// SetCozeUserInEnterprise sets the CozeUserInEnterprise field's value.
func (s *UserForListCozeUserOutput) SetCozeUserInEnterprise(v string) *UserForListCozeUserOutput {
	s.CozeUserInEnterprise = &v
	return s
}

// SetCozeUserName sets the CozeUserName field's value.
func (s *UserForListCozeUserOutput) SetCozeUserName(v string) *UserForListCozeUserOutput {
	s.CozeUserName = &v
	return s
}

// SetCreatedTime sets the CreatedTime field's value.
func (s *UserForListCozeUserOutput) SetCreatedTime(v string) *UserForListCozeUserOutput {
	s.CreatedTime = &v
	return s
}

// SetUpdatedTime sets the UpdatedTime field's value.
func (s *UserForListCozeUserOutput) SetUpdatedTime(v string) *UserForListCozeUserOutput {
	s.UpdatedTime = &v
	return s
}

// SetUserId sets the UserId field's value.
func (s *UserForListCozeUserOutput) SetUserId(v string) *UserForListCozeUserOutput {
	s.UserId = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *UserForListCozeUserOutput) SetUserName(v string) *UserForListCozeUserOutput {
	s.UserName = &v
	return s
}
