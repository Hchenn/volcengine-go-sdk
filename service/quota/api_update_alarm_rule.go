// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package quota

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateAlarmRuleCommon = "UpdateAlarmRule"

// UpdateAlarmRuleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateAlarmRuleCommon operation. The "output" return
// value will be populated with the UpdateAlarmRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateAlarmRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateAlarmRuleCommon Send returns without error.
//
// See UpdateAlarmRuleCommon for more information on using the UpdateAlarmRuleCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateAlarmRuleCommonRequest method.
//    req, resp := client.UpdateAlarmRuleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *QUOTA) UpdateAlarmRuleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateAlarmRuleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateAlarmRuleCommon API operation for QUOTA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for QUOTA's
// API operation UpdateAlarmRuleCommon for usage and error information.
func (c *QUOTA) UpdateAlarmRuleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateAlarmRuleCommonRequest(input)
	return out, req.Send()
}

// UpdateAlarmRuleCommonWithContext is the same as UpdateAlarmRuleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateAlarmRuleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *QUOTA) UpdateAlarmRuleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateAlarmRuleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateAlarmRule = "UpdateAlarmRule"

// UpdateAlarmRuleRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateAlarmRule operation. The "output" return
// value will be populated with the UpdateAlarmRuleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateAlarmRuleCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateAlarmRuleCommon Send returns without error.
//
// See UpdateAlarmRule for more information on using the UpdateAlarmRule
// API call, and error handling.
//
//    // Example sending a request using the UpdateAlarmRuleRequest method.
//    req, resp := client.UpdateAlarmRuleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *QUOTA) UpdateAlarmRuleRequest(input *UpdateAlarmRuleInput) (req *request.Request, output *UpdateAlarmRuleOutput) {
	op := &request.Operation{
		Name:       opUpdateAlarmRule,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateAlarmRuleInput{}
	}

	output = &UpdateAlarmRuleOutput{}
	req = c.newRequest(op, input, output)

	return
}

// UpdateAlarmRule API operation for QUOTA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for QUOTA's
// API operation UpdateAlarmRule for usage and error information.
func (c *QUOTA) UpdateAlarmRule(input *UpdateAlarmRuleInput) (*UpdateAlarmRuleOutput, error) {
	req, out := c.UpdateAlarmRuleRequest(input)
	return out, req.Send()
}

// UpdateAlarmRuleWithContext is the same as UpdateAlarmRule with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateAlarmRule for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *QUOTA) UpdateAlarmRuleWithContext(ctx volcengine.Context, input *UpdateAlarmRuleInput, opts ...request.Option) (*UpdateAlarmRuleOutput, error) {
	req, out := c.UpdateAlarmRuleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateAlarmRuleInput struct {
	_ struct{} `type:"structure"`

	// AlarmType is a required field
	AlarmType *string `type:"string" required:"true"`

	Description *string `type:"string"`

	// MetricUnit is a required field
	MetricUnit *string `type:"string" required:"true"`

	// RuleID is a required field
	RuleID *string `type:"string" required:"true"`

	// RuleName is a required field
	RuleName *string `type:"string" required:"true"`

	SilenceTime *int32 `type:"int32"`

	// Threshold is a required field
	Threshold *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateAlarmRuleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateAlarmRuleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateAlarmRuleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateAlarmRuleInput"}
	if s.AlarmType == nil {
		invalidParams.Add(request.NewErrParamRequired("AlarmType"))
	}
	if s.MetricUnit == nil {
		invalidParams.Add(request.NewErrParamRequired("MetricUnit"))
	}
	if s.RuleID == nil {
		invalidParams.Add(request.NewErrParamRequired("RuleID"))
	}
	if s.RuleName == nil {
		invalidParams.Add(request.NewErrParamRequired("RuleName"))
	}
	if s.Threshold == nil {
		invalidParams.Add(request.NewErrParamRequired("Threshold"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAlarmType sets the AlarmType field's value.
func (s *UpdateAlarmRuleInput) SetAlarmType(v string) *UpdateAlarmRuleInput {
	s.AlarmType = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *UpdateAlarmRuleInput) SetDescription(v string) *UpdateAlarmRuleInput {
	s.Description = &v
	return s
}

// SetMetricUnit sets the MetricUnit field's value.
func (s *UpdateAlarmRuleInput) SetMetricUnit(v string) *UpdateAlarmRuleInput {
	s.MetricUnit = &v
	return s
}

// SetRuleID sets the RuleID field's value.
func (s *UpdateAlarmRuleInput) SetRuleID(v string) *UpdateAlarmRuleInput {
	s.RuleID = &v
	return s
}

// SetRuleName sets the RuleName field's value.
func (s *UpdateAlarmRuleInput) SetRuleName(v string) *UpdateAlarmRuleInput {
	s.RuleName = &v
	return s
}

// SetSilenceTime sets the SilenceTime field's value.
func (s *UpdateAlarmRuleInput) SetSilenceTime(v int32) *UpdateAlarmRuleInput {
	s.SilenceTime = &v
	return s
}

// SetThreshold sets the Threshold field's value.
func (s *UpdateAlarmRuleInput) SetThreshold(v string) *UpdateAlarmRuleInput {
	s.Threshold = &v
	return s
}

type UpdateAlarmRuleOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RuleID *string `type:"string"`
}

// String returns the string representation
func (s UpdateAlarmRuleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateAlarmRuleOutput) GoString() string {
	return s.String()
}

// SetRuleID sets the RuleID field's value.
func (s *UpdateAlarmRuleOutput) SetRuleID(v string) *UpdateAlarmRuleOutput {
	s.RuleID = &v
	return s
}
