// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package quota

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListProductsCommon = "ListProducts"

// ListProductsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListProductsCommon operation. The "output" return
// value will be populated with the ListProductsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListProductsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListProductsCommon Send returns without error.
//
// See ListProductsCommon for more information on using the ListProductsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListProductsCommonRequest method.
//    req, resp := client.ListProductsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *QUOTA) ListProductsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListProductsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListProductsCommon API operation for QUOTA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for QUOTA's
// API operation ListProductsCommon for usage and error information.
func (c *QUOTA) ListProductsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListProductsCommonRequest(input)
	return out, req.Send()
}

// ListProductsCommonWithContext is the same as ListProductsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListProductsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *QUOTA) ListProductsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListProductsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListProducts = "ListProducts"

// ListProductsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListProducts operation. The "output" return
// value will be populated with the ListProductsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListProductsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListProductsCommon Send returns without error.
//
// See ListProducts for more information on using the ListProducts
// API call, and error handling.
//
//    // Example sending a request using the ListProductsRequest method.
//    req, resp := client.ListProductsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *QUOTA) ListProductsRequest(input *ListProductsInput) (req *request.Request, output *ListProductsOutput) {
	op := &request.Operation{
		Name:       opListProducts,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListProductsInput{}
	}

	output = &ListProductsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListProducts API operation for QUOTA.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for QUOTA's
// API operation ListProducts for usage and error information.
func (c *QUOTA) ListProducts(input *ListProductsInput) (*ListProductsOutput, error) {
	req, out := c.ListProductsRequest(input)
	return out, req.Send()
}

// ListProductsWithContext is the same as ListProducts with the addition of
// the ability to pass a context and additional request options.
//
// See ListProducts for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *QUOTA) ListProductsWithContext(ctx volcengine.Context, input *ListProductsInput, opts ...request.Option) (*ListProductsOutput, error) {
	req, out := c.ListProductsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListProductsInput struct {
	_ struct{} `type:"structure"`

	QuotaType *string `type:"string"`
}

// String returns the string representation
func (s ListProductsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListProductsInput) GoString() string {
	return s.String()
}

// SetQuotaType sets the QuotaType field's value.
func (s *ListProductsInput) SetQuotaType(v string) *ListProductsInput {
	s.QuotaType = &v
	return s
}

type ListProductsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ProductInfo []*ProductInfoForListProductsOutput `type:"list"`

	ResultsNum *int32 `type:"int32"`
}

// String returns the string representation
func (s ListProductsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListProductsOutput) GoString() string {
	return s.String()
}

// SetProductInfo sets the ProductInfo field's value.
func (s *ListProductsOutput) SetProductInfo(v []*ProductInfoForListProductsOutput) *ListProductsOutput {
	s.ProductInfo = v
	return s
}

// SetResultsNum sets the ResultsNum field's value.
func (s *ListProductsOutput) SetResultsNum(v int32) *ListProductsOutput {
	s.ResultsNum = &v
	return s
}

type ProductInfoForListProductsOutput struct {
	_ struct{} `type:"structure"`

	CategoryName *string `type:"string"`

	CategoryNameEn *string `type:"string"`

	ProviderCode *string `type:"string"`

	ProviderName *string `type:"string"`

	TotalQuota *int64 `type:"int64"`
}

// String returns the string representation
func (s ProductInfoForListProductsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ProductInfoForListProductsOutput) GoString() string {
	return s.String()
}

// SetCategoryName sets the CategoryName field's value.
func (s *ProductInfoForListProductsOutput) SetCategoryName(v string) *ProductInfoForListProductsOutput {
	s.CategoryName = &v
	return s
}

// SetCategoryNameEn sets the CategoryNameEn field's value.
func (s *ProductInfoForListProductsOutput) SetCategoryNameEn(v string) *ProductInfoForListProductsOutput {
	s.CategoryNameEn = &v
	return s
}

// SetProviderCode sets the ProviderCode field's value.
func (s *ProductInfoForListProductsOutput) SetProviderCode(v string) *ProductInfoForListProductsOutput {
	s.ProviderCode = &v
	return s
}

// SetProviderName sets the ProviderName field's value.
func (s *ProductInfoForListProductsOutput) SetProviderName(v string) *ProductInfoForListProductsOutput {
	s.ProviderName = &v
	return s
}

// SetTotalQuota sets the TotalQuota field's value.
func (s *ProductInfoForListProductsOutput) SetTotalQuota(v int64) *ProductInfoForListProductsOutput {
	s.TotalQuota = &v
	return s
}
