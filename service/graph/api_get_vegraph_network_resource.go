// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetVegraphNetworkResourceCommon = "GetVegraphNetworkResource"

// GetVegraphNetworkResourceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetVegraphNetworkResourceCommon operation. The "output" return
// value will be populated with the GetVegraphNetworkResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetVegraphNetworkResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetVegraphNetworkResourceCommon Send returns without error.
//
// See GetVegraphNetworkResourceCommon for more information on using the GetVegraphNetworkResourceCommon
// API call, and error handling.
//
//    // Example sending a request using the GetVegraphNetworkResourceCommonRequest method.
//    req, resp := client.GetVegraphNetworkResourceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) GetVegraphNetworkResourceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetVegraphNetworkResourceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetVegraphNetworkResourceCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation GetVegraphNetworkResourceCommon for usage and error information.
func (c *GRAPH) GetVegraphNetworkResourceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetVegraphNetworkResourceCommonRequest(input)
	return out, req.Send()
}

// GetVegraphNetworkResourceCommonWithContext is the same as GetVegraphNetworkResourceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetVegraphNetworkResourceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) GetVegraphNetworkResourceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetVegraphNetworkResourceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetVegraphNetworkResource = "GetVegraphNetworkResource"

// GetVegraphNetworkResourceRequest generates a "volcengine/request.Request" representing the
// client's request for the GetVegraphNetworkResource operation. The "output" return
// value will be populated with the GetVegraphNetworkResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetVegraphNetworkResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetVegraphNetworkResourceCommon Send returns without error.
//
// See GetVegraphNetworkResource for more information on using the GetVegraphNetworkResource
// API call, and error handling.
//
//    // Example sending a request using the GetVegraphNetworkResourceRequest method.
//    req, resp := client.GetVegraphNetworkResourceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) GetVegraphNetworkResourceRequest(input *GetVegraphNetworkResourceInput) (req *request.Request, output *GetVegraphNetworkResourceOutput) {
	op := &request.Operation{
		Name:       opGetVegraphNetworkResource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetVegraphNetworkResourceInput{}
	}

	output = &GetVegraphNetworkResourceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetVegraphNetworkResource API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation GetVegraphNetworkResource for usage and error information.
func (c *GRAPH) GetVegraphNetworkResource(input *GetVegraphNetworkResourceInput) (*GetVegraphNetworkResourceOutput, error) {
	req, out := c.GetVegraphNetworkResourceRequest(input)
	return out, req.Send()
}

// GetVegraphNetworkResourceWithContext is the same as GetVegraphNetworkResource with the addition of
// the ability to pass a context and additional request options.
//
// See GetVegraphNetworkResource for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) GetVegraphNetworkResourceWithContext(ctx volcengine.Context, input *GetVegraphNetworkResourceInput, opts ...request.Option) (*GetVegraphNetworkResourceOutput, error) {
	req, out := c.GetVegraphNetworkResourceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetVegraphNetworkResourceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetVegraphNetworkResourceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetVegraphNetworkResourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetVegraphNetworkResourceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetVegraphNetworkResourceInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *GetVegraphNetworkResourceInput) SetInstanceId(v string) *GetVegraphNetworkResourceInput {
	s.InstanceId = &v
	return s
}

type GetVegraphNetworkResourceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	NetworkResources []*NetworkResourceForGetVegraphNetworkResourceOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s GetVegraphNetworkResourceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetVegraphNetworkResourceOutput) GoString() string {
	return s.String()
}

// SetNetworkResources sets the NetworkResources field's value.
func (s *GetVegraphNetworkResourceOutput) SetNetworkResources(v []*NetworkResourceForGetVegraphNetworkResourceOutput) *GetVegraphNetworkResourceOutput {
	s.NetworkResources = v
	return s
}

type NetworkResourceForGetVegraphNetworkResourceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AddressType *string `type:"string" json:",omitempty"`

	Id *int64 `type:"int64" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	IpVersionType *string `type:"string" json:",omitempty"`

	LBId *string `type:"string" json:",omitempty"`

	NetworkType *string `type:"string" json:"networkType,omitempty"`

	Region *string `type:"string" json:",omitempty"`

	ResourceName *string `type:"string" json:",omitempty"`

	SubnetId *string `type:"string" json:",omitempty"`

	VipV4 *string `type:"string" json:",omitempty"`

	VipV6 *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s NetworkResourceForGetVegraphNetworkResourceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NetworkResourceForGetVegraphNetworkResourceOutput) GoString() string {
	return s.String()
}

// SetAddressType sets the AddressType field's value.
func (s *NetworkResourceForGetVegraphNetworkResourceOutput) SetAddressType(v string) *NetworkResourceForGetVegraphNetworkResourceOutput {
	s.AddressType = &v
	return s
}

// SetId sets the Id field's value.
func (s *NetworkResourceForGetVegraphNetworkResourceOutput) SetId(v int64) *NetworkResourceForGetVegraphNetworkResourceOutput {
	s.Id = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *NetworkResourceForGetVegraphNetworkResourceOutput) SetInstanceId(v string) *NetworkResourceForGetVegraphNetworkResourceOutput {
	s.InstanceId = &v
	return s
}

// SetIpVersionType sets the IpVersionType field's value.
func (s *NetworkResourceForGetVegraphNetworkResourceOutput) SetIpVersionType(v string) *NetworkResourceForGetVegraphNetworkResourceOutput {
	s.IpVersionType = &v
	return s
}

// SetLBId sets the LBId field's value.
func (s *NetworkResourceForGetVegraphNetworkResourceOutput) SetLBId(v string) *NetworkResourceForGetVegraphNetworkResourceOutput {
	s.LBId = &v
	return s
}

// SetNetworkType sets the NetworkType field's value.
func (s *NetworkResourceForGetVegraphNetworkResourceOutput) SetNetworkType(v string) *NetworkResourceForGetVegraphNetworkResourceOutput {
	s.NetworkType = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *NetworkResourceForGetVegraphNetworkResourceOutput) SetRegion(v string) *NetworkResourceForGetVegraphNetworkResourceOutput {
	s.Region = &v
	return s
}

// SetResourceName sets the ResourceName field's value.
func (s *NetworkResourceForGetVegraphNetworkResourceOutput) SetResourceName(v string) *NetworkResourceForGetVegraphNetworkResourceOutput {
	s.ResourceName = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *NetworkResourceForGetVegraphNetworkResourceOutput) SetSubnetId(v string) *NetworkResourceForGetVegraphNetworkResourceOutput {
	s.SubnetId = &v
	return s
}

// SetVipV4 sets the VipV4 field's value.
func (s *NetworkResourceForGetVegraphNetworkResourceOutput) SetVipV4(v string) *NetworkResourceForGetVegraphNetworkResourceOutput {
	s.VipV4 = &v
	return s
}

// SetVipV6 sets the VipV6 field's value.
func (s *NetworkResourceForGetVegraphNetworkResourceOutput) SetVipV6(v string) *NetworkResourceForGetVegraphNetworkResourceOutput {
	s.VipV6 = &v
	return s
}
