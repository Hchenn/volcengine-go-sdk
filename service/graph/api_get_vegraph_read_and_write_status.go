// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetVegraphReadAndWriteStatusCommon = "GetVegraphReadAndWriteStatus"

// GetVegraphReadAndWriteStatusCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetVegraphReadAndWriteStatusCommon operation. The "output" return
// value will be populated with the GetVegraphReadAndWriteStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetVegraphReadAndWriteStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetVegraphReadAndWriteStatusCommon Send returns without error.
//
// See GetVegraphReadAndWriteStatusCommon for more information on using the GetVegraphReadAndWriteStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the GetVegraphReadAndWriteStatusCommonRequest method.
//    req, resp := client.GetVegraphReadAndWriteStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) GetVegraphReadAndWriteStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetVegraphReadAndWriteStatusCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetVegraphReadAndWriteStatusCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation GetVegraphReadAndWriteStatusCommon for usage and error information.
func (c *GRAPH) GetVegraphReadAndWriteStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetVegraphReadAndWriteStatusCommonRequest(input)
	return out, req.Send()
}

// GetVegraphReadAndWriteStatusCommonWithContext is the same as GetVegraphReadAndWriteStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetVegraphReadAndWriteStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) GetVegraphReadAndWriteStatusCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetVegraphReadAndWriteStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetVegraphReadAndWriteStatus = "GetVegraphReadAndWriteStatus"

// GetVegraphReadAndWriteStatusRequest generates a "volcengine/request.Request" representing the
// client's request for the GetVegraphReadAndWriteStatus operation. The "output" return
// value will be populated with the GetVegraphReadAndWriteStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetVegraphReadAndWriteStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetVegraphReadAndWriteStatusCommon Send returns without error.
//
// See GetVegraphReadAndWriteStatus for more information on using the GetVegraphReadAndWriteStatus
// API call, and error handling.
//
//    // Example sending a request using the GetVegraphReadAndWriteStatusRequest method.
//    req, resp := client.GetVegraphReadAndWriteStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) GetVegraphReadAndWriteStatusRequest(input *GetVegraphReadAndWriteStatusInput) (req *request.Request, output *GetVegraphReadAndWriteStatusOutput) {
	op := &request.Operation{
		Name:       opGetVegraphReadAndWriteStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetVegraphReadAndWriteStatusInput{}
	}

	output = &GetVegraphReadAndWriteStatusOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetVegraphReadAndWriteStatus API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation GetVegraphReadAndWriteStatus for usage and error information.
func (c *GRAPH) GetVegraphReadAndWriteStatus(input *GetVegraphReadAndWriteStatusInput) (*GetVegraphReadAndWriteStatusOutput, error) {
	req, out := c.GetVegraphReadAndWriteStatusRequest(input)
	return out, req.Send()
}

// GetVegraphReadAndWriteStatusWithContext is the same as GetVegraphReadAndWriteStatus with the addition of
// the ability to pass a context and additional request options.
//
// See GetVegraphReadAndWriteStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) GetVegraphReadAndWriteStatusWithContext(ctx volcengine.Context, input *GetVegraphReadAndWriteStatusInput, opts ...request.Option) (*GetVegraphReadAndWriteStatusOutput, error) {
	req, out := c.GetVegraphReadAndWriteStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetVegraphReadAndWriteStatusInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetVegraphReadAndWriteStatusInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetVegraphReadAndWriteStatusInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetVegraphReadAndWriteStatusInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetVegraphReadAndWriteStatusInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *GetVegraphReadAndWriteStatusInput) SetInstanceId(v string) *GetVegraphReadAndWriteStatusInput {
	s.InstanceId = &v
	return s
}

type GetVegraphReadAndWriteStatusOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	EnabledRead *bool `type:"boolean" json:",omitempty"`

	EnabledWrite *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s GetVegraphReadAndWriteStatusOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetVegraphReadAndWriteStatusOutput) GoString() string {
	return s.String()
}

// SetEnabledRead sets the EnabledRead field's value.
func (s *GetVegraphReadAndWriteStatusOutput) SetEnabledRead(v bool) *GetVegraphReadAndWriteStatusOutput {
	s.EnabledRead = &v
	return s
}

// SetEnabledWrite sets the EnabledWrite field's value.
func (s *GetVegraphReadAndWriteStatusOutput) SetEnabledWrite(v bool) *GetVegraphReadAndWriteStatusOutput {
	s.EnabledWrite = &v
	return s
}
