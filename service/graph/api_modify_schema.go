// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifySchemaCommon = "ModifySchema"

// ModifySchemaCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifySchemaCommon operation. The "output" return
// value will be populated with the ModifySchemaCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifySchemaCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifySchemaCommon Send returns without error.
//
// See ModifySchemaCommon for more information on using the ModifySchemaCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifySchemaCommonRequest method.
//    req, resp := client.ModifySchemaCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) ModifySchemaCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifySchemaCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifySchemaCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation ModifySchemaCommon for usage and error information.
func (c *GRAPH) ModifySchemaCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifySchemaCommonRequest(input)
	return out, req.Send()
}

// ModifySchemaCommonWithContext is the same as ModifySchemaCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifySchemaCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) ModifySchemaCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifySchemaCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifySchema = "ModifySchema"

// ModifySchemaRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifySchema operation. The "output" return
// value will be populated with the ModifySchemaCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifySchemaCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifySchemaCommon Send returns without error.
//
// See ModifySchema for more information on using the ModifySchema
// API call, and error handling.
//
//    // Example sending a request using the ModifySchemaRequest method.
//    req, resp := client.ModifySchemaRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) ModifySchemaRequest(input *ModifySchemaInput) (req *request.Request, output *ModifySchemaOutput) {
	op := &request.Operation{
		Name:       opModifySchema,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifySchemaInput{}
	}

	output = &ModifySchemaOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifySchema API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation ModifySchema for usage and error information.
func (c *GRAPH) ModifySchema(input *ModifySchemaInput) (*ModifySchemaOutput, error) {
	req, out := c.ModifySchemaRequest(input)
	return out, req.Send()
}

// ModifySchemaWithContext is the same as ModifySchema with the addition of
// the ability to pass a context and additional request options.
//
// See ModifySchema for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) ModifySchemaWithContext(ctx volcengine.Context, input *ModifySchemaInput, opts ...request.Option) (*ModifySchemaOutput, error) {
	req, out := c.ModifySchemaRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ColumnForModifySchemaInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Column_name *string `type:"string" json:"column_name,omitempty"`

	Default_value *string `type:"string" json:"default_value,omitempty"`

	Enable_default_value *bool `type:"boolean" json:"enable_default_value,omitempty"`

	Schema_column_type *string `type:"string" json:"schema_column_type,omitempty"`
}

// String returns the string representation
func (s ColumnForModifySchemaInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ColumnForModifySchemaInput) GoString() string {
	return s.String()
}

// SetColumn_name sets the Column_name field's value.
func (s *ColumnForModifySchemaInput) SetColumn_name(v string) *ColumnForModifySchemaInput {
	s.Column_name = &v
	return s
}

// SetDefault_value sets the Default_value field's value.
func (s *ColumnForModifySchemaInput) SetDefault_value(v string) *ColumnForModifySchemaInput {
	s.Default_value = &v
	return s
}

// SetEnable_default_value sets the Enable_default_value field's value.
func (s *ColumnForModifySchemaInput) SetEnable_default_value(v bool) *ColumnForModifySchemaInput {
	s.Enable_default_value = &v
	return s
}

// SetSchema_column_type sets the Schema_column_type field's value.
func (s *ColumnForModifySchemaInput) SetSchema_column_type(v string) *ColumnForModifySchemaInput {
	s.Schema_column_type = &v
	return s
}

type EdgeForModifySchemaInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Columns []*ColumnForModifySchemaInput `type:"list" json:"columns,omitempty"`

	Enable_reverse_index *bool `type:"boolean" json:"enable_reverse_index,omitempty"`

	Label *string `type:"string" json:"label,omitempty"`

	Primary_key []*string `type:"list" json:"primary_key,omitempty"`

	Schema_label_type *string `type:"string" json:"schema_label_type,omitempty"`

	Secondary_indices []*Secondary_indexForModifySchemaInput `type:"list" json:"secondary_indices,omitempty"`

	Uniq_index []*Uniq_indexForModifySchemaInput `type:"list" json:"uniq_index,omitempty"`

	Vertex_constraint *Vertex_constraintForModifySchemaInput `type:"structure" json:"vertex_constraint,omitempty"`
}

// String returns the string representation
func (s EdgeForModifySchemaInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EdgeForModifySchemaInput) GoString() string {
	return s.String()
}

// SetColumns sets the Columns field's value.
func (s *EdgeForModifySchemaInput) SetColumns(v []*ColumnForModifySchemaInput) *EdgeForModifySchemaInput {
	s.Columns = v
	return s
}

// SetEnable_reverse_index sets the Enable_reverse_index field's value.
func (s *EdgeForModifySchemaInput) SetEnable_reverse_index(v bool) *EdgeForModifySchemaInput {
	s.Enable_reverse_index = &v
	return s
}

// SetLabel sets the Label field's value.
func (s *EdgeForModifySchemaInput) SetLabel(v string) *EdgeForModifySchemaInput {
	s.Label = &v
	return s
}

// SetPrimary_key sets the Primary_key field's value.
func (s *EdgeForModifySchemaInput) SetPrimary_key(v []*string) *EdgeForModifySchemaInput {
	s.Primary_key = v
	return s
}

// SetSchema_label_type sets the Schema_label_type field's value.
func (s *EdgeForModifySchemaInput) SetSchema_label_type(v string) *EdgeForModifySchemaInput {
	s.Schema_label_type = &v
	return s
}

// SetSecondary_indices sets the Secondary_indices field's value.
func (s *EdgeForModifySchemaInput) SetSecondary_indices(v []*Secondary_indexForModifySchemaInput) *EdgeForModifySchemaInput {
	s.Secondary_indices = v
	return s
}

// SetUniq_index sets the Uniq_index field's value.
func (s *EdgeForModifySchemaInput) SetUniq_index(v []*Uniq_indexForModifySchemaInput) *EdgeForModifySchemaInput {
	s.Uniq_index = v
	return s
}

// SetVertex_constraint sets the Vertex_constraint field's value.
func (s *EdgeForModifySchemaInput) SetVertex_constraint(v *Vertex_constraintForModifySchemaInput) *EdgeForModifySchemaInput {
	s.Vertex_constraint = v
	return s
}

type ModifySchemaInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Edges []*EdgeForModifySchemaInput `type:"list" json:"edges,omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:"instanceId,omitempty" required:"true"`

	// Table is a required field
	Table *string `type:"string" json:"table,omitempty" required:"true"`

	Vertexes []*VertexForModifySchemaInput `type:"list" json:"vertexes,omitempty"`
}

// String returns the string representation
func (s ModifySchemaInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifySchemaInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifySchemaInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifySchemaInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.Table == nil {
		invalidParams.Add(request.NewErrParamRequired("Table"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEdges sets the Edges field's value.
func (s *ModifySchemaInput) SetEdges(v []*EdgeForModifySchemaInput) *ModifySchemaInput {
	s.Edges = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifySchemaInput) SetInstanceId(v string) *ModifySchemaInput {
	s.InstanceId = &v
	return s
}

// SetTable sets the Table field's value.
func (s *ModifySchemaInput) SetTable(v string) *ModifySchemaInput {
	s.Table = &v
	return s
}

// SetVertexes sets the Vertexes field's value.
func (s *ModifySchemaInput) SetVertexes(v []*VertexForModifySchemaInput) *ModifySchemaInput {
	s.Vertexes = v
	return s
}

type ModifySchemaOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifySchemaOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifySchemaOutput) GoString() string {
	return s.String()
}

type Secondary_indexForModifySchemaInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Column_names []*string `type:"list" json:"column_names,omitempty"`

	Is_covering_index *bool `type:"boolean" json:"is_covering_index,omitempty"`

	Is_unique_index *bool `type:"boolean" json:"is_unique_index,omitempty"`
}

// String returns the string representation
func (s Secondary_indexForModifySchemaInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s Secondary_indexForModifySchemaInput) GoString() string {
	return s.String()
}

// SetColumn_names sets the Column_names field's value.
func (s *Secondary_indexForModifySchemaInput) SetColumn_names(v []*string) *Secondary_indexForModifySchemaInput {
	s.Column_names = v
	return s
}

// SetIs_covering_index sets the Is_covering_index field's value.
func (s *Secondary_indexForModifySchemaInput) SetIs_covering_index(v bool) *Secondary_indexForModifySchemaInput {
	s.Is_covering_index = &v
	return s
}

// SetIs_unique_index sets the Is_unique_index field's value.
func (s *Secondary_indexForModifySchemaInput) SetIs_unique_index(v bool) *Secondary_indexForModifySchemaInput {
	s.Is_unique_index = &v
	return s
}

type Uniq_indexForModifySchemaInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Values []*string `type:"list" json:"values,omitempty"`
}

// String returns the string representation
func (s Uniq_indexForModifySchemaInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s Uniq_indexForModifySchemaInput) GoString() string {
	return s.String()
}

// SetValues sets the Values field's value.
func (s *Uniq_indexForModifySchemaInput) SetValues(v []*string) *Uniq_indexForModifySchemaInput {
	s.Values = v
	return s
}

type VertexForModifySchemaInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Columns []*ColumnForModifySchemaInput `type:"list" json:"columns,omitempty"`

	Label *string `type:"string" json:"label,omitempty"`

	Primary_key []*string `type:"list" json:"primary_key,omitempty"`

	Schema_label_type *string `type:"string" json:"schema_label_type,omitempty"`

	Secondary_indices []*Secondary_indexForModifySchemaInput `type:"list" json:"secondary_indices,omitempty"`

	Uniq_index []*Uniq_indexForModifySchemaInput `type:"list" json:"uniq_index,omitempty"`
}

// String returns the string representation
func (s VertexForModifySchemaInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s VertexForModifySchemaInput) GoString() string {
	return s.String()
}

// SetColumns sets the Columns field's value.
func (s *VertexForModifySchemaInput) SetColumns(v []*ColumnForModifySchemaInput) *VertexForModifySchemaInput {
	s.Columns = v
	return s
}

// SetLabel sets the Label field's value.
func (s *VertexForModifySchemaInput) SetLabel(v string) *VertexForModifySchemaInput {
	s.Label = &v
	return s
}

// SetPrimary_key sets the Primary_key field's value.
func (s *VertexForModifySchemaInput) SetPrimary_key(v []*string) *VertexForModifySchemaInput {
	s.Primary_key = v
	return s
}

// SetSchema_label_type sets the Schema_label_type field's value.
func (s *VertexForModifySchemaInput) SetSchema_label_type(v string) *VertexForModifySchemaInput {
	s.Schema_label_type = &v
	return s
}

// SetSecondary_indices sets the Secondary_indices field's value.
func (s *VertexForModifySchemaInput) SetSecondary_indices(v []*Secondary_indexForModifySchemaInput) *VertexForModifySchemaInput {
	s.Secondary_indices = v
	return s
}

// SetUniq_index sets the Uniq_index field's value.
func (s *VertexForModifySchemaInput) SetUniq_index(v []*Uniq_indexForModifySchemaInput) *VertexForModifySchemaInput {
	s.Uniq_index = v
	return s
}

type Vertex_constraintForModifySchemaInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Primary_key_columns []*ColumnForModifySchemaInput `locationName:"primary_key_columns" type:"list" json:",omitempty"`

	Schema_label_type *string `type:"string" json:"schema_label_type,omitempty"`
}

// String returns the string representation
func (s Vertex_constraintForModifySchemaInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s Vertex_constraintForModifySchemaInput) GoString() string {
	return s.String()
}

// SetPrimary_key_columns sets the Primary_key_columns field's value.
func (s *Vertex_constraintForModifySchemaInput) SetPrimary_key_columns(v []*ColumnForModifySchemaInput) *Vertex_constraintForModifySchemaInput {
	s.Primary_key_columns = v
	return s
}

// SetSchema_label_type sets the Schema_label_type field's value.
func (s *Vertex_constraintForModifySchemaInput) SetSchema_label_type(v string) *Vertex_constraintForModifySchemaInput {
	s.Schema_label_type = &v
	return s
}
