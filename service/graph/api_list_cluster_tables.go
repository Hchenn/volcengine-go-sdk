// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListClusterTablesCommon = "ListClusterTables"

// ListClusterTablesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListClusterTablesCommon operation. The "output" return
// value will be populated with the ListClusterTablesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListClusterTablesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListClusterTablesCommon Send returns without error.
//
// See ListClusterTablesCommon for more information on using the ListClusterTablesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListClusterTablesCommonRequest method.
//    req, resp := client.ListClusterTablesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) ListClusterTablesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListClusterTablesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListClusterTablesCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation ListClusterTablesCommon for usage and error information.
func (c *GRAPH) ListClusterTablesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListClusterTablesCommonRequest(input)
	return out, req.Send()
}

// ListClusterTablesCommonWithContext is the same as ListClusterTablesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListClusterTablesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) ListClusterTablesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListClusterTablesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListClusterTables = "ListClusterTables"

// ListClusterTablesRequest generates a "volcengine/request.Request" representing the
// client's request for the ListClusterTables operation. The "output" return
// value will be populated with the ListClusterTablesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListClusterTablesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListClusterTablesCommon Send returns without error.
//
// See ListClusterTables for more information on using the ListClusterTables
// API call, and error handling.
//
//    // Example sending a request using the ListClusterTablesRequest method.
//    req, resp := client.ListClusterTablesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) ListClusterTablesRequest(input *ListClusterTablesInput) (req *request.Request, output *ListClusterTablesOutput) {
	op := &request.Operation{
		Name:       opListClusterTables,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListClusterTablesInput{}
	}

	output = &ListClusterTablesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListClusterTables API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation ListClusterTables for usage and error information.
func (c *GRAPH) ListClusterTables(input *ListClusterTablesInput) (*ListClusterTablesOutput, error) {
	req, out := c.ListClusterTablesRequest(input)
	return out, req.Send()
}

// ListClusterTablesWithContext is the same as ListClusterTables with the addition of
// the ability to pass a context and additional request options.
//
// See ListClusterTables for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) ListClusterTablesWithContext(ctx volcengine.Context, input *ListClusterTablesInput, opts ...request.Option) (*ListClusterTablesOutput, error) {
	req, out := c.ListClusterTablesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListClusterTablesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:"instanceId,omitempty" required:"true"`
}

// String returns the string representation
func (s ListClusterTablesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListClusterTablesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListClusterTablesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListClusterTablesInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ListClusterTablesInput) SetInstanceId(v string) *ListClusterTablesInput {
	s.InstanceId = &v
	return s
}

type ListClusterTablesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Tables []*TableForListClusterTablesOutput `type:"list" json:"tables,omitempty"`
}

// String returns the string representation
func (s ListClusterTablesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListClusterTablesOutput) GoString() string {
	return s.String()
}

// SetTables sets the Tables field's value.
func (s *ListClusterTablesOutput) SetTables(v []*TableForListClusterTablesOutput) *ListClusterTablesOutput {
	s.Tables = v
	return s
}

type TableForListClusterTablesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Is_readonly *bool `type:"boolean" json:"is_readonly,omitempty"`

	Partition_num *int64 `type:"int64" json:"partition_num,omitempty"`

	Table_id *int64 `type:"int64" json:"table_id,omitempty"`

	Table_name *string `type:"string" json:"table_name,omitempty"`

	Tablet_num *int64 `type:"int64" json:"tablet_num,omitempty"`

	Vdc_replica []*Vdc_replicaForListClusterTablesOutput `type:"list" json:"vdc_replica,omitempty"`

	Writeable_vdc []*string `type:"list" json:"writeable_vdc,omitempty"`
}

// String returns the string representation
func (s TableForListClusterTablesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TableForListClusterTablesOutput) GoString() string {
	return s.String()
}

// SetIs_readonly sets the Is_readonly field's value.
func (s *TableForListClusterTablesOutput) SetIs_readonly(v bool) *TableForListClusterTablesOutput {
	s.Is_readonly = &v
	return s
}

// SetPartition_num sets the Partition_num field's value.
func (s *TableForListClusterTablesOutput) SetPartition_num(v int64) *TableForListClusterTablesOutput {
	s.Partition_num = &v
	return s
}

// SetTable_id sets the Table_id field's value.
func (s *TableForListClusterTablesOutput) SetTable_id(v int64) *TableForListClusterTablesOutput {
	s.Table_id = &v
	return s
}

// SetTable_name sets the Table_name field's value.
func (s *TableForListClusterTablesOutput) SetTable_name(v string) *TableForListClusterTablesOutput {
	s.Table_name = &v
	return s
}

// SetTablet_num sets the Tablet_num field's value.
func (s *TableForListClusterTablesOutput) SetTablet_num(v int64) *TableForListClusterTablesOutput {
	s.Tablet_num = &v
	return s
}

// SetVdc_replica sets the Vdc_replica field's value.
func (s *TableForListClusterTablesOutput) SetVdc_replica(v []*Vdc_replicaForListClusterTablesOutput) *TableForListClusterTablesOutput {
	s.Vdc_replica = v
	return s
}

// SetWriteable_vdc sets the Writeable_vdc field's value.
func (s *TableForListClusterTablesOutput) SetWriteable_vdc(v []*string) *TableForListClusterTablesOutput {
	s.Writeable_vdc = v
	return s
}

type Vdc_replicaForListClusterTablesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Replica_num *int32 `type:"int32" json:"replica_num,omitempty"`

	Vdc *string `type:"string" json:"vdc,omitempty"`
}

// String returns the string representation
func (s Vdc_replicaForListClusterTablesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s Vdc_replicaForListClusterTablesOutput) GoString() string {
	return s.String()
}

// SetReplica_num sets the Replica_num field's value.
func (s *Vdc_replicaForListClusterTablesOutput) SetReplica_num(v int32) *Vdc_replicaForListClusterTablesOutput {
	s.Replica_num = &v
	return s
}

// SetVdc sets the Vdc field's value.
func (s *Vdc_replicaForListClusterTablesOutput) SetVdc(v string) *Vdc_replicaForListClusterTablesOutput {
	s.Vdc = &v
	return s
}
