// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package graph

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetInstanceSpecScopeCommon = "GetInstanceSpecScope"

// GetInstanceSpecScopeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetInstanceSpecScopeCommon operation. The "output" return
// value will be populated with the GetInstanceSpecScopeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetInstanceSpecScopeCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetInstanceSpecScopeCommon Send returns without error.
//
// See GetInstanceSpecScopeCommon for more information on using the GetInstanceSpecScopeCommon
// API call, and error handling.
//
//    // Example sending a request using the GetInstanceSpecScopeCommonRequest method.
//    req, resp := client.GetInstanceSpecScopeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) GetInstanceSpecScopeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetInstanceSpecScopeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetInstanceSpecScopeCommon API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation GetInstanceSpecScopeCommon for usage and error information.
func (c *GRAPH) GetInstanceSpecScopeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetInstanceSpecScopeCommonRequest(input)
	return out, req.Send()
}

// GetInstanceSpecScopeCommonWithContext is the same as GetInstanceSpecScopeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetInstanceSpecScopeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) GetInstanceSpecScopeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetInstanceSpecScopeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetInstanceSpecScope = "GetInstanceSpecScope"

// GetInstanceSpecScopeRequest generates a "volcengine/request.Request" representing the
// client's request for the GetInstanceSpecScope operation. The "output" return
// value will be populated with the GetInstanceSpecScopeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetInstanceSpecScopeCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetInstanceSpecScopeCommon Send returns without error.
//
// See GetInstanceSpecScope for more information on using the GetInstanceSpecScope
// API call, and error handling.
//
//    // Example sending a request using the GetInstanceSpecScopeRequest method.
//    req, resp := client.GetInstanceSpecScopeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GRAPH) GetInstanceSpecScopeRequest(input *GetInstanceSpecScopeInput) (req *request.Request, output *GetInstanceSpecScopeOutput) {
	op := &request.Operation{
		Name:       opGetInstanceSpecScope,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetInstanceSpecScopeInput{}
	}

	output = &GetInstanceSpecScopeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetInstanceSpecScope API operation for GRAPH.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GRAPH's
// API operation GetInstanceSpecScope for usage and error information.
func (c *GRAPH) GetInstanceSpecScope(input *GetInstanceSpecScopeInput) (*GetInstanceSpecScopeOutput, error) {
	req, out := c.GetInstanceSpecScopeRequest(input)
	return out, req.Send()
}

// GetInstanceSpecScopeWithContext is the same as GetInstanceSpecScope with the addition of
// the ability to pass a context and additional request options.
//
// See GetInstanceSpecScope for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GRAPH) GetInstanceSpecScopeWithContext(ctx volcengine.Context, input *GetInstanceSpecScopeInput, opts ...request.Option) (*GetInstanceSpecScopeOutput, error) {
	req, out := c.GetInstanceSpecScopeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DiskSpaceScopeForGetInstanceSpecScopeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Max *int32 `type:"int32" json:",omitempty"`

	Min *int32 `type:"int32" json:",omitempty"`

	Step *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DiskSpaceScopeForGetInstanceSpecScopeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DiskSpaceScopeForGetInstanceSpecScopeOutput) GoString() string {
	return s.String()
}

// SetMax sets the Max field's value.
func (s *DiskSpaceScopeForGetInstanceSpecScopeOutput) SetMax(v int32) *DiskSpaceScopeForGetInstanceSpecScopeOutput {
	s.Max = &v
	return s
}

// SetMin sets the Min field's value.
func (s *DiskSpaceScopeForGetInstanceSpecScopeOutput) SetMin(v int32) *DiskSpaceScopeForGetInstanceSpecScopeOutput {
	s.Min = &v
	return s
}

// SetStep sets the Step field's value.
func (s *DiskSpaceScopeForGetInstanceSpecScopeOutput) SetStep(v int32) *DiskSpaceScopeForGetInstanceSpecScopeOutput {
	s.Step = &v
	return s
}

type GetInstanceSpecScopeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s GetInstanceSpecScopeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstanceSpecScopeInput) GoString() string {
	return s.String()
}

type GetInstanceSpecScopeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Infos []*InfoForGetInstanceSpecScopeOutput `type:"list" json:"infos,omitempty"`
}

// String returns the string representation
func (s GetInstanceSpecScopeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstanceSpecScopeOutput) GoString() string {
	return s.String()
}

// SetInfos sets the Infos field's value.
func (s *GetInstanceSpecScopeOutput) SetInfos(v []*InfoForGetInstanceSpecScopeOutput) *GetInstanceSpecScopeOutput {
	s.Infos = v
	return s
}

type InfoForGetInstanceSpecScopeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DiskSpaceScope *DiskSpaceScopeForGetInstanceSpecScopeOutput `type:"structure" json:",omitempty"`

	InstSpecList []*InstSpecListForGetInstanceSpecScopeOutput `type:"list" json:",omitempty"`

	NodeScope *NodeScopeForGetInstanceSpecScopeOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s InfoForGetInstanceSpecScopeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InfoForGetInstanceSpecScopeOutput) GoString() string {
	return s.String()
}

// SetDiskSpaceScope sets the DiskSpaceScope field's value.
func (s *InfoForGetInstanceSpecScopeOutput) SetDiskSpaceScope(v *DiskSpaceScopeForGetInstanceSpecScopeOutput) *InfoForGetInstanceSpecScopeOutput {
	s.DiskSpaceScope = v
	return s
}

// SetInstSpecList sets the InstSpecList field's value.
func (s *InfoForGetInstanceSpecScopeOutput) SetInstSpecList(v []*InstSpecListForGetInstanceSpecScopeOutput) *InfoForGetInstanceSpecScopeOutput {
	s.InstSpecList = v
	return s
}

// SetNodeScope sets the NodeScope field's value.
func (s *InfoForGetInstanceSpecScopeOutput) SetNodeScope(v *NodeScopeForGetInstanceSpecScopeOutput) *InfoForGetInstanceSpecScopeOutput {
	s.NodeScope = v
	return s
}

type InstSpecListForGetInstanceSpecScopeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CpuNum *int32 `type:"int32" json:",omitempty"`

	MemInGb *int32 `type:"int32" json:",omitempty"`

	SpecName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s InstSpecListForGetInstanceSpecScopeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InstSpecListForGetInstanceSpecScopeOutput) GoString() string {
	return s.String()
}

// SetCpuNum sets the CpuNum field's value.
func (s *InstSpecListForGetInstanceSpecScopeOutput) SetCpuNum(v int32) *InstSpecListForGetInstanceSpecScopeOutput {
	s.CpuNum = &v
	return s
}

// SetMemInGb sets the MemInGb field's value.
func (s *InstSpecListForGetInstanceSpecScopeOutput) SetMemInGb(v int32) *InstSpecListForGetInstanceSpecScopeOutput {
	s.MemInGb = &v
	return s
}

// SetSpecName sets the SpecName field's value.
func (s *InstSpecListForGetInstanceSpecScopeOutput) SetSpecName(v string) *InstSpecListForGetInstanceSpecScopeOutput {
	s.SpecName = &v
	return s
}

type NodeScopeForGetInstanceSpecScopeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Max *int32 `type:"int32" json:",omitempty"`

	Min *int32 `type:"int32" json:",omitempty"`

	Step *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s NodeScopeForGetInstanceSpecScopeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeScopeForGetInstanceSpecScopeOutput) GoString() string {
	return s.String()
}

// SetMax sets the Max field's value.
func (s *NodeScopeForGetInstanceSpecScopeOutput) SetMax(v int32) *NodeScopeForGetInstanceSpecScopeOutput {
	s.Max = &v
	return s
}

// SetMin sets the Min field's value.
func (s *NodeScopeForGetInstanceSpecScopeOutput) SetMin(v int32) *NodeScopeForGetInstanceSpecScopeOutput {
	s.Min = &v
	return s
}

// SetStep sets the Step field's value.
func (s *NodeScopeForGetInstanceSpecScopeOutput) SetStep(v int32) *NodeScopeForGetInstanceSpecScopeOutput {
	s.Step = &v
	return s
}
