// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteFunctionCommon = "DeleteFunction"

// DeleteFunctionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteFunctionCommon operation. The "output" return
// value will be populated with the DeleteFunctionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteFunctionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteFunctionCommon Send returns without error.
//
// See DeleteFunctionCommon for more information on using the DeleteFunctionCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteFunctionCommonRequest method.
//    req, resp := client.DeleteFunctionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) DeleteFunctionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteFunctionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteFunctionCommon API operation for VEFAAS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS's
// API operation DeleteFunctionCommon for usage and error information.
func (c *VEFAAS) DeleteFunctionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteFunctionCommonRequest(input)
	return out, req.Send()
}

// DeleteFunctionCommonWithContext is the same as DeleteFunctionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteFunctionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) DeleteFunctionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteFunctionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteFunction = "DeleteFunction"

// DeleteFunctionRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteFunction operation. The "output" return
// value will be populated with the DeleteFunctionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteFunctionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteFunctionCommon Send returns without error.
//
// See DeleteFunction for more information on using the DeleteFunction
// API call, and error handling.
//
//    // Example sending a request using the DeleteFunctionRequest method.
//    req, resp := client.DeleteFunctionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) DeleteFunctionRequest(input *DeleteFunctionInput) (req *request.Request, output *DeleteFunctionOutput) {
	op := &request.Operation{
		Name:       opDeleteFunction,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteFunctionInput{}
	}

	output = &DeleteFunctionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteFunction API operation for VEFAAS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VEFAAS's
// API operation DeleteFunction for usage and error information.
func (c *VEFAAS) DeleteFunction(input *DeleteFunctionInput) (*DeleteFunctionOutput, error) {
	req, out := c.DeleteFunctionRequest(input)
	return out, req.Send()
}

// DeleteFunctionWithContext is the same as DeleteFunction with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteFunction for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) DeleteFunctionWithContext(ctx volcengine.Context, input *DeleteFunctionInput, opts ...request.Option) (*DeleteFunctionOutput, error) {
	req, out := c.DeleteFunctionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteFunctionInput struct {
	_ struct{} `type:"structure"`

	// Id is a required field
	Id *string `type:"string" required:"true"`

	TopParam *TopParamForDeleteFunctionInput `type:"structure"`
}

// String returns the string representation
func (s DeleteFunctionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteFunctionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteFunctionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteFunctionInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetId sets the Id field's value.
func (s *DeleteFunctionInput) SetId(v string) *DeleteFunctionInput {
	s.Id = &v
	return s
}

// SetTopParam sets the TopParam field's value.
func (s *DeleteFunctionInput) SetTopParam(v *TopParamForDeleteFunctionInput) *DeleteFunctionInput {
	s.TopParam = v
	return s
}

type DeleteFunctionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteFunctionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteFunctionOutput) GoString() string {
	return s.String()
}

type TopParamForDeleteFunctionInput struct {
	_ struct{} `type:"structure"`

	AccountId *int64 `type:"int64"`

	DestService *string `type:"string"`

	IsInternal *string `type:"string"`

	Psm *string `type:"string"`

	RealIp *string `type:"string"`

	Region *string `type:"string"`

	RequestId *string `type:"string"`

	RoleId *int64 `type:"int64"`

	Site *string `type:"string"`

	SourceService *string `type:"string"`

	UserId *int64 `type:"int64"`
}

// String returns the string representation
func (s TopParamForDeleteFunctionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TopParamForDeleteFunctionInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *TopParamForDeleteFunctionInput) SetAccountId(v int64) *TopParamForDeleteFunctionInput {
	s.AccountId = &v
	return s
}

// SetDestService sets the DestService field's value.
func (s *TopParamForDeleteFunctionInput) SetDestService(v string) *TopParamForDeleteFunctionInput {
	s.DestService = &v
	return s
}

// SetIsInternal sets the IsInternal field's value.
func (s *TopParamForDeleteFunctionInput) SetIsInternal(v string) *TopParamForDeleteFunctionInput {
	s.IsInternal = &v
	return s
}

// SetPsm sets the Psm field's value.
func (s *TopParamForDeleteFunctionInput) SetPsm(v string) *TopParamForDeleteFunctionInput {
	s.Psm = &v
	return s
}

// SetRealIp sets the RealIp field's value.
func (s *TopParamForDeleteFunctionInput) SetRealIp(v string) *TopParamForDeleteFunctionInput {
	s.RealIp = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *TopParamForDeleteFunctionInput) SetRegion(v string) *TopParamForDeleteFunctionInput {
	s.Region = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *TopParamForDeleteFunctionInput) SetRequestId(v string) *TopParamForDeleteFunctionInput {
	s.RequestId = &v
	return s
}

// SetRoleId sets the RoleId field's value.
func (s *TopParamForDeleteFunctionInput) SetRoleId(v int64) *TopParamForDeleteFunctionInput {
	s.RoleId = &v
	return s
}

// SetSite sets the Site field's value.
func (s *TopParamForDeleteFunctionInput) SetSite(v string) *TopParamForDeleteFunctionInput {
	s.Site = &v
	return s
}

// SetSourceService sets the SourceService field's value.
func (s *TopParamForDeleteFunctionInput) SetSourceService(v string) *TopParamForDeleteFunctionInput {
	s.SourceService = &v
	return s
}

// SetUserId sets the UserId field's value.
func (s *TopParamForDeleteFunctionInput) SetUserId(v int64) *TopParamForDeleteFunctionInput {
	s.UserId = &v
	return s
}
