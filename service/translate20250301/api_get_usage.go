// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package translate20250301

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetUsageCommon = "GetUsage"

// GetUsageCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetUsageCommon operation. The "output" return
// value will be populated with the GetUsageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetUsageCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetUsageCommon Send returns without error.
//
// See GetUsageCommon for more information on using the GetUsageCommon
// API call, and error handling.
//
//    // Example sending a request using the GetUsageCommonRequest method.
//    req, resp := client.GetUsageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSLATE20250301) GetUsageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetUsageCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetUsageCommon API operation for TRANSLATE20250301.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSLATE20250301's
// API operation GetUsageCommon for usage and error information.
func (c *TRANSLATE20250301) GetUsageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetUsageCommonRequest(input)
	return out, req.Send()
}

// GetUsageCommonWithContext is the same as GetUsageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetUsageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSLATE20250301) GetUsageCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetUsageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetUsage = "GetUsage"

// GetUsageRequest generates a "volcengine/request.Request" representing the
// client's request for the GetUsage operation. The "output" return
// value will be populated with the GetUsageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetUsageCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetUsageCommon Send returns without error.
//
// See GetUsage for more information on using the GetUsage
// API call, and error handling.
//
//    // Example sending a request using the GetUsageRequest method.
//    req, resp := client.GetUsageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSLATE20250301) GetUsageRequest(input *GetUsageInput) (req *request.Request, output *GetUsageOutput) {
	op := &request.Operation{
		Name:       opGetUsage,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetUsageInput{}
	}

	output = &GetUsageOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetUsage API operation for TRANSLATE20250301.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSLATE20250301's
// API operation GetUsage for usage and error information.
func (c *TRANSLATE20250301) GetUsage(input *GetUsageInput) (*GetUsageOutput, error) {
	req, out := c.GetUsageRequest(input)
	return out, req.Send()
}

// GetUsageWithContext is the same as GetUsage with the addition of
// the ability to pass a context and additional request options.
//
// See GetUsage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSLATE20250301) GetUsageWithContext(ctx volcengine.Context, input *GetUsageInput, opts ...request.Option) (*GetUsageOutput, error) {
	req, out := c.GetUsageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetUsageInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// From is a required field
	From *int32 `type:"int32" json:",omitempty" required:"true"`

	// Service is a required field
	Service *string `type:"string" json:",omitempty" required:"true"`

	// To is a required field
	To *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetUsageInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetUsageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetUsageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetUsageInput"}
	if s.From == nil {
		invalidParams.Add(request.NewErrParamRequired("From"))
	}
	if s.Service == nil {
		invalidParams.Add(request.NewErrParamRequired("Service"))
	}
	if s.To == nil {
		invalidParams.Add(request.NewErrParamRequired("To"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFrom sets the From field's value.
func (s *GetUsageInput) SetFrom(v int32) *GetUsageInput {
	s.From = &v
	return s
}

// SetService sets the Service field's value.
func (s *GetUsageInput) SetService(v string) *GetUsageInput {
	s.Service = &v
	return s
}

// SetTo sets the To field's value.
func (s *GetUsageInput) SetTo(v int32) *GetUsageInput {
	s.To = &v
	return s
}

type GetUsageOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Points []*PointForGetUsageOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s GetUsageOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetUsageOutput) GoString() string {
	return s.String()
}

// SetPoints sets the Points field's value.
func (s *GetUsageOutput) SetPoints(v []*PointForGetUsageOutput) *GetUsageOutput {
	s.Points = v
	return s
}

type PointForGetUsageOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Timestamp *int32 `type:"int32" json:",omitempty"`

	Value *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s PointForGetUsageOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PointForGetUsageOutput) GoString() string {
	return s.String()
}

// SetTimestamp sets the Timestamp field's value.
func (s *PointForGetUsageOutput) SetTimestamp(v int32) *PointForGetUsageOutput {
	s.Timestamp = &v
	return s
}

// SetValue sets the Value field's value.
func (s *PointForGetUsageOutput) SetValue(v int32) *PointForGetUsageOutput {
	s.Value = &v
	return s
}
