// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package translate20250301

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opLangDetectCommon = "LangDetect"

// LangDetectCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the LangDetectCommon operation. The "output" return
// value will be populated with the LangDetectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned LangDetectCommon Request to send the API call to the service.
// the "output" return value is not valid until after LangDetectCommon Send returns without error.
//
// See LangDetectCommon for more information on using the LangDetectCommon
// API call, and error handling.
//
//    // Example sending a request using the LangDetectCommonRequest method.
//    req, resp := client.LangDetectCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSLATE20250301) LangDetectCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opLangDetectCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// LangDetectCommon API operation for TRANSLATE20250301.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSLATE20250301's
// API operation LangDetectCommon for usage and error information.
func (c *TRANSLATE20250301) LangDetectCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.LangDetectCommonRequest(input)
	return out, req.Send()
}

// LangDetectCommonWithContext is the same as LangDetectCommon with the addition of
// the ability to pass a context and additional request options.
//
// See LangDetectCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSLATE20250301) LangDetectCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.LangDetectCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opLangDetect = "LangDetect"

// LangDetectRequest generates a "volcengine/request.Request" representing the
// client's request for the LangDetect operation. The "output" return
// value will be populated with the LangDetectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned LangDetectCommon Request to send the API call to the service.
// the "output" return value is not valid until after LangDetectCommon Send returns without error.
//
// See LangDetect for more information on using the LangDetect
// API call, and error handling.
//
//    // Example sending a request using the LangDetectRequest method.
//    req, resp := client.LangDetectRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSLATE20250301) LangDetectRequest(input *LangDetectInput) (req *request.Request, output *LangDetectOutput) {
	op := &request.Operation{
		Name:       opLangDetect,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &LangDetectInput{}
	}

	output = &LangDetectOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// LangDetect API operation for TRANSLATE20250301.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSLATE20250301's
// API operation LangDetect for usage and error information.
func (c *TRANSLATE20250301) LangDetect(input *LangDetectInput) (*LangDetectOutput, error) {
	req, out := c.LangDetectRequest(input)
	return out, req.Send()
}

// LangDetectWithContext is the same as LangDetect with the addition of
// the ability to pass a context and additional request options.
//
// See LangDetect for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSLATE20250301) LangDetectWithContext(ctx volcengine.Context, input *LangDetectInput, opts ...request.Option) (*LangDetectOutput, error) {
	req, out := c.LangDetectRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DetectedLanguageListForLangDetectOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Confidence *float64 `type:"float" json:",omitempty"`

	Language *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DetectedLanguageListForLangDetectOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DetectedLanguageListForLangDetectOutput) GoString() string {
	return s.String()
}

// SetConfidence sets the Confidence field's value.
func (s *DetectedLanguageListForLangDetectOutput) SetConfidence(v float64) *DetectedLanguageListForLangDetectOutput {
	s.Confidence = &v
	return s
}

// SetLanguage sets the Language field's value.
func (s *DetectedLanguageListForLangDetectOutput) SetLanguage(v string) *DetectedLanguageListForLangDetectOutput {
	s.Language = &v
	return s
}

type LangDetectInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	TextList []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s LangDetectInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s LangDetectInput) GoString() string {
	return s.String()
}

// SetTextList sets the TextList field's value.
func (s *LangDetectInput) SetTextList(v []*string) *LangDetectInput {
	s.TextList = v
	return s
}

type LangDetectOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DetectedLanguageList []*DetectedLanguageListForLangDetectOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s LangDetectOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s LangDetectOutput) GoString() string {
	return s.String()
}

// SetDetectedLanguageList sets the DetectedLanguageList field's value.
func (s *LangDetectOutput) SetDetectedLanguageList(v []*DetectedLanguageListForLangDetectOutput) *LangDetectOutput {
	s.DetectedLanguageList = v
	return s
}
