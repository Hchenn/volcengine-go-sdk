// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package translate20250301

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opTranslateTextCommon = "TranslateText"

// TranslateTextCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the TranslateTextCommon operation. The "output" return
// value will be populated with the TranslateTextCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TranslateTextCommon Request to send the API call to the service.
// the "output" return value is not valid until after TranslateTextCommon Send returns without error.
//
// See TranslateTextCommon for more information on using the TranslateTextCommon
// API call, and error handling.
//
//    // Example sending a request using the TranslateTextCommonRequest method.
//    req, resp := client.TranslateTextCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSLATE20250301) TranslateTextCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opTranslateTextCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TranslateTextCommon API operation for TRANSLATE20250301.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSLATE20250301's
// API operation TranslateTextCommon for usage and error information.
func (c *TRANSLATE20250301) TranslateTextCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.TranslateTextCommonRequest(input)
	return out, req.Send()
}

// TranslateTextCommonWithContext is the same as TranslateTextCommon with the addition of
// the ability to pass a context and additional request options.
//
// See TranslateTextCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSLATE20250301) TranslateTextCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.TranslateTextCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opTranslateText = "TranslateText"

// TranslateTextRequest generates a "volcengine/request.Request" representing the
// client's request for the TranslateText operation. The "output" return
// value will be populated with the TranslateTextCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TranslateTextCommon Request to send the API call to the service.
// the "output" return value is not valid until after TranslateTextCommon Send returns without error.
//
// See TranslateText for more information on using the TranslateText
// API call, and error handling.
//
//    // Example sending a request using the TranslateTextRequest method.
//    req, resp := client.TranslateTextRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSLATE20250301) TranslateTextRequest(input *TranslateTextInput) (req *request.Request, output *TranslateTextOutput) {
	op := &request.Operation{
		Name:       opTranslateText,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TranslateTextInput{}
	}

	output = &TranslateTextOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TranslateText API operation for TRANSLATE20250301.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSLATE20250301's
// API operation TranslateText for usage and error information.
func (c *TRANSLATE20250301) TranslateText(input *TranslateTextInput) (*TranslateTextOutput, error) {
	req, out := c.TranslateTextRequest(input)
	return out, req.Send()
}

// TranslateTextWithContext is the same as TranslateText with the addition of
// the ability to pass a context and additional request options.
//
// See TranslateText for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSLATE20250301) TranslateTextWithContext(ctx volcengine.Context, input *TranslateTextInput, opts ...request.Option) (*TranslateTextOutput, error) {
	req, out := c.TranslateTextRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TranslateTextInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	SourceLanguage *string `type:"string" json:",omitempty"`

	// TargetLanguage is a required field
	TargetLanguage *string `type:"string" json:",omitempty" required:"true"`

	TextList []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s TranslateTextInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TranslateTextInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TranslateTextInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TranslateTextInput"}
	if s.TargetLanguage == nil {
		invalidParams.Add(request.NewErrParamRequired("TargetLanguage"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSourceLanguage sets the SourceLanguage field's value.
func (s *TranslateTextInput) SetSourceLanguage(v string) *TranslateTextInput {
	s.SourceLanguage = &v
	return s
}

// SetTargetLanguage sets the TargetLanguage field's value.
func (s *TranslateTextInput) SetTargetLanguage(v string) *TranslateTextInput {
	s.TargetLanguage = &v
	return s
}

// SetTextList sets the TextList field's value.
func (s *TranslateTextInput) SetTextList(v []*string) *TranslateTextInput {
	s.TextList = v
	return s
}

type TranslateTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TranslationList []*TranslationListForTranslateTextOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s TranslateTextOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TranslateTextOutput) GoString() string {
	return s.String()
}

// SetTranslationList sets the TranslationList field's value.
func (s *TranslateTextOutput) SetTranslationList(v []*TranslationListForTranslateTextOutput) *TranslateTextOutput {
	s.TranslationList = v
	return s
}

type TranslationListForTranslateTextOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DetectedSourceLanguage *string `type:"string" json:",omitempty"`

	Translation *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TranslationListForTranslateTextOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TranslationListForTranslateTextOutput) GoString() string {
	return s.String()
}

// SetDetectedSourceLanguage sets the DetectedSourceLanguage field's value.
func (s *TranslationListForTranslateTextOutput) SetDetectedSourceLanguage(v string) *TranslationListForTranslateTextOutput {
	s.DetectedSourceLanguage = &v
	return s
}

// SetTranslation sets the Translation field's value.
func (s *TranslationListForTranslateTextOutput) SetTranslation(v string) *TranslationListForTranslateTextOutput {
	s.Translation = &v
	return s
}
