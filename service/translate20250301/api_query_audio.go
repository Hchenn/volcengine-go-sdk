// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package translate20250301

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opQueryAudioCommon = "QueryAudio"

// QueryAudioCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAudioCommon operation. The "output" return
// value will be populated with the QueryAudioCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAudioCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryAudioCommon Send returns without error.
//
// See QueryAudioCommon for more information on using the QueryAudioCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryAudioCommonRequest method.
//    req, resp := client.QueryAudioCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSLATE20250301) QueryAudioCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryAudioCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryAudioCommon API operation for TRANSLATE20250301.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSLATE20250301's
// API operation QueryAudioCommon for usage and error information.
func (c *TRANSLATE20250301) QueryAudioCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryAudioCommonRequest(input)
	return out, req.Send()
}

// QueryAudioCommonWithContext is the same as QueryAudioCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAudioCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSLATE20250301) QueryAudioCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryAudioCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryAudio = "QueryAudio"

// QueryAudioRequest generates a "volcengine/request.Request" representing the
// client's request for the QueryAudio operation. The "output" return
// value will be populated with the QueryAudioCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryAudioCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryAudioCommon Send returns without error.
//
// See QueryAudio for more information on using the QueryAudio
// API call, and error handling.
//
//    // Example sending a request using the QueryAudioRequest method.
//    req, resp := client.QueryAudioRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSLATE20250301) QueryAudioRequest(input *QueryAudioInput) (req *request.Request, output *QueryAudioOutput) {
	op := &request.Operation{
		Name:       opQueryAudio,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryAudioInput{}
	}

	output = &QueryAudioOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryAudio API operation for TRANSLATE20250301.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSLATE20250301's
// API operation QueryAudio for usage and error information.
func (c *TRANSLATE20250301) QueryAudio(input *QueryAudioInput) (*QueryAudioOutput, error) {
	req, out := c.QueryAudioRequest(input)
	return out, req.Send()
}

// QueryAudioWithContext is the same as QueryAudio with the addition of
// the ability to pass a context and additional request options.
//
// See QueryAudio for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSLATE20250301) QueryAudioWithContext(ctx volcengine.Context, input *QueryAudioInput, opts ...request.Option) (*QueryAudioOutput, error) {
	req, out := c.QueryAudioRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type QueryAudioInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// TaskId is a required field
	TaskId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QueryAudioInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAudioInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryAudioInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryAudioInput"}
	if s.TaskId == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTaskId sets the TaskId field's value.
func (s *QueryAudioInput) SetTaskId(v string) *QueryAudioInput {
	s.TaskId = &v
	return s
}

type QueryAudioOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Confidence *float64 `type:"float" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`

	Subtitles []*SubtitleForQueryAudioOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s QueryAudioOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryAudioOutput) GoString() string {
	return s.String()
}

// SetConfidence sets the Confidence field's value.
func (s *QueryAudioOutput) SetConfidence(v float64) *QueryAudioOutput {
	s.Confidence = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *QueryAudioOutput) SetStatus(v string) *QueryAudioOutput {
	s.Status = &v
	return s
}

// SetSubtitles sets the Subtitles field's value.
func (s *QueryAudioOutput) SetSubtitles(v []*SubtitleForQueryAudioOutput) *QueryAudioOutput {
	s.Subtitles = v
	return s
}

type SubtitleForQueryAudioOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EndTime *int32 `type:"int32" json:",omitempty"`

	StartTime *int32 `type:"int32" json:",omitempty"`

	Text *string `type:"string" json:",omitempty"`

	Translation *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SubtitleForQueryAudioOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SubtitleForQueryAudioOutput) GoString() string {
	return s.String()
}

// SetEndTime sets the EndTime field's value.
func (s *SubtitleForQueryAudioOutput) SetEndTime(v int32) *SubtitleForQueryAudioOutput {
	s.EndTime = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *SubtitleForQueryAudioOutput) SetStartTime(v int32) *SubtitleForQueryAudioOutput {
	s.StartTime = &v
	return s
}

// SetText sets the Text field's value.
func (s *SubtitleForQueryAudioOutput) SetText(v string) *SubtitleForQueryAudioOutput {
	s.Text = &v
	return s
}

// SetTranslation sets the Translation field's value.
func (s *SubtitleForQueryAudioOutput) SetTranslation(v string) *SubtitleForQueryAudioOutput {
	s.Translation = &v
	return s
}
