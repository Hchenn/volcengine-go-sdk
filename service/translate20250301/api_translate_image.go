// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package translate20250301

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opTranslateImageCommon = "TranslateImage"

// TranslateImageCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the TranslateImageCommon operation. The "output" return
// value will be populated with the TranslateImageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TranslateImageCommon Request to send the API call to the service.
// the "output" return value is not valid until after TranslateImageCommon Send returns without error.
//
// See TranslateImageCommon for more information on using the TranslateImageCommon
// API call, and error handling.
//
//    // Example sending a request using the TranslateImageCommonRequest method.
//    req, resp := client.TranslateImageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSLATE20250301) TranslateImageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opTranslateImageCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TranslateImageCommon API operation for TRANSLATE20250301.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSLATE20250301's
// API operation TranslateImageCommon for usage and error information.
func (c *TRANSLATE20250301) TranslateImageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.TranslateImageCommonRequest(input)
	return out, req.Send()
}

// TranslateImageCommonWithContext is the same as TranslateImageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See TranslateImageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSLATE20250301) TranslateImageCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.TranslateImageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opTranslateImage = "TranslateImage"

// TranslateImageRequest generates a "volcengine/request.Request" representing the
// client's request for the TranslateImage operation. The "output" return
// value will be populated with the TranslateImageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TranslateImageCommon Request to send the API call to the service.
// the "output" return value is not valid until after TranslateImageCommon Send returns without error.
//
// See TranslateImage for more information on using the TranslateImage
// API call, and error handling.
//
//    // Example sending a request using the TranslateImageRequest method.
//    req, resp := client.TranslateImageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSLATE20250301) TranslateImageRequest(input *TranslateImageInput) (req *request.Request, output *TranslateImageOutput) {
	op := &request.Operation{
		Name:       opTranslateImage,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TranslateImageInput{}
	}

	output = &TranslateImageOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TranslateImage API operation for TRANSLATE20250301.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for TRANSLATE20250301's
// API operation TranslateImage for usage and error information.
func (c *TRANSLATE20250301) TranslateImage(input *TranslateImageInput) (*TranslateImageOutput, error) {
	req, out := c.TranslateImageRequest(input)
	return out, req.Send()
}

// TranslateImageWithContext is the same as TranslateImage with the addition of
// the ability to pass a context and additional request options.
//
// See TranslateImage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSLATE20250301) TranslateImageWithContext(ctx volcengine.Context, input *TranslateImageInput, opts ...request.Option) (*TranslateImageOutput, error) {
	req, out := c.TranslateImageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type PointForTranslateImageOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	X *int32 `type:"int32" json:",omitempty"`

	Y *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s PointForTranslateImageOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PointForTranslateImageOutput) GoString() string {
	return s.String()
}

// SetX sets the X field's value.
func (s *PointForTranslateImageOutput) SetX(v int32) *PointForTranslateImageOutput {
	s.X = &v
	return s
}

// SetY sets the Y field's value.
func (s *PointForTranslateImageOutput) SetY(v int32) *PointForTranslateImageOutput {
	s.Y = &v
	return s
}

type TextBlockForTranslateImageOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BackColor []*int32 `type:"list" json:",omitempty"`

	DetectedLanguage *string `type:"string" json:",omitempty"`

	ForeColor []*int32 `type:"list" json:",omitempty"`

	Points []*PointForTranslateImageOutput `type:"list" json:",omitempty"`

	Text *string `type:"string" json:",omitempty"`

	Translation *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TextBlockForTranslateImageOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TextBlockForTranslateImageOutput) GoString() string {
	return s.String()
}

// SetBackColor sets the BackColor field's value.
func (s *TextBlockForTranslateImageOutput) SetBackColor(v []*int32) *TextBlockForTranslateImageOutput {
	s.BackColor = v
	return s
}

// SetDetectedLanguage sets the DetectedLanguage field's value.
func (s *TextBlockForTranslateImageOutput) SetDetectedLanguage(v string) *TextBlockForTranslateImageOutput {
	s.DetectedLanguage = &v
	return s
}

// SetForeColor sets the ForeColor field's value.
func (s *TextBlockForTranslateImageOutput) SetForeColor(v []*int32) *TextBlockForTranslateImageOutput {
	s.ForeColor = v
	return s
}

// SetPoints sets the Points field's value.
func (s *TextBlockForTranslateImageOutput) SetPoints(v []*PointForTranslateImageOutput) *TextBlockForTranslateImageOutput {
	s.Points = v
	return s
}

// SetText sets the Text field's value.
func (s *TextBlockForTranslateImageOutput) SetText(v string) *TextBlockForTranslateImageOutput {
	s.Text = &v
	return s
}

// SetTranslation sets the Translation field's value.
func (s *TextBlockForTranslateImageOutput) SetTranslation(v string) *TextBlockForTranslateImageOutput {
	s.Translation = &v
	return s
}

type TranslateImageInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Image is a required field
	Image *string `type:"string" json:",omitempty" required:"true"`

	SourceLanguage *string `type:"string" json:",omitempty"`

	// TargetLanguage is a required field
	TargetLanguage *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s TranslateImageInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TranslateImageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TranslateImageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TranslateImageInput"}
	if s.Image == nil {
		invalidParams.Add(request.NewErrParamRequired("Image"))
	}
	if s.TargetLanguage == nil {
		invalidParams.Add(request.NewErrParamRequired("TargetLanguage"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetImage sets the Image field's value.
func (s *TranslateImageInput) SetImage(v string) *TranslateImageInput {
	s.Image = &v
	return s
}

// SetSourceLanguage sets the SourceLanguage field's value.
func (s *TranslateImageInput) SetSourceLanguage(v string) *TranslateImageInput {
	s.SourceLanguage = &v
	return s
}

// SetTargetLanguage sets the TargetLanguage field's value.
func (s *TranslateImageInput) SetTargetLanguage(v string) *TranslateImageInput {
	s.TargetLanguage = &v
	return s
}

type TranslateImageOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Image *string `type:"string" json:",omitempty"`

	TextBlocks []*TextBlockForTranslateImageOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s TranslateImageOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TranslateImageOutput) GoString() string {
	return s.String()
}

// SetImage sets the Image field's value.
func (s *TranslateImageOutput) SetImage(v string) *TranslateImageOutput {
	s.Image = &v
	return s
}

// SetTextBlocks sets the TextBlocks field's value.
func (s *TranslateImageOutput) SetTextBlocks(v []*TextBlockForTranslateImageOutput) *TranslateImageOutput {
	s.TextBlocks = v
	return s
}
