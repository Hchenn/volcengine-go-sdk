// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package directconnect

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSetDirectConnectConnectionRenewalCommon = "SetDirectConnectConnectionRenewal"

// SetDirectConnectConnectionRenewalCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SetDirectConnectConnectionRenewalCommon operation. The "output" return
// value will be populated with the SetDirectConnectConnectionRenewalCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetDirectConnectConnectionRenewalCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetDirectConnectConnectionRenewalCommon Send returns without error.
//
// See SetDirectConnectConnectionRenewalCommon for more information on using the SetDirectConnectConnectionRenewalCommon
// API call, and error handling.
//
//    // Example sending a request using the SetDirectConnectConnectionRenewalCommonRequest method.
//    req, resp := client.SetDirectConnectConnectionRenewalCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) SetDirectConnectConnectionRenewalCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSetDirectConnectConnectionRenewalCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// SetDirectConnectConnectionRenewalCommon API operation for DIRECTCONNECT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DIRECTCONNECT's
// API operation SetDirectConnectConnectionRenewalCommon for usage and error information.
func (c *DIRECTCONNECT) SetDirectConnectConnectionRenewalCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SetDirectConnectConnectionRenewalCommonRequest(input)
	return out, req.Send()
}

// SetDirectConnectConnectionRenewalCommonWithContext is the same as SetDirectConnectConnectionRenewalCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SetDirectConnectConnectionRenewalCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) SetDirectConnectConnectionRenewalCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SetDirectConnectConnectionRenewalCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetDirectConnectConnectionRenewal = "SetDirectConnectConnectionRenewal"

// SetDirectConnectConnectionRenewalRequest generates a "volcengine/request.Request" representing the
// client's request for the SetDirectConnectConnectionRenewal operation. The "output" return
// value will be populated with the SetDirectConnectConnectionRenewalCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetDirectConnectConnectionRenewalCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetDirectConnectConnectionRenewalCommon Send returns without error.
//
// See SetDirectConnectConnectionRenewal for more information on using the SetDirectConnectConnectionRenewal
// API call, and error handling.
//
//    // Example sending a request using the SetDirectConnectConnectionRenewalRequest method.
//    req, resp := client.SetDirectConnectConnectionRenewalRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) SetDirectConnectConnectionRenewalRequest(input *SetDirectConnectConnectionRenewalInput) (req *request.Request, output *SetDirectConnectConnectionRenewalOutput) {
	op := &request.Operation{
		Name:       opSetDirectConnectConnectionRenewal,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SetDirectConnectConnectionRenewalInput{}
	}

	output = &SetDirectConnectConnectionRenewalOutput{}
	req = c.newRequest(op, input, output)

	return
}

// SetDirectConnectConnectionRenewal API operation for DIRECTCONNECT.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DIRECTCONNECT's
// API operation SetDirectConnectConnectionRenewal for usage and error information.
func (c *DIRECTCONNECT) SetDirectConnectConnectionRenewal(input *SetDirectConnectConnectionRenewalInput) (*SetDirectConnectConnectionRenewalOutput, error) {
	req, out := c.SetDirectConnectConnectionRenewalRequest(input)
	return out, req.Send()
}

// SetDirectConnectConnectionRenewalWithContext is the same as SetDirectConnectConnectionRenewal with the addition of
// the ability to pass a context and additional request options.
//
// See SetDirectConnectConnectionRenewal for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) SetDirectConnectConnectionRenewalWithContext(ctx volcengine.Context, input *SetDirectConnectConnectionRenewalInput, opts ...request.Option) (*SetDirectConnectConnectionRenewalOutput, error) {
	req, out := c.SetDirectConnectConnectionRenewalRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SetDirectConnectConnectionRenewalInput struct {
	_ struct{} `type:"structure"`

	// DirectConnectConnectionId is a required field
	DirectConnectConnectionId *string `type:"string" required:"true"`

	RemainRenewTimes *int64 `type:"integer"`

	RenewPeriod *int64 `type:"integer"`

	// RenewType is a required field
	RenewType *string `type:"string" required:"true" enum:"RenewTypeForSetDirectConnectConnectionRenewalInput"`
}

// String returns the string representation
func (s SetDirectConnectConnectionRenewalInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetDirectConnectConnectionRenewalInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetDirectConnectConnectionRenewalInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SetDirectConnectConnectionRenewalInput"}
	if s.DirectConnectConnectionId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectConnectionId"))
	}
	if s.RenewType == nil {
		invalidParams.Add(request.NewErrParamRequired("RenewType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *SetDirectConnectConnectionRenewalInput) SetDirectConnectConnectionId(v string) *SetDirectConnectConnectionRenewalInput {
	s.DirectConnectConnectionId = &v
	return s
}

// SetRemainRenewTimes sets the RemainRenewTimes field's value.
func (s *SetDirectConnectConnectionRenewalInput) SetRemainRenewTimes(v int64) *SetDirectConnectConnectionRenewalInput {
	s.RemainRenewTimes = &v
	return s
}

// SetRenewPeriod sets the RenewPeriod field's value.
func (s *SetDirectConnectConnectionRenewalInput) SetRenewPeriod(v int64) *SetDirectConnectConnectionRenewalInput {
	s.RenewPeriod = &v
	return s
}

// SetRenewType sets the RenewType field's value.
func (s *SetDirectConnectConnectionRenewalInput) SetRenewType(v string) *SetDirectConnectConnectionRenewalInput {
	s.RenewType = &v
	return s
}

type SetDirectConnectConnectionRenewalOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s SetDirectConnectConnectionRenewalOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SetDirectConnectConnectionRenewalOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *SetDirectConnectConnectionRenewalOutput) SetRequestId(v string) *SetDirectConnectConnectionRenewalOutput {
	s.RequestId = &v
	return s
}

const (
	// RenewTypeForSetDirectConnectConnectionRenewalInputManual is a RenewTypeForSetDirectConnectConnectionRenewalInput enum value
	RenewTypeForSetDirectConnectConnectionRenewalInputManual = "Manual"

	// RenewTypeForSetDirectConnectConnectionRenewalInputAuto is a RenewTypeForSetDirectConnectConnectionRenewalInput enum value
	RenewTypeForSetDirectConnectConnectionRenewalInputAuto = "Auto"

	// RenewTypeForSetDirectConnectConnectionRenewalInputNoRenew is a RenewTypeForSetDirectConnectConnectionRenewalInput enum value
	RenewTypeForSetDirectConnectConnectionRenewalInputNoRenew = "NoRenew"
)
