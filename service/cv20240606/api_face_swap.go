// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cv20240606

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opFaceSwapCommon = "FaceSwap"

// FaceSwapCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the FaceSwapCommon operation. The "output" return
// value will be populated with the FaceSwapCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned FaceSwapCommon Request to send the API call to the service.
// the "output" return value is not valid until after FaceSwapCommon Send returns without error.
//
// See FaceSwapCommon for more information on using the FaceSwapCommon
// API call, and error handling.
//
//    // Example sending a request using the FaceSwapCommonRequest method.
//    req, resp := client.FaceSwapCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CV20240606) FaceSwapCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opFaceSwapCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// FaceSwapCommon API operation for CV20240606.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CV20240606's
// API operation FaceSwapCommon for usage and error information.
func (c *CV20240606) FaceSwapCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.FaceSwapCommonRequest(input)
	return out, req.Send()
}

// FaceSwapCommonWithContext is the same as FaceSwapCommon with the addition of
// the ability to pass a context and additional request options.
//
// See FaceSwapCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CV20240606) FaceSwapCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.FaceSwapCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opFaceSwap = "FaceSwap"

// FaceSwapRequest generates a "volcengine/request.Request" representing the
// client's request for the FaceSwap operation. The "output" return
// value will be populated with the FaceSwapCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned FaceSwapCommon Request to send the API call to the service.
// the "output" return value is not valid until after FaceSwapCommon Send returns without error.
//
// See FaceSwap for more information on using the FaceSwap
// API call, and error handling.
//
//    // Example sending a request using the FaceSwapRequest method.
//    req, resp := client.FaceSwapRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CV20240606) FaceSwapRequest(input *FaceSwapInput) (req *request.Request, output *FaceSwapOutput) {
	op := &request.Operation{
		Name:       opFaceSwap,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &FaceSwapInput{}
	}

	output = &FaceSwapOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// FaceSwap API operation for CV20240606.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CV20240606's
// API operation FaceSwap for usage and error information.
func (c *CV20240606) FaceSwap(input *FaceSwapInput) (*FaceSwapOutput, error) {
	req, out := c.FaceSwapRequest(input)
	return out, req.Send()
}

// FaceSwapWithContext is the same as FaceSwap with the addition of
// the ability to pass a context and additional request options.
//
// See FaceSwap for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CV20240606) FaceSwapWithContext(ctx volcengine.Context, input *FaceSwapInput, opts ...request.Option) (*FaceSwapOutput, error) {
	req, out := c.FaceSwapRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type Algorithm_base_respForFaceSwapOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Status_code *int32 `type:"int32" json:"status_code,omitempty"`

	Status_message *string `type:"string" json:"status_message,omitempty"`
}

// String returns the string representation
func (s Algorithm_base_respForFaceSwapOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s Algorithm_base_respForFaceSwapOutput) GoString() string {
	return s.String()
}

// SetStatus_code sets the Status_code field's value.
func (s *Algorithm_base_respForFaceSwapOutput) SetStatus_code(v int32) *Algorithm_base_respForFaceSwapOutput {
	s.Status_code = &v
	return s
}

// SetStatus_message sets the Status_message field's value.
func (s *Algorithm_base_respForFaceSwapOutput) SetStatus_message(v string) *Algorithm_base_respForFaceSwapOutput {
	s.Status_message = &v
	return s
}

type DataForFaceSwapOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Algorithm_base_resp *Algorithm_base_respForFaceSwapOutput `type:"structure" json:"algorithm_base_resp,omitempty"`

	Binary_data_base64 []*string `type:"list" json:"binary_data_base64,omitempty"`

	Image_urls []*string `type:"list" json:"image_urls,omitempty"`

	Resp_data *string `type:"string" json:"resp_data,omitempty"`

	Response_data *string `type:"string" json:"response_data,omitempty"`

	Status *string `type:"string" json:"status,omitempty"`

	Task_id *string `type:"string" json:"task_id,omitempty"`
}

// String returns the string representation
func (s DataForFaceSwapOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForFaceSwapOutput) GoString() string {
	return s.String()
}

// SetAlgorithm_base_resp sets the Algorithm_base_resp field's value.
func (s *DataForFaceSwapOutput) SetAlgorithm_base_resp(v *Algorithm_base_respForFaceSwapOutput) *DataForFaceSwapOutput {
	s.Algorithm_base_resp = v
	return s
}

// SetBinary_data_base64 sets the Binary_data_base64 field's value.
func (s *DataForFaceSwapOutput) SetBinary_data_base64(v []*string) *DataForFaceSwapOutput {
	s.Binary_data_base64 = v
	return s
}

// SetImage_urls sets the Image_urls field's value.
func (s *DataForFaceSwapOutput) SetImage_urls(v []*string) *DataForFaceSwapOutput {
	s.Image_urls = v
	return s
}

// SetResp_data sets the Resp_data field's value.
func (s *DataForFaceSwapOutput) SetResp_data(v string) *DataForFaceSwapOutput {
	s.Resp_data = &v
	return s
}

// SetResponse_data sets the Response_data field's value.
func (s *DataForFaceSwapOutput) SetResponse_data(v string) *DataForFaceSwapOutput {
	s.Response_data = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DataForFaceSwapOutput) SetStatus(v string) *DataForFaceSwapOutput {
	s.Status = &v
	return s
}

// SetTask_id sets the Task_id field's value.
func (s *DataForFaceSwapOutput) SetTask_id(v string) *DataForFaceSwapOutput {
	s.Task_id = &v
	return s
}

type FaceSwapInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Binary_data_base64 []*string `type:"list" json:"binary_data_base64,omitempty"`

	Face_type *string `type:"string" json:"face_type,omitempty"`

	Image_urls []*string `type:"list" json:"image_urls,omitempty"`

	Logo_info *Logo_infoForFaceSwapInput `type:"structure" json:"logo_info,omitempty"`

	Merge_infos []*Merge_infoForFaceSwapInput `type:"list" json:"merge_infos,omitempty"`

	// Req_key is a required field
	Req_key *string `type:"string" json:"req_key,omitempty" required:"true"`

	Return_url *bool `type:"boolean" json:"return_url,omitempty"`

	Source_similarity *string `type:"string" json:"source_similarity,omitempty"`
}

// String returns the string representation
func (s FaceSwapInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FaceSwapInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *FaceSwapInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "FaceSwapInput"}
	if s.Req_key == nil {
		invalidParams.Add(request.NewErrParamRequired("Req_key"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBinary_data_base64 sets the Binary_data_base64 field's value.
func (s *FaceSwapInput) SetBinary_data_base64(v []*string) *FaceSwapInput {
	s.Binary_data_base64 = v
	return s
}

// SetFace_type sets the Face_type field's value.
func (s *FaceSwapInput) SetFace_type(v string) *FaceSwapInput {
	s.Face_type = &v
	return s
}

// SetImage_urls sets the Image_urls field's value.
func (s *FaceSwapInput) SetImage_urls(v []*string) *FaceSwapInput {
	s.Image_urls = v
	return s
}

// SetLogo_info sets the Logo_info field's value.
func (s *FaceSwapInput) SetLogo_info(v *Logo_infoForFaceSwapInput) *FaceSwapInput {
	s.Logo_info = v
	return s
}

// SetMerge_infos sets the Merge_infos field's value.
func (s *FaceSwapInput) SetMerge_infos(v []*Merge_infoForFaceSwapInput) *FaceSwapInput {
	s.Merge_infos = v
	return s
}

// SetReq_key sets the Req_key field's value.
func (s *FaceSwapInput) SetReq_key(v string) *FaceSwapInput {
	s.Req_key = &v
	return s
}

// SetReturn_url sets the Return_url field's value.
func (s *FaceSwapInput) SetReturn_url(v bool) *FaceSwapInput {
	s.Return_url = &v
	return s
}

// SetSource_similarity sets the Source_similarity field's value.
func (s *FaceSwapInput) SetSource_similarity(v string) *FaceSwapInput {
	s.Source_similarity = &v
	return s
}

type FaceSwapOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Code *int32 `type:"int32" json:"code,omitempty"`

	Data *DataForFaceSwapOutput `type:"structure" json:"data,omitempty"`

	Message *string `type:"string" json:"message,omitempty"`

	Request_id *string `type:"string" json:"request_id,omitempty"`

	Status *int32 `type:"int32" json:"status,omitempty"`

	Time_elapsed *string `type:"string" json:"time_elapsed,omitempty"`
}

// String returns the string representation
func (s FaceSwapOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FaceSwapOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *FaceSwapOutput) SetCode(v int32) *FaceSwapOutput {
	s.Code = &v
	return s
}

// SetData sets the Data field's value.
func (s *FaceSwapOutput) SetData(v *DataForFaceSwapOutput) *FaceSwapOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *FaceSwapOutput) SetMessage(v string) *FaceSwapOutput {
	s.Message = &v
	return s
}

// SetRequest_id sets the Request_id field's value.
func (s *FaceSwapOutput) SetRequest_id(v string) *FaceSwapOutput {
	s.Request_id = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *FaceSwapOutput) SetStatus(v int32) *FaceSwapOutput {
	s.Status = &v
	return s
}

// SetTime_elapsed sets the Time_elapsed field's value.
func (s *FaceSwapOutput) SetTime_elapsed(v string) *FaceSwapOutput {
	s.Time_elapsed = &v
	return s
}

type Logo_infoForFaceSwapInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Add_logo *bool `type:"boolean" json:"add_logo,omitempty"`

	Language *int32 `type:"int32" json:"language,omitempty"`

	Logo_text_content *string `type:"string" json:"logo_text_content,omitempty"`

	Position *int32 `type:"int32" json:"position,omitempty"`
}

// String returns the string representation
func (s Logo_infoForFaceSwapInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s Logo_infoForFaceSwapInput) GoString() string {
	return s.String()
}

// SetAdd_logo sets the Add_logo field's value.
func (s *Logo_infoForFaceSwapInput) SetAdd_logo(v bool) *Logo_infoForFaceSwapInput {
	s.Add_logo = &v
	return s
}

// SetLanguage sets the Language field's value.
func (s *Logo_infoForFaceSwapInput) SetLanguage(v int32) *Logo_infoForFaceSwapInput {
	s.Language = &v
	return s
}

// SetLogo_text_content sets the Logo_text_content field's value.
func (s *Logo_infoForFaceSwapInput) SetLogo_text_content(v string) *Logo_infoForFaceSwapInput {
	s.Logo_text_content = &v
	return s
}

// SetPosition sets the Position field's value.
func (s *Logo_infoForFaceSwapInput) SetPosition(v int32) *Logo_infoForFaceSwapInput {
	s.Position = &v
	return s
}

type Merge_infoForFaceSwapInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Location *int32 `type:"int32" json:"location,omitempty"`

	Template_location *int32 `type:"int32" json:"template_location,omitempty"`
}

// String returns the string representation
func (s Merge_infoForFaceSwapInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s Merge_infoForFaceSwapInput) GoString() string {
	return s.String()
}

// SetLocation sets the Location field's value.
func (s *Merge_infoForFaceSwapInput) SetLocation(v int32) *Merge_infoForFaceSwapInput {
	s.Location = &v
	return s
}

// SetTemplate_location sets the Template_location field's value.
func (s *Merge_infoForFaceSwapInput) SetTemplate_location(v int32) *Merge_infoForFaceSwapInput {
	s.Template_location = &v
	return s
}
