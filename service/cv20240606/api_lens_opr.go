// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cv20240606

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opLensOprCommon = "LensOpr"

// LensOprCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the LensOprCommon operation. The "output" return
// value will be populated with the LensOprCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned LensOprCommon Request to send the API call to the service.
// the "output" return value is not valid until after LensOprCommon Send returns without error.
//
// See LensOprCommon for more information on using the LensOprCommon
// API call, and error handling.
//
//    // Example sending a request using the LensOprCommonRequest method.
//    req, resp := client.LensOprCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CV20240606) LensOprCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opLensOprCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// LensOprCommon API operation for CV20240606.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CV20240606's
// API operation LensOprCommon for usage and error information.
func (c *CV20240606) LensOprCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.LensOprCommonRequest(input)
	return out, req.Send()
}

// LensOprCommonWithContext is the same as LensOprCommon with the addition of
// the ability to pass a context and additional request options.
//
// See LensOprCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CV20240606) LensOprCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.LensOprCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opLensOpr = "LensOpr"

// LensOprRequest generates a "volcengine/request.Request" representing the
// client's request for the LensOpr operation. The "output" return
// value will be populated with the LensOprCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned LensOprCommon Request to send the API call to the service.
// the "output" return value is not valid until after LensOprCommon Send returns without error.
//
// See LensOpr for more information on using the LensOpr
// API call, and error handling.
//
//    // Example sending a request using the LensOprRequest method.
//    req, resp := client.LensOprRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CV20240606) LensOprRequest(input *LensOprInput) (req *request.Request, output *LensOprOutput) {
	op := &request.Operation{
		Name:       opLensOpr,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &LensOprInput{}
	}

	output = &LensOprOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// LensOpr API operation for CV20240606.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CV20240606's
// API operation LensOpr for usage and error information.
func (c *CV20240606) LensOpr(input *LensOprInput) (*LensOprOutput, error) {
	req, out := c.LensOprRequest(input)
	return out, req.Send()
}

// LensOprWithContext is the same as LensOpr with the addition of
// the ability to pass a context and additional request options.
//
// See LensOpr for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CV20240606) LensOprWithContext(ctx volcengine.Context, input *LensOprInput, opts ...request.Option) (*LensOprOutput, error) {
	req, out := c.LensOprRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type LensOprInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Binary_data_base64 []*string `type:"list" json:"binary_data_base64,omitempty"`

	If_color *int32 `type:"int32" json:"if_color,omitempty"`

	Image_urls []*string `type:"list" json:"image_urls,omitempty"`

	// Req_key is a required field
	Req_key *string `type:"string" json:"req_key,omitempty" required:"true"`
}

// String returns the string representation
func (s LensOprInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s LensOprInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *LensOprInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "LensOprInput"}
	if s.Req_key == nil {
		invalidParams.Add(request.NewErrParamRequired("Req_key"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBinary_data_base64 sets the Binary_data_base64 field's value.
func (s *LensOprInput) SetBinary_data_base64(v []*string) *LensOprInput {
	s.Binary_data_base64 = v
	return s
}

// SetIf_color sets the If_color field's value.
func (s *LensOprInput) SetIf_color(v int32) *LensOprInput {
	s.If_color = &v
	return s
}

// SetImage_urls sets the Image_urls field's value.
func (s *LensOprInput) SetImage_urls(v []*string) *LensOprInput {
	s.Image_urls = v
	return s
}

// SetReq_key sets the Req_key field's value.
func (s *LensOprInput) SetReq_key(v string) *LensOprInput {
	s.Req_key = &v
	return s
}

type LensOprOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Binary_data_base64 []*string `type:"list" json:"binary_data_base64,omitempty"`
}

// String returns the string representation
func (s LensOprOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s LensOprOutput) GoString() string {
	return s.String()
}

// SetBinary_data_base64 sets the Binary_data_base64 field's value.
func (s *LensOprOutput) SetBinary_data_base64(v []*string) *LensOprOutput {
	s.Binary_data_base64 = v
	return s
}
