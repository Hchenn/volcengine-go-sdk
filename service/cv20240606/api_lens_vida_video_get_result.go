// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cv20240606

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opLensVidaVideoGetResultCommon = "LensVidaVideoGetResult"

// LensVidaVideoGetResultCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the LensVidaVideoGetResultCommon operation. The "output" return
// value will be populated with the LensVidaVideoGetResultCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned LensVidaVideoGetResultCommon Request to send the API call to the service.
// the "output" return value is not valid until after LensVidaVideoGetResultCommon Send returns without error.
//
// See LensVidaVideoGetResultCommon for more information on using the LensVidaVideoGetResultCommon
// API call, and error handling.
//
//    // Example sending a request using the LensVidaVideoGetResultCommonRequest method.
//    req, resp := client.LensVidaVideoGetResultCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CV20240606) LensVidaVideoGetResultCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opLensVidaVideoGetResultCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// LensVidaVideoGetResultCommon API operation for CV20240606.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CV20240606's
// API operation LensVidaVideoGetResultCommon for usage and error information.
func (c *CV20240606) LensVidaVideoGetResultCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.LensVidaVideoGetResultCommonRequest(input)
	return out, req.Send()
}

// LensVidaVideoGetResultCommonWithContext is the same as LensVidaVideoGetResultCommon with the addition of
// the ability to pass a context and additional request options.
//
// See LensVidaVideoGetResultCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CV20240606) LensVidaVideoGetResultCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.LensVidaVideoGetResultCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opLensVidaVideoGetResult = "LensVidaVideoGetResult"

// LensVidaVideoGetResultRequest generates a "volcengine/request.Request" representing the
// client's request for the LensVidaVideoGetResult operation. The "output" return
// value will be populated with the LensVidaVideoGetResultCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned LensVidaVideoGetResultCommon Request to send the API call to the service.
// the "output" return value is not valid until after LensVidaVideoGetResultCommon Send returns without error.
//
// See LensVidaVideoGetResult for more information on using the LensVidaVideoGetResult
// API call, and error handling.
//
//    // Example sending a request using the LensVidaVideoGetResultRequest method.
//    req, resp := client.LensVidaVideoGetResultRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CV20240606) LensVidaVideoGetResultRequest(input *LensVidaVideoGetResultInput) (req *request.Request, output *LensVidaVideoGetResultOutput) {
	op := &request.Operation{
		Name:       opLensVidaVideoGetResult,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &LensVidaVideoGetResultInput{}
	}

	output = &LensVidaVideoGetResultOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// LensVidaVideoGetResult API operation for CV20240606.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CV20240606's
// API operation LensVidaVideoGetResult for usage and error information.
func (c *CV20240606) LensVidaVideoGetResult(input *LensVidaVideoGetResultInput) (*LensVidaVideoGetResultOutput, error) {
	req, out := c.LensVidaVideoGetResultRequest(input)
	return out, req.Send()
}

// LensVidaVideoGetResultWithContext is the same as LensVidaVideoGetResult with the addition of
// the ability to pass a context and additional request options.
//
// See LensVidaVideoGetResult for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CV20240606) LensVidaVideoGetResultWithContext(ctx volcengine.Context, input *LensVidaVideoGetResultInput, opts ...request.Option) (*LensVidaVideoGetResultOutput, error) {
	req, out := c.LensVidaVideoGetResultRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type Algorithm_base_respForLensVidaVideoGetResultOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Status_code *int32 `type:"int32" json:"status_code,omitempty"`

	Status_message *string `type:"string" json:"status_message,omitempty"`
}

// String returns the string representation
func (s Algorithm_base_respForLensVidaVideoGetResultOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s Algorithm_base_respForLensVidaVideoGetResultOutput) GoString() string {
	return s.String()
}

// SetStatus_code sets the Status_code field's value.
func (s *Algorithm_base_respForLensVidaVideoGetResultOutput) SetStatus_code(v int32) *Algorithm_base_respForLensVidaVideoGetResultOutput {
	s.Status_code = &v
	return s
}

// SetStatus_message sets the Status_message field's value.
func (s *Algorithm_base_respForLensVidaVideoGetResultOutput) SetStatus_message(v string) *Algorithm_base_respForLensVidaVideoGetResultOutput {
	s.Status_message = &v
	return s
}

type DataForLensVidaVideoGetResultOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Algorithm_base_resp *Algorithm_base_respForLensVidaVideoGetResultOutput `type:"structure" json:"algorithm_base_resp,omitempty"`

	Binary_data_base64 []*string `type:"list" json:"binary_data_base64,omitempty"`

	Image_urls []*string `type:"list" json:"image_urls,omitempty"`

	Resp_data *string `type:"string" json:"resp_data,omitempty"`

	Response_data *string `type:"string" json:"response_data,omitempty"`

	Status *string `type:"string" json:"status,omitempty"`

	Task_id *string `type:"string" json:"task_id,omitempty"`
}

// String returns the string representation
func (s DataForLensVidaVideoGetResultOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForLensVidaVideoGetResultOutput) GoString() string {
	return s.String()
}

// SetAlgorithm_base_resp sets the Algorithm_base_resp field's value.
func (s *DataForLensVidaVideoGetResultOutput) SetAlgorithm_base_resp(v *Algorithm_base_respForLensVidaVideoGetResultOutput) *DataForLensVidaVideoGetResultOutput {
	s.Algorithm_base_resp = v
	return s
}

// SetBinary_data_base64 sets the Binary_data_base64 field's value.
func (s *DataForLensVidaVideoGetResultOutput) SetBinary_data_base64(v []*string) *DataForLensVidaVideoGetResultOutput {
	s.Binary_data_base64 = v
	return s
}

// SetImage_urls sets the Image_urls field's value.
func (s *DataForLensVidaVideoGetResultOutput) SetImage_urls(v []*string) *DataForLensVidaVideoGetResultOutput {
	s.Image_urls = v
	return s
}

// SetResp_data sets the Resp_data field's value.
func (s *DataForLensVidaVideoGetResultOutput) SetResp_data(v string) *DataForLensVidaVideoGetResultOutput {
	s.Resp_data = &v
	return s
}

// SetResponse_data sets the Response_data field's value.
func (s *DataForLensVidaVideoGetResultOutput) SetResponse_data(v string) *DataForLensVidaVideoGetResultOutput {
	s.Response_data = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DataForLensVidaVideoGetResultOutput) SetStatus(v string) *DataForLensVidaVideoGetResultOutput {
	s.Status = &v
	return s
}

// SetTask_id sets the Task_id field's value.
func (s *DataForLensVidaVideoGetResultOutput) SetTask_id(v string) *DataForLensVidaVideoGetResultOutput {
	s.Task_id = &v
	return s
}

type LensVidaVideoGetResultInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Req_key is a required field
	Req_key *string `type:"string" json:"req_key,omitempty" required:"true"`

	// Task_id is a required field
	Task_id *string `type:"string" json:"task_id,omitempty" required:"true"`
}

// String returns the string representation
func (s LensVidaVideoGetResultInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s LensVidaVideoGetResultInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *LensVidaVideoGetResultInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "LensVidaVideoGetResultInput"}
	if s.Req_key == nil {
		invalidParams.Add(request.NewErrParamRequired("Req_key"))
	}
	if s.Task_id == nil {
		invalidParams.Add(request.NewErrParamRequired("Task_id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetReq_key sets the Req_key field's value.
func (s *LensVidaVideoGetResultInput) SetReq_key(v string) *LensVidaVideoGetResultInput {
	s.Req_key = &v
	return s
}

// SetTask_id sets the Task_id field's value.
func (s *LensVidaVideoGetResultInput) SetTask_id(v string) *LensVidaVideoGetResultInput {
	s.Task_id = &v
	return s
}

type LensVidaVideoGetResultOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Code *int32 `type:"int32" json:"code,omitempty"`

	Data *DataForLensVidaVideoGetResultOutput `type:"structure" json:"data,omitempty"`

	Message *string `type:"string" json:"message,omitempty"`

	Request_id *string `type:"string" json:"request_id,omitempty"`

	Status *int32 `type:"int32" json:"status,omitempty"`

	Time_elapsed *string `type:"string" json:"time_elapsed,omitempty"`
}

// String returns the string representation
func (s LensVidaVideoGetResultOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s LensVidaVideoGetResultOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *LensVidaVideoGetResultOutput) SetCode(v int32) *LensVidaVideoGetResultOutput {
	s.Code = &v
	return s
}

// SetData sets the Data field's value.
func (s *LensVidaVideoGetResultOutput) SetData(v *DataForLensVidaVideoGetResultOutput) *LensVidaVideoGetResultOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *LensVidaVideoGetResultOutput) SetMessage(v string) *LensVidaVideoGetResultOutput {
	s.Message = &v
	return s
}

// SetRequest_id sets the Request_id field's value.
func (s *LensVidaVideoGetResultOutput) SetRequest_id(v string) *LensVidaVideoGetResultOutput {
	s.Request_id = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *LensVidaVideoGetResultOutput) SetStatus(v int32) *LensVidaVideoGetResultOutput {
	s.Status = &v
	return s
}

// SetTime_elapsed sets the Time_elapsed field's value.
func (s *LensVidaVideoGetResultOutput) SetTime_elapsed(v string) *LensVidaVideoGetResultOutput {
	s.Time_elapsed = &v
	return s
}
