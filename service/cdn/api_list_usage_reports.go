// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListUsageReportsCommon = "ListUsageReports"

// ListUsageReportsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListUsageReportsCommon operation. The "output" return
// value will be populated with the ListUsageReportsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListUsageReportsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListUsageReportsCommon Send returns without error.
//
// See ListUsageReportsCommon for more information on using the ListUsageReportsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListUsageReportsCommonRequest method.
//    req, resp := client.ListUsageReportsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CDN) ListUsageReportsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListUsageReportsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListUsageReportsCommon API operation for CDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CDN's
// API operation ListUsageReportsCommon for usage and error information.
func (c *CDN) ListUsageReportsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListUsageReportsCommonRequest(input)
	return out, req.Send()
}

// ListUsageReportsCommonWithContext is the same as ListUsageReportsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListUsageReportsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CDN) ListUsageReportsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListUsageReportsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListUsageReports = "ListUsageReports"

// ListUsageReportsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListUsageReports operation. The "output" return
// value will be populated with the ListUsageReportsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListUsageReportsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListUsageReportsCommon Send returns without error.
//
// See ListUsageReports for more information on using the ListUsageReports
// API call, and error handling.
//
//    // Example sending a request using the ListUsageReportsRequest method.
//    req, resp := client.ListUsageReportsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CDN) ListUsageReportsRequest(input *ListUsageReportsInput) (req *request.Request, output *ListUsageReportsOutput) {
	op := &request.Operation{
		Name:       opListUsageReports,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListUsageReportsInput{}
	}

	output = &ListUsageReportsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListUsageReports API operation for CDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CDN's
// API operation ListUsageReports for usage and error information.
func (c *CDN) ListUsageReports(input *ListUsageReportsInput) (*ListUsageReportsOutput, error) {
	req, out := c.ListUsageReportsRequest(input)
	return out, req.Send()
}

// ListUsageReportsWithContext is the same as ListUsageReports with the addition of
// the ability to pass a context and additional request options.
//
// See ListUsageReports for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CDN) ListUsageReportsWithContext(ctx volcengine.Context, input *ListUsageReportsInput, opts ...request.Option) (*ListUsageReportsOutput, error) {
	req, out := c.ListUsageReportsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListUsageReportsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ExportType *string `type:"string" json:",omitempty"`

	PageNum *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	Status *int64 `type:"int64" json:",omitempty"`

	TaskName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListUsageReportsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListUsageReportsInput) GoString() string {
	return s.String()
}

// SetExportType sets the ExportType field's value.
func (s *ListUsageReportsInput) SetExportType(v string) *ListUsageReportsInput {
	s.ExportType = &v
	return s
}

// SetPageNum sets the PageNum field's value.
func (s *ListUsageReportsInput) SetPageNum(v int64) *ListUsageReportsInput {
	s.PageNum = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListUsageReportsInput) SetPageSize(v int64) *ListUsageReportsInput {
	s.PageSize = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ListUsageReportsInput) SetStatus(v int64) *ListUsageReportsInput {
	s.Status = &v
	return s
}

// SetTaskName sets the TaskName field's value.
func (s *ListUsageReportsInput) SetTaskName(v string) *ListUsageReportsInput {
	s.TaskName = &v
	return s
}

type ListUsageReportsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	PageNum *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	Total *int64 `type:"int64" json:",omitempty"`

	UsageReportsDetails []*UsageReportsDetailForListUsageReportsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListUsageReportsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListUsageReportsOutput) GoString() string {
	return s.String()
}

// SetPageNum sets the PageNum field's value.
func (s *ListUsageReportsOutput) SetPageNum(v int64) *ListUsageReportsOutput {
	s.PageNum = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListUsageReportsOutput) SetPageSize(v int64) *ListUsageReportsOutput {
	s.PageSize = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListUsageReportsOutput) SetTotal(v int64) *ListUsageReportsOutput {
	s.Total = &v
	return s
}

// SetUsageReportsDetails sets the UsageReportsDetails field's value.
func (s *ListUsageReportsOutput) SetUsageReportsDetails(v []*UsageReportsDetailForListUsageReportsOutput) *ListUsageReportsOutput {
	s.UsageReportsDetails = v
	return s
}

type UsageReportsDetailForListUsageReportsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccountId *string `type:"string" json:",omitempty"`

	BillingCode *string `type:"string" json:",omitempty"`

	BillingRegion *string `type:"string" json:",omitempty"`

	CalculationMethod *string `type:"string" json:",omitempty"`

	CreateTime *int64 `type:"int64" json:",omitempty"`

	DownLoadUrl *string `type:"string" json:",omitempty"`

	EndTime *int64 `type:"int64" json:",omitempty"`

	ExportType *string `type:"string" json:",omitempty"`

	Metric *string `type:"string" json:",omitempty"`

	StartTime *int64 `type:"int64" json:",omitempty"`

	Status *int64 `type:"int64" json:",omitempty"`

	TaskId *string `type:"string" json:",omitempty"`

	TaskName *string `type:"string" json:",omitempty"`

	TimeZone *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UsageReportsDetailForListUsageReportsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UsageReportsDetailForListUsageReportsOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetAccountId(v string) *UsageReportsDetailForListUsageReportsOutput {
	s.AccountId = &v
	return s
}

// SetBillingCode sets the BillingCode field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetBillingCode(v string) *UsageReportsDetailForListUsageReportsOutput {
	s.BillingCode = &v
	return s
}

// SetBillingRegion sets the BillingRegion field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetBillingRegion(v string) *UsageReportsDetailForListUsageReportsOutput {
	s.BillingRegion = &v
	return s
}

// SetCalculationMethod sets the CalculationMethod field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetCalculationMethod(v string) *UsageReportsDetailForListUsageReportsOutput {
	s.CalculationMethod = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetCreateTime(v int64) *UsageReportsDetailForListUsageReportsOutput {
	s.CreateTime = &v
	return s
}

// SetDownLoadUrl sets the DownLoadUrl field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetDownLoadUrl(v string) *UsageReportsDetailForListUsageReportsOutput {
	s.DownLoadUrl = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetEndTime(v int64) *UsageReportsDetailForListUsageReportsOutput {
	s.EndTime = &v
	return s
}

// SetExportType sets the ExportType field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetExportType(v string) *UsageReportsDetailForListUsageReportsOutput {
	s.ExportType = &v
	return s
}

// SetMetric sets the Metric field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetMetric(v string) *UsageReportsDetailForListUsageReportsOutput {
	s.Metric = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetStartTime(v int64) *UsageReportsDetailForListUsageReportsOutput {
	s.StartTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetStatus(v int64) *UsageReportsDetailForListUsageReportsOutput {
	s.Status = &v
	return s
}

// SetTaskId sets the TaskId field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetTaskId(v string) *UsageReportsDetailForListUsageReportsOutput {
	s.TaskId = &v
	return s
}

// SetTaskName sets the TaskName field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetTaskName(v string) *UsageReportsDetailForListUsageReportsOutput {
	s.TaskName = &v
	return s
}

// SetTimeZone sets the TimeZone field's value.
func (s *UsageReportsDetailForListUsageReportsOutput) SetTimeZone(v string) *UsageReportsDetailForListUsageReportsOutput {
	s.TimeZone = &v
	return s
}
