// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeCdnIPCommon = "DescribeCdnIP"

// DescribeCdnIPCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeCdnIPCommon operation. The "output" return
// value will be populated with the DescribeCdnIPCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCdnIPCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCdnIPCommon Send returns without error.
//
// See DescribeCdnIPCommon for more information on using the DescribeCdnIPCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCdnIPCommonRequest method.
//    req, resp := client.DescribeCdnIPCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CDN) DescribeCdnIPCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCdnIPCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeCdnIPCommon API operation for CDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CDN's
// API operation DescribeCdnIPCommon for usage and error information.
func (c *CDN) DescribeCdnIPCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCdnIPCommonRequest(input)
	return out, req.Send()
}

// DescribeCdnIPCommonWithContext is the same as DescribeCdnIPCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCdnIPCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CDN) DescribeCdnIPCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCdnIPCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCdnIP = "DescribeCdnIP"

// DescribeCdnIPRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeCdnIP operation. The "output" return
// value will be populated with the DescribeCdnIPCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCdnIPCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCdnIPCommon Send returns without error.
//
// See DescribeCdnIP for more information on using the DescribeCdnIP
// API call, and error handling.
//
//    // Example sending a request using the DescribeCdnIPRequest method.
//    req, resp := client.DescribeCdnIPRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CDN) DescribeCdnIPRequest(input *DescribeCdnIPInput) (req *request.Request, output *DescribeCdnIPOutput) {
	op := &request.Operation{
		Name:       opDescribeCdnIP,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCdnIPInput{}
	}

	output = &DescribeCdnIPOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeCdnIP API operation for CDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CDN's
// API operation DescribeCdnIP for usage and error information.
func (c *CDN) DescribeCdnIP(input *DescribeCdnIPInput) (*DescribeCdnIPOutput, error) {
	req, out := c.DescribeCdnIPRequest(input)
	return out, req.Send()
}

// DescribeCdnIPWithContext is the same as DescribeCdnIP with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCdnIP for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CDN) DescribeCdnIPWithContext(ctx volcengine.Context, input *DescribeCdnIPInput, opts ...request.Option) (*DescribeCdnIPOutput, error) {
	req, out := c.DescribeCdnIPRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeCdnIPInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	IPs []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeCdnIPInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCdnIPInput) GoString() string {
	return s.String()
}

// SetIPs sets the IPs field's value.
func (s *DescribeCdnIPInput) SetIPs(v []*string) *DescribeCdnIPInput {
	s.IPs = v
	return s
}

type DescribeCdnIPOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	IPs []*IPForDescribeCdnIPOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeCdnIPOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCdnIPOutput) GoString() string {
	return s.String()
}

// SetIPs sets the IPs field's value.
func (s *DescribeCdnIPOutput) SetIPs(v []*IPForDescribeCdnIPOutput) *DescribeCdnIPOutput {
	s.IPs = v
	return s
}

type IPForDescribeCdnIPOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CdnIp *bool `type:"boolean" json:",omitempty"`

	IP *string `type:"string" json:",omitempty"`

	ISP *string `type:"string" json:",omitempty"`

	Location *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s IPForDescribeCdnIPOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s IPForDescribeCdnIPOutput) GoString() string {
	return s.String()
}

// SetCdnIp sets the CdnIp field's value.
func (s *IPForDescribeCdnIPOutput) SetCdnIp(v bool) *IPForDescribeCdnIPOutput {
	s.CdnIp = &v
	return s
}

// SetIP sets the IP field's value.
func (s *IPForDescribeCdnIPOutput) SetIP(v string) *IPForDescribeCdnIPOutput {
	s.IP = &v
	return s
}

// SetISP sets the ISP field's value.
func (s *IPForDescribeCdnIPOutput) SetISP(v string) *IPForDescribeCdnIPOutput {
	s.ISP = &v
	return s
}

// SetLocation sets the Location field's value.
func (s *IPForDescribeCdnIPOutput) SetLocation(v string) *IPForDescribeCdnIPOutput {
	s.Location = &v
	return s
}
