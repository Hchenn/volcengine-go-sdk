// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSubmitUnblockTaskCommon = "SubmitUnblockTask"

// SubmitUnblockTaskCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SubmitUnblockTaskCommon operation. The "output" return
// value will be populated with the SubmitUnblockTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SubmitUnblockTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after SubmitUnblockTaskCommon Send returns without error.
//
// See SubmitUnblockTaskCommon for more information on using the SubmitUnblockTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the SubmitUnblockTaskCommonRequest method.
//    req, resp := client.SubmitUnblockTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CDN) SubmitUnblockTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSubmitUnblockTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SubmitUnblockTaskCommon API operation for CDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CDN's
// API operation SubmitUnblockTaskCommon for usage and error information.
func (c *CDN) SubmitUnblockTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SubmitUnblockTaskCommonRequest(input)
	return out, req.Send()
}

// SubmitUnblockTaskCommonWithContext is the same as SubmitUnblockTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SubmitUnblockTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CDN) SubmitUnblockTaskCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SubmitUnblockTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSubmitUnblockTask = "SubmitUnblockTask"

// SubmitUnblockTaskRequest generates a "volcengine/request.Request" representing the
// client's request for the SubmitUnblockTask operation. The "output" return
// value will be populated with the SubmitUnblockTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SubmitUnblockTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after SubmitUnblockTaskCommon Send returns without error.
//
// See SubmitUnblockTask for more information on using the SubmitUnblockTask
// API call, and error handling.
//
//    // Example sending a request using the SubmitUnblockTaskRequest method.
//    req, resp := client.SubmitUnblockTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CDN) SubmitUnblockTaskRequest(input *SubmitUnblockTaskInput) (req *request.Request, output *SubmitUnblockTaskOutput) {
	op := &request.Operation{
		Name:       opSubmitUnblockTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SubmitUnblockTaskInput{}
	}

	output = &SubmitUnblockTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SubmitUnblockTask API operation for CDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CDN's
// API operation SubmitUnblockTask for usage and error information.
func (c *CDN) SubmitUnblockTask(input *SubmitUnblockTaskInput) (*SubmitUnblockTaskOutput, error) {
	req, out := c.SubmitUnblockTaskRequest(input)
	return out, req.Send()
}

// SubmitUnblockTaskWithContext is the same as SubmitUnblockTask with the addition of
// the ability to pass a context and additional request options.
//
// See SubmitUnblockTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CDN) SubmitUnblockTaskWithContext(ctx volcengine.Context, input *SubmitUnblockTaskInput, opts ...request.Option) (*SubmitUnblockTaskOutput, error) {
	req, out := c.SubmitUnblockTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SubmitUnblockTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`

	// Urls is a required field
	Urls *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s SubmitUnblockTaskInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SubmitUnblockTaskInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SubmitUnblockTaskInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SubmitUnblockTaskInput"}
	if s.Urls == nil {
		invalidParams.Add(request.NewErrParamRequired("Urls"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetType sets the Type field's value.
func (s *SubmitUnblockTaskInput) SetType(v string) *SubmitUnblockTaskInput {
	s.Type = &v
	return s
}

// SetUrls sets the Urls field's value.
func (s *SubmitUnblockTaskInput) SetUrls(v string) *SubmitUnblockTaskInput {
	s.Urls = &v
	return s
}

type SubmitUnblockTaskOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TaskID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SubmitUnblockTaskOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SubmitUnblockTaskOutput) GoString() string {
	return s.String()
}

// SetTaskID sets the TaskID field's value.
func (s *SubmitUnblockTaskOutput) SetTaskID(v string) *SubmitUnblockTaskOutput {
	s.TaskID = &v
	return s
}
