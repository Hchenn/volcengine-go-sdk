// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeCdnEdgeIpCommon = "DescribeCdnEdgeIp"

// DescribeCdnEdgeIpCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeCdnEdgeIpCommon operation. The "output" return
// value will be populated with the DescribeCdnEdgeIpCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCdnEdgeIpCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCdnEdgeIpCommon Send returns without error.
//
// See DescribeCdnEdgeIpCommon for more information on using the DescribeCdnEdgeIpCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCdnEdgeIpCommonRequest method.
//    req, resp := client.DescribeCdnEdgeIpCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CDN) DescribeCdnEdgeIpCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCdnEdgeIpCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeCdnEdgeIpCommon API operation for CDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CDN's
// API operation DescribeCdnEdgeIpCommon for usage and error information.
func (c *CDN) DescribeCdnEdgeIpCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCdnEdgeIpCommonRequest(input)
	return out, req.Send()
}

// DescribeCdnEdgeIpCommonWithContext is the same as DescribeCdnEdgeIpCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCdnEdgeIpCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CDN) DescribeCdnEdgeIpCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCdnEdgeIpCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCdnEdgeIp = "DescribeCdnEdgeIp"

// DescribeCdnEdgeIpRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeCdnEdgeIp operation. The "output" return
// value will be populated with the DescribeCdnEdgeIpCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCdnEdgeIpCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCdnEdgeIpCommon Send returns without error.
//
// See DescribeCdnEdgeIp for more information on using the DescribeCdnEdgeIp
// API call, and error handling.
//
//    // Example sending a request using the DescribeCdnEdgeIpRequest method.
//    req, resp := client.DescribeCdnEdgeIpRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CDN) DescribeCdnEdgeIpRequest(input *DescribeCdnEdgeIpInput) (req *request.Request, output *DescribeCdnEdgeIpOutput) {
	op := &request.Operation{
		Name:       opDescribeCdnEdgeIp,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCdnEdgeIpInput{}
	}

	output = &DescribeCdnEdgeIpOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeCdnEdgeIp API operation for CDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CDN's
// API operation DescribeCdnEdgeIp for usage and error information.
func (c *CDN) DescribeCdnEdgeIp(input *DescribeCdnEdgeIpInput) (*DescribeCdnEdgeIpOutput, error) {
	req, out := c.DescribeCdnEdgeIpRequest(input)
	return out, req.Send()
}

// DescribeCdnEdgeIpWithContext is the same as DescribeCdnEdgeIp with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCdnEdgeIp for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CDN) DescribeCdnEdgeIpWithContext(ctx volcengine.Context, input *DescribeCdnEdgeIpInput, opts ...request.Option) (*DescribeCdnEdgeIpOutput, error) {
	req, out := c.DescribeCdnEdgeIpRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeCdnEdgeIpInput struct {
	_ struct{} `type:"structure"`

	// Domain is a required field
	Domain *string `type:"string" required:"true"`

	IpVersion *string `type:"string"`

	Isp *string `type:"string"`

	Region *string `type:"string"`

	RsIp *bool `type:"boolean"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s DescribeCdnEdgeIpInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCdnEdgeIpInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeCdnEdgeIpInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeCdnEdgeIpInput"}
	if s.Domain == nil {
		invalidParams.Add(request.NewErrParamRequired("Domain"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDomain sets the Domain field's value.
func (s *DescribeCdnEdgeIpInput) SetDomain(v string) *DescribeCdnEdgeIpInput {
	s.Domain = &v
	return s
}

// SetIpVersion sets the IpVersion field's value.
func (s *DescribeCdnEdgeIpInput) SetIpVersion(v string) *DescribeCdnEdgeIpInput {
	s.IpVersion = &v
	return s
}

// SetIsp sets the Isp field's value.
func (s *DescribeCdnEdgeIpInput) SetIsp(v string) *DescribeCdnEdgeIpInput {
	s.Isp = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *DescribeCdnEdgeIpInput) SetRegion(v string) *DescribeCdnEdgeIpInput {
	s.Region = &v
	return s
}

// SetRsIp sets the RsIp field's value.
func (s *DescribeCdnEdgeIpInput) SetRsIp(v bool) *DescribeCdnEdgeIpInput {
	s.RsIp = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeCdnEdgeIpInput) SetStatus(v string) *DescribeCdnEdgeIpInput {
	s.Status = &v
	return s
}

type DescribeCdnEdgeIpOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	CdnIpv4 []*string `type:"list"`

	CdnIpv6 []*string `type:"list"`
}

// String returns the string representation
func (s DescribeCdnEdgeIpOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCdnEdgeIpOutput) GoString() string {
	return s.String()
}

// SetCdnIpv4 sets the CdnIpv4 field's value.
func (s *DescribeCdnEdgeIpOutput) SetCdnIpv4(v []*string) *DescribeCdnEdgeIpOutput {
	s.CdnIpv4 = v
	return s
}

// SetCdnIpv6 sets the CdnIpv6 field's value.
func (s *DescribeCdnEdgeIpOutput) SetCdnIpv6(v []*string) *DescribeCdnEdgeIpOutput {
	s.CdnIpv6 = v
	return s
}
