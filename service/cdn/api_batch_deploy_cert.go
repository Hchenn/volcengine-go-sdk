// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opBatchDeployCertCommon = "BatchDeployCert"

// BatchDeployCertCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the BatchDeployCertCommon operation. The "output" return
// value will be populated with the BatchDeployCertCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BatchDeployCertCommon Request to send the API call to the service.
// the "output" return value is not valid until after BatchDeployCertCommon Send returns without error.
//
// See BatchDeployCertCommon for more information on using the BatchDeployCertCommon
// API call, and error handling.
//
//    // Example sending a request using the BatchDeployCertCommonRequest method.
//    req, resp := client.BatchDeployCertCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CDN) BatchDeployCertCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBatchDeployCertCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BatchDeployCertCommon API operation for CDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CDN's
// API operation BatchDeployCertCommon for usage and error information.
func (c *CDN) BatchDeployCertCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BatchDeployCertCommonRequest(input)
	return out, req.Send()
}

// BatchDeployCertCommonWithContext is the same as BatchDeployCertCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BatchDeployCertCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CDN) BatchDeployCertCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BatchDeployCertCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBatchDeployCert = "BatchDeployCert"

// BatchDeployCertRequest generates a "volcengine/request.Request" representing the
// client's request for the BatchDeployCert operation. The "output" return
// value will be populated with the BatchDeployCertCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned BatchDeployCertCommon Request to send the API call to the service.
// the "output" return value is not valid until after BatchDeployCertCommon Send returns without error.
//
// See BatchDeployCert for more information on using the BatchDeployCert
// API call, and error handling.
//
//    // Example sending a request using the BatchDeployCertRequest method.
//    req, resp := client.BatchDeployCertRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CDN) BatchDeployCertRequest(input *BatchDeployCertInput) (req *request.Request, output *BatchDeployCertOutput) {
	op := &request.Operation{
		Name:       opBatchDeployCert,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BatchDeployCertInput{}
	}

	output = &BatchDeployCertOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// BatchDeployCert API operation for CDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CDN's
// API operation BatchDeployCert for usage and error information.
func (c *CDN) BatchDeployCert(input *BatchDeployCertInput) (*BatchDeployCertOutput, error) {
	req, out := c.BatchDeployCertRequest(input)
	return out, req.Send()
}

// BatchDeployCertWithContext is the same as BatchDeployCert with the addition of
// the ability to pass a context and additional request options.
//
// See BatchDeployCert for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CDN) BatchDeployCertWithContext(ctx volcengine.Context, input *BatchDeployCertInput, opts ...request.Option) (*BatchDeployCertOutput, error) {
	req, out := c.BatchDeployCertRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BatchDeployCertInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// CertId is a required field
	CertId *string `type:"string" json:",omitempty" required:"true"`

	CertId2 *string `type:"string" json:",omitempty"`

	// Domain is a required field
	Domain *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s BatchDeployCertInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchDeployCertInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *BatchDeployCertInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "BatchDeployCertInput"}
	if s.CertId == nil {
		invalidParams.Add(request.NewErrParamRequired("CertId"))
	}
	if s.Domain == nil {
		invalidParams.Add(request.NewErrParamRequired("Domain"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCertId sets the CertId field's value.
func (s *BatchDeployCertInput) SetCertId(v string) *BatchDeployCertInput {
	s.CertId = &v
	return s
}

// SetCertId2 sets the CertId2 field's value.
func (s *BatchDeployCertInput) SetCertId2(v string) *BatchDeployCertInput {
	s.CertId2 = &v
	return s
}

// SetDomain sets the Domain field's value.
func (s *BatchDeployCertInput) SetDomain(v string) *BatchDeployCertInput {
	s.Domain = &v
	return s
}

type BatchDeployCertOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DeployResult []*DeployResultForBatchDeployCertOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s BatchDeployCertOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s BatchDeployCertOutput) GoString() string {
	return s.String()
}

// SetDeployResult sets the DeployResult field's value.
func (s *BatchDeployCertOutput) SetDeployResult(v []*DeployResultForBatchDeployCertOutput) *BatchDeployCertOutput {
	s.DeployResult = v
	return s
}

type DeployResultForBatchDeployCertOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Domain *string `type:"string" json:",omitempty"`

	ErrorMsg *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeployResultForBatchDeployCertOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeployResultForBatchDeployCertOutput) GoString() string {
	return s.String()
}

// SetDomain sets the Domain field's value.
func (s *DeployResultForBatchDeployCertOutput) SetDomain(v string) *DeployResultForBatchDeployCertOutput {
	s.Domain = &v
	return s
}

// SetErrorMsg sets the ErrorMsg field's value.
func (s *DeployResultForBatchDeployCertOutput) SetErrorMsg(v string) *DeployResultForBatchDeployCertOutput {
	s.ErrorMsg = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DeployResultForBatchDeployCertOutput) SetStatus(v string) *DeployResultForBatchDeployCertOutput {
	s.Status = &v
	return s
}
