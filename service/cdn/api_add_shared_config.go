// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cdn

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAddSharedConfigCommon = "AddSharedConfig"

// AddSharedConfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AddSharedConfigCommon operation. The "output" return
// value will be populated with the AddSharedConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddSharedConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddSharedConfigCommon Send returns without error.
//
// See AddSharedConfigCommon for more information on using the AddSharedConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the AddSharedConfigCommonRequest method.
//    req, resp := client.AddSharedConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CDN) AddSharedConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddSharedConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddSharedConfigCommon API operation for CDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CDN's
// API operation AddSharedConfigCommon for usage and error information.
func (c *CDN) AddSharedConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddSharedConfigCommonRequest(input)
	return out, req.Send()
}

// AddSharedConfigCommonWithContext is the same as AddSharedConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AddSharedConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CDN) AddSharedConfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddSharedConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddSharedConfig = "AddSharedConfig"

// AddSharedConfigRequest generates a "volcengine/request.Request" representing the
// client's request for the AddSharedConfig operation. The "output" return
// value will be populated with the AddSharedConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddSharedConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddSharedConfigCommon Send returns without error.
//
// See AddSharedConfig for more information on using the AddSharedConfig
// API call, and error handling.
//
//    // Example sending a request using the AddSharedConfigRequest method.
//    req, resp := client.AddSharedConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CDN) AddSharedConfigRequest(input *AddSharedConfigInput) (req *request.Request, output *AddSharedConfigOutput) {
	op := &request.Operation{
		Name:       opAddSharedConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddSharedConfigInput{}
	}

	output = &AddSharedConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AddSharedConfig API operation for CDN.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CDN's
// API operation AddSharedConfig for usage and error information.
func (c *CDN) AddSharedConfig(input *AddSharedConfigInput) (*AddSharedConfigOutput, error) {
	req, out := c.AddSharedConfigRequest(input)
	return out, req.Send()
}

// AddSharedConfigWithContext is the same as AddSharedConfig with the addition of
// the ability to pass a context and additional request options.
//
// See AddSharedConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CDN) AddSharedConfigWithContext(ctx volcengine.Context, input *AddSharedConfigInput, opts ...request.Option) (*AddSharedConfigOutput, error) {
	req, out := c.AddSharedConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddSharedConfigInput struct {
	_ struct{} `type:"structure"`

	AllowIpAccessRule *AllowIpAccessRuleForAddSharedConfigInput `type:"structure"`

	AllowRefererAccessRule *AllowRefererAccessRuleForAddSharedConfigInput `type:"structure"`

	CommonMatchList *CommonMatchListForAddSharedConfigInput `type:"structure"`

	// ConfigName is a required field
	ConfigName *string `type:"string" required:"true"`

	// ConfigType is a required field
	ConfigType *string `type:"string" required:"true"`

	DenyIpAccessRule *DenyIpAccessRuleForAddSharedConfigInput `type:"structure"`

	DenyRefererAccessRule *DenyRefererAccessRuleForAddSharedConfigInput `type:"structure"`

	Project *string `type:"string"`
}

// String returns the string representation
func (s AddSharedConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddSharedConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddSharedConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AddSharedConfigInput"}
	if s.ConfigName == nil {
		invalidParams.Add(request.NewErrParamRequired("ConfigName"))
	}
	if s.ConfigType == nil {
		invalidParams.Add(request.NewErrParamRequired("ConfigType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAllowIpAccessRule sets the AllowIpAccessRule field's value.
func (s *AddSharedConfigInput) SetAllowIpAccessRule(v *AllowIpAccessRuleForAddSharedConfigInput) *AddSharedConfigInput {
	s.AllowIpAccessRule = v
	return s
}

// SetAllowRefererAccessRule sets the AllowRefererAccessRule field's value.
func (s *AddSharedConfigInput) SetAllowRefererAccessRule(v *AllowRefererAccessRuleForAddSharedConfigInput) *AddSharedConfigInput {
	s.AllowRefererAccessRule = v
	return s
}

// SetCommonMatchList sets the CommonMatchList field's value.
func (s *AddSharedConfigInput) SetCommonMatchList(v *CommonMatchListForAddSharedConfigInput) *AddSharedConfigInput {
	s.CommonMatchList = v
	return s
}

// SetConfigName sets the ConfigName field's value.
func (s *AddSharedConfigInput) SetConfigName(v string) *AddSharedConfigInput {
	s.ConfigName = &v
	return s
}

// SetConfigType sets the ConfigType field's value.
func (s *AddSharedConfigInput) SetConfigType(v string) *AddSharedConfigInput {
	s.ConfigType = &v
	return s
}

// SetDenyIpAccessRule sets the DenyIpAccessRule field's value.
func (s *AddSharedConfigInput) SetDenyIpAccessRule(v *DenyIpAccessRuleForAddSharedConfigInput) *AddSharedConfigInput {
	s.DenyIpAccessRule = v
	return s
}

// SetDenyRefererAccessRule sets the DenyRefererAccessRule field's value.
func (s *AddSharedConfigInput) SetDenyRefererAccessRule(v *DenyRefererAccessRuleForAddSharedConfigInput) *AddSharedConfigInput {
	s.DenyRefererAccessRule = v
	return s
}

// SetProject sets the Project field's value.
func (s *AddSharedConfigInput) SetProject(v string) *AddSharedConfigInput {
	s.Project = &v
	return s
}

type AddSharedConfigOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AddSharedConfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AddSharedConfigOutput) GoString() string {
	return s.String()
}

type AllowIpAccessRuleForAddSharedConfigInput struct {
	_ struct{} `type:"structure"`

	Option *string `type:"string"`

	Rules []*string `type:"list"`
}

// String returns the string representation
func (s AllowIpAccessRuleForAddSharedConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AllowIpAccessRuleForAddSharedConfigInput) GoString() string {
	return s.String()
}

// SetOption sets the Option field's value.
func (s *AllowIpAccessRuleForAddSharedConfigInput) SetOption(v string) *AllowIpAccessRuleForAddSharedConfigInput {
	s.Option = &v
	return s
}

// SetRules sets the Rules field's value.
func (s *AllowIpAccessRuleForAddSharedConfigInput) SetRules(v []*string) *AllowIpAccessRuleForAddSharedConfigInput {
	s.Rules = v
	return s
}

type AllowRefererAccessRuleForAddSharedConfigInput struct {
	_ struct{} `type:"structure"`

	AllowEmpty *bool `type:"boolean"`

	CommonType *CommonTypeForAddSharedConfigInput `type:"structure"`
}

// String returns the string representation
func (s AllowRefererAccessRuleForAddSharedConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AllowRefererAccessRuleForAddSharedConfigInput) GoString() string {
	return s.String()
}

// SetAllowEmpty sets the AllowEmpty field's value.
func (s *AllowRefererAccessRuleForAddSharedConfigInput) SetAllowEmpty(v bool) *AllowRefererAccessRuleForAddSharedConfigInput {
	s.AllowEmpty = &v
	return s
}

// SetCommonType sets the CommonType field's value.
func (s *AllowRefererAccessRuleForAddSharedConfigInput) SetCommonType(v *CommonTypeForAddSharedConfigInput) *AllowRefererAccessRuleForAddSharedConfigInput {
	s.CommonType = v
	return s
}

type CommonMatchListForAddSharedConfigInput struct {
	_ struct{} `type:"structure"`

	CommonType *CommonTypeForAddSharedConfigInput `type:"structure"`
}

// String returns the string representation
func (s CommonMatchListForAddSharedConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CommonMatchListForAddSharedConfigInput) GoString() string {
	return s.String()
}

// SetCommonType sets the CommonType field's value.
func (s *CommonMatchListForAddSharedConfigInput) SetCommonType(v *CommonTypeForAddSharedConfigInput) *CommonMatchListForAddSharedConfigInput {
	s.CommonType = v
	return s
}

type CommonTypeForAddSharedConfigInput struct {
	_ struct{} `type:"structure"`

	IgnoreCase *bool `type:"boolean"`

	Option *string `type:"string"`

	Rules []*string `type:"list"`
}

// String returns the string representation
func (s CommonTypeForAddSharedConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CommonTypeForAddSharedConfigInput) GoString() string {
	return s.String()
}

// SetIgnoreCase sets the IgnoreCase field's value.
func (s *CommonTypeForAddSharedConfigInput) SetIgnoreCase(v bool) *CommonTypeForAddSharedConfigInput {
	s.IgnoreCase = &v
	return s
}

// SetOption sets the Option field's value.
func (s *CommonTypeForAddSharedConfigInput) SetOption(v string) *CommonTypeForAddSharedConfigInput {
	s.Option = &v
	return s
}

// SetRules sets the Rules field's value.
func (s *CommonTypeForAddSharedConfigInput) SetRules(v []*string) *CommonTypeForAddSharedConfigInput {
	s.Rules = v
	return s
}

type DenyIpAccessRuleForAddSharedConfigInput struct {
	_ struct{} `type:"structure"`

	Option *string `type:"string"`

	Rules []*string `type:"list"`
}

// String returns the string representation
func (s DenyIpAccessRuleForAddSharedConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DenyIpAccessRuleForAddSharedConfigInput) GoString() string {
	return s.String()
}

// SetOption sets the Option field's value.
func (s *DenyIpAccessRuleForAddSharedConfigInput) SetOption(v string) *DenyIpAccessRuleForAddSharedConfigInput {
	s.Option = &v
	return s
}

// SetRules sets the Rules field's value.
func (s *DenyIpAccessRuleForAddSharedConfigInput) SetRules(v []*string) *DenyIpAccessRuleForAddSharedConfigInput {
	s.Rules = v
	return s
}

type DenyRefererAccessRuleForAddSharedConfigInput struct {
	_ struct{} `type:"structure"`

	AllowEmpty *bool `type:"boolean"`

	CommonType *CommonTypeForAddSharedConfigInput `type:"structure"`
}

// String returns the string representation
func (s DenyRefererAccessRuleForAddSharedConfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DenyRefererAccessRuleForAddSharedConfigInput) GoString() string {
	return s.String()
}

// SetAllowEmpty sets the AllowEmpty field's value.
func (s *DenyRefererAccessRuleForAddSharedConfigInput) SetAllowEmpty(v bool) *DenyRefererAccessRuleForAddSharedConfigInput {
	s.AllowEmpty = &v
	return s
}

// SetCommonType sets the CommonType field's value.
func (s *DenyRefererAccessRuleForAddSharedConfigInput) SetCommonType(v *CommonTypeForAddSharedConfigInput) *DenyRefererAccessRuleForAddSharedConfigInput {
	s.CommonType = v
	return s
}
