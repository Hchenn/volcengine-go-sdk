// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package emr

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteClusterUserGroupCommon = "DeleteClusterUserGroup"

// DeleteClusterUserGroupCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteClusterUserGroupCommon operation. The "output" return
// value will be populated with the DeleteClusterUserGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteClusterUserGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteClusterUserGroupCommon Send returns without error.
//
// See DeleteClusterUserGroupCommon for more information on using the DeleteClusterUserGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteClusterUserGroupCommonRequest method.
//    req, resp := client.DeleteClusterUserGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) DeleteClusterUserGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteClusterUserGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteClusterUserGroupCommon API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation DeleteClusterUserGroupCommon for usage and error information.
func (c *EMR) DeleteClusterUserGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteClusterUserGroupCommonRequest(input)
	return out, req.Send()
}

// DeleteClusterUserGroupCommonWithContext is the same as DeleteClusterUserGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteClusterUserGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) DeleteClusterUserGroupCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteClusterUserGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteClusterUserGroup = "DeleteClusterUserGroup"

// DeleteClusterUserGroupRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteClusterUserGroup operation. The "output" return
// value will be populated with the DeleteClusterUserGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteClusterUserGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteClusterUserGroupCommon Send returns without error.
//
// See DeleteClusterUserGroup for more information on using the DeleteClusterUserGroup
// API call, and error handling.
//
//    // Example sending a request using the DeleteClusterUserGroupRequest method.
//    req, resp := client.DeleteClusterUserGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) DeleteClusterUserGroupRequest(input *DeleteClusterUserGroupInput) (req *request.Request, output *DeleteClusterUserGroupOutput) {
	op := &request.Operation{
		Name:       opDeleteClusterUserGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteClusterUserGroupInput{}
	}

	output = &DeleteClusterUserGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteClusterUserGroup API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation DeleteClusterUserGroup for usage and error information.
func (c *EMR) DeleteClusterUserGroup(input *DeleteClusterUserGroupInput) (*DeleteClusterUserGroupOutput, error) {
	req, out := c.DeleteClusterUserGroupRequest(input)
	return out, req.Send()
}

// DeleteClusterUserGroupWithContext is the same as DeleteClusterUserGroup with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteClusterUserGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) DeleteClusterUserGroupWithContext(ctx volcengine.Context, input *DeleteClusterUserGroupInput, opts ...request.Option) (*DeleteClusterUserGroupOutput, error) {
	req, out := c.DeleteClusterUserGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteClusterUserGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ClusterId is a required field
	ClusterId *string `type:"string" json:",omitempty" required:"true"`

	// UserGroupName is a required field
	UserGroupName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteClusterUserGroupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteClusterUserGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteClusterUserGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteClusterUserGroupInput"}
	if s.ClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterId"))
	}
	if s.UserGroupName == nil {
		invalidParams.Add(request.NewErrParamRequired("UserGroupName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClusterId sets the ClusterId field's value.
func (s *DeleteClusterUserGroupInput) SetClusterId(v string) *DeleteClusterUserGroupInput {
	s.ClusterId = &v
	return s
}

// SetUserGroupName sets the UserGroupName field's value.
func (s *DeleteClusterUserGroupInput) SetUserGroupName(v string) *DeleteClusterUserGroupInput {
	s.UserGroupName = &v
	return s
}

type DeleteClusterUserGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteClusterUserGroupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteClusterUserGroupOutput) GoString() string {
	return s.String()
}
