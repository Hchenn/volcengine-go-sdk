// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package emr

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteNodeGroupCommon = "DeleteNodeGroup"

// DeleteNodeGroupCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteNodeGroupCommon operation. The "output" return
// value will be populated with the DeleteNodeGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNodeGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNodeGroupCommon Send returns without error.
//
// See DeleteNodeGroupCommon for more information on using the DeleteNodeGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteNodeGroupCommonRequest method.
//    req, resp := client.DeleteNodeGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) DeleteNodeGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteNodeGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteNodeGroupCommon API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation DeleteNodeGroupCommon for usage and error information.
func (c *EMR) DeleteNodeGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteNodeGroupCommonRequest(input)
	return out, req.Send()
}

// DeleteNodeGroupCommonWithContext is the same as DeleteNodeGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNodeGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) DeleteNodeGroupCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteNodeGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNodeGroup = "DeleteNodeGroup"

// DeleteNodeGroupRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteNodeGroup operation. The "output" return
// value will be populated with the DeleteNodeGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNodeGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNodeGroupCommon Send returns without error.
//
// See DeleteNodeGroup for more information on using the DeleteNodeGroup
// API call, and error handling.
//
//    // Example sending a request using the DeleteNodeGroupRequest method.
//    req, resp := client.DeleteNodeGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) DeleteNodeGroupRequest(input *DeleteNodeGroupInput) (req *request.Request, output *DeleteNodeGroupOutput) {
	op := &request.Operation{
		Name:       opDeleteNodeGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteNodeGroupInput{}
	}

	output = &DeleteNodeGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteNodeGroup API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation DeleteNodeGroup for usage and error information.
func (c *EMR) DeleteNodeGroup(input *DeleteNodeGroupInput) (*DeleteNodeGroupOutput, error) {
	req, out := c.DeleteNodeGroupRequest(input)
	return out, req.Send()
}

// DeleteNodeGroupWithContext is the same as DeleteNodeGroup with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNodeGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) DeleteNodeGroupWithContext(ctx volcengine.Context, input *DeleteNodeGroupInput, opts ...request.Option) (*DeleteNodeGroupOutput, error) {
	req, out := c.DeleteNodeGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteNodeGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClientToken *string `type:"string" json:",omitempty"`

	ClusterId *string `type:"string" json:",omitempty"`

	// NodeGroupId is a required field
	NodeGroupId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteNodeGroupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNodeGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteNodeGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteNodeGroupInput"}
	if s.NodeGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("NodeGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *DeleteNodeGroupInput) SetClientToken(v string) *DeleteNodeGroupInput {
	s.ClientToken = &v
	return s
}

// SetClusterId sets the ClusterId field's value.
func (s *DeleteNodeGroupInput) SetClusterId(v string) *DeleteNodeGroupInput {
	s.ClusterId = &v
	return s
}

// SetNodeGroupId sets the NodeGroupId field's value.
func (s *DeleteNodeGroupInput) SetNodeGroupId(v string) *DeleteNodeGroupInput {
	s.NodeGroupId = &v
	return s
}

type DeleteNodeGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ClusterId *string `type:"string" json:",omitempty"`

	OperationId *string `type:"string" json:",omitempty"`

	ResultData *ResultDataForDeleteNodeGroupOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DeleteNodeGroupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNodeGroupOutput) GoString() string {
	return s.String()
}

// SetClusterId sets the ClusterId field's value.
func (s *DeleteNodeGroupOutput) SetClusterId(v string) *DeleteNodeGroupOutput {
	s.ClusterId = &v
	return s
}

// SetOperationId sets the OperationId field's value.
func (s *DeleteNodeGroupOutput) SetOperationId(v string) *DeleteNodeGroupOutput {
	s.OperationId = &v
	return s
}

// SetResultData sets the ResultData field's value.
func (s *DeleteNodeGroupOutput) SetResultData(v *ResultDataForDeleteNodeGroupOutput) *DeleteNodeGroupOutput {
	s.ResultData = v
	return s
}

type ResultDataForDeleteNodeGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ResultDataForDeleteNodeGroupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResultDataForDeleteNodeGroupOutput) GoString() string {
	return s.String()
}
