// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package emr

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateNodeGroupChargeTypeCommon = "UpdateNodeGroupChargeType"

// UpdateNodeGroupChargeTypeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateNodeGroupChargeTypeCommon operation. The "output" return
// value will be populated with the UpdateNodeGroupChargeTypeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateNodeGroupChargeTypeCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateNodeGroupChargeTypeCommon Send returns without error.
//
// See UpdateNodeGroupChargeTypeCommon for more information on using the UpdateNodeGroupChargeTypeCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateNodeGroupChargeTypeCommonRequest method.
//    req, resp := client.UpdateNodeGroupChargeTypeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) UpdateNodeGroupChargeTypeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateNodeGroupChargeTypeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateNodeGroupChargeTypeCommon API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation UpdateNodeGroupChargeTypeCommon for usage and error information.
func (c *EMR) UpdateNodeGroupChargeTypeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateNodeGroupChargeTypeCommonRequest(input)
	return out, req.Send()
}

// UpdateNodeGroupChargeTypeCommonWithContext is the same as UpdateNodeGroupChargeTypeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateNodeGroupChargeTypeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) UpdateNodeGroupChargeTypeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateNodeGroupChargeTypeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateNodeGroupChargeType = "UpdateNodeGroupChargeType"

// UpdateNodeGroupChargeTypeRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateNodeGroupChargeType operation. The "output" return
// value will be populated with the UpdateNodeGroupChargeTypeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateNodeGroupChargeTypeCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateNodeGroupChargeTypeCommon Send returns without error.
//
// See UpdateNodeGroupChargeType for more information on using the UpdateNodeGroupChargeType
// API call, and error handling.
//
//    // Example sending a request using the UpdateNodeGroupChargeTypeRequest method.
//    req, resp := client.UpdateNodeGroupChargeTypeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) UpdateNodeGroupChargeTypeRequest(input *UpdateNodeGroupChargeTypeInput) (req *request.Request, output *UpdateNodeGroupChargeTypeOutput) {
	op := &request.Operation{
		Name:       opUpdateNodeGroupChargeType,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateNodeGroupChargeTypeInput{}
	}

	output = &UpdateNodeGroupChargeTypeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateNodeGroupChargeType API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation UpdateNodeGroupChargeType for usage and error information.
func (c *EMR) UpdateNodeGroupChargeType(input *UpdateNodeGroupChargeTypeInput) (*UpdateNodeGroupChargeTypeOutput, error) {
	req, out := c.UpdateNodeGroupChargeTypeRequest(input)
	return out, req.Send()
}

// UpdateNodeGroupChargeTypeWithContext is the same as UpdateNodeGroupChargeType with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateNodeGroupChargeType for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) UpdateNodeGroupChargeTypeWithContext(ctx volcengine.Context, input *UpdateNodeGroupChargeTypeInput, opts ...request.Option) (*UpdateNodeGroupChargeTypeOutput, error) {
	req, out := c.UpdateNodeGroupChargeTypeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ChargePreConfigForUpdateNodeGroupChargeTypeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AutoRenew *bool `type:"boolean" json:",omitempty"`

	AutoRenewPeriod *int32 `type:"int32" json:",omitempty"`

	AutoRenewPeriodUnit *string `type:"string" json:",omitempty" enum:"EnumOfAutoRenewPeriodUnitForUpdateNodeGroupChargeTypeInput"`

	ChargePeriod *int32 `type:"int32" json:",omitempty"`

	ChargePeriodUnit *string `type:"string" json:",omitempty" enum:"EnumOfChargePeriodUnitForUpdateNodeGroupChargeTypeInput"`

	ChargeType *string `type:"string" json:",omitempty" enum:"EnumOfChargeTypeForUpdateNodeGroupChargeTypeInput"`
}

// String returns the string representation
func (s ChargePreConfigForUpdateNodeGroupChargeTypeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ChargePreConfigForUpdateNodeGroupChargeTypeInput) GoString() string {
	return s.String()
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *ChargePreConfigForUpdateNodeGroupChargeTypeInput) SetAutoRenew(v bool) *ChargePreConfigForUpdateNodeGroupChargeTypeInput {
	s.AutoRenew = &v
	return s
}

// SetAutoRenewPeriod sets the AutoRenewPeriod field's value.
func (s *ChargePreConfigForUpdateNodeGroupChargeTypeInput) SetAutoRenewPeriod(v int32) *ChargePreConfigForUpdateNodeGroupChargeTypeInput {
	s.AutoRenewPeriod = &v
	return s
}

// SetAutoRenewPeriodUnit sets the AutoRenewPeriodUnit field's value.
func (s *ChargePreConfigForUpdateNodeGroupChargeTypeInput) SetAutoRenewPeriodUnit(v string) *ChargePreConfigForUpdateNodeGroupChargeTypeInput {
	s.AutoRenewPeriodUnit = &v
	return s
}

// SetChargePeriod sets the ChargePeriod field's value.
func (s *ChargePreConfigForUpdateNodeGroupChargeTypeInput) SetChargePeriod(v int32) *ChargePreConfigForUpdateNodeGroupChargeTypeInput {
	s.ChargePeriod = &v
	return s
}

// SetChargePeriodUnit sets the ChargePeriodUnit field's value.
func (s *ChargePreConfigForUpdateNodeGroupChargeTypeInput) SetChargePeriodUnit(v string) *ChargePreConfigForUpdateNodeGroupChargeTypeInput {
	s.ChargePeriodUnit = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *ChargePreConfigForUpdateNodeGroupChargeTypeInput) SetChargeType(v string) *ChargePreConfigForUpdateNodeGroupChargeTypeInput {
	s.ChargeType = &v
	return s
}

type ResultDataForUpdateNodeGroupChargeTypeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ResultDataForUpdateNodeGroupChargeTypeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResultDataForUpdateNodeGroupChargeTypeOutput) GoString() string {
	return s.String()
}

type UpdateNodeGroupChargeTypeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ChargePreConfig *ChargePreConfigForUpdateNodeGroupChargeTypeInput `type:"structure" json:",omitempty"`

	// ChargeType is a required field
	ChargeType *string `type:"string" json:",omitempty" required:"true"`

	ClientToken *string `type:"string" json:",omitempty"`

	// ClusterId is a required field
	ClusterId *string `type:"string" json:",omitempty" required:"true"`

	NodeGroupIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateNodeGroupChargeTypeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateNodeGroupChargeTypeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateNodeGroupChargeTypeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateNodeGroupChargeTypeInput"}
	if s.ChargeType == nil {
		invalidParams.Add(request.NewErrParamRequired("ChargeType"))
	}
	if s.ClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetChargePreConfig sets the ChargePreConfig field's value.
func (s *UpdateNodeGroupChargeTypeInput) SetChargePreConfig(v *ChargePreConfigForUpdateNodeGroupChargeTypeInput) *UpdateNodeGroupChargeTypeInput {
	s.ChargePreConfig = v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *UpdateNodeGroupChargeTypeInput) SetChargeType(v string) *UpdateNodeGroupChargeTypeInput {
	s.ChargeType = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *UpdateNodeGroupChargeTypeInput) SetClientToken(v string) *UpdateNodeGroupChargeTypeInput {
	s.ClientToken = &v
	return s
}

// SetClusterId sets the ClusterId field's value.
func (s *UpdateNodeGroupChargeTypeInput) SetClusterId(v string) *UpdateNodeGroupChargeTypeInput {
	s.ClusterId = &v
	return s
}

// SetNodeGroupIds sets the NodeGroupIds field's value.
func (s *UpdateNodeGroupChargeTypeInput) SetNodeGroupIds(v []*string) *UpdateNodeGroupChargeTypeInput {
	s.NodeGroupIds = v
	return s
}

type UpdateNodeGroupChargeTypeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ClusterId *string `type:"string" json:",omitempty"`

	OperationId *string `type:"string" json:",omitempty"`

	ResultData *ResultDataForUpdateNodeGroupChargeTypeOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s UpdateNodeGroupChargeTypeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateNodeGroupChargeTypeOutput) GoString() string {
	return s.String()
}

// SetClusterId sets the ClusterId field's value.
func (s *UpdateNodeGroupChargeTypeOutput) SetClusterId(v string) *UpdateNodeGroupChargeTypeOutput {
	s.ClusterId = &v
	return s
}

// SetOperationId sets the OperationId field's value.
func (s *UpdateNodeGroupChargeTypeOutput) SetOperationId(v string) *UpdateNodeGroupChargeTypeOutput {
	s.OperationId = &v
	return s
}

// SetResultData sets the ResultData field's value.
func (s *UpdateNodeGroupChargeTypeOutput) SetResultData(v *ResultDataForUpdateNodeGroupChargeTypeOutput) *UpdateNodeGroupChargeTypeOutput {
	s.ResultData = v
	return s
}

const (
	// EnumOfAutoRenewPeriodUnitForUpdateNodeGroupChargeTypeInputMonth is a EnumOfAutoRenewPeriodUnitForUpdateNodeGroupChargeTypeInput enum value
	EnumOfAutoRenewPeriodUnitForUpdateNodeGroupChargeTypeInputMonth = "Month"

	// EnumOfAutoRenewPeriodUnitForUpdateNodeGroupChargeTypeInputYear is a EnumOfAutoRenewPeriodUnitForUpdateNodeGroupChargeTypeInput enum value
	EnumOfAutoRenewPeriodUnitForUpdateNodeGroupChargeTypeInputYear = "Year"
)

const (
	// EnumOfChargePeriodUnitForUpdateNodeGroupChargeTypeInputMonth is a EnumOfChargePeriodUnitForUpdateNodeGroupChargeTypeInput enum value
	EnumOfChargePeriodUnitForUpdateNodeGroupChargeTypeInputMonth = "Month"

	// EnumOfChargePeriodUnitForUpdateNodeGroupChargeTypeInputYear is a EnumOfChargePeriodUnitForUpdateNodeGroupChargeTypeInput enum value
	EnumOfChargePeriodUnitForUpdateNodeGroupChargeTypeInputYear = "Year"
)

const (
	// EnumOfChargeTypeForUpdateNodeGroupChargeTypeInputPre is a EnumOfChargeTypeForUpdateNodeGroupChargeTypeInput enum value
	EnumOfChargeTypeForUpdateNodeGroupChargeTypeInputPre = "PRE"

	// EnumOfChargeTypeForUpdateNodeGroupChargeTypeInputPost is a EnumOfChargeTypeForUpdateNodeGroupChargeTypeInput enum value
	EnumOfChargeTypeForUpdateNodeGroupChargeTypeInputPost = "POST"
)
