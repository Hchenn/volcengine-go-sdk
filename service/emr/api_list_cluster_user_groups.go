// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package emr

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListClusterUserGroupsCommon = "ListClusterUserGroups"

// ListClusterUserGroupsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListClusterUserGroupsCommon operation. The "output" return
// value will be populated with the ListClusterUserGroupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListClusterUserGroupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListClusterUserGroupsCommon Send returns without error.
//
// See ListClusterUserGroupsCommon for more information on using the ListClusterUserGroupsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListClusterUserGroupsCommonRequest method.
//    req, resp := client.ListClusterUserGroupsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) ListClusterUserGroupsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListClusterUserGroupsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListClusterUserGroupsCommon API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation ListClusterUserGroupsCommon for usage and error information.
func (c *EMR) ListClusterUserGroupsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListClusterUserGroupsCommonRequest(input)
	return out, req.Send()
}

// ListClusterUserGroupsCommonWithContext is the same as ListClusterUserGroupsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListClusterUserGroupsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) ListClusterUserGroupsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListClusterUserGroupsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListClusterUserGroups = "ListClusterUserGroups"

// ListClusterUserGroupsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListClusterUserGroups operation. The "output" return
// value will be populated with the ListClusterUserGroupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListClusterUserGroupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListClusterUserGroupsCommon Send returns without error.
//
// See ListClusterUserGroups for more information on using the ListClusterUserGroups
// API call, and error handling.
//
//    // Example sending a request using the ListClusterUserGroupsRequest method.
//    req, resp := client.ListClusterUserGroupsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) ListClusterUserGroupsRequest(input *ListClusterUserGroupsInput) (req *request.Request, output *ListClusterUserGroupsOutput) {
	op := &request.Operation{
		Name:       opListClusterUserGroups,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListClusterUserGroupsInput{}
	}

	output = &ListClusterUserGroupsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListClusterUserGroups API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation ListClusterUserGroups for usage and error information.
func (c *EMR) ListClusterUserGroups(input *ListClusterUserGroupsInput) (*ListClusterUserGroupsOutput, error) {
	req, out := c.ListClusterUserGroupsRequest(input)
	return out, req.Send()
}

// ListClusterUserGroupsWithContext is the same as ListClusterUserGroups with the addition of
// the ability to pass a context and additional request options.
//
// See ListClusterUserGroups for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) ListClusterUserGroupsWithContext(ctx volcengine.Context, input *ListClusterUserGroupsInput, opts ...request.Option) (*ListClusterUserGroupsOutput, error) {
	req, out := c.ListClusterUserGroupsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListClusterUserGroupsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClusterId *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	UserGroupName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListClusterUserGroupsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListClusterUserGroupsOutput) GoString() string {
	return s.String()
}

// SetClusterId sets the ClusterId field's value.
func (s *ItemForListClusterUserGroupsOutput) SetClusterId(v string) *ItemForListClusterUserGroupsOutput {
	s.ClusterId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ItemForListClusterUserGroupsOutput) SetDescription(v string) *ItemForListClusterUserGroupsOutput {
	s.Description = &v
	return s
}

// SetUserGroupName sets the UserGroupName field's value.
func (s *ItemForListClusterUserGroupsOutput) SetUserGroupName(v string) *ItemForListClusterUserGroupsOutput {
	s.UserGroupName = &v
	return s
}

type ListClusterUserGroupsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ClusterId is a required field
	ClusterId *string `type:"string" json:",omitempty" required:"true"`

	Keyword *string `type:"string" json:",omitempty"`

	UserGroupName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListClusterUserGroupsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListClusterUserGroupsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListClusterUserGroupsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListClusterUserGroupsInput"}
	if s.ClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClusterId sets the ClusterId field's value.
func (s *ListClusterUserGroupsInput) SetClusterId(v string) *ListClusterUserGroupsInput {
	s.ClusterId = &v
	return s
}

// SetKeyword sets the Keyword field's value.
func (s *ListClusterUserGroupsInput) SetKeyword(v string) *ListClusterUserGroupsInput {
	s.Keyword = &v
	return s
}

// SetUserGroupName sets the UserGroupName field's value.
func (s *ListClusterUserGroupsInput) SetUserGroupName(v string) *ListClusterUserGroupsInput {
	s.UserGroupName = &v
	return s
}

type ListClusterUserGroupsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListClusterUserGroupsOutput `type:"list" json:",omitempty"`

	MaxResults *int32 `type:"int32" json:",omitempty"`

	NextToken *string `type:"string" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListClusterUserGroupsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListClusterUserGroupsOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListClusterUserGroupsOutput) SetItems(v []*ItemForListClusterUserGroupsOutput) *ListClusterUserGroupsOutput {
	s.Items = v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListClusterUserGroupsOutput) SetMaxResults(v int32) *ListClusterUserGroupsOutput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListClusterUserGroupsOutput) SetNextToken(v string) *ListClusterUserGroupsOutput {
	s.NextToken = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListClusterUserGroupsOutput) SetTotalCount(v int32) *ListClusterUserGroupsOutput {
	s.TotalCount = &v
	return s
}
