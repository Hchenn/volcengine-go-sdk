// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package emr

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListApplicationConfigHistoriesCommon = "ListApplicationConfigHistories"

// ListApplicationConfigHistoriesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListApplicationConfigHistoriesCommon operation. The "output" return
// value will be populated with the ListApplicationConfigHistoriesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListApplicationConfigHistoriesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListApplicationConfigHistoriesCommon Send returns without error.
//
// See ListApplicationConfigHistoriesCommon for more information on using the ListApplicationConfigHistoriesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListApplicationConfigHistoriesCommonRequest method.
//    req, resp := client.ListApplicationConfigHistoriesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) ListApplicationConfigHistoriesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListApplicationConfigHistoriesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListApplicationConfigHistoriesCommon API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation ListApplicationConfigHistoriesCommon for usage and error information.
func (c *EMR) ListApplicationConfigHistoriesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListApplicationConfigHistoriesCommonRequest(input)
	return out, req.Send()
}

// ListApplicationConfigHistoriesCommonWithContext is the same as ListApplicationConfigHistoriesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListApplicationConfigHistoriesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) ListApplicationConfigHistoriesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListApplicationConfigHistoriesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListApplicationConfigHistories = "ListApplicationConfigHistories"

// ListApplicationConfigHistoriesRequest generates a "volcengine/request.Request" representing the
// client's request for the ListApplicationConfigHistories operation. The "output" return
// value will be populated with the ListApplicationConfigHistoriesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListApplicationConfigHistoriesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListApplicationConfigHistoriesCommon Send returns without error.
//
// See ListApplicationConfigHistories for more information on using the ListApplicationConfigHistories
// API call, and error handling.
//
//    // Example sending a request using the ListApplicationConfigHistoriesRequest method.
//    req, resp := client.ListApplicationConfigHistoriesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) ListApplicationConfigHistoriesRequest(input *ListApplicationConfigHistoriesInput) (req *request.Request, output *ListApplicationConfigHistoriesOutput) {
	op := &request.Operation{
		Name:       opListApplicationConfigHistories,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListApplicationConfigHistoriesInput{}
	}

	output = &ListApplicationConfigHistoriesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListApplicationConfigHistories API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation ListApplicationConfigHistories for usage and error information.
func (c *EMR) ListApplicationConfigHistories(input *ListApplicationConfigHistoriesInput) (*ListApplicationConfigHistoriesOutput, error) {
	req, out := c.ListApplicationConfigHistoriesRequest(input)
	return out, req.Send()
}

// ListApplicationConfigHistoriesWithContext is the same as ListApplicationConfigHistories with the addition of
// the ability to pass a context and additional request options.
//
// See ListApplicationConfigHistories for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) ListApplicationConfigHistoriesWithContext(ctx volcengine.Context, input *ListApplicationConfigHistoriesInput, opts ...request.Option) (*ListApplicationConfigHistoriesOutput, error) {
	req, out := c.ListApplicationConfigHistoriesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EffectiveScopeForListApplicationConfigHistoriesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ComponentNames []*string `type:"list" json:",omitempty"`

	EffectiveType *string `type:"string" json:",omitempty" enum:"EnumOfEffectiveTypeForListApplicationConfigHistoriesOutput"`

	NodeGroupIds []*string `type:"list" json:",omitempty"`

	NodeGroupNames []*string `type:"list" json:",omitempty"`

	NodeGroupTypes []*string `type:"list" json:",omitempty"`

	NodeIds []*string `type:"list" json:",omitempty"`

	NodeNames []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s EffectiveScopeForListApplicationConfigHistoriesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EffectiveScopeForListApplicationConfigHistoriesOutput) GoString() string {
	return s.String()
}

// SetComponentNames sets the ComponentNames field's value.
func (s *EffectiveScopeForListApplicationConfigHistoriesOutput) SetComponentNames(v []*string) *EffectiveScopeForListApplicationConfigHistoriesOutput {
	s.ComponentNames = v
	return s
}

// SetEffectiveType sets the EffectiveType field's value.
func (s *EffectiveScopeForListApplicationConfigHistoriesOutput) SetEffectiveType(v string) *EffectiveScopeForListApplicationConfigHistoriesOutput {
	s.EffectiveType = &v
	return s
}

// SetNodeGroupIds sets the NodeGroupIds field's value.
func (s *EffectiveScopeForListApplicationConfigHistoriesOutput) SetNodeGroupIds(v []*string) *EffectiveScopeForListApplicationConfigHistoriesOutput {
	s.NodeGroupIds = v
	return s
}

// SetNodeGroupNames sets the NodeGroupNames field's value.
func (s *EffectiveScopeForListApplicationConfigHistoriesOutput) SetNodeGroupNames(v []*string) *EffectiveScopeForListApplicationConfigHistoriesOutput {
	s.NodeGroupNames = v
	return s
}

// SetNodeGroupTypes sets the NodeGroupTypes field's value.
func (s *EffectiveScopeForListApplicationConfigHistoriesOutput) SetNodeGroupTypes(v []*string) *EffectiveScopeForListApplicationConfigHistoriesOutput {
	s.NodeGroupTypes = v
	return s
}

// SetNodeIds sets the NodeIds field's value.
func (s *EffectiveScopeForListApplicationConfigHistoriesOutput) SetNodeIds(v []*string) *EffectiveScopeForListApplicationConfigHistoriesOutput {
	s.NodeIds = v
	return s
}

// SetNodeNames sets the NodeNames field's value.
func (s *EffectiveScopeForListApplicationConfigHistoriesOutput) SetNodeNames(v []*string) *EffectiveScopeForListApplicationConfigHistoriesOutput {
	s.NodeNames = v
	return s
}

type ItemForListApplicationConfigHistoriesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ApplicationName *string `type:"string" json:",omitempty"`

	BeforeConfigItemValue *string `type:"string" json:",omitempty"`

	ConfigFileName *string `type:"string" json:",omitempty"`

	ConfigItemKey *string `type:"string" json:",omitempty"`

	ConfigItemValue *string `type:"string" json:",omitempty"`

	ConfigVersion *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	EffectiveScope *EffectiveScopeForListApplicationConfigHistoriesOutput `type:"structure" json:",omitempty"`

	OperatorId *string `type:"string" json:",omitempty"`

	Remark *string `type:"string" json:",omitempty"`

	UpdateTime *int64 `type:"int64" json:"updateTime,omitempty"`
}

// String returns the string representation
func (s ItemForListApplicationConfigHistoriesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListApplicationConfigHistoriesOutput) GoString() string {
	return s.String()
}

// SetApplicationName sets the ApplicationName field's value.
func (s *ItemForListApplicationConfigHistoriesOutput) SetApplicationName(v string) *ItemForListApplicationConfigHistoriesOutput {
	s.ApplicationName = &v
	return s
}

// SetBeforeConfigItemValue sets the BeforeConfigItemValue field's value.
func (s *ItemForListApplicationConfigHistoriesOutput) SetBeforeConfigItemValue(v string) *ItemForListApplicationConfigHistoriesOutput {
	s.BeforeConfigItemValue = &v
	return s
}

// SetConfigFileName sets the ConfigFileName field's value.
func (s *ItemForListApplicationConfigHistoriesOutput) SetConfigFileName(v string) *ItemForListApplicationConfigHistoriesOutput {
	s.ConfigFileName = &v
	return s
}

// SetConfigItemKey sets the ConfigItemKey field's value.
func (s *ItemForListApplicationConfigHistoriesOutput) SetConfigItemKey(v string) *ItemForListApplicationConfigHistoriesOutput {
	s.ConfigItemKey = &v
	return s
}

// SetConfigItemValue sets the ConfigItemValue field's value.
func (s *ItemForListApplicationConfigHistoriesOutput) SetConfigItemValue(v string) *ItemForListApplicationConfigHistoriesOutput {
	s.ConfigItemValue = &v
	return s
}

// SetConfigVersion sets the ConfigVersion field's value.
func (s *ItemForListApplicationConfigHistoriesOutput) SetConfigVersion(v string) *ItemForListApplicationConfigHistoriesOutput {
	s.ConfigVersion = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ItemForListApplicationConfigHistoriesOutput) SetDescription(v string) *ItemForListApplicationConfigHistoriesOutput {
	s.Description = &v
	return s
}

// SetEffectiveScope sets the EffectiveScope field's value.
func (s *ItemForListApplicationConfigHistoriesOutput) SetEffectiveScope(v *EffectiveScopeForListApplicationConfigHistoriesOutput) *ItemForListApplicationConfigHistoriesOutput {
	s.EffectiveScope = v
	return s
}

// SetOperatorId sets the OperatorId field's value.
func (s *ItemForListApplicationConfigHistoriesOutput) SetOperatorId(v string) *ItemForListApplicationConfigHistoriesOutput {
	s.OperatorId = &v
	return s
}

// SetRemark sets the Remark field's value.
func (s *ItemForListApplicationConfigHistoriesOutput) SetRemark(v string) *ItemForListApplicationConfigHistoriesOutput {
	s.Remark = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *ItemForListApplicationConfigHistoriesOutput) SetUpdateTime(v int64) *ItemForListApplicationConfigHistoriesOutput {
	s.UpdateTime = &v
	return s
}

type ListApplicationConfigHistoriesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ApplicationName is a required field
	ApplicationName *string `type:"string" json:",omitempty" required:"true"`

	// ClusterId is a required field
	ClusterId *string `type:"string" json:",omitempty" required:"true"`

	ConfigFileName *string `type:"string" json:",omitempty"`

	ConfigItemKey *string `type:"string" json:",omitempty"`

	ConfigVersion *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListApplicationConfigHistoriesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListApplicationConfigHistoriesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListApplicationConfigHistoriesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListApplicationConfigHistoriesInput"}
	if s.ApplicationName == nil {
		invalidParams.Add(request.NewErrParamRequired("ApplicationName"))
	}
	if s.ClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetApplicationName sets the ApplicationName field's value.
func (s *ListApplicationConfigHistoriesInput) SetApplicationName(v string) *ListApplicationConfigHistoriesInput {
	s.ApplicationName = &v
	return s
}

// SetClusterId sets the ClusterId field's value.
func (s *ListApplicationConfigHistoriesInput) SetClusterId(v string) *ListApplicationConfigHistoriesInput {
	s.ClusterId = &v
	return s
}

// SetConfigFileName sets the ConfigFileName field's value.
func (s *ListApplicationConfigHistoriesInput) SetConfigFileName(v string) *ListApplicationConfigHistoriesInput {
	s.ConfigFileName = &v
	return s
}

// SetConfigItemKey sets the ConfigItemKey field's value.
func (s *ListApplicationConfigHistoriesInput) SetConfigItemKey(v string) *ListApplicationConfigHistoriesInput {
	s.ConfigItemKey = &v
	return s
}

// SetConfigVersion sets the ConfigVersion field's value.
func (s *ListApplicationConfigHistoriesInput) SetConfigVersion(v string) *ListApplicationConfigHistoriesInput {
	s.ConfigVersion = &v
	return s
}

type ListApplicationConfigHistoriesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListApplicationConfigHistoriesOutput `type:"list" json:",omitempty"`

	MaxResults *int32 `type:"int32" json:",omitempty"`

	NextToken *string `type:"string" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListApplicationConfigHistoriesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListApplicationConfigHistoriesOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListApplicationConfigHistoriesOutput) SetItems(v []*ItemForListApplicationConfigHistoriesOutput) *ListApplicationConfigHistoriesOutput {
	s.Items = v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListApplicationConfigHistoriesOutput) SetMaxResults(v int32) *ListApplicationConfigHistoriesOutput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListApplicationConfigHistoriesOutput) SetNextToken(v string) *ListApplicationConfigHistoriesOutput {
	s.NextToken = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListApplicationConfigHistoriesOutput) SetTotalCount(v int32) *ListApplicationConfigHistoriesOutput {
	s.TotalCount = &v
	return s
}

const (
	// EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputCluster is a EnumOfEffectiveTypeForListApplicationConfigHistoriesOutput enum value
	EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputCluster = "CLUSTER"

	// EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputNodeGroupName is a EnumOfEffectiveTypeForListApplicationConfigHistoriesOutput enum value
	EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputNodeGroupName = "NODE_GROUP_NAME"

	// EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputNodeGroupId is a EnumOfEffectiveTypeForListApplicationConfigHistoriesOutput enum value
	EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputNodeGroupId = "NODE_GROUP_ID"

	// EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputNodeGroupType is a EnumOfEffectiveTypeForListApplicationConfigHistoriesOutput enum value
	EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputNodeGroupType = "NODE_GROUP_TYPE"

	// EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputNodeName is a EnumOfEffectiveTypeForListApplicationConfigHistoriesOutput enum value
	EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputNodeName = "NODE_NAME"

	// EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputNodeId is a EnumOfEffectiveTypeForListApplicationConfigHistoriesOutput enum value
	EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputNodeId = "NODE_ID"

	// EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputComponentName is a EnumOfEffectiveTypeForListApplicationConfigHistoriesOutput enum value
	EnumOfEffectiveTypeForListApplicationConfigHistoriesOutputComponentName = "COMPONENT_NAME"
)
