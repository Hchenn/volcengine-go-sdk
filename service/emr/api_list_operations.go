// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package emr

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListOperationsCommon = "ListOperations"

// ListOperationsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListOperationsCommon operation. The "output" return
// value will be populated with the ListOperationsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListOperationsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListOperationsCommon Send returns without error.
//
// See ListOperationsCommon for more information on using the ListOperationsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListOperationsCommonRequest method.
//    req, resp := client.ListOperationsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) ListOperationsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListOperationsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListOperationsCommon API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation ListOperationsCommon for usage and error information.
func (c *EMR) ListOperationsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListOperationsCommonRequest(input)
	return out, req.Send()
}

// ListOperationsCommonWithContext is the same as ListOperationsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListOperationsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) ListOperationsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListOperationsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListOperations = "ListOperations"

// ListOperationsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListOperations operation. The "output" return
// value will be populated with the ListOperationsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListOperationsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListOperationsCommon Send returns without error.
//
// See ListOperations for more information on using the ListOperations
// API call, and error handling.
//
//    // Example sending a request using the ListOperationsRequest method.
//    req, resp := client.ListOperationsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) ListOperationsRequest(input *ListOperationsInput) (req *request.Request, output *ListOperationsOutput) {
	op := &request.Operation{
		Name:       opListOperations,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListOperationsInput{}
	}

	output = &ListOperationsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListOperations API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation ListOperations for usage and error information.
func (c *EMR) ListOperations(input *ListOperationsInput) (*ListOperationsOutput, error) {
	req, out := c.ListOperationsRequest(input)
	return out, req.Send()
}

// ListOperationsWithContext is the same as ListOperations with the addition of
// the ability to pass a context and additional request options.
//
// See ListOperations for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) ListOperationsWithContext(ctx volcengine.Context, input *ListOperationsInput, opts ...request.Option) (*ListOperationsOutput, error) {
	req, out := c.ListOperationsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListOperationsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClusterId *string `type:"string" json:",omitempty"`

	CreateTime *int64 `type:"int64" json:",omitempty"`

	EndTime *int64 `type:"int64" json:",omitempty"`

	OperateId *string `type:"string" json:",omitempty"`

	OperateName *string `type:"string" json:",omitempty"`

	OperateState *string `type:"string" json:",omitempty"`

	OperatorId *string `type:"string" json:",omitempty"`

	OperatorName *string `type:"string" json:",omitempty"`

	StartTime *int64 `type:"int64" json:",omitempty"`

	UpdateTime *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListOperationsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListOperationsOutput) GoString() string {
	return s.String()
}

// SetClusterId sets the ClusterId field's value.
func (s *ItemForListOperationsOutput) SetClusterId(v string) *ItemForListOperationsOutput {
	s.ClusterId = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *ItemForListOperationsOutput) SetCreateTime(v int64) *ItemForListOperationsOutput {
	s.CreateTime = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *ItemForListOperationsOutput) SetEndTime(v int64) *ItemForListOperationsOutput {
	s.EndTime = &v
	return s
}

// SetOperateId sets the OperateId field's value.
func (s *ItemForListOperationsOutput) SetOperateId(v string) *ItemForListOperationsOutput {
	s.OperateId = &v
	return s
}

// SetOperateName sets the OperateName field's value.
func (s *ItemForListOperationsOutput) SetOperateName(v string) *ItemForListOperationsOutput {
	s.OperateName = &v
	return s
}

// SetOperateState sets the OperateState field's value.
func (s *ItemForListOperationsOutput) SetOperateState(v string) *ItemForListOperationsOutput {
	s.OperateState = &v
	return s
}

// SetOperatorId sets the OperatorId field's value.
func (s *ItemForListOperationsOutput) SetOperatorId(v string) *ItemForListOperationsOutput {
	s.OperatorId = &v
	return s
}

// SetOperatorName sets the OperatorName field's value.
func (s *ItemForListOperationsOutput) SetOperatorName(v string) *ItemForListOperationsOutput {
	s.OperatorName = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *ItemForListOperationsOutput) SetStartTime(v int64) *ItemForListOperationsOutput {
	s.StartTime = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *ItemForListOperationsOutput) SetUpdateTime(v int64) *ItemForListOperationsOutput {
	s.UpdateTime = &v
	return s
}

type ListOperationsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClusterId *string `type:"string" json:",omitempty"`

	ClusterIds []*string `type:"list" json:",omitempty"`

	CreateTimeAfter *int64 `type:"int64" json:",omitempty"`

	CreateTimeBefore *int64 `type:"int64" json:",omitempty"`

	OperateIds []*string `type:"list" json:",omitempty"`

	OperateName *string `type:"string" json:",omitempty"`

	OperatorName *string `type:"string" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	Tags []*TagForListOperationsInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListOperationsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListOperationsInput) GoString() string {
	return s.String()
}

// SetClusterId sets the ClusterId field's value.
func (s *ListOperationsInput) SetClusterId(v string) *ListOperationsInput {
	s.ClusterId = &v
	return s
}

// SetClusterIds sets the ClusterIds field's value.
func (s *ListOperationsInput) SetClusterIds(v []*string) *ListOperationsInput {
	s.ClusterIds = v
	return s
}

// SetCreateTimeAfter sets the CreateTimeAfter field's value.
func (s *ListOperationsInput) SetCreateTimeAfter(v int64) *ListOperationsInput {
	s.CreateTimeAfter = &v
	return s
}

// SetCreateTimeBefore sets the CreateTimeBefore field's value.
func (s *ListOperationsInput) SetCreateTimeBefore(v int64) *ListOperationsInput {
	s.CreateTimeBefore = &v
	return s
}

// SetOperateIds sets the OperateIds field's value.
func (s *ListOperationsInput) SetOperateIds(v []*string) *ListOperationsInput {
	s.OperateIds = v
	return s
}

// SetOperateName sets the OperateName field's value.
func (s *ListOperationsInput) SetOperateName(v string) *ListOperationsInput {
	s.OperateName = &v
	return s
}

// SetOperatorName sets the OperatorName field's value.
func (s *ListOperationsInput) SetOperatorName(v string) *ListOperationsInput {
	s.OperatorName = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *ListOperationsInput) SetProjectName(v string) *ListOperationsInput {
	s.ProjectName = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *ListOperationsInput) SetTags(v []*TagForListOperationsInput) *ListOperationsInput {
	s.Tags = v
	return s
}

type ListOperationsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListOperationsOutput `type:"list" json:",omitempty"`

	MaxResults *int32 `type:"int32" json:",omitempty"`

	NextToken *string `type:"string" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListOperationsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListOperationsOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListOperationsOutput) SetItems(v []*ItemForListOperationsOutput) *ListOperationsOutput {
	s.Items = v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListOperationsOutput) SetMaxResults(v int32) *ListOperationsOutput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListOperationsOutput) SetNextToken(v string) *ListOperationsOutput {
	s.NextToken = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListOperationsOutput) SetTotalCount(v int32) *ListOperationsOutput {
	s.TotalCount = &v
	return s
}

type TagForListOperationsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TagForListOperationsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForListOperationsInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForListOperationsInput) SetKey(v string) *TagForListOperationsInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForListOperationsInput) SetValue(v string) *TagForListOperationsInput {
	s.Value = &v
	return s
}
