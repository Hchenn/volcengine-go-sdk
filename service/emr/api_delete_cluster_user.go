// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package emr

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteClusterUserCommon = "DeleteClusterUser"

// DeleteClusterUserCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteClusterUserCommon operation. The "output" return
// value will be populated with the DeleteClusterUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteClusterUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteClusterUserCommon Send returns without error.
//
// See DeleteClusterUserCommon for more information on using the DeleteClusterUserCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteClusterUserCommonRequest method.
//    req, resp := client.DeleteClusterUserCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) DeleteClusterUserCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteClusterUserCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteClusterUserCommon API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation DeleteClusterUserCommon for usage and error information.
func (c *EMR) DeleteClusterUserCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteClusterUserCommonRequest(input)
	return out, req.Send()
}

// DeleteClusterUserCommonWithContext is the same as DeleteClusterUserCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteClusterUserCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) DeleteClusterUserCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteClusterUserCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteClusterUser = "DeleteClusterUser"

// DeleteClusterUserRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteClusterUser operation. The "output" return
// value will be populated with the DeleteClusterUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteClusterUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteClusterUserCommon Send returns without error.
//
// See DeleteClusterUser for more information on using the DeleteClusterUser
// API call, and error handling.
//
//    // Example sending a request using the DeleteClusterUserRequest method.
//    req, resp := client.DeleteClusterUserRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) DeleteClusterUserRequest(input *DeleteClusterUserInput) (req *request.Request, output *DeleteClusterUserOutput) {
	op := &request.Operation{
		Name:       opDeleteClusterUser,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteClusterUserInput{}
	}

	output = &DeleteClusterUserOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteClusterUser API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation DeleteClusterUser for usage and error information.
func (c *EMR) DeleteClusterUser(input *DeleteClusterUserInput) (*DeleteClusterUserOutput, error) {
	req, out := c.DeleteClusterUserRequest(input)
	return out, req.Send()
}

// DeleteClusterUserWithContext is the same as DeleteClusterUser with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteClusterUser for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) DeleteClusterUserWithContext(ctx volcengine.Context, input *DeleteClusterUserInput, opts ...request.Option) (*DeleteClusterUserOutput, error) {
	req, out := c.DeleteClusterUserRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteClusterUserInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ClusterId is a required field
	ClusterId *string `type:"string" json:",omitempty" required:"true"`

	// UserName is a required field
	UserName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteClusterUserInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteClusterUserInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteClusterUserInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteClusterUserInput"}
	if s.ClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterId"))
	}
	if s.UserName == nil {
		invalidParams.Add(request.NewErrParamRequired("UserName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClusterId sets the ClusterId field's value.
func (s *DeleteClusterUserInput) SetClusterId(v string) *DeleteClusterUserInput {
	s.ClusterId = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *DeleteClusterUserInput) SetUserName(v string) *DeleteClusterUserInput {
	s.UserName = &v
	return s
}

type DeleteClusterUserOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Result *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteClusterUserOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteClusterUserOutput) GoString() string {
	return s.String()
}

// SetResult sets the Result field's value.
func (s *DeleteClusterUserOutput) SetResult(v string) *DeleteClusterUserOutput {
	s.Result = &v
	return s
}
