// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package emr

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opScaleInNodeGroupCommon = "ScaleInNodeGroup"

// ScaleInNodeGroupCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ScaleInNodeGroupCommon operation. The "output" return
// value will be populated with the ScaleInNodeGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ScaleInNodeGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after ScaleInNodeGroupCommon Send returns without error.
//
// See ScaleInNodeGroupCommon for more information on using the ScaleInNodeGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the ScaleInNodeGroupCommonRequest method.
//    req, resp := client.ScaleInNodeGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) ScaleInNodeGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opScaleInNodeGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ScaleInNodeGroupCommon API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation ScaleInNodeGroupCommon for usage and error information.
func (c *EMR) ScaleInNodeGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ScaleInNodeGroupCommonRequest(input)
	return out, req.Send()
}

// ScaleInNodeGroupCommonWithContext is the same as ScaleInNodeGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ScaleInNodeGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) ScaleInNodeGroupCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ScaleInNodeGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opScaleInNodeGroup = "ScaleInNodeGroup"

// ScaleInNodeGroupRequest generates a "volcengine/request.Request" representing the
// client's request for the ScaleInNodeGroup operation. The "output" return
// value will be populated with the ScaleInNodeGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ScaleInNodeGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after ScaleInNodeGroupCommon Send returns without error.
//
// See ScaleInNodeGroup for more information on using the ScaleInNodeGroup
// API call, and error handling.
//
//    // Example sending a request using the ScaleInNodeGroupRequest method.
//    req, resp := client.ScaleInNodeGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) ScaleInNodeGroupRequest(input *ScaleInNodeGroupInput) (req *request.Request, output *ScaleInNodeGroupOutput) {
	op := &request.Operation{
		Name:       opScaleInNodeGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ScaleInNodeGroupInput{}
	}

	output = &ScaleInNodeGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ScaleInNodeGroup API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation ScaleInNodeGroup for usage and error information.
func (c *EMR) ScaleInNodeGroup(input *ScaleInNodeGroupInput) (*ScaleInNodeGroupOutput, error) {
	req, out := c.ScaleInNodeGroupRequest(input)
	return out, req.Send()
}

// ScaleInNodeGroupWithContext is the same as ScaleInNodeGroup with the addition of
// the ability to pass a context and additional request options.
//
// See ScaleInNodeGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) ScaleInNodeGroupWithContext(ctx volcengine.Context, input *ScaleInNodeGroupInput, opts ...request.Option) (*ScaleInNodeGroupOutput, error) {
	req, out := c.ScaleInNodeGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ResultDataForScaleInNodeGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ResultDataForScaleInNodeGroupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ResultDataForScaleInNodeGroupOutput) GoString() string {
	return s.String()
}

type ScaleInNodeGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClientToken *string `type:"string" json:",omitempty"`

	ClusterId *string `type:"string" json:",omitempty"`

	// NodeGroupId is a required field
	NodeGroupId *string `type:"string" json:",omitempty" required:"true"`

	// ScaleInNodeCount is a required field
	ScaleInNodeCount *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ScaleInNodeGroupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ScaleInNodeGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ScaleInNodeGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ScaleInNodeGroupInput"}
	if s.NodeGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("NodeGroupId"))
	}
	if s.ScaleInNodeCount == nil {
		invalidParams.Add(request.NewErrParamRequired("ScaleInNodeCount"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *ScaleInNodeGroupInput) SetClientToken(v string) *ScaleInNodeGroupInput {
	s.ClientToken = &v
	return s
}

// SetClusterId sets the ClusterId field's value.
func (s *ScaleInNodeGroupInput) SetClusterId(v string) *ScaleInNodeGroupInput {
	s.ClusterId = &v
	return s
}

// SetNodeGroupId sets the NodeGroupId field's value.
func (s *ScaleInNodeGroupInput) SetNodeGroupId(v string) *ScaleInNodeGroupInput {
	s.NodeGroupId = &v
	return s
}

// SetScaleInNodeCount sets the ScaleInNodeCount field's value.
func (s *ScaleInNodeGroupInput) SetScaleInNodeCount(v int32) *ScaleInNodeGroupInput {
	s.ScaleInNodeCount = &v
	return s
}

type ScaleInNodeGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ClusterId *string `type:"string" json:",omitempty"`

	OperationId *string `type:"string" json:",omitempty"`

	ResultData *ResultDataForScaleInNodeGroupOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ScaleInNodeGroupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ScaleInNodeGroupOutput) GoString() string {
	return s.String()
}

// SetClusterId sets the ClusterId field's value.
func (s *ScaleInNodeGroupOutput) SetClusterId(v string) *ScaleInNodeGroupOutput {
	s.ClusterId = &v
	return s
}

// SetOperationId sets the OperationId field's value.
func (s *ScaleInNodeGroupOutput) SetOperationId(v string) *ScaleInNodeGroupOutput {
	s.OperationId = &v
	return s
}

// SetResultData sets the ResultData field's value.
func (s *ScaleInNodeGroupOutput) SetResultData(v *ResultDataForScaleInNodeGroupOutput) *ScaleInNodeGroupOutput {
	s.ResultData = v
	return s
}
