// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package emr

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListClusterUsersCommon = "ListClusterUsers"

// ListClusterUsersCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListClusterUsersCommon operation. The "output" return
// value will be populated with the ListClusterUsersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListClusterUsersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListClusterUsersCommon Send returns without error.
//
// See ListClusterUsersCommon for more information on using the ListClusterUsersCommon
// API call, and error handling.
//
//    // Example sending a request using the ListClusterUsersCommonRequest method.
//    req, resp := client.ListClusterUsersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) ListClusterUsersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListClusterUsersCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListClusterUsersCommon API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation ListClusterUsersCommon for usage and error information.
func (c *EMR) ListClusterUsersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListClusterUsersCommonRequest(input)
	return out, req.Send()
}

// ListClusterUsersCommonWithContext is the same as ListClusterUsersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListClusterUsersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) ListClusterUsersCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListClusterUsersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListClusterUsers = "ListClusterUsers"

// ListClusterUsersRequest generates a "volcengine/request.Request" representing the
// client's request for the ListClusterUsers operation. The "output" return
// value will be populated with the ListClusterUsersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListClusterUsersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListClusterUsersCommon Send returns without error.
//
// See ListClusterUsers for more information on using the ListClusterUsers
// API call, and error handling.
//
//    // Example sending a request using the ListClusterUsersRequest method.
//    req, resp := client.ListClusterUsersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EMR) ListClusterUsersRequest(input *ListClusterUsersInput) (req *request.Request, output *ListClusterUsersOutput) {
	op := &request.Operation{
		Name:       opListClusterUsers,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListClusterUsersInput{}
	}

	output = &ListClusterUsersOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListClusterUsers API operation for EMR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EMR's
// API operation ListClusterUsers for usage and error information.
func (c *EMR) ListClusterUsers(input *ListClusterUsersInput) (*ListClusterUsersOutput, error) {
	req, out := c.ListClusterUsersRequest(input)
	return out, req.Send()
}

// ListClusterUsersWithContext is the same as ListClusterUsers with the addition of
// the ability to pass a context and additional request options.
//
// See ListClusterUsers for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EMR) ListClusterUsersWithContext(ctx volcengine.Context, input *ListClusterUsersInput, opts ...request.Option) (*ListClusterUsersOutput, error) {
	req, out := c.ListClusterUsersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ItemForListClusterUsersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClusterId *string `type:"string" json:",omitempty"`

	CreateTime *int64 `type:"int64" json:",omitempty"`

	CreatorName *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	UpdateTime *int64 `type:"int64" json:",omitempty"`

	UserName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListClusterUsersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListClusterUsersOutput) GoString() string {
	return s.String()
}

// SetClusterId sets the ClusterId field's value.
func (s *ItemForListClusterUsersOutput) SetClusterId(v string) *ItemForListClusterUsersOutput {
	s.ClusterId = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *ItemForListClusterUsersOutput) SetCreateTime(v int64) *ItemForListClusterUsersOutput {
	s.CreateTime = &v
	return s
}

// SetCreatorName sets the CreatorName field's value.
func (s *ItemForListClusterUsersOutput) SetCreatorName(v string) *ItemForListClusterUsersOutput {
	s.CreatorName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ItemForListClusterUsersOutput) SetDescription(v string) *ItemForListClusterUsersOutput {
	s.Description = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *ItemForListClusterUsersOutput) SetUpdateTime(v int64) *ItemForListClusterUsersOutput {
	s.UpdateTime = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *ItemForListClusterUsersOutput) SetUserName(v string) *ItemForListClusterUsersOutput {
	s.UserName = &v
	return s
}

type ListClusterUsersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ClusterId is a required field
	ClusterId *string `type:"string" json:",omitempty" required:"true"`

	CreateTimeOrder *string `type:"string" json:",omitempty"`

	CreateorName *string `type:"string" json:",omitempty"`

	Keyword *string `type:"string" json:",omitempty"`

	UpdateTimeOrder *string `type:"string" json:",omitempty"`

	UserGroupName *string `type:"string" json:",omitempty"`

	UserName *string `type:"string" json:",omitempty"`

	UserNameOrder *string `type:"string" json:",omitempty"`

	UserNames []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListClusterUsersInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListClusterUsersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListClusterUsersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListClusterUsersInput"}
	if s.ClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClusterId sets the ClusterId field's value.
func (s *ListClusterUsersInput) SetClusterId(v string) *ListClusterUsersInput {
	s.ClusterId = &v
	return s
}

// SetCreateTimeOrder sets the CreateTimeOrder field's value.
func (s *ListClusterUsersInput) SetCreateTimeOrder(v string) *ListClusterUsersInput {
	s.CreateTimeOrder = &v
	return s
}

// SetCreateorName sets the CreateorName field's value.
func (s *ListClusterUsersInput) SetCreateorName(v string) *ListClusterUsersInput {
	s.CreateorName = &v
	return s
}

// SetKeyword sets the Keyword field's value.
func (s *ListClusterUsersInput) SetKeyword(v string) *ListClusterUsersInput {
	s.Keyword = &v
	return s
}

// SetUpdateTimeOrder sets the UpdateTimeOrder field's value.
func (s *ListClusterUsersInput) SetUpdateTimeOrder(v string) *ListClusterUsersInput {
	s.UpdateTimeOrder = &v
	return s
}

// SetUserGroupName sets the UserGroupName field's value.
func (s *ListClusterUsersInput) SetUserGroupName(v string) *ListClusterUsersInput {
	s.UserGroupName = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *ListClusterUsersInput) SetUserName(v string) *ListClusterUsersInput {
	s.UserName = &v
	return s
}

// SetUserNameOrder sets the UserNameOrder field's value.
func (s *ListClusterUsersInput) SetUserNameOrder(v string) *ListClusterUsersInput {
	s.UserNameOrder = &v
	return s
}

// SetUserNames sets the UserNames field's value.
func (s *ListClusterUsersInput) SetUserNames(v []*string) *ListClusterUsersInput {
	s.UserNames = v
	return s
}

type ListClusterUsersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListClusterUsersOutput `type:"list" json:",omitempty"`

	MaxResults *int32 `type:"int32" json:",omitempty"`

	NextToken *string `type:"string" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListClusterUsersOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListClusterUsersOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListClusterUsersOutput) SetItems(v []*ItemForListClusterUsersOutput) *ListClusterUsersOutput {
	s.Items = v
	return s
}

// SetMaxResults sets the MaxResults field's value.
func (s *ListClusterUsersOutput) SetMaxResults(v int32) *ListClusterUsersOutput {
	s.MaxResults = &v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *ListClusterUsersOutput) SetNextToken(v string) *ListClusterUsersOutput {
	s.NextToken = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListClusterUsersOutput) SetTotalCount(v int32) *ListClusterUsersOutput {
	s.TotalCount = &v
	return s
}
