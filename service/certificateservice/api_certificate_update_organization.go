// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package certificateservice

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCertificateUpdateOrganizationCommon = "CertificateUpdateOrganization"

// CertificateUpdateOrganizationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CertificateUpdateOrganizationCommon operation. The "output" return
// value will be populated with the CertificateUpdateOrganizationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CertificateUpdateOrganizationCommon Request to send the API call to the service.
// the "output" return value is not valid until after CertificateUpdateOrganizationCommon Send returns without error.
//
// See CertificateUpdateOrganizationCommon for more information on using the CertificateUpdateOrganizationCommon
// API call, and error handling.
//
//    // Example sending a request using the CertificateUpdateOrganizationCommonRequest method.
//    req, resp := client.CertificateUpdateOrganizationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CERTIFICATESERVICE) CertificateUpdateOrganizationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCertificateUpdateOrganizationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CertificateUpdateOrganizationCommon API operation for CERTIFICATE_SERVICE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CERTIFICATE_SERVICE's
// API operation CertificateUpdateOrganizationCommon for usage and error information.
func (c *CERTIFICATESERVICE) CertificateUpdateOrganizationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CertificateUpdateOrganizationCommonRequest(input)
	return out, req.Send()
}

// CertificateUpdateOrganizationCommonWithContext is the same as CertificateUpdateOrganizationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CertificateUpdateOrganizationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CERTIFICATESERVICE) CertificateUpdateOrganizationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CertificateUpdateOrganizationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCertificateUpdateOrganization = "CertificateUpdateOrganization"

// CertificateUpdateOrganizationRequest generates a "volcengine/request.Request" representing the
// client's request for the CertificateUpdateOrganization operation. The "output" return
// value will be populated with the CertificateUpdateOrganizationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CertificateUpdateOrganizationCommon Request to send the API call to the service.
// the "output" return value is not valid until after CertificateUpdateOrganizationCommon Send returns without error.
//
// See CertificateUpdateOrganization for more information on using the CertificateUpdateOrganization
// API call, and error handling.
//
//    // Example sending a request using the CertificateUpdateOrganizationRequest method.
//    req, resp := client.CertificateUpdateOrganizationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CERTIFICATESERVICE) CertificateUpdateOrganizationRequest(input *CertificateUpdateOrganizationInput) (req *request.Request, output *CertificateUpdateOrganizationOutput) {
	op := &request.Operation{
		Name:       opCertificateUpdateOrganization,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CertificateUpdateOrganizationInput{}
	}

	output = &CertificateUpdateOrganizationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CertificateUpdateOrganization API operation for CERTIFICATE_SERVICE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CERTIFICATE_SERVICE's
// API operation CertificateUpdateOrganization for usage and error information.
func (c *CERTIFICATESERVICE) CertificateUpdateOrganization(input *CertificateUpdateOrganizationInput) (*CertificateUpdateOrganizationOutput, error) {
	req, out := c.CertificateUpdateOrganizationRequest(input)
	return out, req.Send()
}

// CertificateUpdateOrganizationWithContext is the same as CertificateUpdateOrganization with the addition of
// the ability to pass a context and additional request options.
//
// See CertificateUpdateOrganization for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CERTIFICATESERVICE) CertificateUpdateOrganizationWithContext(ctx volcengine.Context, input *CertificateUpdateOrganizationInput, opts ...request.Option) (*CertificateUpdateOrganizationOutput, error) {
	req, out := c.CertificateUpdateOrganizationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CertificateUpdateOrganizationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Address *string `type:"string" json:",omitempty"`

	BusinessLicenseNo *string `type:"string" json:",omitempty"`

	City *string `type:"string" json:",omitempty"`

	Contact *ContactForCertificateUpdateOrganizationInput `type:"structure" json:",omitempty"`

	Country *string `type:"string" json:",omitempty"`

	Department *string `type:"string" json:",omitempty"`

	Email *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	// OrganizationId is a required field
	OrganizationId *string `type:"string" json:",omitempty" required:"true"`

	PostalCode *string `type:"string" json:",omitempty"`

	Province *string `type:"string" json:",omitempty"`

	Tag *string `max:"100" type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty" enum:"EnumOfTypeForCertificateUpdateOrganizationInput"`
}

// String returns the string representation
func (s CertificateUpdateOrganizationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CertificateUpdateOrganizationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CertificateUpdateOrganizationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CertificateUpdateOrganizationInput"}
	if s.OrganizationId == nil {
		invalidParams.Add(request.NewErrParamRequired("OrganizationId"))
	}
	if s.Tag != nil && len(*s.Tag) > 100 {
		invalidParams.Add(request.NewErrParamMaxLen("Tag", 100, *s.Tag))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAddress sets the Address field's value.
func (s *CertificateUpdateOrganizationInput) SetAddress(v string) *CertificateUpdateOrganizationInput {
	s.Address = &v
	return s
}

// SetBusinessLicenseNo sets the BusinessLicenseNo field's value.
func (s *CertificateUpdateOrganizationInput) SetBusinessLicenseNo(v string) *CertificateUpdateOrganizationInput {
	s.BusinessLicenseNo = &v
	return s
}

// SetCity sets the City field's value.
func (s *CertificateUpdateOrganizationInput) SetCity(v string) *CertificateUpdateOrganizationInput {
	s.City = &v
	return s
}

// SetContact sets the Contact field's value.
func (s *CertificateUpdateOrganizationInput) SetContact(v *ContactForCertificateUpdateOrganizationInput) *CertificateUpdateOrganizationInput {
	s.Contact = v
	return s
}

// SetCountry sets the Country field's value.
func (s *CertificateUpdateOrganizationInput) SetCountry(v string) *CertificateUpdateOrganizationInput {
	s.Country = &v
	return s
}

// SetDepartment sets the Department field's value.
func (s *CertificateUpdateOrganizationInput) SetDepartment(v string) *CertificateUpdateOrganizationInput {
	s.Department = &v
	return s
}

// SetEmail sets the Email field's value.
func (s *CertificateUpdateOrganizationInput) SetEmail(v string) *CertificateUpdateOrganizationInput {
	s.Email = &v
	return s
}

// SetName sets the Name field's value.
func (s *CertificateUpdateOrganizationInput) SetName(v string) *CertificateUpdateOrganizationInput {
	s.Name = &v
	return s
}

// SetOrganizationId sets the OrganizationId field's value.
func (s *CertificateUpdateOrganizationInput) SetOrganizationId(v string) *CertificateUpdateOrganizationInput {
	s.OrganizationId = &v
	return s
}

// SetPostalCode sets the PostalCode field's value.
func (s *CertificateUpdateOrganizationInput) SetPostalCode(v string) *CertificateUpdateOrganizationInput {
	s.PostalCode = &v
	return s
}

// SetProvince sets the Province field's value.
func (s *CertificateUpdateOrganizationInput) SetProvince(v string) *CertificateUpdateOrganizationInput {
	s.Province = &v
	return s
}

// SetTag sets the Tag field's value.
func (s *CertificateUpdateOrganizationInput) SetTag(v string) *CertificateUpdateOrganizationInput {
	s.Tag = &v
	return s
}

// SetType sets the Type field's value.
func (s *CertificateUpdateOrganizationInput) SetType(v string) *CertificateUpdateOrganizationInput {
	s.Type = &v
	return s
}

type CertificateUpdateOrganizationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CertificateUpdateOrganizationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CertificateUpdateOrganizationOutput) GoString() string {
	return s.String()
}

type ContactForCertificateUpdateOrganizationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Email *string `type:"string" json:",omitempty"`

	FirstName *string `type:"string" json:",omitempty"`

	IdCardNo *string `type:"string" json:",omitempty"`

	LastName *string `type:"string" json:",omitempty"`

	Phone *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ContactForCertificateUpdateOrganizationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ContactForCertificateUpdateOrganizationInput) GoString() string {
	return s.String()
}

// SetEmail sets the Email field's value.
func (s *ContactForCertificateUpdateOrganizationInput) SetEmail(v string) *ContactForCertificateUpdateOrganizationInput {
	s.Email = &v
	return s
}

// SetFirstName sets the FirstName field's value.
func (s *ContactForCertificateUpdateOrganizationInput) SetFirstName(v string) *ContactForCertificateUpdateOrganizationInput {
	s.FirstName = &v
	return s
}

// SetIdCardNo sets the IdCardNo field's value.
func (s *ContactForCertificateUpdateOrganizationInput) SetIdCardNo(v string) *ContactForCertificateUpdateOrganizationInput {
	s.IdCardNo = &v
	return s
}

// SetLastName sets the LastName field's value.
func (s *ContactForCertificateUpdateOrganizationInput) SetLastName(v string) *ContactForCertificateUpdateOrganizationInput {
	s.LastName = &v
	return s
}

// SetPhone sets the Phone field's value.
func (s *ContactForCertificateUpdateOrganizationInput) SetPhone(v string) *ContactForCertificateUpdateOrganizationInput {
	s.Phone = &v
	return s
}

const (
	// EnumOfTypeForCertificateUpdateOrganizationInputEnterprise is a EnumOfTypeForCertificateUpdateOrganizationInput enum value
	EnumOfTypeForCertificateUpdateOrganizationInputEnterprise = "Enterprise"

	// EnumOfTypeForCertificateUpdateOrganizationInputIndividual is a EnumOfTypeForCertificateUpdateOrganizationInput enum value
	EnumOfTypeForCertificateUpdateOrganizationInputIndividual = "Individual"
)
