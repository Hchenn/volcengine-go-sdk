// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package certificateservice

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opImportCertificateCommon = "ImportCertificate"

// ImportCertificateCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ImportCertificateCommon operation. The "output" return
// value will be populated with the ImportCertificateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ImportCertificateCommon Request to send the API call to the service.
// the "output" return value is not valid until after ImportCertificateCommon Send returns without error.
//
// See ImportCertificateCommon for more information on using the ImportCertificateCommon
// API call, and error handling.
//
//    // Example sending a request using the ImportCertificateCommonRequest method.
//    req, resp := client.ImportCertificateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CERTIFICATESERVICE) ImportCertificateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opImportCertificateCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ImportCertificateCommon API operation for CERTIFICATE_SERVICE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CERTIFICATE_SERVICE's
// API operation ImportCertificateCommon for usage and error information.
func (c *CERTIFICATESERVICE) ImportCertificateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ImportCertificateCommonRequest(input)
	return out, req.Send()
}

// ImportCertificateCommonWithContext is the same as ImportCertificateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ImportCertificateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CERTIFICATESERVICE) ImportCertificateCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ImportCertificateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opImportCertificate = "ImportCertificate"

// ImportCertificateRequest generates a "volcengine/request.Request" representing the
// client's request for the ImportCertificate operation. The "output" return
// value will be populated with the ImportCertificateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ImportCertificateCommon Request to send the API call to the service.
// the "output" return value is not valid until after ImportCertificateCommon Send returns without error.
//
// See ImportCertificate for more information on using the ImportCertificate
// API call, and error handling.
//
//    // Example sending a request using the ImportCertificateRequest method.
//    req, resp := client.ImportCertificateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CERTIFICATESERVICE) ImportCertificateRequest(input *ImportCertificateInput) (req *request.Request, output *ImportCertificateOutput) {
	op := &request.Operation{
		Name:       opImportCertificate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ImportCertificateInput{}
	}

	output = &ImportCertificateOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ImportCertificate API operation for CERTIFICATE_SERVICE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CERTIFICATE_SERVICE's
// API operation ImportCertificate for usage and error information.
func (c *CERTIFICATESERVICE) ImportCertificate(input *ImportCertificateInput) (*ImportCertificateOutput, error) {
	req, out := c.ImportCertificateRequest(input)
	return out, req.Send()
}

// ImportCertificateWithContext is the same as ImportCertificate with the addition of
// the ability to pass a context and additional request options.
//
// See ImportCertificate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CERTIFICATESERVICE) ImportCertificateWithContext(ctx volcengine.Context, input *ImportCertificateInput, opts ...request.Option) (*ImportCertificateOutput, error) {
	req, out := c.ImportCertificateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CertificateInfoForImportCertificateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CertificateChain *string `type:"string" json:",omitempty"`

	PrivateKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CertificateInfoForImportCertificateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CertificateInfoForImportCertificateInput) GoString() string {
	return s.String()
}

// SetCertificateChain sets the CertificateChain field's value.
func (s *CertificateInfoForImportCertificateInput) SetCertificateChain(v string) *CertificateInfoForImportCertificateInput {
	s.CertificateChain = &v
	return s
}

// SetPrivateKey sets the PrivateKey field's value.
func (s *CertificateInfoForImportCertificateInput) SetPrivateKey(v string) *CertificateInfoForImportCertificateInput {
	s.PrivateKey = &v
	return s
}

type GmCertificateInfoForImportCertificateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EncryptCertificateChain *string `type:"string" json:",omitempty"`

	EncryptPrivateKey *string `type:"string" json:",omitempty"`

	SignCertificateChain *string `type:"string" json:",omitempty"`

	SignPrivateKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GmCertificateInfoForImportCertificateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GmCertificateInfoForImportCertificateInput) GoString() string {
	return s.String()
}

// SetEncryptCertificateChain sets the EncryptCertificateChain field's value.
func (s *GmCertificateInfoForImportCertificateInput) SetEncryptCertificateChain(v string) *GmCertificateInfoForImportCertificateInput {
	s.EncryptCertificateChain = &v
	return s
}

// SetEncryptPrivateKey sets the EncryptPrivateKey field's value.
func (s *GmCertificateInfoForImportCertificateInput) SetEncryptPrivateKey(v string) *GmCertificateInfoForImportCertificateInput {
	s.EncryptPrivateKey = &v
	return s
}

// SetSignCertificateChain sets the SignCertificateChain field's value.
func (s *GmCertificateInfoForImportCertificateInput) SetSignCertificateChain(v string) *GmCertificateInfoForImportCertificateInput {
	s.SignCertificateChain = &v
	return s
}

// SetSignPrivateKey sets the SignPrivateKey field's value.
func (s *GmCertificateInfoForImportCertificateInput) SetSignPrivateKey(v string) *GmCertificateInfoForImportCertificateInput {
	s.SignPrivateKey = &v
	return s
}

type ImportCertificateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CertificateInfo *CertificateInfoForImportCertificateInput `type:"structure" json:",omitempty"`

	GmCertificateInfo *GmCertificateInfoForImportCertificateInput `type:"structure" json:",omitempty"`

	NoVerifyAndFixChain *bool `type:"boolean" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	Repeatable *bool `type:"boolean" json:",omitempty"`

	Tag *string `type:"string" json:",omitempty"`

	Tags []*TagForImportCertificateInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ImportCertificateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ImportCertificateInput) GoString() string {
	return s.String()
}

// SetCertificateInfo sets the CertificateInfo field's value.
func (s *ImportCertificateInput) SetCertificateInfo(v *CertificateInfoForImportCertificateInput) *ImportCertificateInput {
	s.CertificateInfo = v
	return s
}

// SetGmCertificateInfo sets the GmCertificateInfo field's value.
func (s *ImportCertificateInput) SetGmCertificateInfo(v *GmCertificateInfoForImportCertificateInput) *ImportCertificateInput {
	s.GmCertificateInfo = v
	return s
}

// SetNoVerifyAndFixChain sets the NoVerifyAndFixChain field's value.
func (s *ImportCertificateInput) SetNoVerifyAndFixChain(v bool) *ImportCertificateInput {
	s.NoVerifyAndFixChain = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *ImportCertificateInput) SetProjectName(v string) *ImportCertificateInput {
	s.ProjectName = &v
	return s
}

// SetRepeatable sets the Repeatable field's value.
func (s *ImportCertificateInput) SetRepeatable(v bool) *ImportCertificateInput {
	s.Repeatable = &v
	return s
}

// SetTag sets the Tag field's value.
func (s *ImportCertificateInput) SetTag(v string) *ImportCertificateInput {
	s.Tag = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *ImportCertificateInput) SetTags(v []*TagForImportCertificateInput) *ImportCertificateInput {
	s.Tags = v
	return s
}

type ImportCertificateOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string" json:",omitempty"`

	RepeatId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ImportCertificateOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ImportCertificateOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ImportCertificateOutput) SetInstanceId(v string) *ImportCertificateOutput {
	s.InstanceId = &v
	return s
}

// SetRepeatId sets the RepeatId field's value.
func (s *ImportCertificateOutput) SetRepeatId(v string) *ImportCertificateOutput {
	s.RepeatId = &v
	return s
}

type TagForImportCertificateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TagForImportCertificateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForImportCertificateInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForImportCertificateInput) SetKey(v string) *TagForImportCertificateInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForImportCertificateInput) SetValue(v string) *TagForImportCertificateInput {
	s.Value = &v
	return s
}
