// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package certificateservice

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCertificateUpdateInstanceCommon = "CertificateUpdateInstance"

// CertificateUpdateInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CertificateUpdateInstanceCommon operation. The "output" return
// value will be populated with the CertificateUpdateInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CertificateUpdateInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CertificateUpdateInstanceCommon Send returns without error.
//
// See CertificateUpdateInstanceCommon for more information on using the CertificateUpdateInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the CertificateUpdateInstanceCommonRequest method.
//    req, resp := client.CertificateUpdateInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CERTIFICATESERVICE) CertificateUpdateInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCertificateUpdateInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CertificateUpdateInstanceCommon API operation for CERTIFICATE_SERVICE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CERTIFICATE_SERVICE's
// API operation CertificateUpdateInstanceCommon for usage and error information.
func (c *CERTIFICATESERVICE) CertificateUpdateInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CertificateUpdateInstanceCommonRequest(input)
	return out, req.Send()
}

// CertificateUpdateInstanceCommonWithContext is the same as CertificateUpdateInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CertificateUpdateInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CERTIFICATESERVICE) CertificateUpdateInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CertificateUpdateInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCertificateUpdateInstance = "CertificateUpdateInstance"

// CertificateUpdateInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the CertificateUpdateInstance operation. The "output" return
// value will be populated with the CertificateUpdateInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CertificateUpdateInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CertificateUpdateInstanceCommon Send returns without error.
//
// See CertificateUpdateInstance for more information on using the CertificateUpdateInstance
// API call, and error handling.
//
//    // Example sending a request using the CertificateUpdateInstanceRequest method.
//    req, resp := client.CertificateUpdateInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CERTIFICATESERVICE) CertificateUpdateInstanceRequest(input *CertificateUpdateInstanceInput) (req *request.Request, output *CertificateUpdateInstanceOutput) {
	op := &request.Operation{
		Name:       opCertificateUpdateInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CertificateUpdateInstanceInput{}
	}

	output = &CertificateUpdateInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CertificateUpdateInstance API operation for CERTIFICATE_SERVICE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CERTIFICATE_SERVICE's
// API operation CertificateUpdateInstance for usage and error information.
func (c *CERTIFICATESERVICE) CertificateUpdateInstance(input *CertificateUpdateInstanceInput) (*CertificateUpdateInstanceOutput, error) {
	req, out := c.CertificateUpdateInstanceRequest(input)
	return out, req.Send()
}

// CertificateUpdateInstanceWithContext is the same as CertificateUpdateInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CertificateUpdateInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CERTIFICATESERVICE) CertificateUpdateInstanceWithContext(ctx volcengine.Context, input *CertificateUpdateInstanceInput, opts ...request.Option) (*CertificateUpdateInstanceOutput, error) {
	req, out := c.CertificateUpdateInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CertificateUpdateInstanceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	Options *OptionsForCertificateUpdateInstanceInput `type:"structure" json:",omitempty"`

	Tag *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CertificateUpdateInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CertificateUpdateInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CertificateUpdateInstanceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CertificateUpdateInstanceInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *CertificateUpdateInstanceInput) SetInstanceId(v string) *CertificateUpdateInstanceInput {
	s.InstanceId = &v
	return s
}

// SetOptions sets the Options field's value.
func (s *CertificateUpdateInstanceInput) SetOptions(v *OptionsForCertificateUpdateInstanceInput) *CertificateUpdateInstanceInput {
	s.Options = v
	return s
}

// SetTag sets the Tag field's value.
func (s *CertificateUpdateInstanceInput) SetTag(v string) *CertificateUpdateInstanceInput {
	s.Tag = &v
	return s
}

type CertificateUpdateInstanceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CertificateUpdateInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CertificateUpdateInstanceOutput) GoString() string {
	return s.String()
}

type OptionsForCertificateUpdateInstanceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ExpiredNotice *string `type:"string" json:",omitempty" enum:"EnumOfExpiredNoticeForCertificateUpdateInstanceInput"`
}

// String returns the string representation
func (s OptionsForCertificateUpdateInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OptionsForCertificateUpdateInstanceInput) GoString() string {
	return s.String()
}

// SetExpiredNotice sets the ExpiredNotice field's value.
func (s *OptionsForCertificateUpdateInstanceInput) SetExpiredNotice(v string) *OptionsForCertificateUpdateInstanceInput {
	s.ExpiredNotice = &v
	return s
}

const (
	// EnumOfExpiredNoticeForCertificateUpdateInstanceInputEnabled is a EnumOfExpiredNoticeForCertificateUpdateInstanceInput enum value
	EnumOfExpiredNoticeForCertificateUpdateInstanceInputEnabled = "Enabled"

	// EnumOfExpiredNoticeForCertificateUpdateInstanceInputDisabled is a EnumOfExpiredNoticeForCertificateUpdateInstanceInput enum value
	EnumOfExpiredNoticeForCertificateUpdateInstanceInputDisabled = "Disabled"
)
