// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package flink20250101

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRestartGWSApplicationCommon = "RestartGWSApplication"

// RestartGWSApplicationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RestartGWSApplicationCommon operation. The "output" return
// value will be populated with the RestartGWSApplicationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestartGWSApplicationCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestartGWSApplicationCommon Send returns without error.
//
// See RestartGWSApplicationCommon for more information on using the RestartGWSApplicationCommon
// API call, and error handling.
//
//    // Example sending a request using the RestartGWSApplicationCommonRequest method.
//    req, resp := client.RestartGWSApplicationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FLINK20250101) RestartGWSApplicationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRestartGWSApplicationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RestartGWSApplicationCommon API operation for FLINK20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FLINK20250101's
// API operation RestartGWSApplicationCommon for usage and error information.
func (c *FLINK20250101) RestartGWSApplicationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RestartGWSApplicationCommonRequest(input)
	return out, req.Send()
}

// RestartGWSApplicationCommonWithContext is the same as RestartGWSApplicationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RestartGWSApplicationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FLINK20250101) RestartGWSApplicationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RestartGWSApplicationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestartGWSApplication = "RestartGWSApplication"

// RestartGWSApplicationRequest generates a "volcengine/request.Request" representing the
// client's request for the RestartGWSApplication operation. The "output" return
// value will be populated with the RestartGWSApplicationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestartGWSApplicationCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestartGWSApplicationCommon Send returns without error.
//
// See RestartGWSApplication for more information on using the RestartGWSApplication
// API call, and error handling.
//
//    // Example sending a request using the RestartGWSApplicationRequest method.
//    req, resp := client.RestartGWSApplicationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FLINK20250101) RestartGWSApplicationRequest(input *RestartGWSApplicationInput) (req *request.Request, output *RestartGWSApplicationOutput) {
	op := &request.Operation{
		Name:       opRestartGWSApplication,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RestartGWSApplicationInput{}
	}

	output = &RestartGWSApplicationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RestartGWSApplication API operation for FLINK20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FLINK20250101's
// API operation RestartGWSApplication for usage and error information.
func (c *FLINK20250101) RestartGWSApplication(input *RestartGWSApplicationInput) (*RestartGWSApplicationOutput, error) {
	req, out := c.RestartGWSApplicationRequest(input)
	return out, req.Send()
}

// RestartGWSApplicationWithContext is the same as RestartGWSApplication with the addition of
// the ability to pass a context and additional request options.
//
// See RestartGWSApplication for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FLINK20250101) RestartGWSApplicationWithContext(ctx volcengine.Context, input *RestartGWSApplicationInput, opts ...request.Option) (*RestartGWSApplicationOutput, error) {
	req, out := c.RestartGWSApplicationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RestartGWSApplicationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	SavepointId *string `type:"string" json:",omitempty"`

	// Type is a required field
	Type *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfTypeForRestartGWSApplicationInput"`
}

// String returns the string representation
func (s RestartGWSApplicationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RestartGWSApplicationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RestartGWSApplicationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RestartGWSApplicationInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetId sets the Id field's value.
func (s *RestartGWSApplicationInput) SetId(v string) *RestartGWSApplicationInput {
	s.Id = &v
	return s
}

// SetSavepointId sets the SavepointId field's value.
func (s *RestartGWSApplicationInput) SetSavepointId(v string) *RestartGWSApplicationInput {
	s.SavepointId = &v
	return s
}

// SetType sets the Type field's value.
func (s *RestartGWSApplicationInput) SetType(v string) *RestartGWSApplicationInput {
	s.Type = &v
	return s
}

type RestartGWSApplicationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`

	Success *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s RestartGWSApplicationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RestartGWSApplicationOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *RestartGWSApplicationOutput) SetId(v string) *RestartGWSApplicationOutput {
	s.Id = &v
	return s
}

// SetSuccess sets the Success field's value.
func (s *RestartGWSApplicationOutput) SetSuccess(v bool) *RestartGWSApplicationOutput {
	s.Success = &v
	return s
}

const (
	// EnumOfTypeForRestartGWSApplicationInputFromNew is a EnumOfTypeForRestartGWSApplicationInput enum value
	EnumOfTypeForRestartGWSApplicationInputFromNew = "FROM_NEW"

	// EnumOfTypeForRestartGWSApplicationInputFromLatest is a EnumOfTypeForRestartGWSApplicationInput enum value
	EnumOfTypeForRestartGWSApplicationInputFromLatest = "FROM_LATEST"

	// EnumOfTypeForRestartGWSApplicationInputFromSavepoint is a EnumOfTypeForRestartGWSApplicationInput enum value
	EnumOfTypeForRestartGWSApplicationInputFromSavepoint = "FROM_SAVEPOINT"
)
