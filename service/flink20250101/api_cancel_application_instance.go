// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package flink20250101

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCancelApplicationInstanceCommon = "CancelApplicationInstance"

// CancelApplicationInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CancelApplicationInstanceCommon operation. The "output" return
// value will be populated with the CancelApplicationInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelApplicationInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelApplicationInstanceCommon Send returns without error.
//
// See CancelApplicationInstanceCommon for more information on using the CancelApplicationInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the CancelApplicationInstanceCommonRequest method.
//    req, resp := client.CancelApplicationInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FLINK20250101) CancelApplicationInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCancelApplicationInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CancelApplicationInstanceCommon API operation for FLINK20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FLINK20250101's
// API operation CancelApplicationInstanceCommon for usage and error information.
func (c *FLINK20250101) CancelApplicationInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CancelApplicationInstanceCommonRequest(input)
	return out, req.Send()
}

// CancelApplicationInstanceCommonWithContext is the same as CancelApplicationInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CancelApplicationInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FLINK20250101) CancelApplicationInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CancelApplicationInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCancelApplicationInstance = "CancelApplicationInstance"

// CancelApplicationInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the CancelApplicationInstance operation. The "output" return
// value will be populated with the CancelApplicationInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelApplicationInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelApplicationInstanceCommon Send returns without error.
//
// See CancelApplicationInstance for more information on using the CancelApplicationInstance
// API call, and error handling.
//
//    // Example sending a request using the CancelApplicationInstanceRequest method.
//    req, resp := client.CancelApplicationInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FLINK20250101) CancelApplicationInstanceRequest(input *CancelApplicationInstanceInput) (req *request.Request, output *CancelApplicationInstanceOutput) {
	op := &request.Operation{
		Name:       opCancelApplicationInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CancelApplicationInstanceInput{}
	}

	output = &CancelApplicationInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CancelApplicationInstance API operation for FLINK20250101.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for FLINK20250101's
// API operation CancelApplicationInstance for usage and error information.
func (c *FLINK20250101) CancelApplicationInstance(input *CancelApplicationInstanceInput) (*CancelApplicationInstanceOutput, error) {
	req, out := c.CancelApplicationInstanceRequest(input)
	return out, req.Send()
}

// CancelApplicationInstanceWithContext is the same as CancelApplicationInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CancelApplicationInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FLINK20250101) CancelApplicationInstanceWithContext(ctx volcengine.Context, input *CancelApplicationInstanceInput, opts ...request.Option) (*CancelApplicationInstanceOutput, error) {
	req, out := c.CancelApplicationInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CancelApplicationInstanceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CancelApplicationInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelApplicationInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CancelApplicationInstanceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CancelApplicationInstanceInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *CancelApplicationInstanceInput) SetInstanceId(v string) *CancelApplicationInstanceInput {
	s.InstanceId = &v
	return s
}

type CancelApplicationInstanceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	Success *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s CancelApplicationInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelApplicationInstanceOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CancelApplicationInstanceOutput) SetId(v string) *CancelApplicationInstanceOutput {
	s.Id = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CancelApplicationInstanceOutput) SetInstanceId(v string) *CancelApplicationInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetSuccess sets the Success field's value.
func (s *CancelApplicationInstanceOutput) SetSuccess(v bool) *CancelApplicationInstanceOutput {
	s.Success = &v
	return s
}
