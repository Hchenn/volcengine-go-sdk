// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUploadDXPLicenseCommon = "UploadDXPLicense"

// UploadDXPLicenseCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UploadDXPLicenseCommon operation. The "output" return
// value will be populated with the UploadDXPLicenseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UploadDXPLicenseCommon Request to send the API call to the service.
// the "output" return value is not valid until after UploadDXPLicenseCommon Send returns without error.
//
// See UploadDXPLicenseCommon for more information on using the UploadDXPLicenseCommon
// API call, and error handling.
//
//    // Example sending a request using the UploadDXPLicenseCommonRequest method.
//    req, resp := client.UploadDXPLicenseCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) UploadDXPLicenseCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUploadDXPLicenseCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UploadDXPLicenseCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation UploadDXPLicenseCommon for usage and error information.
func (c *EDX) UploadDXPLicenseCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UploadDXPLicenseCommonRequest(input)
	return out, req.Send()
}

// UploadDXPLicenseCommonWithContext is the same as UploadDXPLicenseCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UploadDXPLicenseCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) UploadDXPLicenseCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UploadDXPLicenseCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUploadDXPLicense = "UploadDXPLicense"

// UploadDXPLicenseRequest generates a "volcengine/request.Request" representing the
// client's request for the UploadDXPLicense operation. The "output" return
// value will be populated with the UploadDXPLicenseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UploadDXPLicenseCommon Request to send the API call to the service.
// the "output" return value is not valid until after UploadDXPLicenseCommon Send returns without error.
//
// See UploadDXPLicense for more information on using the UploadDXPLicense
// API call, and error handling.
//
//    // Example sending a request using the UploadDXPLicenseRequest method.
//    req, resp := client.UploadDXPLicenseRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) UploadDXPLicenseRequest(input *UploadDXPLicenseInput) (req *request.Request, output *UploadDXPLicenseOutput) {
	op := &request.Operation{
		Name:       opUploadDXPLicense,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UploadDXPLicenseInput{}
	}

	output = &UploadDXPLicenseOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UploadDXPLicense API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation UploadDXPLicense for usage and error information.
func (c *EDX) UploadDXPLicense(input *UploadDXPLicenseInput) (*UploadDXPLicenseOutput, error) {
	req, out := c.UploadDXPLicenseRequest(input)
	return out, req.Send()
}

// UploadDXPLicenseWithContext is the same as UploadDXPLicense with the addition of
// the ability to pass a context and additional request options.
//
// See UploadDXPLicense for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) UploadDXPLicenseWithContext(ctx volcengine.Context, input *UploadDXPLicenseInput, opts ...request.Option) (*UploadDXPLicenseOutput, error) {
	req, out := c.UploadDXPLicenseRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UploadDXPLicenseInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// License is a required field
	License *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UploadDXPLicenseInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UploadDXPLicenseInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UploadDXPLicenseInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UploadDXPLicenseInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.License == nil {
		invalidParams.Add(request.NewErrParamRequired("License"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *UploadDXPLicenseInput) SetInstanceId(v string) *UploadDXPLicenseInput {
	s.InstanceId = &v
	return s
}

// SetLicense sets the License field's value.
func (s *UploadDXPLicenseInput) SetLicense(v string) *UploadDXPLicenseInput {
	s.License = &v
	return s
}

type UploadDXPLicenseOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	LicenseURL *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UploadDXPLicenseOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UploadDXPLicenseOutput) GoString() string {
	return s.String()
}

// SetLicenseURL sets the LicenseURL field's value.
func (s *UploadDXPLicenseOutput) SetLicenseURL(v string) *UploadDXPLicenseOutput {
	s.LicenseURL = &v
	return s
}
