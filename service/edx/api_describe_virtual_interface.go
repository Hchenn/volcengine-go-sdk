// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeVirtualInterfaceCommon = "DescribeVirtualInterface"

// DescribeVirtualInterfaceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeVirtualInterfaceCommon operation. The "output" return
// value will be populated with the DescribeVirtualInterfaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeVirtualInterfaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeVirtualInterfaceCommon Send returns without error.
//
// See DescribeVirtualInterfaceCommon for more information on using the DescribeVirtualInterfaceCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeVirtualInterfaceCommonRequest method.
//    req, resp := client.DescribeVirtualInterfaceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) DescribeVirtualInterfaceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeVirtualInterfaceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeVirtualInterfaceCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation DescribeVirtualInterfaceCommon for usage and error information.
func (c *EDX) DescribeVirtualInterfaceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeVirtualInterfaceCommonRequest(input)
	return out, req.Send()
}

// DescribeVirtualInterfaceCommonWithContext is the same as DescribeVirtualInterfaceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVirtualInterfaceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) DescribeVirtualInterfaceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeVirtualInterfaceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeVirtualInterface = "DescribeVirtualInterface"

// DescribeVirtualInterfaceRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeVirtualInterface operation. The "output" return
// value will be populated with the DescribeVirtualInterfaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeVirtualInterfaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeVirtualInterfaceCommon Send returns without error.
//
// See DescribeVirtualInterface for more information on using the DescribeVirtualInterface
// API call, and error handling.
//
//    // Example sending a request using the DescribeVirtualInterfaceRequest method.
//    req, resp := client.DescribeVirtualInterfaceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) DescribeVirtualInterfaceRequest(input *DescribeVirtualInterfaceInput) (req *request.Request, output *DescribeVirtualInterfaceOutput) {
	op := &request.Operation{
		Name:       opDescribeVirtualInterface,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeVirtualInterfaceInput{}
	}

	output = &DescribeVirtualInterfaceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeVirtualInterface API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation DescribeVirtualInterface for usage and error information.
func (c *EDX) DescribeVirtualInterface(input *DescribeVirtualInterfaceInput) (*DescribeVirtualInterfaceOutput, error) {
	req, out := c.DescribeVirtualInterfaceRequest(input)
	return out, req.Send()
}

// DescribeVirtualInterfaceWithContext is the same as DescribeVirtualInterface with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVirtualInterface for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) DescribeVirtualInterfaceWithContext(ctx volcengine.Context, input *DescribeVirtualInterfaceInput, opts ...request.Option) (*DescribeVirtualInterfaceOutput, error) {
	req, out := c.DescribeVirtualInterfaceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeVirtualInterfaceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeVirtualInterfaceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVirtualInterfaceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeVirtualInterfaceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeVirtualInterfaceInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeVirtualInterfaceInput) SetInstanceId(v string) *DescribeVirtualInterfaceInput {
	s.InstanceId = &v
	return s
}

type DescribeVirtualInterfaceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	VIF *VIFForDescribeVirtualInterfaceOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DescribeVirtualInterfaceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVirtualInterfaceOutput) GoString() string {
	return s.String()
}

// SetVIF sets the VIF field's value.
func (s *DescribeVirtualInterfaceOutput) SetVIF(v *VIFForDescribeVirtualInterfaceOutput) *DescribeVirtualInterfaceOutput {
	s.VIF = v
	return s
}

type VIFForDescribeVirtualInterfaceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccessPoint *string `type:"string" json:",omitempty"`

	AccountId *int32 `type:"int32" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	CrossAccount *bool `type:"boolean" json:",omitempty"`

	DXPInstanceId *string `type:"string" json:",omitempty"`

	DXPInstanceName *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	LocalIP *string `type:"string" json:",omitempty"`

	MaxBandwidth *int32 `type:"int32" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	PeerIP *string `type:"string" json:",omitempty"`

	State *string `type:"string" json:",omitempty"`

	VIFVGWInstanceId *string `type:"string" json:",omitempty"`

	VlanId *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s VIFForDescribeVirtualInterfaceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s VIFForDescribeVirtualInterfaceOutput) GoString() string {
	return s.String()
}

// SetAccessPoint sets the AccessPoint field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetAccessPoint(v string) *VIFForDescribeVirtualInterfaceOutput {
	s.AccessPoint = &v
	return s
}

// SetAccountId sets the AccountId field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetAccountId(v int32) *VIFForDescribeVirtualInterfaceOutput {
	s.AccountId = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetCreateTime(v string) *VIFForDescribeVirtualInterfaceOutput {
	s.CreateTime = &v
	return s
}

// SetCrossAccount sets the CrossAccount field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetCrossAccount(v bool) *VIFForDescribeVirtualInterfaceOutput {
	s.CrossAccount = &v
	return s
}

// SetDXPInstanceId sets the DXPInstanceId field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetDXPInstanceId(v string) *VIFForDescribeVirtualInterfaceOutput {
	s.DXPInstanceId = &v
	return s
}

// SetDXPInstanceName sets the DXPInstanceName field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetDXPInstanceName(v string) *VIFForDescribeVirtualInterfaceOutput {
	s.DXPInstanceName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetInstanceId(v string) *VIFForDescribeVirtualInterfaceOutput {
	s.InstanceId = &v
	return s
}

// SetLocalIP sets the LocalIP field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetLocalIP(v string) *VIFForDescribeVirtualInterfaceOutput {
	s.LocalIP = &v
	return s
}

// SetMaxBandwidth sets the MaxBandwidth field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetMaxBandwidth(v int32) *VIFForDescribeVirtualInterfaceOutput {
	s.MaxBandwidth = &v
	return s
}

// SetName sets the Name field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetName(v string) *VIFForDescribeVirtualInterfaceOutput {
	s.Name = &v
	return s
}

// SetPeerIP sets the PeerIP field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetPeerIP(v string) *VIFForDescribeVirtualInterfaceOutput {
	s.PeerIP = &v
	return s
}

// SetState sets the State field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetState(v string) *VIFForDescribeVirtualInterfaceOutput {
	s.State = &v
	return s
}

// SetVIFVGWInstanceId sets the VIFVGWInstanceId field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetVIFVGWInstanceId(v string) *VIFForDescribeVirtualInterfaceOutput {
	s.VIFVGWInstanceId = &v
	return s
}

// SetVlanId sets the VlanId field's value.
func (s *VIFForDescribeVirtualInterfaceOutput) SetVlanId(v int32) *VIFForDescribeVirtualInterfaceOutput {
	s.VlanId = &v
	return s
}
