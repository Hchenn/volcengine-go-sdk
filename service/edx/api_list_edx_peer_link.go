// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListEDXPeerLinkCommon = "ListEDXPeerLink"

// ListEDXPeerLinkCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListEDXPeerLinkCommon operation. The "output" return
// value will be populated with the ListEDXPeerLinkCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListEDXPeerLinkCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListEDXPeerLinkCommon Send returns without error.
//
// See ListEDXPeerLinkCommon for more information on using the ListEDXPeerLinkCommon
// API call, and error handling.
//
//    // Example sending a request using the ListEDXPeerLinkCommonRequest method.
//    req, resp := client.ListEDXPeerLinkCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ListEDXPeerLinkCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListEDXPeerLinkCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListEDXPeerLinkCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ListEDXPeerLinkCommon for usage and error information.
func (c *EDX) ListEDXPeerLinkCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListEDXPeerLinkCommonRequest(input)
	return out, req.Send()
}

// ListEDXPeerLinkCommonWithContext is the same as ListEDXPeerLinkCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListEDXPeerLinkCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ListEDXPeerLinkCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListEDXPeerLinkCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListEDXPeerLink = "ListEDXPeerLink"

// ListEDXPeerLinkRequest generates a "volcengine/request.Request" representing the
// client's request for the ListEDXPeerLink operation. The "output" return
// value will be populated with the ListEDXPeerLinkCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListEDXPeerLinkCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListEDXPeerLinkCommon Send returns without error.
//
// See ListEDXPeerLink for more information on using the ListEDXPeerLink
// API call, and error handling.
//
//    // Example sending a request using the ListEDXPeerLinkRequest method.
//    req, resp := client.ListEDXPeerLinkRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ListEDXPeerLinkRequest(input *ListEDXPeerLinkInput) (req *request.Request, output *ListEDXPeerLinkOutput) {
	op := &request.Operation{
		Name:       opListEDXPeerLink,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListEDXPeerLinkInput{}
	}

	output = &ListEDXPeerLinkOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListEDXPeerLink API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ListEDXPeerLink for usage and error information.
func (c *EDX) ListEDXPeerLink(input *ListEDXPeerLinkInput) (*ListEDXPeerLinkOutput, error) {
	req, out := c.ListEDXPeerLinkRequest(input)
	return out, req.Send()
}

// ListEDXPeerLinkWithContext is the same as ListEDXPeerLink with the addition of
// the ability to pass a context and additional request options.
//
// See ListEDXPeerLink for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ListEDXPeerLinkWithContext(ctx volcengine.Context, input *ListEDXPeerLinkInput, opts ...request.Option) (*ListEDXPeerLinkOutput, error) {
	req, out := c.ListEDXPeerLinkRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListEDXPeerLinkInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EDXInstanceId is a required field
	EDXInstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListEDXPeerLinkInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListEDXPeerLinkInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListEDXPeerLinkInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListEDXPeerLinkInput"}
	if s.EDXInstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("EDXInstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEDXInstanceId sets the EDXInstanceId field's value.
func (s *ListEDXPeerLinkInput) SetEDXInstanceId(v string) *ListEDXPeerLinkInput {
	s.EDXInstanceId = &v
	return s
}

type ListEDXPeerLinkOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	PeerLinkList []*PeerLinkListForListEDXPeerLinkOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListEDXPeerLinkOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListEDXPeerLinkOutput) GoString() string {
	return s.String()
}

// SetPeerLinkList sets the PeerLinkList field's value.
func (s *ListEDXPeerLinkOutput) SetPeerLinkList(v []*PeerLinkListForListEDXPeerLinkOutput) *ListEDXPeerLinkOutput {
	s.PeerLinkList = v
	return s
}

type PeerLinkListForListEDXPeerLinkOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BandwidthPkgId *string `type:"string" json:",omitempty"`

	BandwidthSize *int32 `type:"int32" json:",omitempty"`

	EDXInstanceId *string `type:"string" json:",omitempty"`

	EndVGWInstanceId *string `type:"string" json:",omitempty"`

	PeerLinkId *string `type:"string" json:",omitempty"`

	StartVGWInstanceId *string `type:"string" json:",omitempty"`

	State *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PeerLinkListForListEDXPeerLinkOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PeerLinkListForListEDXPeerLinkOutput) GoString() string {
	return s.String()
}

// SetBandwidthPkgId sets the BandwidthPkgId field's value.
func (s *PeerLinkListForListEDXPeerLinkOutput) SetBandwidthPkgId(v string) *PeerLinkListForListEDXPeerLinkOutput {
	s.BandwidthPkgId = &v
	return s
}

// SetBandwidthSize sets the BandwidthSize field's value.
func (s *PeerLinkListForListEDXPeerLinkOutput) SetBandwidthSize(v int32) *PeerLinkListForListEDXPeerLinkOutput {
	s.BandwidthSize = &v
	return s
}

// SetEDXInstanceId sets the EDXInstanceId field's value.
func (s *PeerLinkListForListEDXPeerLinkOutput) SetEDXInstanceId(v string) *PeerLinkListForListEDXPeerLinkOutput {
	s.EDXInstanceId = &v
	return s
}

// SetEndVGWInstanceId sets the EndVGWInstanceId field's value.
func (s *PeerLinkListForListEDXPeerLinkOutput) SetEndVGWInstanceId(v string) *PeerLinkListForListEDXPeerLinkOutput {
	s.EndVGWInstanceId = &v
	return s
}

// SetPeerLinkId sets the PeerLinkId field's value.
func (s *PeerLinkListForListEDXPeerLinkOutput) SetPeerLinkId(v string) *PeerLinkListForListEDXPeerLinkOutput {
	s.PeerLinkId = &v
	return s
}

// SetStartVGWInstanceId sets the StartVGWInstanceId field's value.
func (s *PeerLinkListForListEDXPeerLinkOutput) SetStartVGWInstanceId(v string) *PeerLinkListForListEDXPeerLinkOutput {
	s.StartVGWInstanceId = &v
	return s
}

// SetState sets the State field's value.
func (s *PeerLinkListForListEDXPeerLinkOutput) SetState(v string) *PeerLinkListForListEDXPeerLinkOutput {
	s.State = &v
	return s
}
