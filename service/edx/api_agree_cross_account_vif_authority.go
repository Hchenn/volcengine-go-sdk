// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAgreeCrossAccountVIFAuthorityCommon = "AgreeCrossAccountVIFAuthority"

// AgreeCrossAccountVIFAuthorityCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AgreeCrossAccountVIFAuthorityCommon operation. The "output" return
// value will be populated with the AgreeCrossAccountVIFAuthorityCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AgreeCrossAccountVIFAuthorityCommon Request to send the API call to the service.
// the "output" return value is not valid until after AgreeCrossAccountVIFAuthorityCommon Send returns without error.
//
// See AgreeCrossAccountVIFAuthorityCommon for more information on using the AgreeCrossAccountVIFAuthorityCommon
// API call, and error handling.
//
//    // Example sending a request using the AgreeCrossAccountVIFAuthorityCommonRequest method.
//    req, resp := client.AgreeCrossAccountVIFAuthorityCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) AgreeCrossAccountVIFAuthorityCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAgreeCrossAccountVIFAuthorityCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AgreeCrossAccountVIFAuthorityCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation AgreeCrossAccountVIFAuthorityCommon for usage and error information.
func (c *EDX) AgreeCrossAccountVIFAuthorityCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AgreeCrossAccountVIFAuthorityCommonRequest(input)
	return out, req.Send()
}

// AgreeCrossAccountVIFAuthorityCommonWithContext is the same as AgreeCrossAccountVIFAuthorityCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AgreeCrossAccountVIFAuthorityCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) AgreeCrossAccountVIFAuthorityCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AgreeCrossAccountVIFAuthorityCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAgreeCrossAccountVIFAuthority = "AgreeCrossAccountVIFAuthority"

// AgreeCrossAccountVIFAuthorityRequest generates a "volcengine/request.Request" representing the
// client's request for the AgreeCrossAccountVIFAuthority operation. The "output" return
// value will be populated with the AgreeCrossAccountVIFAuthorityCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AgreeCrossAccountVIFAuthorityCommon Request to send the API call to the service.
// the "output" return value is not valid until after AgreeCrossAccountVIFAuthorityCommon Send returns without error.
//
// See AgreeCrossAccountVIFAuthority for more information on using the AgreeCrossAccountVIFAuthority
// API call, and error handling.
//
//    // Example sending a request using the AgreeCrossAccountVIFAuthorityRequest method.
//    req, resp := client.AgreeCrossAccountVIFAuthorityRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) AgreeCrossAccountVIFAuthorityRequest(input *AgreeCrossAccountVIFAuthorityInput) (req *request.Request, output *AgreeCrossAccountVIFAuthorityOutput) {
	op := &request.Operation{
		Name:       opAgreeCrossAccountVIFAuthority,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AgreeCrossAccountVIFAuthorityInput{}
	}

	output = &AgreeCrossAccountVIFAuthorityOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// AgreeCrossAccountVIFAuthority API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation AgreeCrossAccountVIFAuthority for usage and error information.
func (c *EDX) AgreeCrossAccountVIFAuthority(input *AgreeCrossAccountVIFAuthorityInput) (*AgreeCrossAccountVIFAuthorityOutput, error) {
	req, out := c.AgreeCrossAccountVIFAuthorityRequest(input)
	return out, req.Send()
}

// AgreeCrossAccountVIFAuthorityWithContext is the same as AgreeCrossAccountVIFAuthority with the addition of
// the ability to pass a context and additional request options.
//
// See AgreeCrossAccountVIFAuthority for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) AgreeCrossAccountVIFAuthorityWithContext(ctx volcengine.Context, input *AgreeCrossAccountVIFAuthorityInput, opts ...request.Option) (*AgreeCrossAccountVIFAuthorityOutput, error) {
	req, out := c.AgreeCrossAccountVIFAuthorityRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AgreeCrossAccountVIFAuthorityInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// VGWAccountId is a required field
	VGWAccountId *int32 `type:"int32" json:",omitempty" required:"true"`

	// VIFInstanceId is a required field
	VIFInstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s AgreeCrossAccountVIFAuthorityInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AgreeCrossAccountVIFAuthorityInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AgreeCrossAccountVIFAuthorityInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AgreeCrossAccountVIFAuthorityInput"}
	if s.VGWAccountId == nil {
		invalidParams.Add(request.NewErrParamRequired("VGWAccountId"))
	}
	if s.VIFInstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("VIFInstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetVGWAccountId sets the VGWAccountId field's value.
func (s *AgreeCrossAccountVIFAuthorityInput) SetVGWAccountId(v int32) *AgreeCrossAccountVIFAuthorityInput {
	s.VGWAccountId = &v
	return s
}

// SetVIFInstanceId sets the VIFInstanceId field's value.
func (s *AgreeCrossAccountVIFAuthorityInput) SetVIFInstanceId(v string) *AgreeCrossAccountVIFAuthorityInput {
	s.VIFInstanceId = &v
	return s
}

type AgreeCrossAccountVIFAuthorityOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AgreeCrossAccountVIFAuthorityOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AgreeCrossAccountVIFAuthorityOutput) GoString() string {
	return s.String()
}
