// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeVirtualInterfaceBFDCommon = "DescribeVirtualInterfaceBFD"

// DescribeVirtualInterfaceBFDCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeVirtualInterfaceBFDCommon operation. The "output" return
// value will be populated with the DescribeVirtualInterfaceBFDCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeVirtualInterfaceBFDCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeVirtualInterfaceBFDCommon Send returns without error.
//
// See DescribeVirtualInterfaceBFDCommon for more information on using the DescribeVirtualInterfaceBFDCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeVirtualInterfaceBFDCommonRequest method.
//    req, resp := client.DescribeVirtualInterfaceBFDCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) DescribeVirtualInterfaceBFDCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeVirtualInterfaceBFDCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeVirtualInterfaceBFDCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation DescribeVirtualInterfaceBFDCommon for usage and error information.
func (c *EDX) DescribeVirtualInterfaceBFDCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeVirtualInterfaceBFDCommonRequest(input)
	return out, req.Send()
}

// DescribeVirtualInterfaceBFDCommonWithContext is the same as DescribeVirtualInterfaceBFDCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVirtualInterfaceBFDCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) DescribeVirtualInterfaceBFDCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeVirtualInterfaceBFDCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeVirtualInterfaceBFD = "DescribeVirtualInterfaceBFD"

// DescribeVirtualInterfaceBFDRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeVirtualInterfaceBFD operation. The "output" return
// value will be populated with the DescribeVirtualInterfaceBFDCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeVirtualInterfaceBFDCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeVirtualInterfaceBFDCommon Send returns without error.
//
// See DescribeVirtualInterfaceBFD for more information on using the DescribeVirtualInterfaceBFD
// API call, and error handling.
//
//    // Example sending a request using the DescribeVirtualInterfaceBFDRequest method.
//    req, resp := client.DescribeVirtualInterfaceBFDRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) DescribeVirtualInterfaceBFDRequest(input *DescribeVirtualInterfaceBFDInput) (req *request.Request, output *DescribeVirtualInterfaceBFDOutput) {
	op := &request.Operation{
		Name:       opDescribeVirtualInterfaceBFD,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeVirtualInterfaceBFDInput{}
	}

	output = &DescribeVirtualInterfaceBFDOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeVirtualInterfaceBFD API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation DescribeVirtualInterfaceBFD for usage and error information.
func (c *EDX) DescribeVirtualInterfaceBFD(input *DescribeVirtualInterfaceBFDInput) (*DescribeVirtualInterfaceBFDOutput, error) {
	req, out := c.DescribeVirtualInterfaceBFDRequest(input)
	return out, req.Send()
}

// DescribeVirtualInterfaceBFDWithContext is the same as DescribeVirtualInterfaceBFD with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVirtualInterfaceBFD for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) DescribeVirtualInterfaceBFDWithContext(ctx volcengine.Context, input *DescribeVirtualInterfaceBFDInput, opts ...request.Option) (*DescribeVirtualInterfaceBFDOutput, error) {
	req, out := c.DescribeVirtualInterfaceBFDRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeVirtualInterfaceBFDInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// VIFInstanceId is a required field
	VIFInstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeVirtualInterfaceBFDInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVirtualInterfaceBFDInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeVirtualInterfaceBFDInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeVirtualInterfaceBFDInput"}
	if s.VIFInstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("VIFInstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetVIFInstanceId sets the VIFInstanceId field's value.
func (s *DescribeVirtualInterfaceBFDInput) SetVIFInstanceId(v string) *DescribeVirtualInterfaceBFDInput {
	s.VIFInstanceId = &v
	return s
}

type DescribeVirtualInterfaceBFDOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CreateTime *string `type:"string" json:",omitempty"`

	DetectMultiplier *int32 `type:"int32" json:",omitempty"`

	Enabled *bool `type:"boolean" json:",omitempty"`

	ReceiveInterval *int32 `type:"int32" json:",omitempty"`

	State *string `type:"string" json:",omitempty"`

	TransmitInterval *int32 `type:"int32" json:",omitempty"`

	VIFInstanceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeVirtualInterfaceBFDOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVirtualInterfaceBFDOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *DescribeVirtualInterfaceBFDOutput) SetCreateTime(v string) *DescribeVirtualInterfaceBFDOutput {
	s.CreateTime = &v
	return s
}

// SetDetectMultiplier sets the DetectMultiplier field's value.
func (s *DescribeVirtualInterfaceBFDOutput) SetDetectMultiplier(v int32) *DescribeVirtualInterfaceBFDOutput {
	s.DetectMultiplier = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *DescribeVirtualInterfaceBFDOutput) SetEnabled(v bool) *DescribeVirtualInterfaceBFDOutput {
	s.Enabled = &v
	return s
}

// SetReceiveInterval sets the ReceiveInterval field's value.
func (s *DescribeVirtualInterfaceBFDOutput) SetReceiveInterval(v int32) *DescribeVirtualInterfaceBFDOutput {
	s.ReceiveInterval = &v
	return s
}

// SetState sets the State field's value.
func (s *DescribeVirtualInterfaceBFDOutput) SetState(v string) *DescribeVirtualInterfaceBFDOutput {
	s.State = &v
	return s
}

// SetTransmitInterval sets the TransmitInterval field's value.
func (s *DescribeVirtualInterfaceBFDOutput) SetTransmitInterval(v int32) *DescribeVirtualInterfaceBFDOutput {
	s.TransmitInterval = &v
	return s
}

// SetVIFInstanceId sets the VIFInstanceId field's value.
func (s *DescribeVirtualInterfaceBFDOutput) SetVIFInstanceId(v string) *DescribeVirtualInterfaceBFDOutput {
	s.VIFInstanceId = &v
	return s
}
