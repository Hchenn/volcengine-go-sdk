// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetDXPTrafficStatisticCommon = "GetDXPTrafficStatistic"

// GetDXPTrafficStatisticCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetDXPTrafficStatisticCommon operation. The "output" return
// value will be populated with the GetDXPTrafficStatisticCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetDXPTrafficStatisticCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetDXPTrafficStatisticCommon Send returns without error.
//
// See GetDXPTrafficStatisticCommon for more information on using the GetDXPTrafficStatisticCommon
// API call, and error handling.
//
//    // Example sending a request using the GetDXPTrafficStatisticCommonRequest method.
//    req, resp := client.GetDXPTrafficStatisticCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) GetDXPTrafficStatisticCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetDXPTrafficStatisticCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetDXPTrafficStatisticCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation GetDXPTrafficStatisticCommon for usage and error information.
func (c *EDX) GetDXPTrafficStatisticCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetDXPTrafficStatisticCommonRequest(input)
	return out, req.Send()
}

// GetDXPTrafficStatisticCommonWithContext is the same as GetDXPTrafficStatisticCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetDXPTrafficStatisticCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) GetDXPTrafficStatisticCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetDXPTrafficStatisticCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetDXPTrafficStatistic = "GetDXPTrafficStatistic"

// GetDXPTrafficStatisticRequest generates a "volcengine/request.Request" representing the
// client's request for the GetDXPTrafficStatistic operation. The "output" return
// value will be populated with the GetDXPTrafficStatisticCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetDXPTrafficStatisticCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetDXPTrafficStatisticCommon Send returns without error.
//
// See GetDXPTrafficStatistic for more information on using the GetDXPTrafficStatistic
// API call, and error handling.
//
//    // Example sending a request using the GetDXPTrafficStatisticRequest method.
//    req, resp := client.GetDXPTrafficStatisticRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) GetDXPTrafficStatisticRequest(input *GetDXPTrafficStatisticInput) (req *request.Request, output *GetDXPTrafficStatisticOutput) {
	op := &request.Operation{
		Name:       opGetDXPTrafficStatistic,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetDXPTrafficStatisticInput{}
	}

	output = &GetDXPTrafficStatisticOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetDXPTrafficStatistic API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation GetDXPTrafficStatistic for usage and error information.
func (c *EDX) GetDXPTrafficStatistic(input *GetDXPTrafficStatisticInput) (*GetDXPTrafficStatisticOutput, error) {
	req, out := c.GetDXPTrafficStatisticRequest(input)
	return out, req.Send()
}

// GetDXPTrafficStatisticWithContext is the same as GetDXPTrafficStatistic with the addition of
// the ability to pass a context and additional request options.
//
// See GetDXPTrafficStatistic for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) GetDXPTrafficStatisticWithContext(ctx volcengine.Context, input *GetDXPTrafficStatisticInput, opts ...request.Option) (*GetDXPTrafficStatisticOutput, error) {
	req, out := c.GetDXPTrafficStatisticRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetDXPTrafficStatisticInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BeginTime *string `type:"string" json:",omitempty"`

	EndTime *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	Legend *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetDXPTrafficStatisticInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDXPTrafficStatisticInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetDXPTrafficStatisticInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetDXPTrafficStatisticInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBeginTime sets the BeginTime field's value.
func (s *GetDXPTrafficStatisticInput) SetBeginTime(v string) *GetDXPTrafficStatisticInput {
	s.BeginTime = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *GetDXPTrafficStatisticInput) SetEndTime(v string) *GetDXPTrafficStatisticInput {
	s.EndTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *GetDXPTrafficStatisticInput) SetInstanceId(v string) *GetDXPTrafficStatisticInput {
	s.InstanceId = &v
	return s
}

// SetLegend sets the Legend field's value.
func (s *GetDXPTrafficStatisticInput) SetLegend(v string) *GetDXPTrafficStatisticInput {
	s.Legend = &v
	return s
}

type GetDXPTrafficStatisticOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	In []*InForGetDXPTrafficStatisticOutput `type:"list" json:",omitempty"`

	Out []*OutForGetDXPTrafficStatisticOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s GetDXPTrafficStatisticOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDXPTrafficStatisticOutput) GoString() string {
	return s.String()
}

// SetIn sets the In field's value.
func (s *GetDXPTrafficStatisticOutput) SetIn(v []*InForGetDXPTrafficStatisticOutput) *GetDXPTrafficStatisticOutput {
	s.In = v
	return s
}

// SetOut sets the Out field's value.
func (s *GetDXPTrafficStatisticOutput) SetOut(v []*OutForGetDXPTrafficStatisticOutput) *GetDXPTrafficStatisticOutput {
	s.Out = v
	return s
}

type InForGetDXPTrafficStatisticOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Time *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s InForGetDXPTrafficStatisticOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InForGetDXPTrafficStatisticOutput) GoString() string {
	return s.String()
}

// SetTime sets the Time field's value.
func (s *InForGetDXPTrafficStatisticOutput) SetTime(v string) *InForGetDXPTrafficStatisticOutput {
	s.Time = &v
	return s
}

// SetValue sets the Value field's value.
func (s *InForGetDXPTrafficStatisticOutput) SetValue(v string) *InForGetDXPTrafficStatisticOutput {
	s.Value = &v
	return s
}

type OutForGetDXPTrafficStatisticOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Time *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s OutForGetDXPTrafficStatisticOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OutForGetDXPTrafficStatisticOutput) GoString() string {
	return s.String()
}

// SetTime sets the Time field's value.
func (s *OutForGetDXPTrafficStatisticOutput) SetTime(v string) *OutForGetDXPTrafficStatisticOutput {
	s.Time = &v
	return s
}

// SetValue sets the Value field's value.
func (s *OutForGetDXPTrafficStatisticOutput) SetValue(v string) *OutForGetDXPTrafficStatisticOutput {
	s.Value = &v
	return s
}
