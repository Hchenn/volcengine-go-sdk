// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyDXPConnectionCommon = "ModifyDXPConnection"

// ModifyDXPConnectionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDXPConnectionCommon operation. The "output" return
// value will be populated with the ModifyDXPConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDXPConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDXPConnectionCommon Send returns without error.
//
// See ModifyDXPConnectionCommon for more information on using the ModifyDXPConnectionCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDXPConnectionCommonRequest method.
//    req, resp := client.ModifyDXPConnectionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ModifyDXPConnectionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDXPConnectionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDXPConnectionCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ModifyDXPConnectionCommon for usage and error information.
func (c *EDX) ModifyDXPConnectionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDXPConnectionCommonRequest(input)
	return out, req.Send()
}

// ModifyDXPConnectionCommonWithContext is the same as ModifyDXPConnectionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDXPConnectionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ModifyDXPConnectionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDXPConnectionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDXPConnection = "ModifyDXPConnection"

// ModifyDXPConnectionRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDXPConnection operation. The "output" return
// value will be populated with the ModifyDXPConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDXPConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDXPConnectionCommon Send returns without error.
//
// See ModifyDXPConnection for more information on using the ModifyDXPConnection
// API call, and error handling.
//
//    // Example sending a request using the ModifyDXPConnectionRequest method.
//    req, resp := client.ModifyDXPConnectionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ModifyDXPConnectionRequest(input *ModifyDXPConnectionInput) (req *request.Request, output *ModifyDXPConnectionOutput) {
	op := &request.Operation{
		Name:       opModifyDXPConnection,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDXPConnectionInput{}
	}

	output = &ModifyDXPConnectionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDXPConnection API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ModifyDXPConnection for usage and error information.
func (c *EDX) ModifyDXPConnection(input *ModifyDXPConnectionInput) (*ModifyDXPConnectionOutput, error) {
	req, out := c.ModifyDXPConnectionRequest(input)
	return out, req.Send()
}

// ModifyDXPConnectionWithContext is the same as ModifyDXPConnection with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDXPConnection for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ModifyDXPConnectionWithContext(ctx volcengine.Context, input *ModifyDXPConnectionInput, opts ...request.Option) (*ModifyDXPConnectionOutput, error) {
	req, out := c.ModifyDXPConnectionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FieldEngineerForModifyDXPConnectionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Phone *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FieldEngineerForModifyDXPConnectionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s FieldEngineerForModifyDXPConnectionInput) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *FieldEngineerForModifyDXPConnectionInput) SetName(v string) *FieldEngineerForModifyDXPConnectionInput {
	s.Name = &v
	return s
}

// SetPhone sets the Phone field's value.
func (s *FieldEngineerForModifyDXPConnectionInput) SetPhone(v string) *FieldEngineerForModifyDXPConnectionInput {
	s.Phone = &v
	return s
}

type ModifyDXPConnectionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Bandwidth *string `type:"string" json:",omitempty"`

	ContactName *string `type:"string" json:",omitempty"`

	ContactPhone *string `type:"string" json:",omitempty"`

	FieldEngineer []*FieldEngineerForModifyDXPConnectionInput `type:"list" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyDXPConnectionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDXPConnectionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDXPConnectionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDXPConnectionInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidth sets the Bandwidth field's value.
func (s *ModifyDXPConnectionInput) SetBandwidth(v string) *ModifyDXPConnectionInput {
	s.Bandwidth = &v
	return s
}

// SetContactName sets the ContactName field's value.
func (s *ModifyDXPConnectionInput) SetContactName(v string) *ModifyDXPConnectionInput {
	s.ContactName = &v
	return s
}

// SetContactPhone sets the ContactPhone field's value.
func (s *ModifyDXPConnectionInput) SetContactPhone(v string) *ModifyDXPConnectionInput {
	s.ContactPhone = &v
	return s
}

// SetFieldEngineer sets the FieldEngineer field's value.
func (s *ModifyDXPConnectionInput) SetFieldEngineer(v []*FieldEngineerForModifyDXPConnectionInput) *ModifyDXPConnectionInput {
	s.FieldEngineer = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDXPConnectionInput) SetInstanceId(v string) *ModifyDXPConnectionInput {
	s.InstanceId = &v
	return s
}

type ModifyDXPConnectionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyDXPConnectionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDXPConnectionOutput) GoString() string {
	return s.String()
}
