// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListDXPAccessPointsCommon = "ListDXPAccessPoints"

// ListDXPAccessPointsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListDXPAccessPointsCommon operation. The "output" return
// value will be populated with the ListDXPAccessPointsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDXPAccessPointsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDXPAccessPointsCommon Send returns without error.
//
// See ListDXPAccessPointsCommon for more information on using the ListDXPAccessPointsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListDXPAccessPointsCommonRequest method.
//    req, resp := client.ListDXPAccessPointsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ListDXPAccessPointsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListDXPAccessPointsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDXPAccessPointsCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ListDXPAccessPointsCommon for usage and error information.
func (c *EDX) ListDXPAccessPointsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListDXPAccessPointsCommonRequest(input)
	return out, req.Send()
}

// ListDXPAccessPointsCommonWithContext is the same as ListDXPAccessPointsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListDXPAccessPointsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ListDXPAccessPointsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListDXPAccessPointsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDXPAccessPoints = "ListDXPAccessPoints"

// ListDXPAccessPointsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListDXPAccessPoints operation. The "output" return
// value will be populated with the ListDXPAccessPointsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDXPAccessPointsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDXPAccessPointsCommon Send returns without error.
//
// See ListDXPAccessPoints for more information on using the ListDXPAccessPoints
// API call, and error handling.
//
//    // Example sending a request using the ListDXPAccessPointsRequest method.
//    req, resp := client.ListDXPAccessPointsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ListDXPAccessPointsRequest(input *ListDXPAccessPointsInput) (req *request.Request, output *ListDXPAccessPointsOutput) {
	op := &request.Operation{
		Name:       opListDXPAccessPoints,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListDXPAccessPointsInput{}
	}

	output = &ListDXPAccessPointsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDXPAccessPoints API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ListDXPAccessPoints for usage and error information.
func (c *EDX) ListDXPAccessPoints(input *ListDXPAccessPointsInput) (*ListDXPAccessPointsOutput, error) {
	req, out := c.ListDXPAccessPointsRequest(input)
	return out, req.Send()
}

// ListDXPAccessPointsWithContext is the same as ListDXPAccessPoints with the addition of
// the ability to pass a context and additional request options.
//
// See ListDXPAccessPoints for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ListDXPAccessPointsWithContext(ctx volcengine.Context, input *ListDXPAccessPointsInput, opts ...request.Option) (*ListDXPAccessPointsOutput, error) {
	req, out := c.ListDXPAccessPointsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type APListForListDXPAccessPointsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AP *string `type:"string" json:",omitempty"`

	Building *string `type:"string" json:",omitempty"`

	ISPList []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s APListForListDXPAccessPointsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s APListForListDXPAccessPointsOutput) GoString() string {
	return s.String()
}

// SetAP sets the AP field's value.
func (s *APListForListDXPAccessPointsOutput) SetAP(v string) *APListForListDXPAccessPointsOutput {
	s.AP = &v
	return s
}

// SetBuilding sets the Building field's value.
func (s *APListForListDXPAccessPointsOutput) SetBuilding(v string) *APListForListDXPAccessPointsOutput {
	s.Building = &v
	return s
}

// SetISPList sets the ISPList field's value.
func (s *APListForListDXPAccessPointsOutput) SetISPList(v []*string) *APListForListDXPAccessPointsOutput {
	s.ISPList = v
	return s
}

type AreaListForListDXPAccessPointsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Area *string `type:"string" json:",omitempty"`

	CityList []*CityListForListDXPAccessPointsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s AreaListForListDXPAccessPointsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AreaListForListDXPAccessPointsOutput) GoString() string {
	return s.String()
}

// SetArea sets the Area field's value.
func (s *AreaListForListDXPAccessPointsOutput) SetArea(v string) *AreaListForListDXPAccessPointsOutput {
	s.Area = &v
	return s
}

// SetCityList sets the CityList field's value.
func (s *AreaListForListDXPAccessPointsOutput) SetCityList(v []*CityListForListDXPAccessPointsOutput) *AreaListForListDXPAccessPointsOutput {
	s.CityList = v
	return s
}

type CityListForListDXPAccessPointsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	APList []*APListForListDXPAccessPointsOutput `type:"list" json:",omitempty"`

	City *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CityListForListDXPAccessPointsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CityListForListDXPAccessPointsOutput) GoString() string {
	return s.String()
}

// SetAPList sets the APList field's value.
func (s *CityListForListDXPAccessPointsOutput) SetAPList(v []*APListForListDXPAccessPointsOutput) *CityListForListDXPAccessPointsOutput {
	s.APList = v
	return s
}

// SetCity sets the City field's value.
func (s *CityListForListDXPAccessPointsOutput) SetCity(v string) *CityListForListDXPAccessPointsOutput {
	s.City = &v
	return s
}

type ListDXPAccessPointsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ListDXPAccessPointsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDXPAccessPointsInput) GoString() string {
	return s.String()
}

type ListDXPAccessPointsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AreaList []*AreaListForListDXPAccessPointsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListDXPAccessPointsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDXPAccessPointsOutput) GoString() string {
	return s.String()
}

// SetAreaList sets the AreaList field's value.
func (s *ListDXPAccessPointsOutput) SetAreaList(v []*AreaListForListDXPAccessPointsOutput) *ListDXPAccessPointsOutput {
	s.AreaList = v
	return s
}
