// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteEDXCommon = "DeleteEDX"

// DeleteEDXCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteEDXCommon operation. The "output" return
// value will be populated with the DeleteEDXCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteEDXCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteEDXCommon Send returns without error.
//
// See DeleteEDXCommon for more information on using the DeleteEDXCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteEDXCommonRequest method.
//    req, resp := client.DeleteEDXCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) DeleteEDXCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteEDXCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteEDXCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation DeleteEDXCommon for usage and error information.
func (c *EDX) DeleteEDXCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteEDXCommonRequest(input)
	return out, req.Send()
}

// DeleteEDXCommonWithContext is the same as DeleteEDXCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteEDXCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) DeleteEDXCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteEDXCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteEDX = "DeleteEDX"

// DeleteEDXRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteEDX operation. The "output" return
// value will be populated with the DeleteEDXCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteEDXCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteEDXCommon Send returns without error.
//
// See DeleteEDX for more information on using the DeleteEDX
// API call, and error handling.
//
//    // Example sending a request using the DeleteEDXRequest method.
//    req, resp := client.DeleteEDXRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) DeleteEDXRequest(input *DeleteEDXInput) (req *request.Request, output *DeleteEDXOutput) {
	op := &request.Operation{
		Name:       opDeleteEDX,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteEDXInput{}
	}

	output = &DeleteEDXOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteEDX API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation DeleteEDX for usage and error information.
func (c *EDX) DeleteEDX(input *DeleteEDXInput) (*DeleteEDXOutput, error) {
	req, out := c.DeleteEDXRequest(input)
	return out, req.Send()
}

// DeleteEDXWithContext is the same as DeleteEDX with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteEDX for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) DeleteEDXWithContext(ctx volcengine.Context, input *DeleteEDXInput, opts ...request.Option) (*DeleteEDXOutput, error) {
	req, out := c.DeleteEDXRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteEDXInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteEDXInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteEDXInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteEDXInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteEDXInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteEDXInput) SetInstanceId(v string) *DeleteEDXInput {
	s.InstanceId = &v
	return s
}

type DeleteEDXOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteEDXOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteEDXOutput) GoString() string {
	return s.String()
}
