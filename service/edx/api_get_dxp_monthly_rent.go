// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetDXPMonthlyRentCommon = "GetDXPMonthlyRent"

// GetDXPMonthlyRentCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetDXPMonthlyRentCommon operation. The "output" return
// value will be populated with the GetDXPMonthlyRentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetDXPMonthlyRentCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetDXPMonthlyRentCommon Send returns without error.
//
// See GetDXPMonthlyRentCommon for more information on using the GetDXPMonthlyRentCommon
// API call, and error handling.
//
//    // Example sending a request using the GetDXPMonthlyRentCommonRequest method.
//    req, resp := client.GetDXPMonthlyRentCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) GetDXPMonthlyRentCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetDXPMonthlyRentCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetDXPMonthlyRentCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation GetDXPMonthlyRentCommon for usage and error information.
func (c *EDX) GetDXPMonthlyRentCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetDXPMonthlyRentCommonRequest(input)
	return out, req.Send()
}

// GetDXPMonthlyRentCommonWithContext is the same as GetDXPMonthlyRentCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetDXPMonthlyRentCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) GetDXPMonthlyRentCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetDXPMonthlyRentCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetDXPMonthlyRent = "GetDXPMonthlyRent"

// GetDXPMonthlyRentRequest generates a "volcengine/request.Request" representing the
// client's request for the GetDXPMonthlyRent operation. The "output" return
// value will be populated with the GetDXPMonthlyRentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetDXPMonthlyRentCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetDXPMonthlyRentCommon Send returns without error.
//
// See GetDXPMonthlyRent for more information on using the GetDXPMonthlyRent
// API call, and error handling.
//
//    // Example sending a request using the GetDXPMonthlyRentRequest method.
//    req, resp := client.GetDXPMonthlyRentRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) GetDXPMonthlyRentRequest(input *GetDXPMonthlyRentInput) (req *request.Request, output *GetDXPMonthlyRentOutput) {
	op := &request.Operation{
		Name:       opGetDXPMonthlyRent,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetDXPMonthlyRentInput{}
	}

	output = &GetDXPMonthlyRentOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetDXPMonthlyRent API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation GetDXPMonthlyRent for usage and error information.
func (c *EDX) GetDXPMonthlyRent(input *GetDXPMonthlyRentInput) (*GetDXPMonthlyRentOutput, error) {
	req, out := c.GetDXPMonthlyRentRequest(input)
	return out, req.Send()
}

// GetDXPMonthlyRentWithContext is the same as GetDXPMonthlyRent with the addition of
// the ability to pass a context and additional request options.
//
// See GetDXPMonthlyRent for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) GetDXPMonthlyRentWithContext(ctx volcengine.Context, input *GetDXPMonthlyRentInput, opts ...request.Option) (*GetDXPMonthlyRentOutput, error) {
	req, out := c.GetDXPMonthlyRentRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetDXPMonthlyRentInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// BillingMode is a required field
	BillingMode *string `type:"string" json:",omitempty" required:"true"`

	// BuyDuration is a required field
	BuyDuration *int32 `type:"int32" json:",omitempty" required:"true"`

	// PortType is a required field
	PortType *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetDXPMonthlyRentInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDXPMonthlyRentInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetDXPMonthlyRentInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetDXPMonthlyRentInput"}
	if s.BillingMode == nil {
		invalidParams.Add(request.NewErrParamRequired("BillingMode"))
	}
	if s.BuyDuration == nil {
		invalidParams.Add(request.NewErrParamRequired("BuyDuration"))
	}
	if s.PortType == nil {
		invalidParams.Add(request.NewErrParamRequired("PortType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBillingMode sets the BillingMode field's value.
func (s *GetDXPMonthlyRentInput) SetBillingMode(v string) *GetDXPMonthlyRentInput {
	s.BillingMode = &v
	return s
}

// SetBuyDuration sets the BuyDuration field's value.
func (s *GetDXPMonthlyRentInput) SetBuyDuration(v int32) *GetDXPMonthlyRentInput {
	s.BuyDuration = &v
	return s
}

// SetPortType sets the PortType field's value.
func (s *GetDXPMonthlyRentInput) SetPortType(v string) *GetDXPMonthlyRentInput {
	s.PortType = &v
	return s
}

type GetDXPMonthlyRentOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CouponAmount *float64 `type:"double" json:",omitempty"`

	Currency *string `type:"string" json:",omitempty"`

	DiscountAmount *float64 `type:"double" json:",omitempty"`

	OriginalAmount *float64 `type:"double" json:",omitempty"`

	PayableAmount *float64 `type:"double" json:",omitempty"`
}

// String returns the string representation
func (s GetDXPMonthlyRentOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDXPMonthlyRentOutput) GoString() string {
	return s.String()
}

// SetCouponAmount sets the CouponAmount field's value.
func (s *GetDXPMonthlyRentOutput) SetCouponAmount(v float64) *GetDXPMonthlyRentOutput {
	s.CouponAmount = &v
	return s
}

// SetCurrency sets the Currency field's value.
func (s *GetDXPMonthlyRentOutput) SetCurrency(v string) *GetDXPMonthlyRentOutput {
	s.Currency = &v
	return s
}

// SetDiscountAmount sets the DiscountAmount field's value.
func (s *GetDXPMonthlyRentOutput) SetDiscountAmount(v float64) *GetDXPMonthlyRentOutput {
	s.DiscountAmount = &v
	return s
}

// SetOriginalAmount sets the OriginalAmount field's value.
func (s *GetDXPMonthlyRentOutput) SetOriginalAmount(v float64) *GetDXPMonthlyRentOutput {
	s.OriginalAmount = &v
	return s
}

// SetPayableAmount sets the PayableAmount field's value.
func (s *GetDXPMonthlyRentOutput) SetPayableAmount(v float64) *GetDXPMonthlyRentOutput {
	s.PayableAmount = &v
	return s
}
