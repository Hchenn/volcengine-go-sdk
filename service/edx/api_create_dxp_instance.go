// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateDXPInstanceCommon = "CreateDXPInstance"

// CreateDXPInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateDXPInstanceCommon operation. The "output" return
// value will be populated with the CreateDXPInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDXPInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDXPInstanceCommon Send returns without error.
//
// See CreateDXPInstanceCommon for more information on using the CreateDXPInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDXPInstanceCommonRequest method.
//    req, resp := client.CreateDXPInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) CreateDXPInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDXPInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDXPInstanceCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation CreateDXPInstanceCommon for usage and error information.
func (c *EDX) CreateDXPInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDXPInstanceCommonRequest(input)
	return out, req.Send()
}

// CreateDXPInstanceCommonWithContext is the same as CreateDXPInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDXPInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) CreateDXPInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDXPInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDXPInstance = "CreateDXPInstance"

// CreateDXPInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateDXPInstance operation. The "output" return
// value will be populated with the CreateDXPInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDXPInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDXPInstanceCommon Send returns without error.
//
// See CreateDXPInstance for more information on using the CreateDXPInstance
// API call, and error handling.
//
//    // Example sending a request using the CreateDXPInstanceRequest method.
//    req, resp := client.CreateDXPInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) CreateDXPInstanceRequest(input *CreateDXPInstanceInput) (req *request.Request, output *CreateDXPInstanceOutput) {
	op := &request.Operation{
		Name:       opCreateDXPInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDXPInstanceInput{}
	}

	output = &CreateDXPInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDXPInstance API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation CreateDXPInstance for usage and error information.
func (c *EDX) CreateDXPInstance(input *CreateDXPInstanceInput) (*CreateDXPInstanceOutput, error) {
	req, out := c.CreateDXPInstanceRequest(input)
	return out, req.Send()
}

// CreateDXPInstanceWithContext is the same as CreateDXPInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDXPInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) CreateDXPInstanceWithContext(ctx volcengine.Context, input *CreateDXPInstanceInput, opts ...request.Option) (*CreateDXPInstanceOutput, error) {
	req, out := c.CreateDXPInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateDXPInstanceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AP is a required field
	AP *string `type:"string" json:",omitempty" required:"true"`

	// Area is a required field
	Area *string `type:"string" json:",omitempty" required:"true"`

	City *string `type:"string" json:",omitempty"`

	// ISP is a required field
	ISP *string `type:"string" json:",omitempty" required:"true"`

	// InstanceName is a required field
	InstanceName *string `type:"string" json:",omitempty" required:"true"`

	// ModuleType is a required field
	ModuleType *string `type:"string" json:",omitempty" required:"true"`

	// PortType is a required field
	PortType *string `type:"string" json:",omitempty" required:"true"`

	SwitchId *string `type:"string" json:",omitempty"`

	SwitchInterfaceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateDXPInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDXPInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateDXPInstanceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateDXPInstanceInput"}
	if s.AP == nil {
		invalidParams.Add(request.NewErrParamRequired("AP"))
	}
	if s.Area == nil {
		invalidParams.Add(request.NewErrParamRequired("Area"))
	}
	if s.ISP == nil {
		invalidParams.Add(request.NewErrParamRequired("ISP"))
	}
	if s.InstanceName == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceName"))
	}
	if s.ModuleType == nil {
		invalidParams.Add(request.NewErrParamRequired("ModuleType"))
	}
	if s.PortType == nil {
		invalidParams.Add(request.NewErrParamRequired("PortType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAP sets the AP field's value.
func (s *CreateDXPInstanceInput) SetAP(v string) *CreateDXPInstanceInput {
	s.AP = &v
	return s
}

// SetArea sets the Area field's value.
func (s *CreateDXPInstanceInput) SetArea(v string) *CreateDXPInstanceInput {
	s.Area = &v
	return s
}

// SetCity sets the City field's value.
func (s *CreateDXPInstanceInput) SetCity(v string) *CreateDXPInstanceInput {
	s.City = &v
	return s
}

// SetISP sets the ISP field's value.
func (s *CreateDXPInstanceInput) SetISP(v string) *CreateDXPInstanceInput {
	s.ISP = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *CreateDXPInstanceInput) SetInstanceName(v string) *CreateDXPInstanceInput {
	s.InstanceName = &v
	return s
}

// SetModuleType sets the ModuleType field's value.
func (s *CreateDXPInstanceInput) SetModuleType(v string) *CreateDXPInstanceInput {
	s.ModuleType = &v
	return s
}

// SetPortType sets the PortType field's value.
func (s *CreateDXPInstanceInput) SetPortType(v string) *CreateDXPInstanceInput {
	s.PortType = &v
	return s
}

// SetSwitchId sets the SwitchId field's value.
func (s *CreateDXPInstanceInput) SetSwitchId(v string) *CreateDXPInstanceInput {
	s.SwitchId = &v
	return s
}

// SetSwitchInterfaceId sets the SwitchInterfaceId field's value.
func (s *CreateDXPInstanceInput) SetSwitchInterfaceId(v string) *CreateDXPInstanceInput {
	s.SwitchInterfaceId = &v
	return s
}

type CreateDXPInstanceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string" json:",omitempty"`

	PreOrderNumbers []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CreateDXPInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDXPInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateDXPInstanceOutput) SetInstanceId(v string) *CreateDXPInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetPreOrderNumbers sets the PreOrderNumbers field's value.
func (s *CreateDXPInstanceOutput) SetPreOrderNumbers(v []*string) *CreateDXPInstanceOutput {
	s.PreOrderNumbers = v
	return s
}
