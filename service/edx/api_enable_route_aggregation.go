// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opEnableRouteAggregationCommon = "EnableRouteAggregation"

// EnableRouteAggregationCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableRouteAggregationCommon operation. The "output" return
// value will be populated with the EnableRouteAggregationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableRouteAggregationCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableRouteAggregationCommon Send returns without error.
//
// See EnableRouteAggregationCommon for more information on using the EnableRouteAggregationCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableRouteAggregationCommonRequest method.
//    req, resp := client.EnableRouteAggregationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) EnableRouteAggregationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableRouteAggregationCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableRouteAggregationCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation EnableRouteAggregationCommon for usage and error information.
func (c *EDX) EnableRouteAggregationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableRouteAggregationCommonRequest(input)
	return out, req.Send()
}

// EnableRouteAggregationCommonWithContext is the same as EnableRouteAggregationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableRouteAggregationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) EnableRouteAggregationCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableRouteAggregationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableRouteAggregation = "EnableRouteAggregation"

// EnableRouteAggregationRequest generates a "volcengine/request.Request" representing the
// client's request for the EnableRouteAggregation operation. The "output" return
// value will be populated with the EnableRouteAggregationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableRouteAggregationCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableRouteAggregationCommon Send returns without error.
//
// See EnableRouteAggregation for more information on using the EnableRouteAggregation
// API call, and error handling.
//
//    // Example sending a request using the EnableRouteAggregationRequest method.
//    req, resp := client.EnableRouteAggregationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) EnableRouteAggregationRequest(input *EnableRouteAggregationInput) (req *request.Request, output *EnableRouteAggregationOutput) {
	op := &request.Operation{
		Name:       opEnableRouteAggregation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableRouteAggregationInput{}
	}

	output = &EnableRouteAggregationOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// EnableRouteAggregation API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation EnableRouteAggregation for usage and error information.
func (c *EDX) EnableRouteAggregation(input *EnableRouteAggregationInput) (*EnableRouteAggregationOutput, error) {
	req, out := c.EnableRouteAggregationRequest(input)
	return out, req.Send()
}

// EnableRouteAggregationWithContext is the same as EnableRouteAggregation with the addition of
// the ability to pass a context and additional request options.
//
// See EnableRouteAggregation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) EnableRouteAggregationWithContext(ctx volcengine.Context, input *EnableRouteAggregationInput, opts ...request.Option) (*EnableRouteAggregationOutput, error) {
	req, out := c.EnableRouteAggregationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnableRouteAggregationInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AggregationCidr is a required field
	AggregationCidr *string `type:"string" json:",omitempty" required:"true"`

	// Direction is a required field
	Direction *string `type:"string" json:",omitempty" required:"true"`

	// VIFInstanceId is a required field
	VIFInstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s EnableRouteAggregationInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableRouteAggregationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableRouteAggregationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnableRouteAggregationInput"}
	if s.AggregationCidr == nil {
		invalidParams.Add(request.NewErrParamRequired("AggregationCidr"))
	}
	if s.Direction == nil {
		invalidParams.Add(request.NewErrParamRequired("Direction"))
	}
	if s.VIFInstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("VIFInstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAggregationCidr sets the AggregationCidr field's value.
func (s *EnableRouteAggregationInput) SetAggregationCidr(v string) *EnableRouteAggregationInput {
	s.AggregationCidr = &v
	return s
}

// SetDirection sets the Direction field's value.
func (s *EnableRouteAggregationInput) SetDirection(v string) *EnableRouteAggregationInput {
	s.Direction = &v
	return s
}

// SetVIFInstanceId sets the VIFInstanceId field's value.
func (s *EnableRouteAggregationInput) SetVIFInstanceId(v string) *EnableRouteAggregationInput {
	s.VIFInstanceId = &v
	return s
}

type EnableRouteAggregationOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s EnableRouteAggregationOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableRouteAggregationOutput) GoString() string {
	return s.String()
}
