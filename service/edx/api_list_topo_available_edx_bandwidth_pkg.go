// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListTopoAvailableEDXBandwidthPkgCommon = "ListTopoAvailableEDXBandwidthPkg"

// ListTopoAvailableEDXBandwidthPkgCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListTopoAvailableEDXBandwidthPkgCommon operation. The "output" return
// value will be populated with the ListTopoAvailableEDXBandwidthPkgCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListTopoAvailableEDXBandwidthPkgCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListTopoAvailableEDXBandwidthPkgCommon Send returns without error.
//
// See ListTopoAvailableEDXBandwidthPkgCommon for more information on using the ListTopoAvailableEDXBandwidthPkgCommon
// API call, and error handling.
//
//    // Example sending a request using the ListTopoAvailableEDXBandwidthPkgCommonRequest method.
//    req, resp := client.ListTopoAvailableEDXBandwidthPkgCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ListTopoAvailableEDXBandwidthPkgCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListTopoAvailableEDXBandwidthPkgCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListTopoAvailableEDXBandwidthPkgCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ListTopoAvailableEDXBandwidthPkgCommon for usage and error information.
func (c *EDX) ListTopoAvailableEDXBandwidthPkgCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListTopoAvailableEDXBandwidthPkgCommonRequest(input)
	return out, req.Send()
}

// ListTopoAvailableEDXBandwidthPkgCommonWithContext is the same as ListTopoAvailableEDXBandwidthPkgCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListTopoAvailableEDXBandwidthPkgCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ListTopoAvailableEDXBandwidthPkgCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListTopoAvailableEDXBandwidthPkgCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListTopoAvailableEDXBandwidthPkg = "ListTopoAvailableEDXBandwidthPkg"

// ListTopoAvailableEDXBandwidthPkgRequest generates a "volcengine/request.Request" representing the
// client's request for the ListTopoAvailableEDXBandwidthPkg operation. The "output" return
// value will be populated with the ListTopoAvailableEDXBandwidthPkgCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListTopoAvailableEDXBandwidthPkgCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListTopoAvailableEDXBandwidthPkgCommon Send returns without error.
//
// See ListTopoAvailableEDXBandwidthPkg for more information on using the ListTopoAvailableEDXBandwidthPkg
// API call, and error handling.
//
//    // Example sending a request using the ListTopoAvailableEDXBandwidthPkgRequest method.
//    req, resp := client.ListTopoAvailableEDXBandwidthPkgRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ListTopoAvailableEDXBandwidthPkgRequest(input *ListTopoAvailableEDXBandwidthPkgInput) (req *request.Request, output *ListTopoAvailableEDXBandwidthPkgOutput) {
	op := &request.Operation{
		Name:       opListTopoAvailableEDXBandwidthPkg,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListTopoAvailableEDXBandwidthPkgInput{}
	}

	output = &ListTopoAvailableEDXBandwidthPkgOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListTopoAvailableEDXBandwidthPkg API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ListTopoAvailableEDXBandwidthPkg for usage and error information.
func (c *EDX) ListTopoAvailableEDXBandwidthPkg(input *ListTopoAvailableEDXBandwidthPkgInput) (*ListTopoAvailableEDXBandwidthPkgOutput, error) {
	req, out := c.ListTopoAvailableEDXBandwidthPkgRequest(input)
	return out, req.Send()
}

// ListTopoAvailableEDXBandwidthPkgWithContext is the same as ListTopoAvailableEDXBandwidthPkg with the addition of
// the ability to pass a context and additional request options.
//
// See ListTopoAvailableEDXBandwidthPkg for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ListTopoAvailableEDXBandwidthPkgWithContext(ctx volcengine.Context, input *ListTopoAvailableEDXBandwidthPkgInput, opts ...request.Option) (*ListTopoAvailableEDXBandwidthPkgOutput, error) {
	req, out := c.ListTopoAvailableEDXBandwidthPkgRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListTopoAvailableEDXBandwidthPkgInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EDXInstanceID is a required field
	EDXInstanceID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListTopoAvailableEDXBandwidthPkgInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTopoAvailableEDXBandwidthPkgInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListTopoAvailableEDXBandwidthPkgInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListTopoAvailableEDXBandwidthPkgInput"}
	if s.EDXInstanceID == nil {
		invalidParams.Add(request.NewErrParamRequired("EDXInstanceID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEDXInstanceID sets the EDXInstanceID field's value.
func (s *ListTopoAvailableEDXBandwidthPkgInput) SetEDXInstanceID(v string) *ListTopoAvailableEDXBandwidthPkgInput {
	s.EDXInstanceID = &v
	return s
}

type ListTopoAvailableEDXBandwidthPkgOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TopoBandwidthPkgList []*TopoBandwidthPkgListForListTopoAvailableEDXBandwidthPkgOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListTopoAvailableEDXBandwidthPkgOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTopoAvailableEDXBandwidthPkgOutput) GoString() string {
	return s.String()
}

// SetTopoBandwidthPkgList sets the TopoBandwidthPkgList field's value.
func (s *ListTopoAvailableEDXBandwidthPkgOutput) SetTopoBandwidthPkgList(v []*TopoBandwidthPkgListForListTopoAvailableEDXBandwidthPkgOutput) *ListTopoAvailableEDXBandwidthPkgOutput {
	s.TopoBandwidthPkgList = v
	return s
}

type TopoBandwidthPkgListForListTopoAvailableEDXBandwidthPkgOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	LeftBandwidthCap *int32 `type:"int32" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	PkgID *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TopoBandwidthPkgListForListTopoAvailableEDXBandwidthPkgOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TopoBandwidthPkgListForListTopoAvailableEDXBandwidthPkgOutput) GoString() string {
	return s.String()
}

// SetLeftBandwidthCap sets the LeftBandwidthCap field's value.
func (s *TopoBandwidthPkgListForListTopoAvailableEDXBandwidthPkgOutput) SetLeftBandwidthCap(v int32) *TopoBandwidthPkgListForListTopoAvailableEDXBandwidthPkgOutput {
	s.LeftBandwidthCap = &v
	return s
}

// SetName sets the Name field's value.
func (s *TopoBandwidthPkgListForListTopoAvailableEDXBandwidthPkgOutput) SetName(v string) *TopoBandwidthPkgListForListTopoAvailableEDXBandwidthPkgOutput {
	s.Name = &v
	return s
}

// SetPkgID sets the PkgID field's value.
func (s *TopoBandwidthPkgListForListTopoAvailableEDXBandwidthPkgOutput) SetPkgID(v string) *TopoBandwidthPkgListForListTopoAvailableEDXBandwidthPkgOutput {
	s.PkgID = &v
	return s
}
