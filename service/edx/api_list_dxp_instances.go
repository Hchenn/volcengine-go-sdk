// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListDXPInstancesCommon = "ListDXPInstances"

// ListDXPInstancesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListDXPInstancesCommon operation. The "output" return
// value will be populated with the ListDXPInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDXPInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDXPInstancesCommon Send returns without error.
//
// See ListDXPInstancesCommon for more information on using the ListDXPInstancesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListDXPInstancesCommonRequest method.
//    req, resp := client.ListDXPInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ListDXPInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListDXPInstancesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDXPInstancesCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ListDXPInstancesCommon for usage and error information.
func (c *EDX) ListDXPInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListDXPInstancesCommonRequest(input)
	return out, req.Send()
}

// ListDXPInstancesCommonWithContext is the same as ListDXPInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListDXPInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ListDXPInstancesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListDXPInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDXPInstances = "ListDXPInstances"

// ListDXPInstancesRequest generates a "volcengine/request.Request" representing the
// client's request for the ListDXPInstances operation. The "output" return
// value will be populated with the ListDXPInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDXPInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDXPInstancesCommon Send returns without error.
//
// See ListDXPInstances for more information on using the ListDXPInstances
// API call, and error handling.
//
//    // Example sending a request using the ListDXPInstancesRequest method.
//    req, resp := client.ListDXPInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ListDXPInstancesRequest(input *ListDXPInstancesInput) (req *request.Request, output *ListDXPInstancesOutput) {
	op := &request.Operation{
		Name:       opListDXPInstances,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListDXPInstancesInput{}
	}

	output = &ListDXPInstancesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDXPInstances API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ListDXPInstances for usage and error information.
func (c *EDX) ListDXPInstances(input *ListDXPInstancesInput) (*ListDXPInstancesOutput, error) {
	req, out := c.ListDXPInstancesRequest(input)
	return out, req.Send()
}

// ListDXPInstancesWithContext is the same as ListDXPInstances with the addition of
// the ability to pass a context and additional request options.
//
// See ListDXPInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ListDXPInstancesWithContext(ctx volcengine.Context, input *ListDXPInstancesInput, opts ...request.Option) (*ListDXPInstancesOutput, error) {
	req, out := c.ListDXPInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DXPInstanceForListDXPInstancesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AP *string `type:"string" json:",omitempty"`

	Advice *string `type:"string" json:",omitempty"`

	Area *string `type:"string" json:",omitempty"`

	AutoRenew *bool `type:"boolean" json:",omitempty"`

	Bandwidth *int32 `type:"int32" json:",omitempty"`

	BeginTime *string `type:"string" json:",omitempty"`

	EndTime *string `type:"string" json:",omitempty"`

	HealthStatus *bool `type:"boolean" json:",omitempty"`

	ISP *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	InstanceName *string `type:"string" json:",omitempty"`

	ModuleType *string `type:"string" json:",omitempty"`

	MonthlyRentId *string `type:"string" json:",omitempty"`

	PortFeeId *string `type:"string" json:",omitempty"`

	PortType *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DXPInstanceForListDXPInstancesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DXPInstanceForListDXPInstancesOutput) GoString() string {
	return s.String()
}

// SetAP sets the AP field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetAP(v string) *DXPInstanceForListDXPInstancesOutput {
	s.AP = &v
	return s
}

// SetAdvice sets the Advice field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetAdvice(v string) *DXPInstanceForListDXPInstancesOutput {
	s.Advice = &v
	return s
}

// SetArea sets the Area field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetArea(v string) *DXPInstanceForListDXPInstancesOutput {
	s.Area = &v
	return s
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetAutoRenew(v bool) *DXPInstanceForListDXPInstancesOutput {
	s.AutoRenew = &v
	return s
}

// SetBandwidth sets the Bandwidth field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetBandwidth(v int32) *DXPInstanceForListDXPInstancesOutput {
	s.Bandwidth = &v
	return s
}

// SetBeginTime sets the BeginTime field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetBeginTime(v string) *DXPInstanceForListDXPInstancesOutput {
	s.BeginTime = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetEndTime(v string) *DXPInstanceForListDXPInstancesOutput {
	s.EndTime = &v
	return s
}

// SetHealthStatus sets the HealthStatus field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetHealthStatus(v bool) *DXPInstanceForListDXPInstancesOutput {
	s.HealthStatus = &v
	return s
}

// SetISP sets the ISP field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetISP(v string) *DXPInstanceForListDXPInstancesOutput {
	s.ISP = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetInstanceId(v string) *DXPInstanceForListDXPInstancesOutput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetInstanceName(v string) *DXPInstanceForListDXPInstancesOutput {
	s.InstanceName = &v
	return s
}

// SetModuleType sets the ModuleType field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetModuleType(v string) *DXPInstanceForListDXPInstancesOutput {
	s.ModuleType = &v
	return s
}

// SetMonthlyRentId sets the MonthlyRentId field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetMonthlyRentId(v string) *DXPInstanceForListDXPInstancesOutput {
	s.MonthlyRentId = &v
	return s
}

// SetPortFeeId sets the PortFeeId field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetPortFeeId(v string) *DXPInstanceForListDXPInstancesOutput {
	s.PortFeeId = &v
	return s
}

// SetPortType sets the PortType field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetPortType(v string) *DXPInstanceForListDXPInstancesOutput {
	s.PortType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DXPInstanceForListDXPInstancesOutput) SetStatus(v string) *DXPInstanceForListDXPInstancesOutput {
	s.Status = &v
	return s
}

type ListDXPInstancesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Area *string `type:"string" json:",omitempty"`

	// HealthStatus is a required field
	HealthStatus *string `type:"string" json:",omitempty" required:"true"`

	Input *string `type:"string" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *string `type:"string" json:",omitempty" required:"true"`

	StatusList []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListDXPInstancesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDXPInstancesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListDXPInstancesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListDXPInstancesInput"}
	if s.HealthStatus == nil {
		invalidParams.Add(request.NewErrParamRequired("HealthStatus"))
	}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetArea sets the Area field's value.
func (s *ListDXPInstancesInput) SetArea(v string) *ListDXPInstancesInput {
	s.Area = &v
	return s
}

// SetHealthStatus sets the HealthStatus field's value.
func (s *ListDXPInstancesInput) SetHealthStatus(v string) *ListDXPInstancesInput {
	s.HealthStatus = &v
	return s
}

// SetInput sets the Input field's value.
func (s *ListDXPInstancesInput) SetInput(v string) *ListDXPInstancesInput {
	s.Input = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListDXPInstancesInput) SetPageNumber(v int32) *ListDXPInstancesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListDXPInstancesInput) SetPageSize(v string) *ListDXPInstancesInput {
	s.PageSize = &v
	return s
}

// SetStatusList sets the StatusList field's value.
func (s *ListDXPInstancesInput) SetStatusList(v []*string) *ListDXPInstancesInput {
	s.StatusList = v
	return s
}

type ListDXPInstancesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DXPInstances []*DXPInstanceForListDXPInstancesOutput `type:"list" json:",omitempty"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ListDXPInstancesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDXPInstancesOutput) GoString() string {
	return s.String()
}

// SetDXPInstances sets the DXPInstances field's value.
func (s *ListDXPInstancesOutput) SetDXPInstances(v []*DXPInstanceForListDXPInstancesOutput) *ListDXPInstancesOutput {
	s.DXPInstances = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListDXPInstancesOutput) SetPageNumber(v int32) *ListDXPInstancesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListDXPInstancesOutput) SetPageSize(v int32) *ListDXPInstancesOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListDXPInstancesOutput) SetTotalCount(v int32) *ListDXPInstancesOutput {
	s.TotalCount = &v
	return s
}
