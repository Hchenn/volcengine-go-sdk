// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteCrossAccountVIFAuthorityCommon = "DeleteCrossAccountVIFAuthority"

// DeleteCrossAccountVIFAuthorityCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteCrossAccountVIFAuthorityCommon operation. The "output" return
// value will be populated with the DeleteCrossAccountVIFAuthorityCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCrossAccountVIFAuthorityCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCrossAccountVIFAuthorityCommon Send returns without error.
//
// See DeleteCrossAccountVIFAuthorityCommon for more information on using the DeleteCrossAccountVIFAuthorityCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteCrossAccountVIFAuthorityCommonRequest method.
//    req, resp := client.DeleteCrossAccountVIFAuthorityCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) DeleteCrossAccountVIFAuthorityCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteCrossAccountVIFAuthorityCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteCrossAccountVIFAuthorityCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation DeleteCrossAccountVIFAuthorityCommon for usage and error information.
func (c *EDX) DeleteCrossAccountVIFAuthorityCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteCrossAccountVIFAuthorityCommonRequest(input)
	return out, req.Send()
}

// DeleteCrossAccountVIFAuthorityCommonWithContext is the same as DeleteCrossAccountVIFAuthorityCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCrossAccountVIFAuthorityCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) DeleteCrossAccountVIFAuthorityCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteCrossAccountVIFAuthorityCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteCrossAccountVIFAuthority = "DeleteCrossAccountVIFAuthority"

// DeleteCrossAccountVIFAuthorityRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteCrossAccountVIFAuthority operation. The "output" return
// value will be populated with the DeleteCrossAccountVIFAuthorityCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCrossAccountVIFAuthorityCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCrossAccountVIFAuthorityCommon Send returns without error.
//
// See DeleteCrossAccountVIFAuthority for more information on using the DeleteCrossAccountVIFAuthority
// API call, and error handling.
//
//    // Example sending a request using the DeleteCrossAccountVIFAuthorityRequest method.
//    req, resp := client.DeleteCrossAccountVIFAuthorityRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) DeleteCrossAccountVIFAuthorityRequest(input *DeleteCrossAccountVIFAuthorityInput) (req *request.Request, output *DeleteCrossAccountVIFAuthorityOutput) {
	op := &request.Operation{
		Name:       opDeleteCrossAccountVIFAuthority,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteCrossAccountVIFAuthorityInput{}
	}

	output = &DeleteCrossAccountVIFAuthorityOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteCrossAccountVIFAuthority API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation DeleteCrossAccountVIFAuthority for usage and error information.
func (c *EDX) DeleteCrossAccountVIFAuthority(input *DeleteCrossAccountVIFAuthorityInput) (*DeleteCrossAccountVIFAuthorityOutput, error) {
	req, out := c.DeleteCrossAccountVIFAuthorityRequest(input)
	return out, req.Send()
}

// DeleteCrossAccountVIFAuthorityWithContext is the same as DeleteCrossAccountVIFAuthority with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCrossAccountVIFAuthority for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) DeleteCrossAccountVIFAuthorityWithContext(ctx volcengine.Context, input *DeleteCrossAccountVIFAuthorityInput, opts ...request.Option) (*DeleteCrossAccountVIFAuthorityOutput, error) {
	req, out := c.DeleteCrossAccountVIFAuthorityRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteCrossAccountVIFAuthorityInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// VIFAccountId is a required field
	VIFAccountId *int32 `type:"int32" json:",omitempty" required:"true"`

	// VIFInstanceId is a required field
	VIFInstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteCrossAccountVIFAuthorityInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCrossAccountVIFAuthorityInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteCrossAccountVIFAuthorityInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteCrossAccountVIFAuthorityInput"}
	if s.VIFAccountId == nil {
		invalidParams.Add(request.NewErrParamRequired("VIFAccountId"))
	}
	if s.VIFInstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("VIFInstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetVIFAccountId sets the VIFAccountId field's value.
func (s *DeleteCrossAccountVIFAuthorityInput) SetVIFAccountId(v int32) *DeleteCrossAccountVIFAuthorityInput {
	s.VIFAccountId = &v
	return s
}

// SetVIFInstanceId sets the VIFInstanceId field's value.
func (s *DeleteCrossAccountVIFAuthorityInput) SetVIFInstanceId(v string) *DeleteCrossAccountVIFAuthorityInput {
	s.VIFInstanceId = &v
	return s
}

type DeleteCrossAccountVIFAuthorityOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteCrossAccountVIFAuthorityOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCrossAccountVIFAuthorityOutput) GoString() string {
	return s.String()
}
