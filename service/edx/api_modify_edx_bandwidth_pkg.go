// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyEDXBandwidthPkgCommon = "ModifyEDXBandwidthPkg"

// ModifyEDXBandwidthPkgCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyEDXBandwidthPkgCommon operation. The "output" return
// value will be populated with the ModifyEDXBandwidthPkgCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyEDXBandwidthPkgCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyEDXBandwidthPkgCommon Send returns without error.
//
// See ModifyEDXBandwidthPkgCommon for more information on using the ModifyEDXBandwidthPkgCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyEDXBandwidthPkgCommonRequest method.
//    req, resp := client.ModifyEDXBandwidthPkgCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ModifyEDXBandwidthPkgCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyEDXBandwidthPkgCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyEDXBandwidthPkgCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ModifyEDXBandwidthPkgCommon for usage and error information.
func (c *EDX) ModifyEDXBandwidthPkgCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyEDXBandwidthPkgCommonRequest(input)
	return out, req.Send()
}

// ModifyEDXBandwidthPkgCommonWithContext is the same as ModifyEDXBandwidthPkgCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyEDXBandwidthPkgCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ModifyEDXBandwidthPkgCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyEDXBandwidthPkgCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyEDXBandwidthPkg = "ModifyEDXBandwidthPkg"

// ModifyEDXBandwidthPkgRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyEDXBandwidthPkg operation. The "output" return
// value will be populated with the ModifyEDXBandwidthPkgCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyEDXBandwidthPkgCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyEDXBandwidthPkgCommon Send returns without error.
//
// See ModifyEDXBandwidthPkg for more information on using the ModifyEDXBandwidthPkg
// API call, and error handling.
//
//    // Example sending a request using the ModifyEDXBandwidthPkgRequest method.
//    req, resp := client.ModifyEDXBandwidthPkgRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ModifyEDXBandwidthPkgRequest(input *ModifyEDXBandwidthPkgInput) (req *request.Request, output *ModifyEDXBandwidthPkgOutput) {
	op := &request.Operation{
		Name:       opModifyEDXBandwidthPkg,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyEDXBandwidthPkgInput{}
	}

	output = &ModifyEDXBandwidthPkgOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyEDXBandwidthPkg API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ModifyEDXBandwidthPkg for usage and error information.
func (c *EDX) ModifyEDXBandwidthPkg(input *ModifyEDXBandwidthPkgInput) (*ModifyEDXBandwidthPkgOutput, error) {
	req, out := c.ModifyEDXBandwidthPkgRequest(input)
	return out, req.Send()
}

// ModifyEDXBandwidthPkgWithContext is the same as ModifyEDXBandwidthPkg with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyEDXBandwidthPkg for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ModifyEDXBandwidthPkgWithContext(ctx volcengine.Context, input *ModifyEDXBandwidthPkgInput, opts ...request.Option) (*ModifyEDXBandwidthPkgOutput, error) {
	req, out := c.ModifyEDXBandwidthPkgRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyEDXBandwidthPkgInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// BandwidthPkgId is a required field
	BandwidthPkgId *string `type:"string" json:",omitempty" required:"true"`

	Name *string `type:"string" json:",omitempty"`

	TotalBandwidth *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ModifyEDXBandwidthPkgInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyEDXBandwidthPkgInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyEDXBandwidthPkgInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyEDXBandwidthPkgInput"}
	if s.BandwidthPkgId == nil {
		invalidParams.Add(request.NewErrParamRequired("BandwidthPkgId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidthPkgId sets the BandwidthPkgId field's value.
func (s *ModifyEDXBandwidthPkgInput) SetBandwidthPkgId(v string) *ModifyEDXBandwidthPkgInput {
	s.BandwidthPkgId = &v
	return s
}

// SetName sets the Name field's value.
func (s *ModifyEDXBandwidthPkgInput) SetName(v string) *ModifyEDXBandwidthPkgInput {
	s.Name = &v
	return s
}

// SetTotalBandwidth sets the TotalBandwidth field's value.
func (s *ModifyEDXBandwidthPkgInput) SetTotalBandwidth(v int32) *ModifyEDXBandwidthPkgInput {
	s.TotalBandwidth = &v
	return s
}

type ModifyEDXBandwidthPkgOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyEDXBandwidthPkgOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyEDXBandwidthPkgOutput) GoString() string {
	return s.String()
}
