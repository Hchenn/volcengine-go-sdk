// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGetDXPUnitPriceCommon = "GetDXPUnitPrice"

// GetDXPUnitPriceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GetDXPUnitPriceCommon operation. The "output" return
// value will be populated with the GetDXPUnitPriceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetDXPUnitPriceCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetDXPUnitPriceCommon Send returns without error.
//
// See GetDXPUnitPriceCommon for more information on using the GetDXPUnitPriceCommon
// API call, and error handling.
//
//    // Example sending a request using the GetDXPUnitPriceCommonRequest method.
//    req, resp := client.GetDXPUnitPriceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) GetDXPUnitPriceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetDXPUnitPriceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetDXPUnitPriceCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation GetDXPUnitPriceCommon for usage and error information.
func (c *EDX) GetDXPUnitPriceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetDXPUnitPriceCommonRequest(input)
	return out, req.Send()
}

// GetDXPUnitPriceCommonWithContext is the same as GetDXPUnitPriceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetDXPUnitPriceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) GetDXPUnitPriceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetDXPUnitPriceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetDXPUnitPrice = "GetDXPUnitPrice"

// GetDXPUnitPriceRequest generates a "volcengine/request.Request" representing the
// client's request for the GetDXPUnitPrice operation. The "output" return
// value will be populated with the GetDXPUnitPriceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetDXPUnitPriceCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetDXPUnitPriceCommon Send returns without error.
//
// See GetDXPUnitPrice for more information on using the GetDXPUnitPrice
// API call, and error handling.
//
//    // Example sending a request using the GetDXPUnitPriceRequest method.
//    req, resp := client.GetDXPUnitPriceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) GetDXPUnitPriceRequest(input *GetDXPUnitPriceInput) (req *request.Request, output *GetDXPUnitPriceOutput) {
	op := &request.Operation{
		Name:       opGetDXPUnitPrice,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetDXPUnitPriceInput{}
	}

	output = &GetDXPUnitPriceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetDXPUnitPrice API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation GetDXPUnitPrice for usage and error information.
func (c *EDX) GetDXPUnitPrice(input *GetDXPUnitPriceInput) (*GetDXPUnitPriceOutput, error) {
	req, out := c.GetDXPUnitPriceRequest(input)
	return out, req.Send()
}

// GetDXPUnitPriceWithContext is the same as GetDXPUnitPrice with the addition of
// the ability to pass a context and additional request options.
//
// See GetDXPUnitPrice for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) GetDXPUnitPriceWithContext(ctx volcengine.Context, input *GetDXPUnitPriceInput, opts ...request.Option) (*GetDXPUnitPriceOutput, error) {
	req, out := c.GetDXPUnitPriceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetDXPUnitPriceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ModuleType is a required field
	ModuleType *string `type:"string" json:",omitempty" required:"true"`

	// PortType is a required field
	PortType *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetDXPUnitPriceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDXPUnitPriceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetDXPUnitPriceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetDXPUnitPriceInput"}
	if s.ModuleType == nil {
		invalidParams.Add(request.NewErrParamRequired("ModuleType"))
	}
	if s.PortType == nil {
		invalidParams.Add(request.NewErrParamRequired("PortType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetModuleType sets the ModuleType field's value.
func (s *GetDXPUnitPriceInput) SetModuleType(v string) *GetDXPUnitPriceInput {
	s.ModuleType = &v
	return s
}

// SetPortType sets the PortType field's value.
func (s *GetDXPUnitPriceInput) SetPortType(v string) *GetDXPUnitPriceInput {
	s.PortType = &v
	return s
}

type GetDXPUnitPriceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	MonthlyUnitPrice *float64 `type:"double" json:",omitempty"`

	TransmitDistance *string `type:"string" json:",omitempty"`

	YearlyUnitPrice *float64 `type:"double" json:",omitempty"`
}

// String returns the string representation
func (s GetDXPUnitPriceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GetDXPUnitPriceOutput) GoString() string {
	return s.String()
}

// SetMonthlyUnitPrice sets the MonthlyUnitPrice field's value.
func (s *GetDXPUnitPriceOutput) SetMonthlyUnitPrice(v float64) *GetDXPUnitPriceOutput {
	s.MonthlyUnitPrice = &v
	return s
}

// SetTransmitDistance sets the TransmitDistance field's value.
func (s *GetDXPUnitPriceOutput) SetTransmitDistance(v string) *GetDXPUnitPriceOutput {
	s.TransmitDistance = &v
	return s
}

// SetYearlyUnitPrice sets the YearlyUnitPrice field's value.
func (s *GetDXPUnitPriceOutput) SetYearlyUnitPrice(v float64) *GetDXPUnitPriceOutput {
	s.YearlyUnitPrice = &v
	return s
}
