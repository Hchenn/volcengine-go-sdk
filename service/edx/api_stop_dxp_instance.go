// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStopDXPInstanceCommon = "StopDXPInstance"

// StopDXPInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StopDXPInstanceCommon operation. The "output" return
// value will be populated with the StopDXPInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopDXPInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopDXPInstanceCommon Send returns without error.
//
// See StopDXPInstanceCommon for more information on using the StopDXPInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the StopDXPInstanceCommonRequest method.
//    req, resp := client.StopDXPInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) StopDXPInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopDXPInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StopDXPInstanceCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation StopDXPInstanceCommon for usage and error information.
func (c *EDX) StopDXPInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopDXPInstanceCommonRequest(input)
	return out, req.Send()
}

// StopDXPInstanceCommonWithContext is the same as StopDXPInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopDXPInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) StopDXPInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopDXPInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopDXPInstance = "StopDXPInstance"

// StopDXPInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the StopDXPInstance operation. The "output" return
// value will be populated with the StopDXPInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopDXPInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopDXPInstanceCommon Send returns without error.
//
// See StopDXPInstance for more information on using the StopDXPInstance
// API call, and error handling.
//
//    // Example sending a request using the StopDXPInstanceRequest method.
//    req, resp := client.StopDXPInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) StopDXPInstanceRequest(input *StopDXPInstanceInput) (req *request.Request, output *StopDXPInstanceOutput) {
	op := &request.Operation{
		Name:       opStopDXPInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopDXPInstanceInput{}
	}

	output = &StopDXPInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StopDXPInstance API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation StopDXPInstance for usage and error information.
func (c *EDX) StopDXPInstance(input *StopDXPInstanceInput) (*StopDXPInstanceOutput, error) {
	req, out := c.StopDXPInstanceRequest(input)
	return out, req.Send()
}

// StopDXPInstanceWithContext is the same as StopDXPInstance with the addition of
// the ability to pass a context and additional request options.
//
// See StopDXPInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) StopDXPInstanceWithContext(ctx volcengine.Context, input *StopDXPInstanceInput, opts ...request.Option) (*StopDXPInstanceOutput, error) {
	req, out := c.StopDXPInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StopDXPInstanceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Area *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s StopDXPInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopDXPInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StopDXPInstanceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StopDXPInstanceInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetArea sets the Area field's value.
func (s *StopDXPInstanceInput) SetArea(v string) *StopDXPInstanceInput {
	s.Area = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *StopDXPInstanceInput) SetInstanceId(v string) *StopDXPInstanceInput {
	s.InstanceId = &v
	return s
}

type StopDXPInstanceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s StopDXPInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StopDXPInstanceOutput) GoString() string {
	return s.String()
}
