// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opSignConstructionCompletedCommon = "SignConstructionCompleted"

// SignConstructionCompletedCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the SignConstructionCompletedCommon operation. The "output" return
// value will be populated with the SignConstructionCompletedCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SignConstructionCompletedCommon Request to send the API call to the service.
// the "output" return value is not valid until after SignConstructionCompletedCommon Send returns without error.
//
// See SignConstructionCompletedCommon for more information on using the SignConstructionCompletedCommon
// API call, and error handling.
//
//    // Example sending a request using the SignConstructionCompletedCommonRequest method.
//    req, resp := client.SignConstructionCompletedCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) SignConstructionCompletedCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSignConstructionCompletedCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SignConstructionCompletedCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation SignConstructionCompletedCommon for usage and error information.
func (c *EDX) SignConstructionCompletedCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SignConstructionCompletedCommonRequest(input)
	return out, req.Send()
}

// SignConstructionCompletedCommonWithContext is the same as SignConstructionCompletedCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SignConstructionCompletedCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) SignConstructionCompletedCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SignConstructionCompletedCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSignConstructionCompleted = "SignConstructionCompleted"

// SignConstructionCompletedRequest generates a "volcengine/request.Request" representing the
// client's request for the SignConstructionCompleted operation. The "output" return
// value will be populated with the SignConstructionCompletedCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SignConstructionCompletedCommon Request to send the API call to the service.
// the "output" return value is not valid until after SignConstructionCompletedCommon Send returns without error.
//
// See SignConstructionCompleted for more information on using the SignConstructionCompleted
// API call, and error handling.
//
//    // Example sending a request using the SignConstructionCompletedRequest method.
//    req, resp := client.SignConstructionCompletedRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) SignConstructionCompletedRequest(input *SignConstructionCompletedInput) (req *request.Request, output *SignConstructionCompletedOutput) {
	op := &request.Operation{
		Name:       opSignConstructionCompleted,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SignConstructionCompletedInput{}
	}

	output = &SignConstructionCompletedOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SignConstructionCompleted API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation SignConstructionCompleted for usage and error information.
func (c *EDX) SignConstructionCompleted(input *SignConstructionCompletedInput) (*SignConstructionCompletedOutput, error) {
	req, out := c.SignConstructionCompletedRequest(input)
	return out, req.Send()
}

// SignConstructionCompletedWithContext is the same as SignConstructionCompleted with the addition of
// the ability to pass a context and additional request options.
//
// See SignConstructionCompleted for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) SignConstructionCompletedWithContext(ctx volcengine.Context, input *SignConstructionCompletedInput, opts ...request.Option) (*SignConstructionCompletedOutput, error) {
	req, out := c.SignConstructionCompletedRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SignConstructionCompletedInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s SignConstructionCompletedInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SignConstructionCompletedInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SignConstructionCompletedInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SignConstructionCompletedInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *SignConstructionCompletedInput) SetInstanceId(v string) *SignConstructionCompletedInput {
	s.InstanceId = &v
	return s
}

type SignConstructionCompletedOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s SignConstructionCompletedOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SignConstructionCompletedOutput) GoString() string {
	return s.String()
}
