// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListDXPSpecificationsCommon = "ListDXPSpecifications"

// ListDXPSpecificationsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListDXPSpecificationsCommon operation. The "output" return
// value will be populated with the ListDXPSpecificationsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDXPSpecificationsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDXPSpecificationsCommon Send returns without error.
//
// See ListDXPSpecificationsCommon for more information on using the ListDXPSpecificationsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListDXPSpecificationsCommonRequest method.
//    req, resp := client.ListDXPSpecificationsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ListDXPSpecificationsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListDXPSpecificationsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDXPSpecificationsCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ListDXPSpecificationsCommon for usage and error information.
func (c *EDX) ListDXPSpecificationsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListDXPSpecificationsCommonRequest(input)
	return out, req.Send()
}

// ListDXPSpecificationsCommonWithContext is the same as ListDXPSpecificationsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListDXPSpecificationsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ListDXPSpecificationsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListDXPSpecificationsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDXPSpecifications = "ListDXPSpecifications"

// ListDXPSpecificationsRequest generates a "volcengine/request.Request" representing the
// client's request for the ListDXPSpecifications operation. The "output" return
// value will be populated with the ListDXPSpecificationsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDXPSpecificationsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDXPSpecificationsCommon Send returns without error.
//
// See ListDXPSpecifications for more information on using the ListDXPSpecifications
// API call, and error handling.
//
//    // Example sending a request using the ListDXPSpecificationsRequest method.
//    req, resp := client.ListDXPSpecificationsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ListDXPSpecificationsRequest(input *ListDXPSpecificationsInput) (req *request.Request, output *ListDXPSpecificationsOutput) {
	op := &request.Operation{
		Name:       opListDXPSpecifications,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListDXPSpecificationsInput{}
	}

	output = &ListDXPSpecificationsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDXPSpecifications API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ListDXPSpecifications for usage and error information.
func (c *EDX) ListDXPSpecifications(input *ListDXPSpecificationsInput) (*ListDXPSpecificationsOutput, error) {
	req, out := c.ListDXPSpecificationsRequest(input)
	return out, req.Send()
}

// ListDXPSpecificationsWithContext is the same as ListDXPSpecifications with the addition of
// the ability to pass a context and additional request options.
//
// See ListDXPSpecifications for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ListDXPSpecificationsWithContext(ctx volcengine.Context, input *ListDXPSpecificationsInput, opts ...request.Option) (*ListDXPSpecificationsOutput, error) {
	req, out := c.ListDXPSpecificationsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConvertDXPSpecificationListForListDXPSpecificationsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AP *string `type:"string" json:",omitempty"`

	DXPSpecification []*DXPSpecificationForListDXPSpecificationsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ConvertDXPSpecificationListForListDXPSpecificationsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ConvertDXPSpecificationListForListDXPSpecificationsOutput) GoString() string {
	return s.String()
}

// SetAP sets the AP field's value.
func (s *ConvertDXPSpecificationListForListDXPSpecificationsOutput) SetAP(v string) *ConvertDXPSpecificationListForListDXPSpecificationsOutput {
	s.AP = &v
	return s
}

// SetDXPSpecification sets the DXPSpecification field's value.
func (s *ConvertDXPSpecificationListForListDXPSpecificationsOutput) SetDXPSpecification(v []*DXPSpecificationForListDXPSpecificationsOutput) *ConvertDXPSpecificationListForListDXPSpecificationsOutput {
	s.DXPSpecification = v
	return s
}

type DXPSpecificationForListDXPSpecificationsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ModuleList *ModuleListForListDXPSpecificationsOutput `type:"structure" json:",omitempty"`

	ModuleType []*string `type:"list" json:",omitempty"`

	PortType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DXPSpecificationForListDXPSpecificationsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DXPSpecificationForListDXPSpecificationsOutput) GoString() string {
	return s.String()
}

// SetModuleList sets the ModuleList field's value.
func (s *DXPSpecificationForListDXPSpecificationsOutput) SetModuleList(v *ModuleListForListDXPSpecificationsOutput) *DXPSpecificationForListDXPSpecificationsOutput {
	s.ModuleList = v
	return s
}

// SetModuleType sets the ModuleType field's value.
func (s *DXPSpecificationForListDXPSpecificationsOutput) SetModuleType(v []*string) *DXPSpecificationForListDXPSpecificationsOutput {
	s.ModuleType = v
	return s
}

// SetPortType sets the PortType field's value.
func (s *DXPSpecificationForListDXPSpecificationsOutput) SetPortType(v string) *DXPSpecificationForListDXPSpecificationsOutput {
	s.PortType = &v
	return s
}

type ListDXPSpecificationsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AP *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListDXPSpecificationsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDXPSpecificationsInput) GoString() string {
	return s.String()
}

// SetAP sets the AP field's value.
func (s *ListDXPSpecificationsInput) SetAP(v string) *ListDXPSpecificationsInput {
	s.AP = &v
	return s
}

type ListDXPSpecificationsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DXPSpecificationList []*ConvertDXPSpecificationListForListDXPSpecificationsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListDXPSpecificationsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDXPSpecificationsOutput) GoString() string {
	return s.String()
}

// SetDXPSpecificationList sets the DXPSpecificationList field's value.
func (s *ListDXPSpecificationsOutput) SetDXPSpecificationList(v []*ConvertDXPSpecificationListForListDXPSpecificationsOutput) *ListDXPSpecificationsOutput {
	s.DXPSpecificationList = v
	return s
}

type ModuleListForListDXPSpecificationsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Available *bool `type:"boolean" json:",omitempty"`

	ModuleType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ModuleListForListDXPSpecificationsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModuleListForListDXPSpecificationsOutput) GoString() string {
	return s.String()
}

// SetAvailable sets the Available field's value.
func (s *ModuleListForListDXPSpecificationsOutput) SetAvailable(v bool) *ModuleListForListDXPSpecificationsOutput {
	s.Available = &v
	return s
}

// SetModuleType sets the ModuleType field's value.
func (s *ModuleListForListDXPSpecificationsOutput) SetModuleType(v string) *ModuleListForListDXPSpecificationsOutput {
	s.ModuleType = &v
	return s
}
