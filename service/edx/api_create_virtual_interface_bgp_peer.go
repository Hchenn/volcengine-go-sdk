// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateVirtualInterfaceBGPPeerCommon = "CreateVirtualInterfaceBGPPeer"

// CreateVirtualInterfaceBGPPeerCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateVirtualInterfaceBGPPeerCommon operation. The "output" return
// value will be populated with the CreateVirtualInterfaceBGPPeerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateVirtualInterfaceBGPPeerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateVirtualInterfaceBGPPeerCommon Send returns without error.
//
// See CreateVirtualInterfaceBGPPeerCommon for more information on using the CreateVirtualInterfaceBGPPeerCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateVirtualInterfaceBGPPeerCommonRequest method.
//    req, resp := client.CreateVirtualInterfaceBGPPeerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) CreateVirtualInterfaceBGPPeerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateVirtualInterfaceBGPPeerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateVirtualInterfaceBGPPeerCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation CreateVirtualInterfaceBGPPeerCommon for usage and error information.
func (c *EDX) CreateVirtualInterfaceBGPPeerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateVirtualInterfaceBGPPeerCommonRequest(input)
	return out, req.Send()
}

// CreateVirtualInterfaceBGPPeerCommonWithContext is the same as CreateVirtualInterfaceBGPPeerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateVirtualInterfaceBGPPeerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) CreateVirtualInterfaceBGPPeerCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateVirtualInterfaceBGPPeerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateVirtualInterfaceBGPPeer = "CreateVirtualInterfaceBGPPeer"

// CreateVirtualInterfaceBGPPeerRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateVirtualInterfaceBGPPeer operation. The "output" return
// value will be populated with the CreateVirtualInterfaceBGPPeerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateVirtualInterfaceBGPPeerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateVirtualInterfaceBGPPeerCommon Send returns without error.
//
// See CreateVirtualInterfaceBGPPeer for more information on using the CreateVirtualInterfaceBGPPeer
// API call, and error handling.
//
//    // Example sending a request using the CreateVirtualInterfaceBGPPeerRequest method.
//    req, resp := client.CreateVirtualInterfaceBGPPeerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) CreateVirtualInterfaceBGPPeerRequest(input *CreateVirtualInterfaceBGPPeerInput) (req *request.Request, output *CreateVirtualInterfaceBGPPeerOutput) {
	op := &request.Operation{
		Name:       opCreateVirtualInterfaceBGPPeer,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateVirtualInterfaceBGPPeerInput{}
	}

	output = &CreateVirtualInterfaceBGPPeerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateVirtualInterfaceBGPPeer API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation CreateVirtualInterfaceBGPPeer for usage and error information.
func (c *EDX) CreateVirtualInterfaceBGPPeer(input *CreateVirtualInterfaceBGPPeerInput) (*CreateVirtualInterfaceBGPPeerOutput, error) {
	req, out := c.CreateVirtualInterfaceBGPPeerRequest(input)
	return out, req.Send()
}

// CreateVirtualInterfaceBGPPeerWithContext is the same as CreateVirtualInterfaceBGPPeer with the addition of
// the ability to pass a context and additional request options.
//
// See CreateVirtualInterfaceBGPPeer for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) CreateVirtualInterfaceBGPPeerWithContext(ctx volcengine.Context, input *CreateVirtualInterfaceBGPPeerInput, opts ...request.Option) (*CreateVirtualInterfaceBGPPeerOutput, error) {
	req, out := c.CreateVirtualInterfaceBGPPeerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateVirtualInterfaceBGPPeerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// MD5 is a required field
	MD5 *string `type:"string" json:",omitempty" required:"true"`

	// PeerASN is a required field
	PeerASN *int32 `type:"int32" json:",omitempty" required:"true"`

	// PeerIP is a required field
	PeerIP *string `type:"string" json:",omitempty" required:"true"`

	// VIFInstanceId is a required field
	VIFInstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateVirtualInterfaceBGPPeerInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVirtualInterfaceBGPPeerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateVirtualInterfaceBGPPeerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateVirtualInterfaceBGPPeerInput"}
	if s.MD5 == nil {
		invalidParams.Add(request.NewErrParamRequired("MD5"))
	}
	if s.PeerASN == nil {
		invalidParams.Add(request.NewErrParamRequired("PeerASN"))
	}
	if s.PeerIP == nil {
		invalidParams.Add(request.NewErrParamRequired("PeerIP"))
	}
	if s.VIFInstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("VIFInstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetMD5 sets the MD5 field's value.
func (s *CreateVirtualInterfaceBGPPeerInput) SetMD5(v string) *CreateVirtualInterfaceBGPPeerInput {
	s.MD5 = &v
	return s
}

// SetPeerASN sets the PeerASN field's value.
func (s *CreateVirtualInterfaceBGPPeerInput) SetPeerASN(v int32) *CreateVirtualInterfaceBGPPeerInput {
	s.PeerASN = &v
	return s
}

// SetPeerIP sets the PeerIP field's value.
func (s *CreateVirtualInterfaceBGPPeerInput) SetPeerIP(v string) *CreateVirtualInterfaceBGPPeerInput {
	s.PeerIP = &v
	return s
}

// SetVIFInstanceId sets the VIFInstanceId field's value.
func (s *CreateVirtualInterfaceBGPPeerInput) SetVIFInstanceId(v string) *CreateVirtualInterfaceBGPPeerInput {
	s.VIFInstanceId = &v
	return s
}

type CreateVirtualInterfaceBGPPeerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CreateVirtualInterfaceBGPPeerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVirtualInterfaceBGPPeerOutput) GoString() string {
	return s.String()
}
