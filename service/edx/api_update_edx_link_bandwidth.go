// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateEDXLinkBandwidthCommon = "UpdateEDXLinkBandwidth"

// UpdateEDXLinkBandwidthCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateEDXLinkBandwidthCommon operation. The "output" return
// value will be populated with the UpdateEDXLinkBandwidthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateEDXLinkBandwidthCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateEDXLinkBandwidthCommon Send returns without error.
//
// See UpdateEDXLinkBandwidthCommon for more information on using the UpdateEDXLinkBandwidthCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateEDXLinkBandwidthCommonRequest method.
//    req, resp := client.UpdateEDXLinkBandwidthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) UpdateEDXLinkBandwidthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateEDXLinkBandwidthCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateEDXLinkBandwidthCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation UpdateEDXLinkBandwidthCommon for usage and error information.
func (c *EDX) UpdateEDXLinkBandwidthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateEDXLinkBandwidthCommonRequest(input)
	return out, req.Send()
}

// UpdateEDXLinkBandwidthCommonWithContext is the same as UpdateEDXLinkBandwidthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateEDXLinkBandwidthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) UpdateEDXLinkBandwidthCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateEDXLinkBandwidthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateEDXLinkBandwidth = "UpdateEDXLinkBandwidth"

// UpdateEDXLinkBandwidthRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateEDXLinkBandwidth operation. The "output" return
// value will be populated with the UpdateEDXLinkBandwidthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateEDXLinkBandwidthCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateEDXLinkBandwidthCommon Send returns without error.
//
// See UpdateEDXLinkBandwidth for more information on using the UpdateEDXLinkBandwidth
// API call, and error handling.
//
//    // Example sending a request using the UpdateEDXLinkBandwidthRequest method.
//    req, resp := client.UpdateEDXLinkBandwidthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) UpdateEDXLinkBandwidthRequest(input *UpdateEDXLinkBandwidthInput) (req *request.Request, output *UpdateEDXLinkBandwidthOutput) {
	op := &request.Operation{
		Name:       opUpdateEDXLinkBandwidth,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateEDXLinkBandwidthInput{}
	}

	output = &UpdateEDXLinkBandwidthOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateEDXLinkBandwidth API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation UpdateEDXLinkBandwidth for usage and error information.
func (c *EDX) UpdateEDXLinkBandwidth(input *UpdateEDXLinkBandwidthInput) (*UpdateEDXLinkBandwidthOutput, error) {
	req, out := c.UpdateEDXLinkBandwidthRequest(input)
	return out, req.Send()
}

// UpdateEDXLinkBandwidthWithContext is the same as UpdateEDXLinkBandwidth with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateEDXLinkBandwidth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) UpdateEDXLinkBandwidthWithContext(ctx volcengine.Context, input *UpdateEDXLinkBandwidthInput, opts ...request.Option) (*UpdateEDXLinkBandwidthOutput, error) {
	req, out := c.UpdateEDXLinkBandwidthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateEDXLinkBandwidthInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// BandwidthSize is a required field
	BandwidthSize *int32 `type:"int32" json:",omitempty" required:"true"`

	// LinkID is a required field
	LinkID *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateEDXLinkBandwidthInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateEDXLinkBandwidthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateEDXLinkBandwidthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateEDXLinkBandwidthInput"}
	if s.BandwidthSize == nil {
		invalidParams.Add(request.NewErrParamRequired("BandwidthSize"))
	}
	if s.LinkID == nil {
		invalidParams.Add(request.NewErrParamRequired("LinkID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidthSize sets the BandwidthSize field's value.
func (s *UpdateEDXLinkBandwidthInput) SetBandwidthSize(v int32) *UpdateEDXLinkBandwidthInput {
	s.BandwidthSize = &v
	return s
}

// SetLinkID sets the LinkID field's value.
func (s *UpdateEDXLinkBandwidthInput) SetLinkID(v string) *UpdateEDXLinkBandwidthInput {
	s.LinkID = &v
	return s
}

type UpdateEDXLinkBandwidthOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateEDXLinkBandwidthOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateEDXLinkBandwidthOutput) GoString() string {
	return s.String()
}
