// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateDXPConnectionOrderCommon = "CreateDXPConnectionOrder"

// CreateDXPConnectionOrderCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateDXPConnectionOrderCommon operation. The "output" return
// value will be populated with the CreateDXPConnectionOrderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDXPConnectionOrderCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDXPConnectionOrderCommon Send returns without error.
//
// See CreateDXPConnectionOrderCommon for more information on using the CreateDXPConnectionOrderCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDXPConnectionOrderCommonRequest method.
//    req, resp := client.CreateDXPConnectionOrderCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) CreateDXPConnectionOrderCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDXPConnectionOrderCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDXPConnectionOrderCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation CreateDXPConnectionOrderCommon for usage and error information.
func (c *EDX) CreateDXPConnectionOrderCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDXPConnectionOrderCommonRequest(input)
	return out, req.Send()
}

// CreateDXPConnectionOrderCommonWithContext is the same as CreateDXPConnectionOrderCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDXPConnectionOrderCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) CreateDXPConnectionOrderCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDXPConnectionOrderCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDXPConnectionOrder = "CreateDXPConnectionOrder"

// CreateDXPConnectionOrderRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateDXPConnectionOrder operation. The "output" return
// value will be populated with the CreateDXPConnectionOrderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDXPConnectionOrderCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDXPConnectionOrderCommon Send returns without error.
//
// See CreateDXPConnectionOrder for more information on using the CreateDXPConnectionOrder
// API call, and error handling.
//
//    // Example sending a request using the CreateDXPConnectionOrderRequest method.
//    req, resp := client.CreateDXPConnectionOrderRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) CreateDXPConnectionOrderRequest(input *CreateDXPConnectionOrderInput) (req *request.Request, output *CreateDXPConnectionOrderOutput) {
	op := &request.Operation{
		Name:       opCreateDXPConnectionOrder,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDXPConnectionOrderInput{}
	}

	output = &CreateDXPConnectionOrderOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDXPConnectionOrder API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation CreateDXPConnectionOrder for usage and error information.
func (c *EDX) CreateDXPConnectionOrder(input *CreateDXPConnectionOrderInput) (*CreateDXPConnectionOrderOutput, error) {
	req, out := c.CreateDXPConnectionOrderRequest(input)
	return out, req.Send()
}

// CreateDXPConnectionOrderWithContext is the same as CreateDXPConnectionOrder with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDXPConnectionOrder for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) CreateDXPConnectionOrderWithContext(ctx volcengine.Context, input *CreateDXPConnectionOrderInput, opts ...request.Option) (*CreateDXPConnectionOrderOutput, error) {
	req, out := c.CreateDXPConnectionOrderRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateDXPConnectionOrderInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AutoRenew is a required field
	AutoRenew *bool `type:"boolean" json:",omitempty" required:"true"`

	// BillingMode is a required field
	BillingMode *string `type:"string" json:",omitempty" required:"true"`

	// BuyDuration is a required field
	BuyDuration *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// PayMode is a required field
	PayMode *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateDXPConnectionOrderInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDXPConnectionOrderInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateDXPConnectionOrderInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateDXPConnectionOrderInput"}
	if s.AutoRenew == nil {
		invalidParams.Add(request.NewErrParamRequired("AutoRenew"))
	}
	if s.BillingMode == nil {
		invalidParams.Add(request.NewErrParamRequired("BillingMode"))
	}
	if s.BuyDuration == nil {
		invalidParams.Add(request.NewErrParamRequired("BuyDuration"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.PayMode == nil {
		invalidParams.Add(request.NewErrParamRequired("PayMode"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *CreateDXPConnectionOrderInput) SetAutoRenew(v bool) *CreateDXPConnectionOrderInput {
	s.AutoRenew = &v
	return s
}

// SetBillingMode sets the BillingMode field's value.
func (s *CreateDXPConnectionOrderInput) SetBillingMode(v string) *CreateDXPConnectionOrderInput {
	s.BillingMode = &v
	return s
}

// SetBuyDuration sets the BuyDuration field's value.
func (s *CreateDXPConnectionOrderInput) SetBuyDuration(v string) *CreateDXPConnectionOrderInput {
	s.BuyDuration = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateDXPConnectionOrderInput) SetInstanceId(v string) *CreateDXPConnectionOrderInput {
	s.InstanceId = &v
	return s
}

// SetPayMode sets the PayMode field's value.
func (s *CreateDXPConnectionOrderInput) SetPayMode(v string) *CreateDXPConnectionOrderInput {
	s.PayMode = &v
	return s
}

type CreateDXPConnectionOrderOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	PreOrderNumbers []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s CreateDXPConnectionOrderOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDXPConnectionOrderOutput) GoString() string {
	return s.String()
}

// SetPreOrderNumbers sets the PreOrderNumbers field's value.
func (s *CreateDXPConnectionOrderOutput) SetPreOrderNumbers(v []*string) *CreateDXPConnectionOrderOutput {
	s.PreOrderNumbers = v
	return s
}
