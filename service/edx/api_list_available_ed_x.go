// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListAvailableEDXCommon = "ListAvailableEDX"

// ListAvailableEDXCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListAvailableEDXCommon operation. The "output" return
// value will be populated with the ListAvailableEDXCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAvailableEDXCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAvailableEDXCommon Send returns without error.
//
// See ListAvailableEDXCommon for more information on using the ListAvailableEDXCommon
// API call, and error handling.
//
//    // Example sending a request using the ListAvailableEDXCommonRequest method.
//    req, resp := client.ListAvailableEDXCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ListAvailableEDXCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListAvailableEDXCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListAvailableEDXCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ListAvailableEDXCommon for usage and error information.
func (c *EDX) ListAvailableEDXCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListAvailableEDXCommonRequest(input)
	return out, req.Send()
}

// ListAvailableEDXCommonWithContext is the same as ListAvailableEDXCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListAvailableEDXCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ListAvailableEDXCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListAvailableEDXCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListAvailableEDX = "ListAvailableEDX"

// ListAvailableEDXRequest generates a "volcengine/request.Request" representing the
// client's request for the ListAvailableEDX operation. The "output" return
// value will be populated with the ListAvailableEDXCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAvailableEDXCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAvailableEDXCommon Send returns without error.
//
// See ListAvailableEDX for more information on using the ListAvailableEDX
// API call, and error handling.
//
//    // Example sending a request using the ListAvailableEDXRequest method.
//    req, resp := client.ListAvailableEDXRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) ListAvailableEDXRequest(input *ListAvailableEDXInput) (req *request.Request, output *ListAvailableEDXOutput) {
	op := &request.Operation{
		Name:       opListAvailableEDX,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListAvailableEDXInput{}
	}

	output = &ListAvailableEDXOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListAvailableEDX API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation ListAvailableEDX for usage and error information.
func (c *EDX) ListAvailableEDX(input *ListAvailableEDXInput) (*ListAvailableEDXOutput, error) {
	req, out := c.ListAvailableEDXRequest(input)
	return out, req.Send()
}

// ListAvailableEDXWithContext is the same as ListAvailableEDX with the addition of
// the ability to pass a context and additional request options.
//
// See ListAvailableEDX for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) ListAvailableEDXWithContext(ctx volcengine.Context, input *ListAvailableEDXInput, opts ...request.Option) (*ListAvailableEDXOutput, error) {
	req, out := c.ListAvailableEDXRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type InstanceListForListAvailableEDXOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EDXInstanceId *string `type:"string" json:",omitempty"`

	EDXName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s InstanceListForListAvailableEDXOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceListForListAvailableEDXOutput) GoString() string {
	return s.String()
}

// SetEDXInstanceId sets the EDXInstanceId field's value.
func (s *InstanceListForListAvailableEDXOutput) SetEDXInstanceId(v string) *InstanceListForListAvailableEDXOutput {
	s.EDXInstanceId = &v
	return s
}

// SetEDXName sets the EDXName field's value.
func (s *InstanceListForListAvailableEDXOutput) SetEDXName(v string) *InstanceListForListAvailableEDXOutput {
	s.EDXName = &v
	return s
}

type ListAvailableEDXInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// VGWInstanceId is a required field
	VGWInstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListAvailableEDXInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAvailableEDXInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListAvailableEDXInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListAvailableEDXInput"}
	if s.VGWInstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("VGWInstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetVGWInstanceId sets the VGWInstanceId field's value.
func (s *ListAvailableEDXInput) SetVGWInstanceId(v string) *ListAvailableEDXInput {
	s.VGWInstanceId = &v
	return s
}

type ListAvailableEDXOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	EDXInstanceList []*InstanceListForListAvailableEDXOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ListAvailableEDXOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAvailableEDXOutput) GoString() string {
	return s.String()
}

// SetEDXInstanceList sets the EDXInstanceList field's value.
func (s *ListAvailableEDXOutput) SetEDXInstanceList(v []*InstanceListForListAvailableEDXOutput) *ListAvailableEDXOutput {
	s.EDXInstanceList = v
	return s
}
