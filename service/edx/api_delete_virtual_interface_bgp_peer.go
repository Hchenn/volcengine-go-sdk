// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package edx

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteVirtualInterfaceBGPPeerCommon = "DeleteVirtualInterfaceBGPPeer"

// DeleteVirtualInterfaceBGPPeerCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteVirtualInterfaceBGPPeerCommon operation. The "output" return
// value will be populated with the DeleteVirtualInterfaceBGPPeerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteVirtualInterfaceBGPPeerCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteVirtualInterfaceBGPPeerCommon Send returns without error.
//
// See DeleteVirtualInterfaceBGPPeerCommon for more information on using the DeleteVirtualInterfaceBGPPeerCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteVirtualInterfaceBGPPeerCommonRequest method.
//    req, resp := client.DeleteVirtualInterfaceBGPPeerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) DeleteVirtualInterfaceBGPPeerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteVirtualInterfaceBGPPeerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteVirtualInterfaceBGPPeerCommon API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation DeleteVirtualInterfaceBGPPeerCommon for usage and error information.
func (c *EDX) DeleteVirtualInterfaceBGPPeerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteVirtualInterfaceBGPPeerCommonRequest(input)
	return out, req.Send()
}

// DeleteVirtualInterfaceBGPPeerCommonWithContext is the same as DeleteVirtualInterfaceBGPPeerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteVirtualInterfaceBGPPeerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) DeleteVirtualInterfaceBGPPeerCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteVirtualInterfaceBGPPeerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteVirtualInterfaceBGPPeer = "DeleteVirtualInterfaceBGPPeer"

// DeleteVirtualInterfaceBGPPeerRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteVirtualInterfaceBGPPeer operation. The "output" return
// value will be populated with the DeleteVirtualInterfaceBGPPeerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteVirtualInterfaceBGPPeerCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteVirtualInterfaceBGPPeerCommon Send returns without error.
//
// See DeleteVirtualInterfaceBGPPeer for more information on using the DeleteVirtualInterfaceBGPPeer
// API call, and error handling.
//
//    // Example sending a request using the DeleteVirtualInterfaceBGPPeerRequest method.
//    req, resp := client.DeleteVirtualInterfaceBGPPeerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *EDX) DeleteVirtualInterfaceBGPPeerRequest(input *DeleteVirtualInterfaceBGPPeerInput) (req *request.Request, output *DeleteVirtualInterfaceBGPPeerOutput) {
	op := &request.Operation{
		Name:       opDeleteVirtualInterfaceBGPPeer,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteVirtualInterfaceBGPPeerInput{}
	}

	output = &DeleteVirtualInterfaceBGPPeerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteVirtualInterfaceBGPPeer API operation for EDX.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for EDX's
// API operation DeleteVirtualInterfaceBGPPeer for usage and error information.
func (c *EDX) DeleteVirtualInterfaceBGPPeer(input *DeleteVirtualInterfaceBGPPeerInput) (*DeleteVirtualInterfaceBGPPeerOutput, error) {
	req, out := c.DeleteVirtualInterfaceBGPPeerRequest(input)
	return out, req.Send()
}

// DeleteVirtualInterfaceBGPPeerWithContext is the same as DeleteVirtualInterfaceBGPPeer with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteVirtualInterfaceBGPPeer for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *EDX) DeleteVirtualInterfaceBGPPeerWithContext(ctx volcengine.Context, input *DeleteVirtualInterfaceBGPPeerInput, opts ...request.Option) (*DeleteVirtualInterfaceBGPPeerOutput, error) {
	req, out := c.DeleteVirtualInterfaceBGPPeerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteVirtualInterfaceBGPPeerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// VIFInstanceId is a required field
	VIFInstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteVirtualInterfaceBGPPeerInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteVirtualInterfaceBGPPeerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteVirtualInterfaceBGPPeerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteVirtualInterfaceBGPPeerInput"}
	if s.VIFInstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("VIFInstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetVIFInstanceId sets the VIFInstanceId field's value.
func (s *DeleteVirtualInterfaceBGPPeerInput) SetVIFInstanceId(v string) *DeleteVirtualInterfaceBGPPeerInput {
	s.VIFInstanceId = &v
	return s
}

type DeleteVirtualInterfaceBGPPeerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteVirtualInterfaceBGPPeerOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteVirtualInterfaceBGPPeerOutput) GoString() string {
	return s.String()
}
