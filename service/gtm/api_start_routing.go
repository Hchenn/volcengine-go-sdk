// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package gtm

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opStartRoutingCommon = "StartRouting"

// StartRoutingCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the StartRoutingCommon operation. The "output" return
// value will be populated with the StartRoutingCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StartRoutingCommon Request to send the API call to the service.
// the "output" return value is not valid until after StartRoutingCommon Send returns without error.
//
// See StartRoutingCommon for more information on using the StartRoutingCommon
// API call, and error handling.
//
//    // Example sending a request using the StartRoutingCommonRequest method.
//    req, resp := client.StartRoutingCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GTM) StartRoutingCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStartRoutingCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StartRoutingCommon API operation for GTM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GTM's
// API operation StartRoutingCommon for usage and error information.
func (c *GTM) StartRoutingCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StartRoutingCommonRequest(input)
	return out, req.Send()
}

// StartRoutingCommonWithContext is the same as StartRoutingCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StartRoutingCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GTM) StartRoutingCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StartRoutingCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartRouting = "StartRouting"

// StartRoutingRequest generates a "volcengine/request.Request" representing the
// client's request for the StartRouting operation. The "output" return
// value will be populated with the StartRoutingCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StartRoutingCommon Request to send the API call to the service.
// the "output" return value is not valid until after StartRoutingCommon Send returns without error.
//
// See StartRouting for more information on using the StartRouting
// API call, and error handling.
//
//    // Example sending a request using the StartRoutingRequest method.
//    req, resp := client.StartRoutingRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GTM) StartRoutingRequest(input *StartRoutingInput) (req *request.Request, output *StartRoutingOutput) {
	op := &request.Operation{
		Name:       opStartRouting,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StartRoutingInput{}
	}

	output = &StartRoutingOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// StartRouting API operation for GTM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GTM's
// API operation StartRouting for usage and error information.
func (c *GTM) StartRouting(input *StartRoutingInput) (*StartRoutingOutput, error) {
	req, out := c.StartRoutingRequest(input)
	return out, req.Send()
}

// StartRoutingWithContext is the same as StartRouting with the addition of
// the ability to pass a context and additional request options.
//
// See StartRouting for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GTM) StartRoutingWithContext(ctx volcengine.Context, input *StartRoutingInput, opts ...request.Option) (*StartRoutingOutput, error) {
	req, out := c.StartRoutingRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StartRoutingInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// GtmId is a required field
	GtmId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s StartRoutingInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StartRoutingInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StartRoutingInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "StartRoutingInput"}
	if s.GtmId == nil {
		invalidParams.Add(request.NewErrParamRequired("GtmId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGtmId sets the GtmId field's value.
func (s *StartRoutingInput) SetGtmId(v string) *StartRoutingInput {
	s.GtmId = &v
	return s
}

type StartRoutingOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s StartRoutingOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StartRoutingOutput) GoString() string {
	return s.String()
}
