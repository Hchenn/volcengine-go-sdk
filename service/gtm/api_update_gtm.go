// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package gtm

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateGtmCommon = "UpdateGtm"

// UpdateGtmCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateGtmCommon operation. The "output" return
// value will be populated with the UpdateGtmCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateGtmCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateGtmCommon Send returns without error.
//
// See UpdateGtmCommon for more information on using the UpdateGtmCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateGtmCommonRequest method.
//    req, resp := client.UpdateGtmCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GTM) UpdateGtmCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateGtmCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateGtmCommon API operation for GTM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GTM's
// API operation UpdateGtmCommon for usage and error information.
func (c *GTM) UpdateGtmCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateGtmCommonRequest(input)
	return out, req.Send()
}

// UpdateGtmCommonWithContext is the same as UpdateGtmCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateGtmCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GTM) UpdateGtmCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateGtmCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateGtm = "UpdateGtm"

// UpdateGtmRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateGtm operation. The "output" return
// value will be populated with the UpdateGtmCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateGtmCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateGtmCommon Send returns without error.
//
// See UpdateGtm for more information on using the UpdateGtm
// API call, and error handling.
//
//    // Example sending a request using the UpdateGtmRequest method.
//    req, resp := client.UpdateGtmRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GTM) UpdateGtmRequest(input *UpdateGtmInput) (req *request.Request, output *UpdateGtmOutput) {
	op := &request.Operation{
		Name:       opUpdateGtm,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateGtmInput{}
	}

	output = &UpdateGtmOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateGtm API operation for GTM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GTM's
// API operation UpdateGtm for usage and error information.
func (c *GTM) UpdateGtm(input *UpdateGtmInput) (*UpdateGtmOutput, error) {
	req, out := c.UpdateGtmRequest(input)
	return out, req.Send()
}

// UpdateGtmWithContext is the same as UpdateGtm with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateGtm for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GTM) UpdateGtmWithContext(ctx volcengine.Context, input *UpdateGtmInput, opts ...request.Option) (*UpdateGtmOutput, error) {
	req, out := c.UpdateGtmRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateGtmInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlarmId *string `type:"string" json:",omitempty"`

	// GtmId is a required field
	GtmId *string `type:"string" json:",omitempty" required:"true"`

	PolicyType *string `type:"string" json:",omitempty"`

	Remark *string `type:"string" json:",omitempty"`

	Ttl *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s UpdateGtmInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateGtmInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateGtmInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateGtmInput"}
	if s.GtmId == nil {
		invalidParams.Add(request.NewErrParamRequired("GtmId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAlarmId sets the AlarmId field's value.
func (s *UpdateGtmInput) SetAlarmId(v string) *UpdateGtmInput {
	s.AlarmId = &v
	return s
}

// SetGtmId sets the GtmId field's value.
func (s *UpdateGtmInput) SetGtmId(v string) *UpdateGtmInput {
	s.GtmId = &v
	return s
}

// SetPolicyType sets the PolicyType field's value.
func (s *UpdateGtmInput) SetPolicyType(v string) *UpdateGtmInput {
	s.PolicyType = &v
	return s
}

// SetRemark sets the Remark field's value.
func (s *UpdateGtmInput) SetRemark(v string) *UpdateGtmInput {
	s.Remark = &v
	return s
}

// SetTtl sets the Ttl field's value.
func (s *UpdateGtmInput) SetTtl(v int32) *UpdateGtmInput {
	s.Ttl = &v
	return s
}

type UpdateGtmOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateGtmOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateGtmOutput) GoString() string {
	return s.String()
}
