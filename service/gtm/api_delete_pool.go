// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package gtm

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeletePoolCommon = "DeletePool"

// DeletePoolCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeletePoolCommon operation. The "output" return
// value will be populated with the DeletePoolCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeletePoolCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeletePoolCommon Send returns without error.
//
// See DeletePoolCommon for more information on using the DeletePoolCommon
// API call, and error handling.
//
//    // Example sending a request using the DeletePoolCommonRequest method.
//    req, resp := client.DeletePoolCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GTM) DeletePoolCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeletePoolCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeletePoolCommon API operation for GTM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GTM's
// API operation DeletePoolCommon for usage and error information.
func (c *GTM) DeletePoolCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeletePoolCommonRequest(input)
	return out, req.Send()
}

// DeletePoolCommonWithContext is the same as DeletePoolCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeletePoolCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GTM) DeletePoolCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeletePoolCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeletePool = "DeletePool"

// DeletePoolRequest generates a "volcengine/request.Request" representing the
// client's request for the DeletePool operation. The "output" return
// value will be populated with the DeletePoolCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeletePoolCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeletePoolCommon Send returns without error.
//
// See DeletePool for more information on using the DeletePool
// API call, and error handling.
//
//    // Example sending a request using the DeletePoolRequest method.
//    req, resp := client.DeletePoolRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GTM) DeletePoolRequest(input *DeletePoolInput) (req *request.Request, output *DeletePoolOutput) {
	op := &request.Operation{
		Name:       opDeletePool,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeletePoolInput{}
	}

	output = &DeletePoolOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeletePool API operation for GTM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GTM's
// API operation DeletePool for usage and error information.
func (c *GTM) DeletePool(input *DeletePoolInput) (*DeletePoolOutput, error) {
	req, out := c.DeletePoolRequest(input)
	return out, req.Send()
}

// DeletePoolWithContext is the same as DeletePool with the addition of
// the ability to pass a context and additional request options.
//
// See DeletePool for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GTM) DeletePoolWithContext(ctx volcengine.Context, input *DeletePoolInput, opts ...request.Option) (*DeletePoolOutput, error) {
	req, out := c.DeletePoolRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeletePoolInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// GtmId is a required field
	GtmId *string `type:"string" json:",omitempty" required:"true"`

	// PoolId is a required field
	PoolId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeletePoolInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeletePoolInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeletePoolInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeletePoolInput"}
	if s.GtmId == nil {
		invalidParams.Add(request.NewErrParamRequired("GtmId"))
	}
	if s.PoolId == nil {
		invalidParams.Add(request.NewErrParamRequired("PoolId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGtmId sets the GtmId field's value.
func (s *DeletePoolInput) SetGtmId(v string) *DeletePoolInput {
	s.GtmId = &v
	return s
}

// SetPoolId sets the PoolId field's value.
func (s *DeletePoolInput) SetPoolId(v string) *DeletePoolInput {
	s.PoolId = &v
	return s
}

type DeletePoolOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeletePoolOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeletePoolOutput) GoString() string {
	return s.String()
}
