// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package gtm

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdateLoadCommon = "UpdateLoad"

// UpdateLoadCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateLoadCommon operation. The "output" return
// value will be populated with the UpdateLoadCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateLoadCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateLoadCommon Send returns without error.
//
// See UpdateLoadCommon for more information on using the UpdateLoadCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateLoadCommonRequest method.
//    req, resp := client.UpdateLoadCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GTM) UpdateLoadCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateLoadCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateLoadCommon API operation for GTM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GTM's
// API operation UpdateLoadCommon for usage and error information.
func (c *GTM) UpdateLoadCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateLoadCommonRequest(input)
	return out, req.Send()
}

// UpdateLoadCommonWithContext is the same as UpdateLoadCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateLoadCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GTM) UpdateLoadCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateLoadCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateLoad = "UpdateLoad"

// UpdateLoadRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdateLoad operation. The "output" return
// value will be populated with the UpdateLoadCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateLoadCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateLoadCommon Send returns without error.
//
// See UpdateLoad for more information on using the UpdateLoad
// API call, and error handling.
//
//    // Example sending a request using the UpdateLoadRequest method.
//    req, resp := client.UpdateLoadRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GTM) UpdateLoadRequest(input *UpdateLoadInput) (req *request.Request, output *UpdateLoadOutput) {
	op := &request.Operation{
		Name:       opUpdateLoad,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateLoadInput{}
	}

	output = &UpdateLoadOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateLoad API operation for GTM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GTM's
// API operation UpdateLoad for usage and error information.
func (c *GTM) UpdateLoad(input *UpdateLoadInput) (*UpdateLoadOutput, error) {
	req, out := c.UpdateLoadRequest(input)
	return out, req.Send()
}

// UpdateLoadWithContext is the same as UpdateLoad with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateLoad for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GTM) UpdateLoadWithContext(ctx volcengine.Context, input *UpdateLoadInput, opts ...request.Option) (*UpdateLoadOutput, error) {
	req, out := c.UpdateLoadRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type StatisticForUpdateLoadInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AddrValue *string `type:"string" json:",omitempty"`

	Capacity *int64 `type:"int64" json:",omitempty"`

	CurrentLoad *int64 `type:"int64" json:",omitempty"`

	PoolName *string `type:"string" json:",omitempty"`

	TargetLoad *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s StatisticForUpdateLoadInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s StatisticForUpdateLoadInput) GoString() string {
	return s.String()
}

// SetAddrValue sets the AddrValue field's value.
func (s *StatisticForUpdateLoadInput) SetAddrValue(v string) *StatisticForUpdateLoadInput {
	s.AddrValue = &v
	return s
}

// SetCapacity sets the Capacity field's value.
func (s *StatisticForUpdateLoadInput) SetCapacity(v int64) *StatisticForUpdateLoadInput {
	s.Capacity = &v
	return s
}

// SetCurrentLoad sets the CurrentLoad field's value.
func (s *StatisticForUpdateLoadInput) SetCurrentLoad(v int64) *StatisticForUpdateLoadInput {
	s.CurrentLoad = &v
	return s
}

// SetPoolName sets the PoolName field's value.
func (s *StatisticForUpdateLoadInput) SetPoolName(v string) *StatisticForUpdateLoadInput {
	s.PoolName = &v
	return s
}

// SetTargetLoad sets the TargetLoad field's value.
func (s *StatisticForUpdateLoadInput) SetTargetLoad(v int64) *StatisticForUpdateLoadInput {
	s.TargetLoad = &v
	return s
}

type UpdateLoadInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// GtmId is a required field
	GtmId *string `type:"string" json:",omitempty" required:"true"`

	Statistics []*StatisticForUpdateLoadInput `type:"list" json:",omitempty"`

	// Timestamp is a required field
	Timestamp *int64 `type:"int64" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateLoadInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateLoadInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateLoadInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateLoadInput"}
	if s.GtmId == nil {
		invalidParams.Add(request.NewErrParamRequired("GtmId"))
	}
	if s.Timestamp == nil {
		invalidParams.Add(request.NewErrParamRequired("Timestamp"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGtmId sets the GtmId field's value.
func (s *UpdateLoadInput) SetGtmId(v string) *UpdateLoadInput {
	s.GtmId = &v
	return s
}

// SetStatistics sets the Statistics field's value.
func (s *UpdateLoadInput) SetStatistics(v []*StatisticForUpdateLoadInput) *UpdateLoadInput {
	s.Statistics = v
	return s
}

// SetTimestamp sets the Timestamp field's value.
func (s *UpdateLoadInput) SetTimestamp(v int64) *UpdateLoadInput {
	s.Timestamp = &v
	return s
}

type UpdateLoadOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateLoadOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateLoadOutput) GoString() string {
	return s.String()
}
