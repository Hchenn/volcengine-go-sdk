// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package gtm

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdatePolicyCommon = "UpdatePolicy"

// UpdatePolicyCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdatePolicyCommon operation. The "output" return
// value will be populated with the UpdatePolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdatePolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdatePolicyCommon Send returns without error.
//
// See UpdatePolicyCommon for more information on using the UpdatePolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdatePolicyCommonRequest method.
//    req, resp := client.UpdatePolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GTM) UpdatePolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdatePolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdatePolicyCommon API operation for GTM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GTM's
// API operation UpdatePolicyCommon for usage and error information.
func (c *GTM) UpdatePolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdatePolicyCommonRequest(input)
	return out, req.Send()
}

// UpdatePolicyCommonWithContext is the same as UpdatePolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdatePolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GTM) UpdatePolicyCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdatePolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdatePolicy = "UpdatePolicy"

// UpdatePolicyRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdatePolicy operation. The "output" return
// value will be populated with the UpdatePolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdatePolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdatePolicyCommon Send returns without error.
//
// See UpdatePolicy for more information on using the UpdatePolicy
// API call, and error handling.
//
//    // Example sending a request using the UpdatePolicyRequest method.
//    req, resp := client.UpdatePolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *GTM) UpdatePolicyRequest(input *UpdatePolicyInput) (req *request.Request, output *UpdatePolicyOutput) {
	op := &request.Operation{
		Name:       opUpdatePolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdatePolicyInput{}
	}

	output = &UpdatePolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdatePolicy API operation for GTM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for GTM's
// API operation UpdatePolicy for usage and error information.
func (c *GTM) UpdatePolicy(input *UpdatePolicyInput) (*UpdatePolicyOutput, error) {
	req, out := c.UpdatePolicyRequest(input)
	return out, req.Send()
}

// UpdatePolicyWithContext is the same as UpdatePolicy with the addition of
// the ability to pass a context and additional request options.
//
// See UpdatePolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *GTM) UpdatePolicyWithContext(ctx volcengine.Context, input *UpdatePolicyInput, opts ...request.Option) (*UpdatePolicyOutput, error) {
	req, out := c.UpdatePolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type PolicyForUpdatePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlarmOnly *bool `type:"boolean" json:",omitempty"`

	RoutingMode *string `type:"string" json:",omitempty"`

	Targets []*TargetForUpdatePolicyInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s PolicyForUpdatePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s PolicyForUpdatePolicyInput) GoString() string {
	return s.String()
}

// SetAlarmOnly sets the AlarmOnly field's value.
func (s *PolicyForUpdatePolicyInput) SetAlarmOnly(v bool) *PolicyForUpdatePolicyInput {
	s.AlarmOnly = &v
	return s
}

// SetRoutingMode sets the RoutingMode field's value.
func (s *PolicyForUpdatePolicyInput) SetRoutingMode(v string) *PolicyForUpdatePolicyInput {
	s.RoutingMode = &v
	return s
}

// SetTargets sets the Targets field's value.
func (s *PolicyForUpdatePolicyInput) SetTargets(v []*TargetForUpdatePolicyInput) *PolicyForUpdatePolicyInput {
	s.Targets = v
	return s
}

type TargetForUpdatePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	PoolId []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s TargetForUpdatePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TargetForUpdatePolicyInput) GoString() string {
	return s.String()
}

// SetPoolId sets the PoolId field's value.
func (s *TargetForUpdatePolicyInput) SetPoolId(v []*string) *TargetForUpdatePolicyInput {
	s.PoolId = v
	return s
}

type UpdatePolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// GtmId is a required field
	GtmId *string `type:"string" json:",omitempty" required:"true"`

	Policy *PolicyForUpdatePolicyInput `type:"structure" json:",omitempty"`

	PolicyType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdatePolicyInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdatePolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdatePolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdatePolicyInput"}
	if s.GtmId == nil {
		invalidParams.Add(request.NewErrParamRequired("GtmId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGtmId sets the GtmId field's value.
func (s *UpdatePolicyInput) SetGtmId(v string) *UpdatePolicyInput {
	s.GtmId = &v
	return s
}

// SetPolicy sets the Policy field's value.
func (s *UpdatePolicyInput) SetPolicy(v *PolicyForUpdatePolicyInput) *UpdatePolicyInput {
	s.Policy = v
	return s
}

// SetPolicyType sets the PolicyType field's value.
func (s *UpdatePolicyInput) SetPolicyType(v string) *UpdatePolicyInput {
	s.PolicyType = &v
	return s
}

type UpdatePolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdatePolicyOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdatePolicyOutput) GoString() string {
	return s.String()
}
