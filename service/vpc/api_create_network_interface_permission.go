// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateNetworkInterfacePermissionCommon = "CreateNetworkInterfacePermission"

// CreateNetworkInterfacePermissionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateNetworkInterfacePermissionCommon operation. The "output" return
// value will be populated with the CreateNetworkInterfacePermissionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNetworkInterfacePermissionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNetworkInterfacePermissionCommon Send returns without error.
//
// See CreateNetworkInterfacePermissionCommon for more information on using the CreateNetworkInterfacePermissionCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateNetworkInterfacePermissionCommonRequest method.
//    req, resp := client.CreateNetworkInterfacePermissionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateNetworkInterfacePermissionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateNetworkInterfacePermissionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateNetworkInterfacePermissionCommon API operation for VPC.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPC's
// API operation CreateNetworkInterfacePermissionCommon for usage and error information.
func (c *VPC) CreateNetworkInterfacePermissionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateNetworkInterfacePermissionCommonRequest(input)
	return out, req.Send()
}

// CreateNetworkInterfacePermissionCommonWithContext is the same as CreateNetworkInterfacePermissionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNetworkInterfacePermissionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateNetworkInterfacePermissionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateNetworkInterfacePermissionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateNetworkInterfacePermission = "CreateNetworkInterfacePermission"

// CreateNetworkInterfacePermissionRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateNetworkInterfacePermission operation. The "output" return
// value will be populated with the CreateNetworkInterfacePermissionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNetworkInterfacePermissionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNetworkInterfacePermissionCommon Send returns without error.
//
// See CreateNetworkInterfacePermission for more information on using the CreateNetworkInterfacePermission
// API call, and error handling.
//
//    // Example sending a request using the CreateNetworkInterfacePermissionRequest method.
//    req, resp := client.CreateNetworkInterfacePermissionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) CreateNetworkInterfacePermissionRequest(input *CreateNetworkInterfacePermissionInput) (req *request.Request, output *CreateNetworkInterfacePermissionOutput) {
	op := &request.Operation{
		Name:       opCreateNetworkInterfacePermission,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateNetworkInterfacePermissionInput{}
	}

	output = &CreateNetworkInterfacePermissionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateNetworkInterfacePermission API operation for VPC.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPC's
// API operation CreateNetworkInterfacePermission for usage and error information.
func (c *VPC) CreateNetworkInterfacePermission(input *CreateNetworkInterfacePermissionInput) (*CreateNetworkInterfacePermissionOutput, error) {
	req, out := c.CreateNetworkInterfacePermissionRequest(input)
	return out, req.Send()
}

// CreateNetworkInterfacePermissionWithContext is the same as CreateNetworkInterfacePermission with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNetworkInterfacePermission for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) CreateNetworkInterfacePermissionWithContext(ctx volcengine.Context, input *CreateNetworkInterfacePermissionInput, opts ...request.Option) (*CreateNetworkInterfacePermissionOutput, error) {
	req, out := c.CreateNetworkInterfacePermissionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateNetworkInterfacePermissionInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	// NetworkInterfaceId is a required field
	NetworkInterfaceId *string `type:"string" required:"true"`

	// Permission is a required field
	Permission *string `type:"string" required:"true"`

	VolcAccountId *string `type:"string"`

	VolcService *string `type:"string"`
}

// String returns the string representation
func (s CreateNetworkInterfacePermissionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNetworkInterfacePermissionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateNetworkInterfacePermissionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateNetworkInterfacePermissionInput"}
	if s.NetworkInterfaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("NetworkInterfaceId"))
	}
	if s.Permission == nil {
		invalidParams.Add(request.NewErrParamRequired("Permission"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateNetworkInterfacePermissionInput) SetClientToken(v string) *CreateNetworkInterfacePermissionInput {
	s.ClientToken = &v
	return s
}

// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
func (s *CreateNetworkInterfacePermissionInput) SetNetworkInterfaceId(v string) *CreateNetworkInterfacePermissionInput {
	s.NetworkInterfaceId = &v
	return s
}

// SetPermission sets the Permission field's value.
func (s *CreateNetworkInterfacePermissionInput) SetPermission(v string) *CreateNetworkInterfacePermissionInput {
	s.Permission = &v
	return s
}

// SetVolcAccountId sets the VolcAccountId field's value.
func (s *CreateNetworkInterfacePermissionInput) SetVolcAccountId(v string) *CreateNetworkInterfacePermissionInput {
	s.VolcAccountId = &v
	return s
}

// SetVolcService sets the VolcService field's value.
func (s *CreateNetworkInterfacePermissionInput) SetVolcService(v string) *CreateNetworkInterfacePermissionInput {
	s.VolcService = &v
	return s
}

type CreateNetworkInterfacePermissionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	NetworkInterfacePermission *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s CreateNetworkInterfacePermissionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNetworkInterfacePermissionOutput) GoString() string {
	return s.String()
}

// SetNetworkInterfacePermission sets the NetworkInterfacePermission field's value.
func (s *CreateNetworkInterfacePermissionOutput) SetNetworkInterfacePermission(v *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput) *CreateNetworkInterfacePermissionOutput {
	s.NetworkInterfacePermission = v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateNetworkInterfacePermissionOutput) SetRequestId(v string) *CreateNetworkInterfacePermissionOutput {
	s.RequestId = &v
	return s
}

type NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput struct {
	_ struct{} `type:"structure"`

	NetworkInterfaceId *string `type:"string"`

	NetworkInterfacePermissionId *string `type:"string"`

	Permission *string `type:"string"`

	PermissionState *string `type:"string"`

	VolcAccountId *string `type:"string"`

	VolcService *string `type:"string"`
}

// String returns the string representation
func (s NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput) GoString() string {
	return s.String()
}

// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
func (s *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput) SetNetworkInterfaceId(v string) *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput {
	s.NetworkInterfaceId = &v
	return s
}

// SetNetworkInterfacePermissionId sets the NetworkInterfacePermissionId field's value.
func (s *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput) SetNetworkInterfacePermissionId(v string) *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput {
	s.NetworkInterfacePermissionId = &v
	return s
}

// SetPermission sets the Permission field's value.
func (s *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput) SetPermission(v string) *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput {
	s.Permission = &v
	return s
}

// SetPermissionState sets the PermissionState field's value.
func (s *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput) SetPermissionState(v string) *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput {
	s.PermissionState = &v
	return s
}

// SetVolcAccountId sets the VolcAccountId field's value.
func (s *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput) SetVolcAccountId(v string) *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput {
	s.VolcAccountId = &v
	return s
}

// SetVolcService sets the VolcService field's value.
func (s *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput) SetVolcService(v string) *NetworkInterfacePermissionForCreateNetworkInterfacePermissionOutput {
	s.VolcService = &v
	return s
}
