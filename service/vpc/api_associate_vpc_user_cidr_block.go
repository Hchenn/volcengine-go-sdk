// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAssociateVpcUserCidrBlockCommon = "AssociateVpcUserCidrBlock"

// AssociateVpcUserCidrBlockCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AssociateVpcUserCidrBlockCommon operation. The "output" return
// value will be populated with the AssociateVpcUserCidrBlockCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssociateVpcUserCidrBlockCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssociateVpcUserCidrBlockCommon Send returns without error.
//
// See AssociateVpcUserCidrBlockCommon for more information on using the AssociateVpcUserCidrBlockCommon
// API call, and error handling.
//
//    // Example sending a request using the AssociateVpcUserCidrBlockCommonRequest method.
//    req, resp := client.AssociateVpcUserCidrBlockCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) AssociateVpcUserCidrBlockCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAssociateVpcUserCidrBlockCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateVpcUserCidrBlockCommon API operation for VPC.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPC's
// API operation AssociateVpcUserCidrBlockCommon for usage and error information.
func (c *VPC) AssociateVpcUserCidrBlockCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AssociateVpcUserCidrBlockCommonRequest(input)
	return out, req.Send()
}

// AssociateVpcUserCidrBlockCommonWithContext is the same as AssociateVpcUserCidrBlockCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateVpcUserCidrBlockCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) AssociateVpcUserCidrBlockCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AssociateVpcUserCidrBlockCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAssociateVpcUserCidrBlock = "AssociateVpcUserCidrBlock"

// AssociateVpcUserCidrBlockRequest generates a "volcengine/request.Request" representing the
// client's request for the AssociateVpcUserCidrBlock operation. The "output" return
// value will be populated with the AssociateVpcUserCidrBlockCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssociateVpcUserCidrBlockCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssociateVpcUserCidrBlockCommon Send returns without error.
//
// See AssociateVpcUserCidrBlock for more information on using the AssociateVpcUserCidrBlock
// API call, and error handling.
//
//    // Example sending a request using the AssociateVpcUserCidrBlockRequest method.
//    req, resp := client.AssociateVpcUserCidrBlockRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) AssociateVpcUserCidrBlockRequest(input *AssociateVpcUserCidrBlockInput) (req *request.Request, output *AssociateVpcUserCidrBlockOutput) {
	op := &request.Operation{
		Name:       opAssociateVpcUserCidrBlock,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AssociateVpcUserCidrBlockInput{}
	}

	output = &AssociateVpcUserCidrBlockOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateVpcUserCidrBlock API operation for VPC.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPC's
// API operation AssociateVpcUserCidrBlock for usage and error information.
func (c *VPC) AssociateVpcUserCidrBlock(input *AssociateVpcUserCidrBlockInput) (*AssociateVpcUserCidrBlockOutput, error) {
	req, out := c.AssociateVpcUserCidrBlockRequest(input)
	return out, req.Send()
}

// AssociateVpcUserCidrBlockWithContext is the same as AssociateVpcUserCidrBlock with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateVpcUserCidrBlock for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) AssociateVpcUserCidrBlockWithContext(ctx volcengine.Context, input *AssociateVpcUserCidrBlockInput, opts ...request.Option) (*AssociateVpcUserCidrBlockOutput, error) {
	req, out := c.AssociateVpcUserCidrBlockRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AssociateVpcUserCidrBlockInput struct {
	_ struct{} `type:"structure"`

	// UserCidrBlock is a required field
	UserCidrBlock *string `type:"string" required:"true"`

	// VpcId is a required field
	VpcId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AssociateVpcUserCidrBlockInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateVpcUserCidrBlockInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssociateVpcUserCidrBlockInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AssociateVpcUserCidrBlockInput"}
	if s.UserCidrBlock == nil {
		invalidParams.Add(request.NewErrParamRequired("UserCidrBlock"))
	}
	if s.VpcId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpcId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUserCidrBlock sets the UserCidrBlock field's value.
func (s *AssociateVpcUserCidrBlockInput) SetUserCidrBlock(v string) *AssociateVpcUserCidrBlockInput {
	s.UserCidrBlock = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *AssociateVpcUserCidrBlockInput) SetVpcId(v string) *AssociateVpcUserCidrBlockInput {
	s.VpcId = &v
	return s
}

type AssociateVpcUserCidrBlockOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s AssociateVpcUserCidrBlockOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateVpcUserCidrBlockOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *AssociateVpcUserCidrBlockOutput) SetRequestId(v string) *AssociateVpcUserCidrBlockOutput {
	s.RequestId = &v
	return s
}
