// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRenewEipAddressCommon = "RenewEipAddress"

// RenewEipAddressCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RenewEipAddressCommon operation. The "output" return
// value will be populated with the RenewEipAddressCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewEipAddressCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewEipAddressCommon Send returns without error.
//
// See RenewEipAddressCommon for more information on using the RenewEipAddressCommon
// API call, and error handling.
//
//    // Example sending a request using the RenewEipAddressCommonRequest method.
//    req, resp := client.RenewEipAddressCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) RenewEipAddressCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRenewEipAddressCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RenewEipAddressCommon API operation for VPC.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPC's
// API operation RenewEipAddressCommon for usage and error information.
func (c *VPC) RenewEipAddressCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RenewEipAddressCommonRequest(input)
	return out, req.Send()
}

// RenewEipAddressCommonWithContext is the same as RenewEipAddressCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RenewEipAddressCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) RenewEipAddressCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RenewEipAddressCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewEipAddress = "RenewEipAddress"

// RenewEipAddressRequest generates a "volcengine/request.Request" representing the
// client's request for the RenewEipAddress operation. The "output" return
// value will be populated with the RenewEipAddressCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewEipAddressCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewEipAddressCommon Send returns without error.
//
// See RenewEipAddress for more information on using the RenewEipAddress
// API call, and error handling.
//
//    // Example sending a request using the RenewEipAddressRequest method.
//    req, resp := client.RenewEipAddressRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) RenewEipAddressRequest(input *RenewEipAddressInput) (req *request.Request, output *RenewEipAddressOutput) {
	op := &request.Operation{
		Name:       opRenewEipAddress,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RenewEipAddressInput{}
	}

	output = &RenewEipAddressOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RenewEipAddress API operation for VPC.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPC's
// API operation RenewEipAddress for usage and error information.
func (c *VPC) RenewEipAddress(input *RenewEipAddressInput) (*RenewEipAddressOutput, error) {
	req, out := c.RenewEipAddressRequest(input)
	return out, req.Send()
}

// RenewEipAddressWithContext is the same as RenewEipAddress with the addition of
// the ability to pass a context and additional request options.
//
// See RenewEipAddress for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) RenewEipAddressWithContext(ctx volcengine.Context, input *RenewEipAddressInput, opts ...request.Option) (*RenewEipAddressOutput, error) {
	req, out := c.RenewEipAddressRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RenewEipAddressInput struct {
	_ struct{} `type:"structure"`

	// AllocationId is a required field
	AllocationId *string `type:"string" required:"true"`

	Period *int64 `type:"integer"`

	PeriodUnit *int64 `min:"1" max:"2" type:"integer"`
}

// String returns the string representation
func (s RenewEipAddressInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewEipAddressInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RenewEipAddressInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RenewEipAddressInput"}
	if s.AllocationId == nil {
		invalidParams.Add(request.NewErrParamRequired("AllocationId"))
	}
	if s.PeriodUnit != nil && *s.PeriodUnit < 1 {
		invalidParams.Add(request.NewErrParamMinValue("PeriodUnit", 1))
	}
	if s.PeriodUnit != nil && *s.PeriodUnit > 2 {
		invalidParams.Add(request.NewErrParamMaxValue("PeriodUnit", 2))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAllocationId sets the AllocationId field's value.
func (s *RenewEipAddressInput) SetAllocationId(v string) *RenewEipAddressInput {
	s.AllocationId = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *RenewEipAddressInput) SetPeriod(v int64) *RenewEipAddressInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *RenewEipAddressInput) SetPeriodUnit(v int64) *RenewEipAddressInput {
	s.PeriodUnit = &v
	return s
}

type RenewEipAddressOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s RenewEipAddressOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewEipAddressOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *RenewEipAddressOutput) SetRequestId(v string) *RenewEipAddressOutput {
	s.RequestId = &v
	return s
}
