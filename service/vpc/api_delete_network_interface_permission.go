// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteNetworkInterfacePermissionCommon = "DeleteNetworkInterfacePermission"

// DeleteNetworkInterfacePermissionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteNetworkInterfacePermissionCommon operation. The "output" return
// value will be populated with the DeleteNetworkInterfacePermissionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNetworkInterfacePermissionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNetworkInterfacePermissionCommon Send returns without error.
//
// See DeleteNetworkInterfacePermissionCommon for more information on using the DeleteNetworkInterfacePermissionCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteNetworkInterfacePermissionCommonRequest method.
//    req, resp := client.DeleteNetworkInterfacePermissionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DeleteNetworkInterfacePermissionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteNetworkInterfacePermissionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteNetworkInterfacePermissionCommon API operation for VPC.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPC's
// API operation DeleteNetworkInterfacePermissionCommon for usage and error information.
func (c *VPC) DeleteNetworkInterfacePermissionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteNetworkInterfacePermissionCommonRequest(input)
	return out, req.Send()
}

// DeleteNetworkInterfacePermissionCommonWithContext is the same as DeleteNetworkInterfacePermissionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNetworkInterfacePermissionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DeleteNetworkInterfacePermissionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteNetworkInterfacePermissionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNetworkInterfacePermission = "DeleteNetworkInterfacePermission"

// DeleteNetworkInterfacePermissionRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteNetworkInterfacePermission operation. The "output" return
// value will be populated with the DeleteNetworkInterfacePermissionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNetworkInterfacePermissionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNetworkInterfacePermissionCommon Send returns without error.
//
// See DeleteNetworkInterfacePermission for more information on using the DeleteNetworkInterfacePermission
// API call, and error handling.
//
//    // Example sending a request using the DeleteNetworkInterfacePermissionRequest method.
//    req, resp := client.DeleteNetworkInterfacePermissionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) DeleteNetworkInterfacePermissionRequest(input *DeleteNetworkInterfacePermissionInput) (req *request.Request, output *DeleteNetworkInterfacePermissionOutput) {
	op := &request.Operation{
		Name:       opDeleteNetworkInterfacePermission,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteNetworkInterfacePermissionInput{}
	}

	output = &DeleteNetworkInterfacePermissionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteNetworkInterfacePermission API operation for VPC.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPC's
// API operation DeleteNetworkInterfacePermission for usage and error information.
func (c *VPC) DeleteNetworkInterfacePermission(input *DeleteNetworkInterfacePermissionInput) (*DeleteNetworkInterfacePermissionOutput, error) {
	req, out := c.DeleteNetworkInterfacePermissionRequest(input)
	return out, req.Send()
}

// DeleteNetworkInterfacePermissionWithContext is the same as DeleteNetworkInterfacePermission with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNetworkInterfacePermission for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) DeleteNetworkInterfacePermissionWithContext(ctx volcengine.Context, input *DeleteNetworkInterfacePermissionInput, opts ...request.Option) (*DeleteNetworkInterfacePermissionOutput, error) {
	req, out := c.DeleteNetworkInterfacePermissionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteNetworkInterfacePermissionInput struct {
	_ struct{} `type:"structure"`

	// NetworkInterfacePermissionId is a required field
	NetworkInterfacePermissionId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteNetworkInterfacePermissionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNetworkInterfacePermissionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteNetworkInterfacePermissionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteNetworkInterfacePermissionInput"}
	if s.NetworkInterfacePermissionId == nil {
		invalidParams.Add(request.NewErrParamRequired("NetworkInterfacePermissionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetNetworkInterfacePermissionId sets the NetworkInterfacePermissionId field's value.
func (s *DeleteNetworkInterfacePermissionInput) SetNetworkInterfacePermissionId(v string) *DeleteNetworkInterfacePermissionInput {
	s.NetworkInterfacePermissionId = &v
	return s
}

type DeleteNetworkInterfacePermissionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteNetworkInterfacePermissionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNetworkInterfacePermissionOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteNetworkInterfacePermissionOutput) SetRequestId(v string) *DeleteNetworkInterfacePermissionOutput {
	s.RequestId = &v
	return s
}
