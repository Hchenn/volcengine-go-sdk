// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpc

import (
	"github.com/volcengine/volcengine-go-sdk/volcengine"
	"github.com/volcengine/volcengine-go-sdk/volcengine/request"
	"github.com/volcengine/volcengine-go-sdk/volcengine/response"
	"github.com/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAssociateTrunkInterfaceCommon = "AssociateTrunkInterface"

// AssociateTrunkInterfaceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AssociateTrunkInterfaceCommon operation. The "output" return
// value will be populated with the AssociateTrunkInterfaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssociateTrunkInterfaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssociateTrunkInterfaceCommon Send returns without error.
//
// See AssociateTrunkInterfaceCommon for more information on using the AssociateTrunkInterfaceCommon
// API call, and error handling.
//
//    // Example sending a request using the AssociateTrunkInterfaceCommonRequest method.
//    req, resp := client.AssociateTrunkInterfaceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) AssociateTrunkInterfaceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAssociateTrunkInterfaceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateTrunkInterfaceCommon API operation for VPC.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPC's
// API operation AssociateTrunkInterfaceCommon for usage and error information.
func (c *VPC) AssociateTrunkInterfaceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AssociateTrunkInterfaceCommonRequest(input)
	return out, req.Send()
}

// AssociateTrunkInterfaceCommonWithContext is the same as AssociateTrunkInterfaceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateTrunkInterfaceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) AssociateTrunkInterfaceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AssociateTrunkInterfaceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAssociateTrunkInterface = "AssociateTrunkInterface"

// AssociateTrunkInterfaceRequest generates a "volcengine/request.Request" representing the
// client's request for the AssociateTrunkInterface operation. The "output" return
// value will be populated with the AssociateTrunkInterfaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssociateTrunkInterfaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssociateTrunkInterfaceCommon Send returns without error.
//
// See AssociateTrunkInterface for more information on using the AssociateTrunkInterface
// API call, and error handling.
//
//    // Example sending a request using the AssociateTrunkInterfaceRequest method.
//    req, resp := client.AssociateTrunkInterfaceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPC) AssociateTrunkInterfaceRequest(input *AssociateTrunkInterfaceInput) (req *request.Request, output *AssociateTrunkInterfaceOutput) {
	op := &request.Operation{
		Name:       opAssociateTrunkInterface,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AssociateTrunkInterfaceInput{}
	}

	output = &AssociateTrunkInterfaceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateTrunkInterface API operation for VPC.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VPC's
// API operation AssociateTrunkInterface for usage and error information.
func (c *VPC) AssociateTrunkInterface(input *AssociateTrunkInterfaceInput) (*AssociateTrunkInterfaceOutput, error) {
	req, out := c.AssociateTrunkInterfaceRequest(input)
	return out, req.Send()
}

// AssociateTrunkInterfaceWithContext is the same as AssociateTrunkInterface with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateTrunkInterface for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPC) AssociateTrunkInterfaceWithContext(ctx volcengine.Context, input *AssociateTrunkInterfaceInput, opts ...request.Option) (*AssociateTrunkInterfaceOutput, error) {
	req, out := c.AssociateTrunkInterfaceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AssociateTrunkInterfaceInput struct {
	_ struct{} `type:"structure"`

	// BranchInterfaceId is a required field
	BranchInterfaceId *string `type:"string" required:"true"`

	ClientToken *string `type:"string"`

	SegmentationId *int64 `type:"integer"`

	SegmentationType *string `type:"string"`

	// TrunkInterfaceId is a required field
	TrunkInterfaceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AssociateTrunkInterfaceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateTrunkInterfaceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssociateTrunkInterfaceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AssociateTrunkInterfaceInput"}
	if s.BranchInterfaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("BranchInterfaceId"))
	}
	if s.TrunkInterfaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("TrunkInterfaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBranchInterfaceId sets the BranchInterfaceId field's value.
func (s *AssociateTrunkInterfaceInput) SetBranchInterfaceId(v string) *AssociateTrunkInterfaceInput {
	s.BranchInterfaceId = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *AssociateTrunkInterfaceInput) SetClientToken(v string) *AssociateTrunkInterfaceInput {
	s.ClientToken = &v
	return s
}

// SetSegmentationId sets the SegmentationId field's value.
func (s *AssociateTrunkInterfaceInput) SetSegmentationId(v int64) *AssociateTrunkInterfaceInput {
	s.SegmentationId = &v
	return s
}

// SetSegmentationType sets the SegmentationType field's value.
func (s *AssociateTrunkInterfaceInput) SetSegmentationType(v string) *AssociateTrunkInterfaceInput {
	s.SegmentationType = &v
	return s
}

// SetTrunkInterfaceId sets the TrunkInterfaceId field's value.
func (s *AssociateTrunkInterfaceInput) SetTrunkInterfaceId(v string) *AssociateTrunkInterfaceInput {
	s.TrunkInterfaceId = &v
	return s
}

type AssociateTrunkInterfaceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`

	SegmentationId *int64 `type:"integer"`

	SegmentationType *string `type:"string"`
}

// String returns the string representation
func (s AssociateTrunkInterfaceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateTrunkInterfaceOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *AssociateTrunkInterfaceOutput) SetRequestId(v string) *AssociateTrunkInterfaceOutput {
	s.RequestId = &v
	return s
}

// SetSegmentationId sets the SegmentationId field's value.
func (s *AssociateTrunkInterfaceOutput) SetSegmentationId(v int64) *AssociateTrunkInterfaceOutput {
	s.SegmentationId = &v
	return s
}

// SetSegmentationType sets the SegmentationType field's value.
func (s *AssociateTrunkInterfaceOutput) SetSegmentationType(v string) *AssociateTrunkInterfaceOutput {
	s.SegmentationType = &v
	return s
}
